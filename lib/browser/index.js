// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"fjNHi":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "5ba2c13dde74a287";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"kShel":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BlockchainCache = exports.TxCache = exports.Tx = exports.Encoders = exports.Crypto = exports.Blockchain = exports.HDPrivateKey = exports.OfflineWallet = exports.Wallet = void 0;
const Wallet_1 = __importDefault(require("./Wallet"));
exports.Wallet = Wallet_1.default;
const HDPrivateKey_1 = __importDefault(require("./HDPrivateKey"));
exports.HDPrivateKey = HDPrivateKey_1.default;
const Blockchain_1 = __importDefault(require("./Blockchain"));
exports.Blockchain = Blockchain_1.default;
const BlockchainCache_1 = __importDefault(require("./BlockchainCache"));
exports.BlockchainCache = BlockchainCache_1.default;
const TxCache_1 = __importDefault(require("./TxCache"));
exports.TxCache = TxCache_1.default;
const Tx = __importStar(require("./Utils/Tx"));
exports.Tx = Tx;
const Crypto = __importStar(require("./Utils/Crypto"));
exports.Crypto = Crypto;
const Encoders = __importStar(require("./Utils/Encoders"));
exports.Encoders = Encoders;
const OfflineWallet_1 = __importDefault(require("./OfflineWallet"));
exports.OfflineWallet = OfflineWallet_1.default;

},{"./Wallet":"hwH6R","./HDPrivateKey":"8Imyt","./Blockchain":"agY3L","./BlockchainCache":"kpnpI","./TxCache":"cjddo","./Utils/Tx":"82oGo","./Utils/Crypto":"cZ5Du","./Utils/Encoders":"jqr8S","./OfflineWallet":"abHPb"}],"hwH6R":[function(require,module,exports) {
"use strict";
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const HDPrivateKey_1 = __importDefault(require("./HDPrivateKey"));
const bsv_1 = __importDefault(require("bsv"));
const address_1 = __importDefault(require("bsv/lib/address"));
const Blockchain_1 = __importDefault(require("./Blockchain"));
// * little helper function (a move dans un autre fichier)
const computeTotalInChunk = (data)=>{
    return data.reduce((total, { balance: { confirmed , unconfirmed  } , address: adr  })=>{
        const localTotal = confirmed + unconfirmed;
        return localTotal + total;
    }, 0);
};
class BSVWallet extends HDPrivateKey_1.default {
    constructor(_a){
        var { key ="" , keyFormat ="mnemonic" , language ="ENGLISH" , network ="livenet"  } = _a, options = __rest(_a, [
            "key",
            "keyFormat",
            "language",
            "network"
        ]);
        super(Object.assign({
            key,
            keyFormat,
            language,
            network
        }, options));
        this.lastUnusedAddressIndex = 10;
        this.blockchain = new Blockchain_1.default(network);
    }
    // * adresse ou on va recevoir
    getUnusedAddress() {
        return __awaiter(this, void 0, void 0, function*() {
            // * TODO : FAIRE EN SORTE QUE LE PREMIER APPEL SOIT MOINS LONG
            do {
                var adr = this.getDerivatedAddress(++this.lastUnusedAddressIndex);
                var history = yield this.blockchain.getHistory(adr);
            }while (history.length > 0);
            return adr;
        });
    }
    // * will return an unused address
    getAddress() {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.getUnusedAddress();
        });
    }
    /**
     * @param debitedAddressIndex index of the key to use in the wallet
     * @param amount amount of BTC to send
     * @returns tx encoded in hexadicimal format
     */ signTxv1(debitedAddressIndex, recipientAdr, amount, changeAdr) {
        return __awaiter(this, void 0, void 0, function*() {
            changeAdr = !changeAdr ? yield this.getUnusedAddress() : changeAdr;
            const myAddress = this.getDerivatedAddress(debitedAddressIndex);
            const privKey = this.getDerivatedPrivateKey(debitedAddressIndex);
            const unspendTransactions = yield this.blockchain.getUnspendTxOuput(myAddress);
            const myInputs = [];
            for (let transaction of unspendTransactions){
                // * récupérer son script en hexa depuis la blockchain
                const rawTxScript = yield this.blockchain.getRawTx(transaction["tx_hash"]);
                // * l'interpèter avec la lib
                const tx = new bsv_1.default.Transaction(rawTxScript);
                console.log({
                    tx
                });
                // * et extrait les utxo
                const data = tx.toObject();
                const { satoshis , script  } = data.outputs[transaction.tx_pos]; // très exactement ça // pas sur pour le tx_pos
                myInputs.push({
                    txid: transaction.tx_hash,
                    satoshis: satoshis,
                    vout: transaction.tx_pos,
                    scriptPubKey: script
                });
            }
            // * all the stuff above is garbage to understand juste focus on this
            const finalTx = new bsv_1.default.Transaction();
            finalTx.from(myInputs);
            finalTx.to(new address_1.default(recipientAdr), amount);
            finalTx.change(new address_1.default(changeAdr || myAddress));
            finalTx.sign(this._getPrivateKey(debitedAddressIndex));
            return finalTx.toString();
        });
    }
    /**
     * @param maxIndex this function with download the history of each derivated address from 0 to this
     * @returns
     */ getUtxo(maxIndex) {
        return __awaiter(this, void 0, void 0, function*() {
            // au cas ou cette fonction n'est jamais été appelée
            maxIndex || (yield this.getUnusedAddress());
            const numberOfAddressToCheck = maxIndex || this.lastUnusedAddressIndex + 3;
            const addresses = this.getAddresses(0, Math.max(numberOfAddressToCheck, 100));
            // * we will for all of the address of this wallet
            // * load it's utxo into an array
            const utxo = yield this.blockchain.getBulkUTXO(addresses);
            const allUTXO = utxo.map((utxo)=>{
                const ownerAddress = this.getDerivatedAddress(utxo.privateKeyIndex);
                const improvedData = {
                    privKeyIndex: utxo.privateKeyIndex,
                    txId: utxo.tx_hash,
                    satoshis: utxo.value,
                    outputIndex: utxo.tx_pos,
                    script: bsv_1.default.Script(new address_1.default(ownerAddress)),
                    fromAddress: ownerAddress,
                    ownerAddress: utxo.ownerAddress
                };
                return improvedData;
            });
            return allUTXO;
        });
    }
    signTx(output) {
        return __awaiter(this, void 0, void 0, function*() {
            // TODO : checker si le montant en utxo est disponible
            const tx = new bsv_1.default.Transaction();
            // * on charge les inputs
            const utxo = yield this.getUtxo();
            tx.from(utxo);
            // * on charge les ouputs
            if (Array.isArray(output)) output.forEach(({ to: address , amount  })=>tx.to(address, amount));
            else tx.to(output.to, output.amount);
            // * ou oublie pas l'addresse de change
            const unusedAdr = yield this.getUnusedAddress();
            tx.change(unusedAdr);
            // * on récupères la clef privée qui correspond à chaque utxo
            const privateKeys = utxo.map((utxo)=>this.getDerivatedPrivateKey(utxo.privKeyIndex));
            // TODO: prendre en compte les clefs privées en double dans cette liste
            // * et enfin on signe la transaction
            const txHex = tx.sign(privateKeys);
            return txHex.toString();
        });
    }
    /**
     * broadcast the transaction
     * equivalent of
     * ```js
     * wallet.blockchain.boardcast(txHex)
     * ```
     * @param txHex
     * @returns
     */ broadcast(txHex) {
        return this.blockchain.broadcast(txHex);
    }
    getBalance() {
        return __awaiter(this, void 0, void 0, function*() {
            const utxo = yield this.getUtxo();
            console.log({
                utxo
            });
            const totalSat = utxo.reduce((total, utxo)=>total + utxo.satoshis, 0);
            // TODO: return confirmed et unconfirmed seperatly
            return totalSat;
        });
    }
}
exports.default = BSVWallet;

},{"./HDPrivateKey":"8Imyt","bsv":"hOFCS","bsv/lib/address":"lDqbu","./Blockchain":"agY3L"}],"8Imyt":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const address_1 = __importDefault(require("bsv/lib/address"));
const hdprivatekey_1 = __importDefault(require("bsv/lib/hdprivatekey"));
const words_1 = __importDefault(require("bsv/lib/mnemonic/words"));
const mnemonic_1 = __importDefault(require("bsv/mnemonic"));
const Words = __importStar(require("bsv/lib/mnemonic/words/index.js"));
const HDPrivateKeyFromMnemonic = (key, language, network)=>{
    const mnemonicObj = (0, mnemonic_1.default)(key, Words[language]);
    return hdprivatekey_1.default.fromSeed(mnemonicObj.toSeed(), network);
};
class HDPrivateKeyManager {
    constructor({ key , keyFormat , language , network  }){
        // * si il n'y a pas de clef on crée un nouveau wallet
        if (!key) {
            const mnemonic = mnemonic_1.default.fromRandom(Words[language]);
            this.masterHDPrivateKey = hdprivatekey_1.default.fromSeed(mnemonic.toSeed(), network);
            this.mnemonic = mnemonic.toString();
            return;
        }
        if (keyFormat == "seed") // * c'est de la merde on peut pas recup le mnemonic avec ça
        this.masterHDPrivateKey = hdprivatekey_1.default.fromString(key);
        if (keyFormat == "mnemonic") {
            const mnemonic1 = key;
            const privKey = HDPrivateKeyFromMnemonic(mnemonic1, language, network);
            this.masterHDPrivateKey = privKey;
            this.mnemonic = mnemonic1;
        }
        this.network = network;
    }
    /**
     * ------ Wrapper BSV.JS ----
     */ _getPrivateKey(index) {
        return this.masterHDPrivateKey.deriveChild(`m/44'/${this.network == "testnet" ? 1 : 0}'/0'/0/${index}`, false).privateKey;
    }
    _getPublicKey(index) {
        return this._getPrivateKey(index).publicKey;
    }
    _getAddress(index) {
        return address_1.default.fromPublicKey(this._getPublicKey(index), this.network);
    }
    // * clean interface
    getDerivatedPublicKey(index) {
        return this._getPublicKey(index).toString();
    }
    getDerivatedPrivateKey(index) {
        return this._getPrivateKey(index).toString();
    }
    getDerivatedAddress(index) {
        return this._getAddress(index).toString();
    }
    getMnemonic(language = "ENGLISH") {
        if (!this.mnemonic) throw new Error('you should create the private key instance from the "mnemonic" KeyFormat if you would like to use this feature');
        if (language != "ENGLISH") throw new Error("sorry mnemonic language other than english are not yet implemented");
        // todo: changement de langage
        const wordList = words_1.default[language];
        return this.mnemonic;
    }
    /**
     * give out a range of adresses
     */ getAddresses(start, end) {
        // * in case of wreid input
        if (end < start) {
            const tmp = start;
            start = end;
            end = tmp;
        }
        // console.log({ start, end });
        const addresses = [];
        for(let n = start; n <= end; ++n)addresses.push(this.getDerivatedAddress(n));
        return addresses;
    }
    toString() {
        return this.getMnemonic();
    }
}
exports.default = HDPrivateKeyManager;

},{"bsv/lib/address":"lDqbu","bsv/lib/hdprivatekey":"eAQrC","bsv/lib/mnemonic/words":"jWuWU","bsv/mnemonic":"9fYHn","bsv/lib/mnemonic/words/index.js":"jWuWU"}],"lDqbu":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("./util/_");
var $ = require("./util/preconditions");
var errors = require("./errors");
var Base58Check = require("./encoding/base58check");
var Networks = require("./networks");
var Hash = require("./crypto/hash");
var JSUtil = require("./util/js");
var PublicKey = require("./publickey");
/**
 * Instantiate an address from an address String or Buffer, a public key or script hash Buffer,
 * or an instance of {@link PublicKey} or {@link Script}.
 *
 * This is an immutable class, and if the first parameter provided to this constructor is an
 * `Address` instance, the same argument will be returned.
 *
 * An address has two key properties: `network` and `type`. The type is either
 * `Address.PayToPublicKeyHash` (value is the `'pubkeyhash'` string)
 * or `Address.PayToScriptHash` (the string `'scripthash'`). The network is an instance of {@link Network}.
 * You can quickly check whether an address is of a given kind by using the methods
 * `isPayToPublicKeyHash` and `isPayToScriptHash`
 *
 * @example
 * ```javascript
 * // validate that an input field is valid
 * var error = Address.getValidationError(input, 'testnet');
 * if (!error) {
 *   var address = Address(input, 'testnet');
 * } else {
 *   // invalid network or checksum (typo?)
 *   var message = error.messsage;
 * }
 *
 * // get an address from a public key
 * var address = Address(publicKey, 'testnet').toString();
 * ```
 *
 * @param {*} data - The encoded data in various formats
 * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'
 * @param {string=} type - The type of address: 'script' or 'pubkey'
 * @returns {Address} A new valid and frozen instance of an Address
 * @constructor
 */ function Address(data, network, type) {
    if (!(this instanceof Address)) return new Address(data, network, type);
    if (_.isArray(data) && _.isNumber(network)) return Address.createMultisig(data, network, type);
    if (data instanceof Address) // Immutable instance
    return data;
    $.checkArgument(data, "First argument is required, please include address data.", "guide/address.html");
    if (network && !Networks.get(network)) throw new TypeError('Second argument must be "livenet", "testnet", or "regtest".');
    if (type && type !== Address.PayToPublicKeyHash && type !== Address.PayToScriptHash) throw new TypeError('Third argument must be "pubkeyhash" or "scripthash".');
    var info = this._classifyArguments(data, network, type);
    // set defaults if not set
    info.network = info.network || Networks.get(network) || Networks.defaultNetwork;
    info.type = info.type || type || Address.PayToPublicKeyHash;
    JSUtil.defineImmutable(this, {
        hashBuffer: info.hashBuffer,
        network: info.network,
        type: info.type
    });
    return this;
}
/**
 * Internal function used to split different kinds of arguments of the constructor
 * @param {*} data - The encoded data in various formats
 * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'
 * @param {string=} type - The type of address: 'script' or 'pubkey'
 * @returns {Object} An "info" object with "type", "network", and "hashBuffer"
 */ Address.prototype._classifyArguments = function(data, network, type) {
    // transform and validate input data
    if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 20) return Address._transformHash(data);
    else if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 21) return Address._transformBuffer(data, network, type);
    else if (data instanceof PublicKey) return Address._transformPublicKey(data);
    else if (data instanceof Script) return Address._transformScript(data, network);
    else if (typeof data === "string") return Address._transformString(data, network, type);
    else if (_.isObject(data)) return Address._transformObject(data);
    else throw new TypeError("First argument is an unrecognized data format.");
};
/** @static */ Address.PayToPublicKeyHash = "pubkeyhash";
/** @static */ Address.PayToScriptHash = "scripthash";
/**
 * @param {Buffer} hash - An instance of a hash Buffer
 * @returns {Object} An object with keys: hashBuffer
 * @private
 */ Address._transformHash = function(hash) {
    var info = {};
    if (!(hash instanceof Buffer) && !(hash instanceof Uint8Array)) throw new TypeError("Address supplied is not a buffer.");
    if (hash.length !== 20) throw new TypeError("Address hashbuffers must be exactly 20 bytes.");
    info.hashBuffer = hash;
    return info;
};
/**
 * Deserializes an address serialized through `Address#toObject()`
 * @param {Object} data
 * @param {string} data.hash - the hash that this address encodes
 * @param {string} data.type - either 'pubkeyhash' or 'scripthash'
 * @param {Network=} data.network - the name of the network associated
 * @return {Address}
 */ Address._transformObject = function(data) {
    $.checkArgument(data.hash || data.hashBuffer, "Must provide a `hash` or `hashBuffer` property");
    $.checkArgument(data.type, "Must provide a `type` property");
    return {
        hashBuffer: data.hash ? Buffer.from(data.hash, "hex") : data.hashBuffer,
        network: Networks.get(data.network) || Networks.defaultNetwork,
        type: data.type
    };
};
/**
 * Internal function to discover the network and type based on the first data byte
 *
 * @param {Buffer} buffer - An instance of a hex encoded address Buffer
 * @returns {Object} An object with keys: network and type
 * @private
 */ Address._classifyFromVersion = function(buffer) {
    var version = {};
    var pubkeyhashNetwork = Networks.get(buffer[0], "pubkeyhash");
    var scripthashNetwork = Networks.get(buffer[0], "scripthash");
    if (pubkeyhashNetwork) {
        version.network = pubkeyhashNetwork;
        version.type = Address.PayToPublicKeyHash;
    } else if (scripthashNetwork) {
        version.network = scripthashNetwork;
        version.type = Address.PayToScriptHash;
    }
    return version;
};
/**
 * Internal function to transform a bitcoin address buffer
 *
 * @param {Buffer} buffer - An instance of a hex encoded address Buffer
 * @param {string=} network - The network: 'livenet' or 'testnet'
 * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'
 * @returns {Object} An object with keys: hashBuffer, network and type
 * @private
 */ Address._transformBuffer = function(buffer, network, type) {
    var info = {};
    if (!(buffer instanceof Buffer) && !(buffer instanceof Uint8Array)) throw new TypeError("Address supplied is not a buffer.");
    if (buffer.length !== 21) throw new TypeError("Address buffers must be exactly 21 bytes.");
    var networkObj = Networks.get(network);
    var bufferVersion = Address._classifyFromVersion(buffer);
    if (network && !networkObj) throw new TypeError("Unknown network");
    if (!bufferVersion.network || networkObj && networkObj !== bufferVersion.network) // console.log(bufferVersion)
    throw new TypeError("Address has mismatched network type.");
    if (!bufferVersion.type || type && type !== bufferVersion.type) throw new TypeError("Address has mismatched type.");
    info.hashBuffer = buffer.slice(1);
    info.network = bufferVersion.network;
    info.type = bufferVersion.type;
    return info;
};
/**
 * Internal function to transform a {@link PublicKey}
 *
 * @param {PublicKey} pubkey - An instance of PublicKey
 * @returns {Object} An object with keys: hashBuffer, type
 * @private
 */ Address._transformPublicKey = function(pubkey) {
    var info = {};
    if (!(pubkey instanceof PublicKey)) throw new TypeError("Address must be an instance of PublicKey.");
    info.hashBuffer = Hash.sha256ripemd160(pubkey.toBuffer());
    info.type = Address.PayToPublicKeyHash;
    return info;
};
/**
 * Internal function to transform a {@link Script} into a `info` object.
 *
 * @param {Script} script - An instance of Script
 * @returns {Object} An object with keys: hashBuffer, type
 * @private
 */ Address._transformScript = function(script, network) {
    $.checkArgument(script instanceof Script, "script must be a Script instance");
    var info = script.getAddressInfo(network);
    if (!info) throw new errors.Script.CantDeriveAddress(script);
    return info;
};
/**
 * Creates a P2SH address from a set of public keys and a threshold.
 *
 * The addresses will be sorted lexicographically, as that is the trend in bitcoin.
 * To create an address from unsorted public keys, use the {@link Script#buildMultisigOut}
 * interface.
 *
 * @param {Array} publicKeys - a set of public keys to create an address
 * @param {number} threshold - the number of signatures needed to release the funds
 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
 * @return {Address}
 */ Address.createMultisig = function(publicKeys, threshold, network) {
    network = network || publicKeys[0].network || Networks.defaultNetwork;
    return Address.payingTo(Script.buildMultisigOut(publicKeys, threshold), network);
};
/**
 * Internal function to transform a bitcoin cash address string
 *
 * @param {string} data
 * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'
 * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'
 * @returns {Object} An object with keys: hashBuffer, network and type
 * @private
 */ Address._transformString = function(data, network, type) {
    if (typeof data !== "string") throw new TypeError("data parameter supplied is not a string.");
    if (data.length < 27) throw new Error("Invalid Address string provided");
    data = data.trim();
    var networkObj = Networks.get(network);
    if (network && !networkObj) throw new TypeError("Unknown network");
    var addressBuffer = Base58Check.decode(data);
    return Address._transformBuffer(addressBuffer, network, type);
};
/**
 * Instantiate an address from a PublicKey instance
 *
 * @param {PublicKey} data
 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
 * @returns {Address} A new valid and frozen instance of an Address
 */ Address.fromPublicKey = function(data, network) {
    var info = Address._transformPublicKey(data);
    network = network || Networks.defaultNetwork;
    return new Address(info.hashBuffer, network, info.type);
};
/**
 * Instantiate an address from a PrivateKey instance
 *
 * @param {PrivateKey} privateKey
 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
 * @returns {Address} A new valid and frozen instance of an Address
 */ Address.fromPrivateKey = function(privateKey, network) {
    let publicKey = PublicKey.fromPrivateKey(privateKey);
    network = network || privateKey.network || Networks.defaultNetwork;
    return Address.fromPublicKey(publicKey, network);
};
/**
 * Instantiate an address from a ripemd160 public key hash
 *
 * @param {Buffer} hash - An instance of buffer of the hash
 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
 * @returns {Address} A new valid and frozen instance of an Address
 */ Address.fromPublicKeyHash = function(hash, network) {
    var info = Address._transformHash(hash);
    return new Address(info.hashBuffer, network, Address.PayToPublicKeyHash);
};
/**
 * Instantiate an address from a ripemd160 script hash
 *
 * @param {Buffer} hash - An instance of buffer of the hash
 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
 * @returns {Address} A new valid and frozen instance of an Address
 */ Address.fromScriptHash = function(hash, network) {
    $.checkArgument(hash, "hash parameter is required");
    var info = Address._transformHash(hash);
    return new Address(info.hashBuffer, network, Address.PayToScriptHash);
};
/**
 * Builds a p2sh address paying to script. This will hash the script and
 * use that to create the address.
 * If you want to extract an address associated with a script instead,
 * see {{Address#fromScript}}
 *
 * @param {Script} script - An instance of Script
 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
 * @returns {Address} A new valid and frozen instance of an Address
 */ Address.payingTo = function(script, network) {
    $.checkArgument(script, "script is required");
    $.checkArgument(script instanceof Script, "script must be instance of Script");
    return Address.fromScriptHash(Hash.sha256ripemd160(script.toBuffer()), network);
};
/**
 * Extract address from a Script. The script must be of one
 * of the following types: p2pkh input, p2pkh output, p2sh input
 * or p2sh output.
 * This will analyze the script and extract address information from it.
 * If you want to transform any script to a p2sh Address paying
 * to that script's hash instead, use {{Address#payingTo}}
 *
 * @param {Script} script - An instance of Script
 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
 * @returns {Address} A new valid and frozen instance of an Address
 */ Address.fromScript = function(script, network) {
    $.checkArgument(script instanceof Script, "script must be a Script instance");
    var info = Address._transformScript(script, network);
    return new Address(info.hashBuffer, network, info.type);
};
/**
 * Instantiate an address from a buffer of the address
 *
 * @param {Buffer} buffer - An instance of buffer of the address
 * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'
 * @param {string=} type - The type of address: 'script' or 'pubkey'
 * @returns {Address} A new valid and frozen instance of an Address
 */ Address.fromBuffer = function(buffer, network, type) {
    var info = Address._transformBuffer(buffer, network, type);
    return new Address(info.hashBuffer, info.network, info.type);
};
Address.fromHex = function(hex, network, type) {
    return Address.fromBuffer(Buffer.from(hex, "hex"), network, type);
};
/**
 * Instantiate an address from an address string
 *
 * @param {string} str - An string of the bitcoin address
 * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'
 * @param {string=} type - The type of address: 'script' or 'pubkey'
 * @returns {Address} A new valid and frozen instance of an Address
 */ Address.fromString = function(str, network, type) {
    var info = Address._transformString(str, network, type);
    return new Address(info.hashBuffer, info.network, info.type);
};
/**
 * Instantiate an address from an Object
 *
 * @param {string} json - An JSON string or Object with keys: hash, network and type
 * @returns {Address} A new valid instance of an Address
 */ Address.fromObject = function fromObject(obj) {
    $.checkState(JSUtil.isHexa(obj.hash), 'Unexpected hash property, "' + obj.hash + '", expected to be hex.');
    var hashBuffer = Buffer.from(obj.hash, "hex");
    return new Address(hashBuffer, obj.network, obj.type);
};
/**
 * Will return a validation error if exists
 *
 * @example
 * ```javascript
 * // a network mismatch error
 * var error = Address.getValidationError('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'testnet');
 * ```
 *
 * @param {string} data - The encoded data
 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
 * @param {string} type - The type of address: 'script' or 'pubkey'
 * @returns {null|Error} The corresponding error message
 */ Address.getValidationError = function(data, network, type) {
    var error;
    try {
        new Address(data, network, type) // eslint-disable-line
        ;
    } catch (e) {
        error = e;
    }
    return error;
};
/**
 * Will return a boolean if an address is valid
 *
 * @example
 * ```javascript
 * assert(Address.isValid('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'livenet'));
 * ```
 *
 * @param {string} data - The encoded data
 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
 * @param {string} type - The type of address: 'script' or 'pubkey'
 * @returns {boolean} The corresponding error message
 */ Address.isValid = function(data, network, type) {
    return !Address.getValidationError(data, network, type);
};
/**
 * Returns true if an address is of pay to public key hash type
 * @return boolean
 */ Address.prototype.isPayToPublicKeyHash = function() {
    return this.type === Address.PayToPublicKeyHash;
};
/**
 * Returns true if an address is of pay to script hash type
 * @return boolean
 */ Address.prototype.isPayToScriptHash = function() {
    return this.type === Address.PayToScriptHash;
};
/**
 * Will return a buffer representation of the address
 *
 * @returns {Buffer} Bitcoin address buffer
 */ Address.prototype.toBuffer = function() {
    var version = Buffer.from([
        this.network[this.type]
    ]);
    var buf = Buffer.concat([
        version,
        this.hashBuffer
    ]);
    return buf;
};
Address.prototype.toHex = function() {
    return this.toBuffer().toString("hex");
};
/**
 * @returns {Object} A plain object with the address information
 */ Address.prototype.toObject = Address.prototype.toJSON = function toObject() {
    return {
        hash: this.hashBuffer.toString("hex"),
        type: this.type,
        network: this.network.toString()
    };
};
/**
 * Will return a string formatted for the console
 *
 * @returns {string} Bitcoin address
 */ Address.prototype.inspect = function() {
    return "<Address: " + this.toString() + ", type: " + this.type + ", network: " + this.network + ">";
};
/**
 * Will return a the base58 string representation of the address
 *
 * @returns {string} Bitcoin address
 */ Address.prototype.toString = function() {
    return Base58Check.encode(this.toBuffer());
};
module.exports = Address;
var Script = require("./script");

},{"buffer":"fCgem","./util/_":"f1m1Z","./util/preconditions":"c91dJ","./errors":"9UULR","./encoding/base58check":"kLrpR","./networks":"ai5AV","./crypto/hash":"jgMGE","./util/js":"it7yM","./publickey":"cwKNK","./script":"FcGOz"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("base64-js");
const ieee754 = require("ieee754");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"f1m1Z":[function(require,module,exports) {
"use strict";
var _ = {};
_.isArray = (t)=>Array.isArray(t);
_.isNumber = (t)=>typeof t === "number";
_.isObject = (t)=>t && typeof t === "object";
_.isString = (t)=>typeof t === "string";
_.isUndefined = (t)=>typeof t === "undefined";
_.isFunction = (t)=>typeof t === "function";
_.isNull = (t)=>t === null;
_.isDate = (t)=>t instanceof Date;
_.extend = (a, b)=>Object.assign(a, b);
_.noop = ()=>{};
_.every = (a, f)=>a.every(f || ((t)=>t));
_.map = (a, f)=>Array.from(a).map(f || ((t)=>t));
_.includes = (a, e)=>a.includes(e);
_.each = (a, f)=>a.forEach(f);
_.clone = (o)=>Object.assign({}, o);
_.pick = (object, keys)=>{
    const obj = {};
    keys.forEach((key)=>{
        if (typeof object[key] !== "undefined") obj[key] = object[key];
    });
    return obj;
};
_.values = (o)=>Object.values(o);
_.filter = (a, f)=>a.filter(f);
_.reduce = (a, f, s)=>a.reduce(f, s);
_.without = (a, n)=>a.filter((t)=>t !== n);
_.shuffle = (a)=>{
    const result = a.slice(0);
    for(let i = result.length - 1; i > 0; i--){
        const j = Math.floor(Math.random() * (i + 1));
        [result[i], result[j]] = [
            result[j],
            result[i]
        ];
    }
    return result;
};
_.difference = (a, b)=>a.filter((t)=>!b.includes(t));
_.findIndex = (a, f)=>a.findIndex(f);
_.some = (a, f)=>a.some(f);
_.range = (n)=>[
        ...Array(n).keys()
    ];
module.exports = _;

},{}],"c91dJ":[function(require,module,exports) {
"use strict";
var errors = require("../errors");
var _ = require("../util/_");
module.exports = {
    checkState: function(condition, message) {
        if (!condition) throw new errors.InvalidState(message);
    },
    checkArgument: function(condition, argumentName, message, docsPath) {
        if (!condition) throw new errors.InvalidArgument(argumentName, message, docsPath);
    },
    checkArgumentType: function(argument, type, argumentName) {
        argumentName = argumentName || "(unknown name)";
        if (_.isString(type)) {
            if (type === "Buffer") {
                var buffer = require("buffer") // './buffer' fails on cordova & RN
                ;
                if (!buffer.Buffer.isBuffer(argument)) throw new errors.InvalidArgumentType(argument, type, argumentName);
            } else if (typeof argument !== type) throw new errors.InvalidArgumentType(argument, type, argumentName);
        } else {
            if (!(argument instanceof type)) throw new errors.InvalidArgumentType(argument, type.name, argumentName);
        }
    }
};

},{"../errors":"9UULR","../util/_":"f1m1Z","buffer":"fCgem"}],"9UULR":[function(require,module,exports) {
"use strict";
var _ = require("../util/_");
function format(message, args) {
    return message.replace("{0}", args[0]).replace("{1}", args[1]).replace("{2}", args[2]);
}
var traverseNode = function(parent, errorDefinition) {
    var NodeError = function() {
        if (_.isString(errorDefinition.message)) this.message = format(errorDefinition.message, arguments);
        else if (_.isFunction(errorDefinition.message)) this.message = errorDefinition.message.apply(null, arguments);
        else throw new Error("Invalid error definition for " + errorDefinition.name);
        this.stack = this.message + "\n" + new Error().stack;
    };
    NodeError.prototype = Object.create(parent.prototype);
    NodeError.prototype.name = parent.prototype.name + errorDefinition.name;
    parent[errorDefinition.name] = NodeError;
    if (errorDefinition.errors) childDefinitions(NodeError, errorDefinition.errors);
    return NodeError;
};
var childDefinitions = function(parent, childDefinitions) {
    _.each(childDefinitions, function(childDefinition) {
        traverseNode(parent, childDefinition);
    });
};
var traverseRoot = function(parent, errorsDefinition) {
    childDefinitions(parent, errorsDefinition);
    return parent;
};
var bsv = {};
bsv.Error = function() {
    this.message = "Internal error";
    this.stack = this.message + "\n" + new Error().stack;
};
bsv.Error.prototype = Object.create(Error.prototype);
bsv.Error.prototype.name = "bsv.Error";
var data = require("./spec");
traverseRoot(bsv.Error, data);
module.exports = bsv.Error;
module.exports.extend = function(spec) {
    return traverseNode(bsv.Error, spec);
};

},{"../util/_":"f1m1Z","./spec":"gVRr9"}],"gVRr9":[function(require,module,exports) {
"use strict";
var docsURL = "https://docs.moneybutton.com/";
module.exports = [
    {
        name: "InvalidB58Char",
        message: "Invalid Base58 character: {0} in {1}"
    },
    {
        name: "InvalidB58Checksum",
        message: "Invalid Base58 checksum for {0}"
    },
    {
        name: "InvalidNetwork",
        message: "Invalid version for network: got {0}"
    },
    {
        name: "InvalidState",
        message: "Invalid state: {0}"
    },
    {
        name: "NotImplemented",
        message: "Function {0} was not implemented yet"
    },
    {
        name: "InvalidNetworkArgument",
        message: 'Invalid network: must be "livenet" or "testnet", got {0}'
    },
    {
        name: "InvalidArgument",
        message: function() {
            return "Invalid Argument" + (arguments[0] ? ": " + arguments[0] : "") + (arguments[1] ? " Documentation: " + docsURL + arguments[1] : "");
        }
    },
    {
        name: "AbstractMethodInvoked",
        message: "Abstract Method Invocation: {0}"
    },
    {
        name: "InvalidArgumentType",
        message: function() {
            return "Invalid Argument for " + arguments[2] + ", expected " + arguments[1] + " but got " + typeof arguments[0];
        }
    },
    {
        name: "Unit",
        message: "Internal Error on Unit {0}",
        errors: [
            {
                "name": "UnknownCode",
                "message": "Unrecognized unit code: {0}"
            },
            {
                "name": "InvalidRate",
                "message": "Invalid exchange rate: {0}"
            }
        ]
    },
    {
        name: "MerkleBlock",
        message: "Internal Error on MerkleBlock {0}",
        errors: [
            {
                "name": "InvalidMerkleTree",
                "message": "This MerkleBlock contain an invalid Merkle Tree"
            }
        ]
    },
    {
        name: "Transaction",
        message: "Internal Error on Transaction {0}",
        errors: [
            {
                name: "Input",
                message: "Internal Error on Input {0}",
                errors: [
                    {
                        name: "MissingScript",
                        message: "Need a script to create an input"
                    },
                    {
                        name: "UnsupportedScript",
                        message: "Unsupported input script type: {0}"
                    },
                    {
                        name: "MissingPreviousOutput",
                        message: "No previous output information."
                    }
                ]
            },
            {
                name: "NeedMoreInfo",
                message: "{0}"
            },
            {
                name: "InvalidSorting",
                message: "The sorting function provided did not return the change output as one of the array elements"
            },
            {
                name: "InvalidOutputAmountSum",
                message: "{0}"
            },
            {
                name: "MissingSignatures",
                message: "Some inputs have not been fully signed"
            },
            {
                name: "InvalidIndex",
                message: "Invalid index: {0} is not between 0, {1}"
            },
            {
                name: "UnableToVerifySignature",
                message: "Unable to verify signature: {0}"
            },
            {
                name: "DustOutputs",
                message: "Dust amount detected in one output"
            },
            {
                name: "InvalidSatoshis",
                message: "Output satoshis are invalid"
            },
            {
                name: "FeeError",
                message: "Internal Error on Fee {0}",
                errors: [
                    {
                        name: "TooSmall",
                        message: "Fee is too small: {0}"
                    },
                    {
                        name: "TooLarge",
                        message: "Fee is too large: {0}"
                    },
                    {
                        name: "Different",
                        message: "Unspent value is different from specified fee: {0}"
                    }
                ]
            },
            {
                name: "ChangeAddressMissing",
                message: "Change address is missing"
            },
            {
                name: "BlockHeightTooHigh",
                message: "Block Height can be at most 2^32 -1"
            },
            {
                name: "NLockTimeOutOfRange",
                message: "Block Height can only be between 0 and 499 999 999"
            },
            {
                name: "LockTimeTooEarly",
                message: "Lock Time can't be earlier than UNIX date 500 000 000"
            }
        ]
    },
    {
        name: "Script",
        message: "Internal Error on Script {0}",
        errors: [
            {
                name: "UnrecognizedAddress",
                message: "Expected argument {0} to be an address"
            },
            {
                name: "CantDeriveAddress",
                message: "Can't derive address associated with script {0}, needs to be p2pkh in, p2pkh out, p2sh in, or p2sh out."
            },
            {
                name: "InvalidBuffer",
                message: "Invalid script buffer: can't parse valid script from given buffer {0}"
            }
        ]
    },
    {
        name: "HDPrivateKey",
        message: "Internal Error on HDPrivateKey {0}",
        errors: [
            {
                name: "InvalidDerivationArgument",
                message: "Invalid derivation argument {0}, expected string, or number and boolean"
            },
            {
                name: "InvalidEntropyArgument",
                message: "Invalid entropy: must be an hexa string or binary buffer, got {0}",
                errors: [
                    {
                        name: "TooMuchEntropy",
                        message: 'Invalid entropy: more than 512 bits is non standard, got "{0}"'
                    },
                    {
                        name: "NotEnoughEntropy",
                        message: 'Invalid entropy: at least 128 bits needed, got "{0}"'
                    }
                ]
            },
            {
                name: "InvalidLength",
                message: "Invalid length for xprivkey string in {0}"
            },
            {
                name: "InvalidPath",
                message: "Invalid derivation path: {0}"
            },
            {
                name: "UnrecognizedArgument",
                message: 'Invalid argument: creating a HDPrivateKey requires a string, buffer, json or object, got "{0}"'
            }
        ]
    },
    {
        name: "HDPublicKey",
        message: "Internal Error on HDPublicKey {0}",
        errors: [
            {
                name: "ArgumentIsPrivateExtended",
                message: "Argument is an extended private key: {0}"
            },
            {
                name: "InvalidDerivationArgument",
                message: "Invalid derivation argument: got {0}"
            },
            {
                name: "InvalidLength",
                message: 'Invalid length for xpubkey: got "{0}"'
            },
            {
                name: "InvalidPath",
                message: 'Invalid derivation path, it should look like: "m/1/100", got "{0}"'
            },
            {
                name: "InvalidIndexCantDeriveHardened",
                message: "Invalid argument: creating a hardened path requires an HDPrivateKey"
            },
            {
                name: "MustSupplyArgument",
                message: "Must supply an argument to create a HDPublicKey"
            },
            {
                name: "UnrecognizedArgument",
                message: "Invalid argument for creation, must be string, json, buffer, or object"
            }
        ]
    }
];

},{}],"kLrpR":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var Base58 = require("./base58");
var buffer = require("buffer");
var sha256sha256 = require("../crypto/hash").sha256sha256;
/**
 * A Base58check object can encode/decodd Base 58, which is used primarily for
 * string-formatted Bitcoin addresses and private keys. This is the same as
 * Base58, except that it includes a checksum to prevent accidental mistypings.
 *
 * @param {object} obj Can be a string or buffer.
 */ var Base58Check = function Base58Check(obj) {
    if (!(this instanceof Base58Check)) return new Base58Check(obj);
    if (Buffer.isBuffer(obj)) {
        var buf = obj;
        this.fromBuffer(buf);
    } else if (typeof obj === "string") {
        var str = obj;
        this.fromString(str);
    }
};
Base58Check.prototype.set = function(obj) {
    this.buf = obj.buf || this.buf || undefined;
    return this;
};
Base58Check.validChecksum = function validChecksum(data, checksum) {
    if (_.isString(data)) data = buffer.Buffer.from(Base58.decode(data));
    if (_.isString(checksum)) checksum = buffer.Buffer.from(Base58.decode(checksum));
    if (!checksum) {
        checksum = data.slice(-4);
        data = data.slice(0, -4);
    }
    return Base58Check.checksum(data).toString("hex") === checksum.toString("hex");
};
Base58Check.decode = function(s) {
    if (typeof s !== "string") throw new Error("Input must be a string");
    var buf = Buffer.from(Base58.decode(s));
    if (buf.length < 4) throw new Error("Input string too short");
    var data = buf.slice(0, -4);
    var csum = buf.slice(-4);
    var hash = sha256sha256(data);
    var hash4 = hash.slice(0, 4);
    if (csum.toString("hex") !== hash4.toString("hex")) throw new Error("Checksum mismatch");
    return data;
};
Base58Check.checksum = function(buffer) {
    return sha256sha256(buffer).slice(0, 4);
};
Base58Check.encode = function(buf) {
    if (!Buffer.isBuffer(buf)) throw new Error("Input must be a buffer");
    var checkedBuf = Buffer.alloc(buf.length + 4);
    var hash = Base58Check.checksum(buf);
    buf.copy(checkedBuf);
    hash.copy(checkedBuf, buf.length);
    return Base58.encode(checkedBuf);
};
Base58Check.prototype.fromBuffer = function(buf) {
    this.buf = buf;
    return this;
};
Base58Check.fromBuffer = function(buf) {
    return new Base58Check().fromBuffer(buf);
};
Base58Check.fromHex = function(hex) {
    return Base58Check.fromBuffer(Buffer.from(hex, "hex"));
};
Base58Check.prototype.fromString = function(str) {
    var buf = Base58Check.decode(str);
    this.buf = buf;
    return this;
};
Base58Check.fromString = function(str) {
    var buf = Base58Check.decode(str);
    return new Base58(buf);
};
Base58Check.prototype.toBuffer = function() {
    return this.buf;
};
Base58Check.prototype.toHex = function() {
    return this.toBuffer().toString("hex");
};
Base58Check.prototype.toString = function() {
    return Base58Check.encode(this.buf);
};
module.exports = Base58Check;

},{"buffer":"fCgem","../util/_":"f1m1Z","./base58":"6zLJ7","../crypto/hash":"jgMGE"}],"6zLJ7":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var bs58 = require("bs58");
var buffer = require("buffer");
/**
 * The alphabet for the Bitcoin-specific Base 58 encoding distinguishes between
 * lower case L and upper case i - neither of those characters are allowed to
 * prevent accidentaly miscopying of letters.
 */ var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz".split("");
/**
 * A Base58 object can encode/decoded Base 58, which is used primarily for
 * string-formatted Bitcoin addresses and private keys. Addresses and private
 * keys actually use an additional checksum, and so they actually use the
 * Base58Check class.
 *
 * @param {object} obj Can be a string or buffer.
 */ var Base58 = function Base58(obj) {
    if (!(this instanceof Base58)) return new Base58(obj);
    if (Buffer.isBuffer(obj)) {
        var buf = obj;
        this.fromBuffer(buf);
    } else if (typeof obj === "string") {
        var str = obj;
        this.fromString(str);
    }
};
Base58.validCharacters = function validCharacters(chars) {
    if (buffer.Buffer.isBuffer(chars)) chars = chars.toString();
    return _.every(_.map(chars, function(char) {
        return _.includes(ALPHABET, char);
    }));
};
Base58.prototype.set = function(obj) {
    this.buf = obj.buf || this.buf || undefined;
    return this;
};
/**
 * Encode a buffer to Bsae 58.
 *
 * @param {Buffer} buf Any buffer to be encoded.
 * @returns {string} A Base 58 encoded string.
 */ Base58.encode = function(buf) {
    if (!buffer.Buffer.isBuffer(buf)) throw new Error("Input should be a buffer");
    return bs58.encode(buf);
};
/**
 * Decode a Base 58 string to a buffer.
 *
 * @param {string} str A Base 58 encoded string.
 * @returns {Buffer} The decoded buffer.
 */ Base58.decode = function(str) {
    if (typeof str !== "string") throw new Error("Input should be a string");
    return Buffer.from(bs58.decode(str));
};
Base58.prototype.fromBuffer = function(buf) {
    this.buf = buf;
    return this;
};
Base58.fromBuffer = function(buf) {
    return new Base58().fromBuffer(buf);
};
Base58.fromHex = function(hex) {
    return Base58.fromBuffer(Buffer.from(hex, "hex"));
};
Base58.prototype.fromString = function(str) {
    var buf = Base58.decode(str);
    this.buf = buf;
    return this;
};
Base58.fromString = function(str) {
    return new Base58().fromString(str);
};
Base58.prototype.toBuffer = function() {
    return this.buf;
};
Base58.prototype.toHex = function() {
    return this.toBuffer().toString("hex");
};
Base58.prototype.toString = function() {
    return Base58.encode(this.buf);
};
module.exports = Base58;

},{"buffer":"fCgem","../util/_":"f1m1Z","bs58":"4ji3p"}],"4ji3p":[function(require,module,exports) {
var basex = require("base-x");
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
module.exports = basex(ALPHABET);

},{"base-x":"inVbl"}],"inVbl":[function(require,module,exports) {
"use strict";
// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore
var _Buffer = require("safe-buffer").Buffer;
function base(ALPHABET) {
    if (ALPHABET.length >= 255) throw new TypeError("Alphabet too long");
    var BASE_MAP = new Uint8Array(256);
    for(var j = 0; j < BASE_MAP.length; j++)BASE_MAP[j] = 255;
    for(var i = 0; i < ALPHABET.length; i++){
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) throw new TypeError(x + " is ambiguous");
        BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up
    ;
    var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up
    ;
    function encode(source) {
        if (Array.isArray(source) || source instanceof Uint8Array) source = _Buffer.from(source);
        if (!_Buffer.isBuffer(source)) throw new TypeError("Expected Buffer");
        if (source.length === 0) return "";
        // Skip & count leading zeroes.
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        // Allocate enough space in big-endian base58 representation.
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        // Process the bytes.
        while(pbegin !== pend){
            var carry = source[pbegin];
            // Apply "b58 = b58 * 256 + ch".
            var i = 0;
            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            pbegin++;
        }
        // Skip leading zeroes in base58 result.
        var it2 = size - length;
        while(it2 !== size && b58[it2] === 0)it2++;
        // Translate the result into a string.
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2)str += ALPHABET.charAt(b58[it2]);
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") throw new TypeError("Expected String");
        if (source.length === 0) return _Buffer.alloc(0);
        var psz = 0;
        // Skip and count leading '1's.
        var zeroes = 0;
        var length = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        // Allocate enough space in big-endian base256 representation.
        var size = (source.length - psz) * FACTOR + 1 >>> 0 // log(58) / log(256), rounded up.
        ;
        var b256 = new Uint8Array(size);
        // Process the characters.
        while(source[psz]){
            // Decode character
            var carry = BASE_MAP[source.charCodeAt(psz)];
            // Invalid character
            if (carry === 255) return;
            var i = 0;
            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            psz++;
        }
        // Skip leading zeroes in b256.
        var it4 = size - length;
        while(it4 !== size && b256[it4] === 0)it4++;
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0x00, 0, zeroes);
        var j = zeroes;
        while(it4 !== size)vch[j++] = b256[it4++];
        return vch;
    }
    function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) return buffer;
        throw new Error("Non-base" + BASE + " character");
    }
    return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
    };
}
module.exports = base;

},{"safe-buffer":"eW7r9"}],"eW7r9":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("buffer");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return buffer.SlowBuffer(size);
};

},{"buffer":"fCgem"}],"jgMGE":[function(require,module,exports) {
module.exports = require("./hash.browser");

},{"./hash.browser":"crimC"}],"crimC":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var hash = require("hash.js");
var $ = require("../util/preconditions");
var Hash = module.exports;
/**
 * A SHA or SHA1 hash, which is always 160 bits or 20 bytes long.
 *
 * See:
 * https://en.wikipedia.org/wiki/SHA-1
 *
 * @param {Buffer} buf Data, a.k.a. pre-image, which can be any size.
 * @returns {Buffer} The hash in the form of a buffer.
 */ Hash.sha1 = function(buf) {
    $.checkArgument(Buffer.isBuffer(buf));
    return Buffer.from(hash.sha1().update(buf).digest("hex"), "hex");
};
Hash.sha1.blocksize = 512;
/**
 * A SHA256 hash, which is always 256 bits or 32 bytes long.
 *
 * See:
 * https://www.movable-type.co.uk/scripts/sha256.html
 *
 * @param {Buffer} buf Data, a.k.a. pre-image, which can be any size.
 * @returns {Buffer} The hash in the form of a buffer.
 */ Hash.sha256 = function(buf) {
    $.checkArgument(Buffer.isBuffer(buf));
    return Buffer.from(hash.sha256().update(buf).digest("hex"), "hex");
};
Hash.sha256.blocksize = 512;
/**
 * A double SHA256 hash, which is always 256 bits or 32 bytes bytes long. This
 * hash function is commonly used inside Bitcoin, particularly for the hash of a
 * block and the hash of a transaction.
 *
 * See:
 * https://www.movable-type.co.uk/scripts/sha256.html
 *
 * @param {Buffer} buf Data, a.k.a. pre-image, which can be any size.
 * @returns {Buffer} The hash in the form of a buffer.
 */ Hash.sha256sha256 = function(buf) {
    $.checkArgument(Buffer.isBuffer(buf));
    return Hash.sha256(Hash.sha256(buf));
};
/**
 * A RIPEMD160 hash, which is always 160 bits or 20 bytes long.
 *
 * See:
 * https://en.wikipedia.org/wiki/RIPEMD
 *
 * @param {Buffer} buf Data, a.k.a. pre-image, which can be any size.
 * @returns {Buffer} The hash in the form of a buffer.
 */ Hash.ripemd160 = function(buf) {
    $.checkArgument(Buffer.isBuffer(buf));
    return Buffer.from(hash.ripemd160().update(buf).digest("hex"), "hex");
};
/**
 * A RIPEMD160 hash of a SHA256 hash, which is always 160 bits or 20 bytes long.
 * This value is commonly used inside Bitcoin, particularly for Bitcoin
 * addresses.
 *
 * See:
 * https://en.wikipedia.org/wiki/RIPEMD
 *
 * @param {Buffer} buf Data, a.k.a. pre-image, which can be any size.
 * @returns {Buffer} The hash in the form of a buffer.
 */ Hash.sha256ripemd160 = function(buf) {
    $.checkArgument(Buffer.isBuffer(buf));
    return Hash.ripemd160(Hash.sha256(buf));
};
/**
 * A SHA512 hash, which is always 512 bits or 64 bytes long.
 *
 * See:
 * https://en.wikipedia.org/wiki/SHA-2
 *
 * @param {Buffer} buf Data, a.k.a. pre-image, which can be any size.
 * @returns {Buffer} The hash in the form of a buffer.
 */ Hash.sha512 = function(buf) {
    $.checkArgument(Buffer.isBuffer(buf));
    return Buffer.from(hash.sha512().update(buf).digest("hex"), "hex");
};
Hash.sha512.blocksize = 1024;
/**
 * A way to do HMAC using any underlying hash function. If you ever find that
 * you want to hash two pieces of data together, you should use HMAC instead of
 * just using a hash function. Rather than doing hash(data1 + data2) you should
 * do HMAC(data1, data2). Actually, rather than use HMAC directly, we recommend
 * you use either sha256hmac or sha515hmac provided below.
 *
 * See:
 * https://en.wikipedia.org/wiki/Length_extension_attack
 * https://blog.skullsecurity.org/2012/everything-you-need-to-know-about-hash-length-extension-attacks
 *
 * @param {function} hashf Which hash function to use.
 * @param {Buffer} data Data, which can be any size.
 * @param {Buffer} key Key, which can be any size.
 * @returns {Buffer} The HMAC in the form of a buffer.
 */ Hash.hmac = function(hashf, data, key) {
    // http://en.wikipedia.org/wiki/Hash-based_message_authentication_code
    // http://tools.ietf.org/html/rfc4868#section-2
    $.checkArgument(Buffer.isBuffer(data));
    $.checkArgument(Buffer.isBuffer(key));
    $.checkArgument(hashf.blocksize);
    var blocksize = hashf.blocksize / 8;
    if (key.length > blocksize) key = hashf(key);
    else if (key < blocksize) {
        var fill = Buffer.alloc(blocksize);
        fill.fill(0);
        key.copy(fill);
        key = fill;
    }
    var oKey = Buffer.alloc(blocksize);
    oKey.fill(0x5c);
    var iKey = Buffer.alloc(blocksize);
    iKey.fill(0x36);
    var oKeyPad = Buffer.alloc(blocksize);
    var iKeyPad = Buffer.alloc(blocksize);
    for(var i = 0; i < blocksize; i++){
        oKeyPad[i] = oKey[i] ^ key[i];
        iKeyPad[i] = iKey[i] ^ key[i];
    }
    return hashf(Buffer.concat([
        oKeyPad,
        hashf(Buffer.concat([
            iKeyPad,
            data
        ]))
    ]));
};
/**
 * A SHA256 HMAC.
 *
 * @param {Buffer} data Data, which can be any size.
 * @param {Buffer} key Key, which can be any size.
 * @returns {Buffer} The HMAC in the form of a buffer.
 */ Hash.sha256hmac = function(data, key) {
    return Hash.hmac(Hash.sha256, data, key);
};
/**
 * A SHA512 HMAC.
 *
 * @param {Buffer} data Data, which can be any size.
 * @param {Buffer} key Key, which can be any size.
 * @returns {Buffer} The HMAC in the form of a buffer.
 */ Hash.sha512hmac = function(data, key) {
    return Hash.hmac(Hash.sha512, data, key);
};

},{"buffer":"fCgem","hash.js":"gOEGU","../util/preconditions":"c91dJ"}],"gOEGU":[function(require,module,exports) {
var hash = exports;
hash.utils = require("./hash/utils");
hash.common = require("./hash/common");
hash.sha = require("./hash/sha");
hash.ripemd = require("./hash/ripemd");
hash.hmac = require("./hash/hmac");
// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/utils":"kfzn2","./hash/common":"ecAfF","./hash/sha":"8nbee","./hash/ripemd":"9kyRQ","./hash/hmac":"5KrrE"}],"kfzn2":[function(require,module,exports) {
"use strict";
var assert = require("minimalistic-assert");
var inherits = require("inherits");
exports.inherits = inherits;
function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === "string") {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
exports.toArray = toArray;
function toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
exports.toHex = toHex;
function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
}
exports.htonl = htonl;
function toHex32(msg, endian) {
    var res = "";
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === "little") w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
exports.toHex32 = toHex32;
function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
exports.zero2 = zero2;
function zero8(word) {
    if (word.length === 7) return "0" + word;
    else if (word.length === 6) return "00" + word;
    else if (word.length === 5) return "000" + word;
    else if (word.length === 4) return "0000" + word;
    else if (word.length === 3) return "00000" + word;
    else if (word.length === 2) return "000000" + word;
    else if (word.length === 1) return "0000000" + word;
    else return word;
}
exports.zero8 = zero8;
function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === "big") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
exports.join32 = join32;
function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 0xff;
            res[k + 2] = m >>> 8 & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 0xff;
            res[k + 1] = m >>> 8 & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
exports.split32 = split32;
function rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;
function rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;
function sum32(a, b) {
    return a + b >>> 0;
}
exports.sum32 = sum32;
function sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;
function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;
function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;
function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
exports.sum64 = sum64;
function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
exports.sum64_hi = sum64_hi;
function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
exports.sum64_lo = sum64_lo;
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;
function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;
function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;
function shr64_hi(ah, al, num) {
    return ah >>> num;
}
exports.shr64_hi = shr64_hi;
function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"minimalistic-assert":"8OvWh","inherits":"bRL3M"}],"8OvWh":[function(require,module,exports) {
module.exports = assert;
function assert(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}
assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};

},{}],"bRL3M":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function() {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
};

},{}],"ecAfF":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var assert = require("minimalistic-assert");
function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;
BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
};
BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === "big") {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

},{"./utils":"kfzn2","minimalistic-assert":"8OvWh"}],"8nbee":[function(require,module,exports) {
"use strict";
exports.sha1 = require("./sha/1");
exports.sha224 = require("./sha/224");
exports.sha256 = require("./sha/256");
exports.sha384 = require("./sha/384");
exports.sha512 = require("./sha/512");

},{"./sha/1":"fnjyb","./sha/224":"9x7tY","./sha/256":"9bCbT","./sha/384":"lJMiS","./sha/512":"8y482"}],"fnjyb":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var common = require("../common");
var shaCommon = require("./common");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [
    0x5A827999,
    0x6ED9EBA1,
    0x8F1BBCDC,
    0xCA62C1D6
];
function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.W = new Array(80);
}
utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
};
SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};

},{"../utils":"kfzn2","../common":"ecAfF","./common":"gzrNi"}],"gzrNi":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var rotr32 = utils.rotr32;
function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;
function ch32(x, y, z) {
    return x & y ^ ~x & z;
}
exports.ch32 = ch32;
function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;
function p32(x, y, z) {
    return x ^ y ^ z;
}
exports.p32 = p32;
function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;
function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;
function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;
function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

},{"../utils":"kfzn2"}],"9x7tY":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var SHA256 = require("./256");
function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    SHA256.call(this);
    this.h = [
        0xc1059ed8,
        0x367cd507,
        0x3070dd17,
        0xf70e5939,
        0xffc00b31,
        0x68581511,
        0x64f98fa7,
        0xbefa4fa4
    ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
    else return utils.split32(this.h.slice(0, 7), "big");
};

},{"../utils":"kfzn2","./256":"9bCbT"}],"9bCbT":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var common = require("../common");
var shaCommon = require("./common");
var assert = require("minimalistic-assert");
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;
SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
};
SHA256.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};

},{"../utils":"kfzn2","../common":"ecAfF","./common":"gzrNi","minimalistic-assert":"8OvWh"}],"lJMiS":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var SHA512 = require("./512");
function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    SHA512.call(this);
    this.h = [
        0xcbbb9d5d,
        0xc1059ed8,
        0x629a292a,
        0x367cd507,
        0x9159015a,
        0x3070dd17,
        0x152fecd8,
        0xf70e5939,
        0x67332667,
        0xffc00b31,
        0x8eb44a87,
        0x68581511,
        0xdb0c2e0d,
        0x64f98fa7,
        0x47b5481d,
        0xbefa4fa4
    ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
    else return utils.split32(this.h.slice(0, 12), "big");
};

},{"../utils":"kfzn2","./512":"8y482"}],"8y482":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var common = require("../common");
var assert = require("minimalistic-assert");
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xf3bcc908,
        0xbb67ae85,
        0x84caa73b,
        0x3c6ef372,
        0xfe94f82b,
        0xa54ff53a,
        0x5f1d36f1,
        0x510e527f,
        0xade682d1,
        0x9b05688c,
        0x2b3e6c1f,
        0x1f83d9ab,
        0xfb41bd6b,
        0x5be0cd19,
        0x137e2179
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
};
SHA512.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};
function ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2); // 34
    var c2_hi = rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2); // 34
    var c2_lo = rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29); // 61
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29); // 61
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

},{"../utils":"kfzn2","../common":"ecAfF","minimalistic-assert":"8OvWh"}],"9kyRQ":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var common = require("./common");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;
function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.endian = "little";
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "little");
    else return utils.split32(this.h, "little");
};
function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function K(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}
function Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}
var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

},{"./utils":"kfzn2","./common":"ecAfF"}],"5KrrE":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var assert = require("minimalistic-assert");
function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
}
module.exports = Hmac;
Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

},{"./utils":"kfzn2","minimalistic-assert":"8OvWh"}],"ai5AV":[function(require,module,exports) {
"use strict";
var _ = require("./util/_");
var JSUtil = require("./util/js");
var networks = [];
var networkMaps = {};
/**
 * A network is merely a map containing values that correspond to version
 * numbers for each bitcoin network. Currently only supporting "livenet"
 * (a.k.a. "mainnet"), "testnet", "regtest" and "stn".
 * @constructor
 */ function Network() {}
Network.prototype.toString = function toString() {
    return this.name;
};
/**
 * @function
 * @member Networks#get
 * Retrieves the network associated with a magic number or string.
 * @param {string|number|Network} arg
 * @param {string|Array} keys - if set, only check if the magic number associated with this name matches
 * @return Network
 */ function get(arg, keys) {
    if (~networks.indexOf(arg)) return arg;
    if (keys) {
        if (!_.isArray(keys)) keys = [
            keys
        ];
        for(var i = 0; i < networks.length; i++){
            var network = networks[i];
            var filteredNet = _.pick(network, keys);
            var netValues = _.values(filteredNet);
            if (~netValues.indexOf(arg)) return network;
        }
        return undefined;
    }
    return networkMaps[arg];
}
/***
 * Derives an array from the given cashAddrPrefix to be used in the computation
 * of the address' checksum.
 *
 * @param {string} cashAddrPrefix Network cashAddrPrefix. E.g.: 'bitcoincash'.
 */ function cashAddrPrefixToArray(cashAddrPrefix) {
    var result = [];
    for(var i = 0; i < cashAddrPrefix.length; i++)result.push(cashAddrPrefix.charCodeAt(i) & 31);
    return result;
}
/**
 * @function
 * @member Networks#add
 * Will add a custom Network
 * @param {Object} data
 * @param {string} data.name - The name of the network
 * @param {string} data.alias - The aliased name of the network
 * @param {Number} data.pubkeyhash - The publickey hash cashAddrPrefix
 * @param {Number} data.privatekey - The privatekey cashAddrPrefix
 * @param {Number} data.scripthash - The scripthash cashAddrPrefix
 * @param {Number} data.xpubkey - The extended public key magic
 * @param {Number} data.xprivkey - The extended private key magic
 * @param {Number} data.networkMagic - The network magic number
 * @param {Number} data.port - The network port
 * @param {Array}  data.dnsSeeds - An array of dns seeds
 * @return Network
 */ function addNetwork(data) {
    var network = new Network();
    JSUtil.defineImmutable(network, {
        name: data.name,
        alias: data.alias,
        pubkeyhash: data.pubkeyhash,
        privatekey: data.privatekey,
        scripthash: data.scripthash,
        xpubkey: data.xpubkey,
        xprivkey: data.xprivkey
    });
    var indexBy = data.indexBy || Object.keys(data);
    if (data.cashAddrPrefix) _.extend(network, {
        cashAddrPrefix: data.cashAddrPrefix,
        cashAddrPrefixArray: cashAddrPrefixToArray(data.cashAddrPrefix)
    });
    if (data.networkMagic) _.extend(network, {
        networkMagic: JSUtil.integerAsBuffer(data.networkMagic)
    });
    if (data.port) _.extend(network, {
        port: data.port
    });
    if (data.dnsSeeds) _.extend(network, {
        dnsSeeds: data.dnsSeeds
    });
    networks.push(network);
    indexNetworkBy(network, indexBy);
    return network;
}
function indexNetworkBy(network, keys) {
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        var networkValue = network[key];
        if (!_.isUndefined(networkValue) && !_.isObject(networkValue)) networkMaps[networkValue] = network;
    }
}
function unindexNetworkBy(network, values) {
    for(var index = 0; index < values.length; index++){
        var value = values[index];
        if (networkMaps[value] === network) delete networkMaps[value];
    }
}
/**
 * @function
 * @member Networks#remove
 * Will remove a custom network
 * @param {Network} network
 */ function removeNetwork(network) {
    for(var i = 0; i < networks.length; i++)if (networks[i] === network) networks.splice(i, 1);
    unindexNetworkBy(network, Object.keys(networkMaps));
}
var networkMagic = {
    livenet: 0xe3e1f3e8,
    testnet: 0xf4e5f3f4,
    regtest: 0xdab5bffa,
    stn: 0xfbcec4f9
};
var dnsSeeds = [
    "seed.bitcoinsv.org",
    "seed.bitcoinunlimited.info"
];
var TESTNET = {
    PORT: 18333,
    NETWORK_MAGIC: networkMagic.testnet,
    DNS_SEEDS: dnsSeeds,
    PREFIX: "testnet",
    CASHADDRPREFIX: "bchtest"
};
var REGTEST = {
    PORT: 18444,
    NETWORK_MAGIC: networkMagic.regtest,
    DNS_SEEDS: [],
    PREFIX: "regtest",
    CASHADDRPREFIX: "bchreg"
};
var STN = {
    PORT: 9333,
    NETWORK_MAGIC: networkMagic.stn,
    DNS_SEEDS: [
        "stn-seed.bitcoinsv.io"
    ],
    PREFIX: "stn",
    CASHADDRPREFIX: "bsvstn"
};
var liveNetwork = {
    name: "livenet",
    alias: "mainnet",
    prefix: "bitcoin",
    cashAddrPrefix: "bitcoincash",
    pubkeyhash: 0x00,
    privatekey: 0x80,
    scripthash: 0x05,
    xpubkey: 0x0488b21e,
    xprivkey: 0x0488ade4,
    networkMagic: networkMagic.livenet,
    port: 8333,
    dnsSeeds: dnsSeeds
};
// network magic, port, cashAddrPrefix, and dnsSeeds are overloaded by enableRegtest
var testNetwork = {
    name: "testnet",
    prefix: TESTNET.PREFIX,
    cashAddrPrefix: TESTNET.CASHADDRPREFIX,
    pubkeyhash: 0x6f,
    privatekey: 0xef,
    scripthash: 0xc4,
    xpubkey: 0x043587cf,
    xprivkey: 0x04358394,
    networkMagic: TESTNET.NETWORK_MAGIC
};
var regtestNetwork = {
    name: "regtest",
    prefix: REGTEST.PREFIX,
    cashAddrPrefix: REGTEST.CASHADDRPREFIX,
    pubkeyhash: 0x6f,
    privatekey: 0xef,
    scripthash: 0xc4,
    xpubkey: 0x043587cf,
    xprivkey: 0x04358394,
    networkMagic: REGTEST.NETWORK_MAGIC,
    port: REGTEST.PORT,
    dnsSeeds: [],
    indexBy: [
        "port",
        "name",
        "cashAddrPrefix",
        "networkMagic"
    ]
};
var stnNetwork = {
    name: "stn",
    prefix: STN.PREFIX,
    cashAddrPrefix: STN.CASHADDRPREFIX,
    pubkeyhash: 0x6f,
    privatekey: 0xef,
    scripthash: 0xc4,
    xpubkey: 0x043587cf,
    xprivkey: 0x04358394,
    networkMagic: STN.NETWORK_MAGIC,
    indexBy: [
        "port",
        "name",
        "cashAddrPrefix",
        "networkMagic"
    ]
};
// Add configurable values for testnet/regtest
addNetwork(testNetwork);
addNetwork(stnNetwork);
addNetwork(regtestNetwork);
addNetwork(liveNetwork);
var livenet = get("livenet");
var regtest = get("regtest");
var testnet = get("testnet");
var stn = get("stn");
Object.defineProperty(testnet, "port", {
    enumerable: true,
    configurable: false,
    get: function() {
        if (this.regtestEnabled) return REGTEST.PORT;
        else if (this.stnEnabled) return STN.PORT;
        else return TESTNET.PORT;
    }
});
Object.defineProperty(testnet, "networkMagic", {
    enumerable: true,
    configurable: false,
    get: function() {
        if (this.regtestEnabled) return JSUtil.integerAsBuffer(REGTEST.NETWORK_MAGIC);
        else if (this.stnEnabled) return JSUtil.integerAsBuffer(STN.NETWORK_MAGIC);
        else return JSUtil.integerAsBuffer(TESTNET.NETWORK_MAGIC);
    }
});
Object.defineProperty(testnet, "dnsSeeds", {
    enumerable: true,
    configurable: false,
    get: function() {
        if (this.regtestEnabled) return REGTEST.DNS_SEEDS;
        else if (this.stnEnabled) return STN.DNS_SEEDS;
        else return TESTNET.DNS_SEEDS;
    }
});
Object.defineProperty(testnet, "cashAddrPrefix", {
    enumerable: true,
    configurable: false,
    get: function() {
        if (this.regtestEnabled) return REGTEST.CASHADDRPREFIX;
        else if (this.stnEnabled) return STN.CASHADDRPREFIX;
        else return TESTNET.CASHADDRPREFIX;
    }
});
Object.defineProperty(testnet, "cashAddrPrefixArray", {
    enumerable: true,
    configurable: false,
    get: function() {
        if (this.regtestEnabled) return cashAddrPrefixToArray(REGTEST.CASHADDRPREFIX);
        else if (this.stnEnabled) return STN.cashAddrPrefixToArray(STN.CASHADDRPREFIX);
        else return cashAddrPrefixToArray(TESTNET.CASHADDRPREFIX);
    }
});
/**
 * @function
 * @member Networks#enableRegtest
 * Will enable regtest features for testnet
 */ function enableRegtest() {
    testnet.regtestEnabled = true;
}
/**
 * @function
 * @member Networks#disableRegtest
 * Will disable regtest features for testnet
 */ function disableRegtest() {
    testnet.regtestEnabled = false;
}
/**
 * @function
 * @member Networks#enableStn
 * Will enable stn features for testnet
 */ function enableStn() {
    testnet.stnEnabled = true;
}
/**
 * @function
 * @member Networks#disableStn
 * Will disable stn features for testnet
 */ function disableStn() {
    testnet.stnEnabled = false;
}
/**
 * @namespace Networks
 */ module.exports = {
    add: addNetwork,
    remove: removeNetwork,
    defaultNetwork: livenet,
    livenet: livenet,
    mainnet: livenet,
    testnet: testnet,
    regtest: regtest,
    stn: stn,
    get: get,
    enableRegtest: enableRegtest,
    disableRegtest: disableRegtest,
    enableStn: enableStn,
    disableStn: disableStn
};

},{"./util/_":"f1m1Z","./util/js":"it7yM"}],"it7yM":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var $ = require("./preconditions");
/**
 * Determines whether a string contains only hexadecimal values
 *
 * @name JSUtil.isHexa
 * @param {string} value
 * @return {boolean} true if the string is the hexa representation of a number
 */ var isHexa = function isHexa(value) {
    if (!_.isString(value)) return false;
    return /^[0-9a-fA-F]+$/.test(value);
};
/**
 * @namespace JSUtil
 */ module.exports = {
    /**
   * Test if an argument is a valid JSON object. If it is, returns a truthy
   * value (the json object decoded), so no double JSON.parse call is necessary
   *
   * @param {string} arg
   * @return {Object|boolean} false if the argument is not a JSON string.
   */ isValidJSON: function isValidJSON(arg) {
        var parsed;
        if (!_.isString(arg)) return false;
        try {
            parsed = JSON.parse(arg);
        } catch (e) {
            return false;
        }
        if (typeof parsed === "object") return true;
        return false;
    },
    isHexa: isHexa,
    isHexaString: isHexa,
    /**
   * Define immutable properties on a target object
   *
   * @param {Object} target - An object to be extended
   * @param {Object} values - An object of properties
   * @return {Object} The target object
   */ defineImmutable: function defineImmutable(target, values) {
        Object.keys(values).forEach(function(key) {
            Object.defineProperty(target, key, {
                configurable: false,
                enumerable: true,
                value: values[key]
            });
        });
        return target;
    },
    /**
   * Checks that a value is a natural number, a positive integer or zero.
   *
   * @param {*} value
   * @return {Boolean}
   */ isNaturalNumber: function isNaturalNumber(value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value && value >= 0;
    },
    /**
   * Transform a 4-byte integer (unsigned value) into a Buffer of length 4 (Big Endian Byte Order)
   *
   * @param {number} integer
   * @return {Buffer}
   */ integerAsBuffer: function integerAsBuffer(integer) {
        $.checkArgumentType(integer, "number", "integer");
        const buf = Buffer.allocUnsafe(4);
        buf.writeUInt32BE(integer, 0);
        return buf;
    }
};

},{"buffer":"fCgem","../util/_":"f1m1Z","./preconditions":"c91dJ"}],"cwKNK":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var BN = require("./crypto/bn");
var Point = require("./crypto/point");
var Hash = require("./crypto/hash");
var JSUtil = require("./util/js");
var Network = require("./networks");
var _ = require("./util/_");
var $ = require("./util/preconditions");
/**
 * Instantiate a PublicKey from a {@link PrivateKey}, {@link Point}, `string`, or `Buffer`.
 *
 * There are two internal properties, `network` and `compressed`, that deal with importing
 * a PublicKey from a PrivateKey in WIF format. More details described on {@link PrivateKey}
 *
 * @example
 * ```javascript
 * // instantiate from a private key
 * var key = PublicKey(privateKey, true);
 *
 * // export to as a DER hex encoded string
 * var exported = key.toString();
 *
 * // import the public key
 * var imported = PublicKey.fromString(exported);
 * ```
 *
 * @param {string} data - The encoded data in various formats
 * @param {Object} extra - additional options
 * @param {Network=} extra.network - Which network should the address for this public key be for
 * @param {String=} extra.compressed - If the public key is compressed
 * @returns {PublicKey} A new valid instance of an PublicKey
 * @constructor
 */ function PublicKey(data, extra) {
    if (!(this instanceof PublicKey)) return new PublicKey(data, extra);
    $.checkArgument(data, "First argument is required, please include public key data.");
    if (data instanceof PublicKey) // Return copy, but as it's an immutable object, return same argument
    return data;
    extra = extra || {};
    var info = this._classifyArgs(data, extra);
    // validation
    info.point.validate();
    JSUtil.defineImmutable(this, {
        point: info.point,
        compressed: info.compressed,
        network: info.network || Network.defaultNetwork
    });
    return this;
}
/**
 * Internal function to differentiate between arguments passed to the constructor
 * @param {*} data
 * @param {Object} extra
 */ PublicKey.prototype._classifyArgs = function(data, extra) {
    var info = {
        compressed: _.isUndefined(extra.compressed) || extra.compressed
    };
    // detect type of data
    if (data instanceof Point) info.point = data;
    else if (data.x && data.y) info = PublicKey._transformObject(data);
    else if (typeof data === "string") info = PublicKey._transformDER(Buffer.from(data, "hex"));
    else if (PublicKey._isBuffer(data)) info = PublicKey._transformDER(data);
    else if (PublicKey._isPrivateKey(data)) info = PublicKey._transformPrivateKey(data);
    else throw new TypeError("First argument is an unrecognized data format.");
    if (!info.network) info.network = _.isUndefined(extra.network) ? undefined : Network.get(extra.network);
    return info;
};
/**
 * Internal function to detect if an object is a {@link PrivateKey}
 *
 * @param {*} param - object to test
 * @returns {boolean}
 * @private
 */ PublicKey._isPrivateKey = function(param) {
    var PrivateKey = require("./privatekey");
    return param instanceof PrivateKey;
};
/**
 * Internal function to detect if an object is a Buffer
 *
 * @param {*} param - object to test
 * @returns {boolean}
 * @private
 */ PublicKey._isBuffer = function(param) {
    return param instanceof Buffer || param instanceof Uint8Array;
};
/**
 * Internal function to transform a private key into a public key point
 *
 * @param {PrivateKey} privkey - An instance of PrivateKey
 * @returns {Object} An object with keys: point and compressed
 * @private
 */ PublicKey._transformPrivateKey = function(privkey) {
    $.checkArgument(PublicKey._isPrivateKey(privkey), "Must be an instance of PrivateKey");
    var info = {};
    info.point = Point.getG().mul(privkey.bn);
    info.compressed = privkey.compressed;
    info.network = privkey.network;
    return info;
};
/**
 * Internal function to transform DER into a public key point
 *
 * @param {Buffer} buf - An DER buffer
 * @param {bool=} strict - if set to false, will loosen some conditions
 * @returns {Object} An object with keys: point and compressed
 * @private
 */ PublicKey._transformDER = function(buf, strict) {
    $.checkArgument(PublicKey._isBuffer(buf), "Must be a buffer of DER encoded public key");
    var info = {};
    strict = _.isUndefined(strict) ? true : strict;
    var x;
    var y;
    var xbuf;
    var ybuf;
    if (buf[0] === 0x04 || !strict && (buf[0] === 0x06 || buf[0] === 0x07)) {
        xbuf = buf.slice(1, 33);
        ybuf = buf.slice(33, 65);
        if (xbuf.length !== 32 || ybuf.length !== 32 || buf.length !== 65) throw new TypeError("Length of x and y must be 32 bytes");
        x = new BN(xbuf);
        y = new BN(ybuf);
        info.point = new Point(x, y);
        info.compressed = false;
    } else if (buf[0] === 0x03) {
        xbuf = buf.slice(1);
        x = new BN(xbuf);
        info = PublicKey._transformX(true, x);
        info.compressed = true;
    } else if (buf[0] === 0x02) {
        xbuf = buf.slice(1);
        x = new BN(xbuf);
        info = PublicKey._transformX(false, x);
        info.compressed = true;
    } else throw new TypeError("Invalid DER format public key");
    return info;
};
/**
 * Internal function to transform X into a public key point
 *
 * @param {Boolean} odd - If the point is above or below the x axis
 * @param {Point} x - The x point
 * @returns {Object} An object with keys: point and compressed
 * @private
 */ PublicKey._transformX = function(odd, x) {
    $.checkArgument(typeof odd === "boolean", "Must specify whether y is odd or not (true or false)");
    var info = {};
    info.point = Point.fromX(odd, x);
    return info;
};
/**
 * Internal function to transform a JSON into a public key point
 *
 * @param {String|Object} json - a JSON string or plain object
 * @returns {Object} An object with keys: point and compressed
 * @private
 */ PublicKey._transformObject = function(json) {
    var x = new BN(json.x, "hex");
    var y = new BN(json.y, "hex");
    var point = new Point(x, y);
    return new PublicKey(point, {
        compressed: json.compressed
    });
};
/**
 * Instantiate a PublicKey from a PrivateKey
 *
 * @param {PrivateKey} privkey - An instance of PrivateKey
 * @returns {PublicKey} A new valid instance of PublicKey
 */ PublicKey.fromPrivateKey = function(privkey) {
    $.checkArgument(PublicKey._isPrivateKey(privkey), "Must be an instance of PrivateKey");
    var info = PublicKey._transformPrivateKey(privkey);
    return new PublicKey(info.point, {
        compressed: info.compressed,
        network: info.network
    });
};
/**
 * Instantiate a PublicKey from a Buffer
 * @param {Buffer} buf - A DER buffer
 * @param {bool=} strict - if set to false, will loosen some conditions
 * @returns {PublicKey} A new valid instance of PublicKey
 */ PublicKey.fromDER = PublicKey.fromBuffer = function(buf, strict) {
    $.checkArgument(PublicKey._isBuffer(buf), "Must be a buffer of DER encoded public key");
    var info = PublicKey._transformDER(buf, strict);
    return new PublicKey(info.point, {
        compressed: info.compressed
    });
};
/**
 * Instantiate a PublicKey from a Point
 *
 * @param {Point} point - A Point instance
 * @param {boolean=} compressed - whether to store this public key as compressed format
 * @returns {PublicKey} A new valid instance of PublicKey
 */ PublicKey.fromPoint = function(point, compressed) {
    $.checkArgument(point instanceof Point, "First argument must be an instance of Point.");
    return new PublicKey(point, {
        compressed: compressed
    });
};
/**
 * Instantiate a PublicKey from a DER hex encoded string
 *
 * @param {string} str - A DER hex string
 * @param {String=} encoding - The type of string encoding
 * @returns {PublicKey} A new valid instance of PublicKey
 */ PublicKey.fromHex = PublicKey.fromString = function(str, encoding) {
    var buf = Buffer.from(str, encoding || "hex");
    var info = PublicKey._transformDER(buf);
    return new PublicKey(info.point, {
        compressed: info.compressed
    });
};
/**
 * Instantiate a PublicKey from an X Point
 *
 * @param {Boolean} odd - If the point is above or below the x axis
 * @param {Point} x - The x point
 * @returns {PublicKey} A new valid instance of PublicKey
 */ PublicKey.fromX = function(odd, x) {
    var info = PublicKey._transformX(odd, x);
    return new PublicKey(info.point, {
        compressed: info.compressed
    });
};
/**
 * Check if there would be any errors when initializing a PublicKey
 *
 * @param {string} data - The encoded data in various formats
 * @returns {null|Error} An error if exists
 */ PublicKey.getValidationError = function(data) {
    var error;
    try {
        new PublicKey(data) // eslint-disable-line
        ;
    } catch (e) {
        error = e;
    }
    return error;
};
/**
 * Check if the parameters are valid
 *
 * @param {string} data - The encoded data in various formats
 * @returns {Boolean} If the public key would be valid
 */ PublicKey.isValid = function(data) {
    return !PublicKey.getValidationError(data);
};
/**
 * @returns {Object} A plain object of the PublicKey
 */ PublicKey.prototype.toObject = PublicKey.prototype.toJSON = function toObject() {
    return {
        x: this.point.getX().toString("hex", 2),
        y: this.point.getY().toString("hex", 2),
        compressed: this.compressed
    };
};
/**
 * Will output the PublicKey to a DER Buffer
 *
 * @returns {Buffer} A DER hex encoded buffer
 */ PublicKey.prototype.toBuffer = PublicKey.prototype.toDER = function() {
    var x = this.point.getX();
    var y = this.point.getY();
    var xbuf = x.toBuffer({
        size: 32
    });
    var ybuf = y.toBuffer({
        size: 32
    });
    var prefix;
    if (!this.compressed) {
        prefix = Buffer.from([
            0x04
        ]);
        return Buffer.concat([
            prefix,
            xbuf,
            ybuf
        ]);
    } else {
        var odd = ybuf[ybuf.length - 1] % 2;
        if (odd) prefix = Buffer.from([
            0x03
        ]);
        else prefix = Buffer.from([
            0x02
        ]);
        return Buffer.concat([
            prefix,
            xbuf
        ]);
    }
};
/**
 * Will return a sha256 + ripemd160 hash of the serialized public key
 * @see https://github.com/bitcoin/bitcoin/blob/master/src/pubkey.h#L141
 * @returns {Buffer}
 */ PublicKey.prototype._getID = function _getID() {
    return Hash.sha256ripemd160(this.toBuffer());
};
/**
 * Will return an address for the public key
 *
 * @param {String|Network=} network - Which network should the address be for
 * @returns {Address} An address generated from the public key
 */ PublicKey.prototype.toAddress = function(network) {
    var Address = require("./address");
    return Address.fromPublicKey(this, network || this.network);
};
/**
 * Will output the PublicKey to a DER encoded hex string
 *
 * @returns {string} A DER hex encoded string
 */ PublicKey.prototype.toString = PublicKey.prototype.toHex = function() {
    return this.toDER().toString("hex");
};
/**
 * Will return a string formatted for the console
 *
 * @returns {string} Public key
 */ PublicKey.prototype.inspect = function() {
    return "<PublicKey: " + this.toHex() + (this.compressed ? "" : ", uncompressed") + ">";
};
module.exports = PublicKey;

},{"buffer":"fCgem","./crypto/bn":"35huv","./crypto/point":"2XxZb","./crypto/hash":"jgMGE","./util/js":"it7yM","./networks":"ai5AV","./util/_":"f1m1Z","./util/preconditions":"c91dJ","./privatekey":"7qwA7","./address":"lDqbu"}],"35huv":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var BN = require("bn.js");
var $ = require("../util/preconditions");
var _ = require("../util/_");
var reversebuf = function(buf) {
    var buf2 = Buffer.alloc(buf.length);
    for(var i = 0; i < buf.length; i++)buf2[i] = buf[buf.length - 1 - i];
    return buf2;
};
BN.Zero = new BN(0);
BN.One = new BN(1);
BN.Minus1 = new BN(-1);
/**
 * Convert a number into a big number.
 *
 * @param {number} n Any positive or negative integer.
 */ BN.fromNumber = function(n) {
    $.checkArgument(_.isNumber(n));
    return new BN(n);
};
/**
 * Convert a string number into a big number.
 *
 * @param {string} str Any positive or negative integer formatted as a string.
 * @param {number} base The base of the number, defaults to 10.
 */ BN.fromString = function(str, base) {
    $.checkArgument(_.isString(str));
    return new BN(str, base);
};
/**
 * Convert a buffer (such as a 256 bit binary private key) into a big number.
 * Sometimes these numbers can be formatted either as 'big endian' or 'little
 * endian', and so there is an opts parameter that lets you specify which
 * endianness is specified.
 *
 * @param {Buffer} buf A buffer number, such as a 256 bit hash or key.
 * @param {Object} opts With a property 'endian' that can be either 'big' or 'little'. Defaults big endian (most significant digit first).
 */ BN.fromBuffer = function(buf, opts) {
    if (typeof opts !== "undefined" && opts.endian === "little") buf = reversebuf(buf);
    var hex = buf.toString("hex");
    var bn = new BN(hex, 16);
    return bn;
};
/**
 * Instantiate a BigNumber from a "signed magnitude buffer". (a buffer where the
 * most significant bit represents the sign (0 = positive, 1 = negative)
 *
 * @param {Buffer} buf A buffer number, such as a 256 bit hash or key.
 * @param {Object} opts With a property 'endian' that can be either 'big' or 'little'. Defaults big endian (most significant digit first).
 */ BN.fromSM = function(buf, opts) {
    var ret;
    if (buf.length === 0) return BN.fromBuffer(Buffer.from([
        0
    ]));
    var endian = "big";
    if (opts) endian = opts.endian;
    if (endian === "little") buf = reversebuf(buf);
    if (buf[0] & 0x80) {
        buf[0] = buf[0] & 0x7f;
        ret = BN.fromBuffer(buf);
        ret.neg().copy(ret);
    } else ret = BN.fromBuffer(buf);
    return ret;
};
/**
 * Convert a big number into a number.
 */ BN.prototype.toNumber = function() {
    return parseInt(this.toString(10), 10);
};
/**
 * Convert a big number into a buffer. This is somewhat ambiguous, so there is
 * an opts parameter that let's you specify the endianness or the size.
 * opts.endian can be either 'big' or 'little' and opts.size can be any
 * sufficiently large number of bytes. If you always want to create a 32 byte
 * big endian number, then specify opts = { endian: 'big', size: 32 }
 *
 * @param {Object} opts Defaults to { endian: 'big', size: 32 }
 */ BN.prototype.toBuffer = function(opts) {
    var buf, hex;
    if (opts && opts.size) {
        hex = this.toString(16, 2);
        var natlen = hex.length / 2;
        buf = Buffer.from(hex, "hex");
        if (natlen === opts.size) ;
        else if (natlen > opts.size) buf = BN.trim(buf, natlen);
        else if (natlen < opts.size) buf = BN.pad(buf, natlen, opts.size);
    } else {
        hex = this.toString(16, 2);
        buf = Buffer.from(hex, "hex");
    }
    if (typeof opts !== "undefined" && opts.endian === "little") buf = reversebuf(buf);
    return buf;
};
/**
 * For big numbers that are either positive or negative, you can convert to
 * "sign magnitude" format whereby the first bit specifies whether the number is
 * positive or negative.
 */ BN.prototype.toSMBigEndian = function() {
    var buf;
    if (this.cmp(BN.Zero) === -1) {
        buf = this.neg().toBuffer();
        if (buf[0] & 0x80) buf = Buffer.concat([
            Buffer.from([
                0x80
            ]),
            buf
        ]);
        else buf[0] = buf[0] | 0x80;
    } else {
        buf = this.toBuffer();
        if (buf[0] & 0x80) buf = Buffer.concat([
            Buffer.from([
                0x00
            ]),
            buf
        ]);
    }
    if (buf.length === 1 & buf[0] === 0) buf = Buffer.from([]);
    return buf;
};
/**
 * For big numbers that are either positive or negative, you can convert to
 * "sign magnitude" format whereby the first bit specifies whether the number is
 * positive or negative.
 *
 * @param {Object} opts Defaults to { endian: 'big' }
 */ BN.prototype.toSM = function(opts) {
    var endian = opts ? opts.endian : "big";
    var buf = this.toSMBigEndian();
    if (endian === "little") buf = reversebuf(buf);
    return buf;
};
/**
 * Create a BN from a "ScriptNum": This is analogous to the constructor for
 * CScriptNum in bitcoind. Many ops in bitcoind's script interpreter use
 * CScriptNum, which is not really a proper bignum. Instead, an error is thrown
 * if trying to input a number bigger than 4 bytes. We copy that behavior here.
 * A third argument, `size`, is provided to extend the hard limit of 4 bytes, as
 * some usages require more than 4 bytes.
 *
 * @param {Buffer} buf A buffer of a number.
 * @param {boolean} fRequireMinimal Whether to require minimal size encoding.
 * @param {number} size The maximum size.
 */ BN.fromScriptNumBuffer = function(buf, fRequireMinimal, size) {
    var nMaxNumSize = size || 4;
    $.checkArgument(buf.length <= nMaxNumSize, new Error("script number overflow"));
    if (fRequireMinimal && buf.length > 0) // Check that the number is encoded with the minimum possible
    // number of bytes.
    //
    // If the most-significant-byte - excluding the sign bit - is zero
    // then we're not minimal. Note how this test also rejects the
    // negative-zero encoding, 0x80.
    {
        if ((buf[buf.length - 1] & 0x7f) === 0) {
            // One exception: if there's more than one byte and the most
            // significant bit of the second-most-significant-byte is set
            // it would conflict with the sign bit. An example of this case
            // is +-255, which encode to 0xff00 and 0xff80 respectively.
            // (big-endian).
            if (buf.length <= 1 || (buf[buf.length - 2] & 0x80) === 0) throw new Error("non-minimally encoded script number");
        }
    }
    return BN.fromSM(buf, {
        endian: "little"
    });
};
/**
 * The corollary to the above, with the notable exception that we do not throw
 * an error if the output is larger than four bytes. (Which can happen if
 * performing a numerical operation that results in an overflow to more than 4
 * bytes).
 */ BN.prototype.toScriptNumBuffer = function() {
    return this.toSM({
        endian: "little"
    });
};
/**
 * Trims a buffer if it starts with zeros.
 *
 * @param {Buffer} buf A buffer formatted number.
 * @param {number} natlen The natural length of the number.
 */ BN.trim = function(buf, natlen) {
    return buf.slice(natlen - buf.length, buf.length);
};
/**
 * Adds extra zeros to the start of a number.
 *
 * @param {Buffer} buf A buffer formatted number.
 * @param {number} natlen The natural length of the number.
 * @param {number} size How big to pad the number in bytes.
 */ BN.pad = function(buf, natlen, size) {
    var rbuf = Buffer.alloc(size);
    for(var i = 0; i < buf.length; i++)rbuf[rbuf.length - 1 - i] = buf[buf.length - 1 - i];
    for(i = 0; i < size - natlen; i++)rbuf[i] = 0;
    return rbuf;
};
/**
 * Convert a big number into a hex string. This is somewhat ambiguous, so there
 * is an opts parameter that let's you specify the endianness or the size.
 * opts.endian can be either 'big' or 'little' and opts.size can be any
 * sufficiently large number of bytes. If you always want to create a 32 byte
 * big endian number, then specify opts = { endian: 'big', size: 32 }
 *
 * @param {Object} opts Defaults to { endian: 'big', size: 32 }
 */ BN.prototype.toHex = function(...args) {
    return this.toBuffer(...args).toString("hex");
};
/**
 * Convert a hex string (such as a 256 bit binary private key) into a big
 * number. Sometimes these numbers can be formatted either as 'big endian' or
 * 'little endian', and so there is an opts parameter that lets you specify
 * which endianness is specified.
 *
 * @param {Buffer} buf A buffer number, such as a 256 bit hash or key.
 * @param {Object} opts With a property 'endian' that can be either 'big' or 'little'. Defaults big endian (most significant digit first).
 */ BN.fromHex = function(hex, ...args) {
    return BN.fromBuffer(Buffer.from(hex, "hex"), ...args);
};
module.exports = BN;

},{"buffer":"fCgem","bn.js":"VopIn","../util/preconditions":"c91dJ","../util/_":"f1m1Z"}],"VopIn":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        Buffer = require("buffer").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") start++;
        if (base === 16) this._parseHex(number, start);
        else this._parseBase(number, base, start);
        if (number[0] === "-") this.negative = 1;
        this.strip();
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r <<= 4;
            // 'a' - 'f'
            if (c >= 49 && c <= 54) r |= c - 49 + 0xa;
            else if (c >= 17 && c <= 22) r |= c - 17 + 0xa;
            else r |= c & 0xf;
        }
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        // Scan 24-bit chunks and add them to the number
        var off = 0;
        for(i = number.length - 6, j = 0; i >= start; i -= 6){
            w = parseHex(number, i, i + 6);
            this.words[j] |= w << off & 0x3ffffff;
            // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
            this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        if (i + 6 !== start) {
            w = parseHex(number, start, i + 6);
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"buffer":"f2Ci1"}],"f2Ci1":[function(require,module,exports) {
"use strict";

},{}],"2XxZb":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var BN = require("./bn");
var EC = require("elliptic").ec;
var ec = new EC("secp256k1");
var ecPoint = ec.curve.point.bind(ec.curve);
var ecPointFromX = ec.curve.pointFromX.bind(ec.curve);
/**
 * Instantiate a valid secp256k1 Point from the X and Y coordinates. This class
 * is just an extension of the secp256k1 code from the library "elliptic" by
 * Fedor Indutny. It includes a few extra features that are useful in Bitcoin.
 *
 * @param {BN|String} x - The X coordinate
 * @param {BN|String} y - The Y coordinate
 * @link https://github.com/indutny/elliptic
 * @augments elliptic.curve.point
 * @throws {Error} A validation error if exists
 * @returns {Point} An instance of Point
 * @constructor
 */ var Point = function Point(x, y, isRed) {
    try {
        var point = ecPoint(x, y, isRed);
    } catch (e) {
        throw new Error("Invalid Point");
    }
    point.validate();
    return point;
};
Point.prototype = Object.getPrototypeOf(ec.curve.point());
/**
 *
 * Instantiate a valid secp256k1 Point from only the X coordinate. This is
 * useful to rederive a full point from the compressed form of a point.
 *
 * @param {boolean} odd - If the Y coordinate is odd
 * @param {BN|String} x - The X coordinate
 * @throws {Error} A validation error if exists
 * @returns {Point} An instance of Point
 */ Point.fromX = function fromX(odd, x) {
    try {
        var point = ecPointFromX(x, odd);
    } catch (e) {
        throw new Error("Invalid X");
    }
    point.validate();
    return point;
};
/**
 *
 * Will return a secp256k1 ECDSA base point.
 *
 * @link https://en.bitcoin.it/wiki/Secp256k1
 * @returns {Point} An instance of the base point.
 */ Point.getG = function getG() {
    return ec.curve.g;
};
/**
 *
 * Will return the max of range of valid private keys as governed by the
 * secp256k1 ECDSA standard.
 *
 * @link https://en.bitcoin.it/wiki/Private_key#Range_of_valid_ECDSA_private_keys
 * @returns {BN} A BN instance of the number of points on the curve
 */ Point.getN = function getN() {
    return new BN(ec.curve.n.toArray());
};
if (!Point.prototype._getX) Point.prototype._getX = Point.prototype.getX;
/**
 * Will return the X coordinate of the Point.
 *
 * @returns {BN} A BN instance of the X coordinate
 */ Point.prototype.getX = function getX() {
    return new BN(this._getX().toArray());
};
if (!Point.prototype._getY) Point.prototype._getY = Point.prototype.getY;
/**
 * Will return the Y coordinate of the Point.
 *
 * @returns {BN} A BN instance of the Y coordinate
 */ Point.prototype.getY = function getY() {
    return new BN(this._getY().toArray());
};
/**
 * Will determine if the point is valid.
 *
 * @link https://www.iacr.org/archive/pkc2003/25670211/25670211.pdf
 * @throws {Error} A validation error if exists
 * @returns {Point} An instance of the same Point
 */ Point.prototype.validate = function validate() {
    if (this.isInfinity()) throw new Error("Point cannot be equal to Infinity");
    var p2;
    try {
        p2 = ecPointFromX(this.getX(), this.getY().isOdd());
    } catch (e) {
        throw new Error("Point does not lie on the curve");
    }
    if (p2.y.cmp(this.y) !== 0) throw new Error("Invalid y value for curve.");
    // todo: needs test case
    if (!this.mul(Point.getN()).isInfinity()) throw new Error("Point times N must be infinity");
    return this;
};
/**
 * A "compressed" format point is the X part of the (X, Y) point plus an extra
 * bit (which takes an entire byte) to indicate whether the Y value is odd or
 * not. Storing points this way takes a bit less space, but requires a bit more
 * computation to rederive the full point.
 *
 * @param {Point} point An instance of Point.
 * @returns {Buffer} A compressed point in the form of a buffer.
 */ Point.pointToCompressed = function pointToCompressed(point) {
    var xbuf = point.getX().toBuffer({
        size: 32
    });
    var ybuf = point.getY().toBuffer({
        size: 32
    });
    var prefix;
    var odd = ybuf[ybuf.length - 1] % 2;
    if (odd) prefix = Buffer.from([
        0x03
    ]);
    else prefix = Buffer.from([
        0x02
    ]);
    return Buffer.concat([
        prefix,
        xbuf
    ]);
};
/**
 * Converts a compressed buffer into a point.
 *
 * @param {Buffer} buf A compressed point.
 * @returns {Point} A Point.
 */ Point.pointFromCompressed = function(buf) {
    if (buf.length !== 33) throw new Error("invalid buffer length");
    let prefix = buf[0];
    let odd;
    if (prefix === 0x03) odd = true;
    else if (prefix === 0x02) odd = false;
    else throw new Error("invalid value of compressed prefix");
    let xbuf = buf.slice(1, 33);
    let x = BN.fromBuffer(xbuf);
    return Point.fromX(odd, x);
};
/**
 * Convert point to a compressed buffer.
 *
 * @returns {Buffer} A compressed point.
 */ Point.prototype.toBuffer = function() {
    return Point.pointToCompressed(this);
};
/**
 * Convert point to a compressed hex string.
 *
 * @returns {string} A compressed point as a hex string.
 */ Point.prototype.toHex = function() {
    return this.toBuffer().toString("hex");
};
/**
 * Converts a compressed buffer into a point.
 *
 * @param {Buffer} buf A compressed point.
 * @returns {Point} A Point.
 */ Point.fromBuffer = function(buf) {
    return Point.pointFromCompressed(buf);
};
/**
 * Converts a compressed buffer into a point.
 *
 * @param {Buffer} hex A compressed point as a hex string.
 * @returns {Point} A Point.
 */ Point.fromHex = function(hex) {
    return Point.fromBuffer(Buffer.from(hex, "hex"));
};
module.exports = Point;

},{"buffer":"fCgem","./bn":"35huv","elliptic":"1NKsH"}],"1NKsH":[function(require,module,exports) {
"use strict";
var elliptic = exports;
elliptic.version = require("../package.json").version;
elliptic.utils = require("./elliptic/utils");
elliptic.rand = require("brorand");
elliptic.curve = require("./elliptic/curve");
elliptic.curves = require("./elliptic/curves");
// Protocols
elliptic.ec = require("./elliptic/ec");
elliptic.eddsa = require("./elliptic/eddsa");

},{"../package.json":"bvED4","./elliptic/utils":"8sNT5","brorand":"8FGdh","./elliptic/curve":"72OoG","./elliptic/curves":"6yRo9","./elliptic/ec":"5gDK1","./elliptic/eddsa":"jPbam"}],"bvED4":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"elliptic","version":"6.5.4","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"}}');

},{}],"8sNT5":[function(require,module,exports) {
"use strict";
var utils = exports;
var BN = require("bn.js");
var minAssert = require("minimalistic-assert");
var minUtils = require("minimalistic-crypto-utils");
utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;
// Represent num in a w-NAF form
function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
utils.getNAF = getNAF;
// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
    var jsf = [
        [],
        [], 
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
utils.getJSF = getJSF;
function cachedProperty(obj, name, computer) {
    var key = "_" + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
utils.cachedProperty = cachedProperty;
function parseBytes(bytes) {
    return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
}
utils.parseBytes = parseBytes;
function intFromLE(bytes) {
    return new BN(bytes, "hex", "le");
}
utils.intFromLE = intFromLE;

},{"bn.js":"VopIn","minimalistic-assert":"8OvWh","minimalistic-crypto-utils":"6f39G"}],"6f39G":[function(require,module,exports) {
"use strict";
var utils = exports;
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== "string") {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0) msg = "0" + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
utils.toArray = toArray;
function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
utils.zero2 = zero2;
function toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
utils.toHex = toHex;
utils.encode = function encode(arr, enc) {
    if (enc === "hex") return toHex(arr);
    else return arr;
};

},{}],"8FGdh":[function(require,module,exports) {
var r;
module.exports = function rand(len) {
    if (!r) r = new Rand(null);
    return r.generate(len);
};
function Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = Rand;
Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};
if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === "object") // Old junk
    Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
    };
} else // Node.js or Web worker with no crypto support
try {
    var crypto = require("crypto");
    if (typeof crypto.randomBytes !== "function") throw new Error("Not supported");
    Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
    };
} catch (e) {}

},{"crypto":"f2Ci1"}],"72OoG":[function(require,module,exports) {
"use strict";
var curve = exports;
curve.base = require("./base");
curve.short = require("./short");
curve.mont = require("./mont");
curve.edwards = require("./edwards");

},{"./base":"kvY1a","./short":"e7TRt","./mont":"2JhQH","./edwards":"3idNZ"}],"kvY1a":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var utils = require("../utils");
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
};
BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === "affine") {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === "affine" ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            p;
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
};
BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    throw new Error("Unknown point format");
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);
    if (compact) return [
        this.getY().isEven() ? 0x02 : 0x03
    ].concat(x);
    return [
        0x04
    ].concat(x, this.getY().toArray("be", len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

},{"bn.js":"VopIn","../utils":"8sNT5"}],"e7TRt":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var BN = require("bn.js");
var inherits = require("inherits");
var Base = require("./base");
var assert = utils.assert;
function ShortCurve(conf) {
    Base.call(this, "short", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new BN(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }, 
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits(Point, Base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string") obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq(p) {
    if (p.type === "affine") return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

},{"../utils":"8sNT5","bn.js":"VopIn","inherits":"9GopK","./base":"kvY1a"}],"9GopK":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"2JhQH":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var inherits = require("inherits");
var Base = require("./base");
var utils = require("../utils");
function MontCurve(conf) {
    Base.call(this, "mont", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;
MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, "projective");
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
inherits(Point, Base.BasePoint);
MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
};
MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
};
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
Point.prototype.precompute = function precompute() {
// No-op
};
Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
Point.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

},{"bn.js":"VopIn","inherits":"9GopK","./base":"kvY1a","../utils":"8sNT5"}],"3idNZ":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var BN = require("bn.js");
var inherits = require("inherits");
var Base = require("./base");
var assert = utils.assert;
function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, "edwards", conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;
EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error("invalid point");
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error("invalid point");
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, "projective");
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits(Point, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":"8sNT5","bn.js":"VopIn","inherits":"9GopK","./base":"kvY1a"}],"6yRo9":[function(require,module,exports) {
"use strict";
var curves = exports;
var hash = require("hash.js");
var curve = require("./curve");
var utils = require("./utils");
var assert = utils.assert;
function PresetCurve(options) {
    if (options.type === "short") this.curve = new curve.short(options);
    else if (options.type === "edwards") this.curve = new curve.edwards(options);
    else this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), "Invalid curve");
    assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
}
curves.PresetCurve = PresetCurve;
function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: hash.sha256,
    gRed: false,
    g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811", 
    ]
});
defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: hash.sha256,
    gRed: false,
    g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34", 
    ]
});
defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: hash.sha256,
    gRed: false,
    g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5", 
    ]
});
defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f", 
    ]
});
defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650", 
    ]
});
defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: [
        "9", 
    ]
});
defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    // -121665 * (121666^(-1)) (mod P)
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658", 
    ]
});
var pre;
try {
    pre = require("./precomputed/secp256k1");
} catch (e) {
    pre = undefined;
}
defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: hash.sha256,
    // Precomputed endomorphism
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
        {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
        }, 
    ],
    gRed: false,
    g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre, 
    ]
});

},{"hash.js":"gOEGU","./curve":"72OoG","./utils":"8sNT5","./precomputed/secp256k1":"lgNSV"}],"lgNSV":[function(require,module,exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821", 
            ],
            [
                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf", 
            ],
            [
                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695", 
            ],
            [
                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9", 
            ],
            [
                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36", 
            ],
            [
                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f", 
            ],
            [
                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999", 
            ],
            [
                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09", 
            ],
            [
                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d", 
            ],
            [
                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088", 
            ],
            [
                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d", 
            ],
            [
                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8", 
            ],
            [
                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a", 
            ],
            [
                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453", 
            ],
            [
                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160", 
            ],
            [
                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0", 
            ],
            [
                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6", 
            ],
            [
                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589", 
            ],
            [
                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17", 
            ],
            [
                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda", 
            ],
            [
                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd", 
            ],
            [
                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2", 
            ],
            [
                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6", 
            ],
            [
                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f", 
            ],
            [
                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01", 
            ],
            [
                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3", 
            ],
            [
                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f", 
            ],
            [
                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7", 
            ],
            [
                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78", 
            ],
            [
                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1", 
            ],
            [
                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150", 
            ],
            [
                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82", 
            ],
            [
                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc", 
            ],
            [
                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b", 
            ],
            [
                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51", 
            ],
            [
                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45", 
            ],
            [
                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120", 
            ],
            [
                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84", 
            ],
            [
                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d", 
            ],
            [
                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d", 
            ],
            [
                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8", 
            ],
            [
                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8", 
            ],
            [
                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac", 
            ],
            [
                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f", 
            ],
            [
                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962", 
            ],
            [
                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907", 
            ],
            [
                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec", 
            ],
            [
                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d", 
            ],
            [
                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414", 
            ],
            [
                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd", 
            ],
            [
                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0", 
            ],
            [
                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811", 
            ],
            [
                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1", 
            ],
            [
                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c", 
            ],
            [
                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73", 
            ],
            [
                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd", 
            ],
            [
                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405", 
            ],
            [
                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589", 
            ],
            [
                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e", 
            ],
            [
                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27", 
            ],
            [
                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1", 
            ],
            [
                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482", 
            ],
            [
                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945", 
            ],
            [
                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573", 
            ],
            [
                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82", 
            ], 
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672", 
            ],
            [
                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6", 
            ],
            [
                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da", 
            ],
            [
                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37", 
            ],
            [
                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b", 
            ],
            [
                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81", 
            ],
            [
                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58", 
            ],
            [
                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77", 
            ],
            [
                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a", 
            ],
            [
                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c", 
            ],
            [
                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67", 
            ],
            [
                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402", 
            ],
            [
                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55", 
            ],
            [
                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482", 
            ],
            [
                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82", 
            ],
            [
                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396", 
            ],
            [
                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49", 
            ],
            [
                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf", 
            ],
            [
                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a", 
            ],
            [
                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7", 
            ],
            [
                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933", 
            ],
            [
                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a", 
            ],
            [
                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6", 
            ],
            [
                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37", 
            ],
            [
                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e", 
            ],
            [
                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6", 
            ],
            [
                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476", 
            ],
            [
                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40", 
            ],
            [
                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61", 
            ],
            [
                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683", 
            ],
            [
                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5", 
            ],
            [
                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b", 
            ],
            [
                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417", 
            ],
            [
                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868", 
            ],
            [
                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a", 
            ],
            [
                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6", 
            ],
            [
                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996", 
            ],
            [
                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e", 
            ],
            [
                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d", 
            ],
            [
                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2", 
            ],
            [
                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e", 
            ],
            [
                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437", 
            ],
            [
                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311", 
            ],
            [
                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4", 
            ],
            [
                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575", 
            ],
            [
                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d", 
            ],
            [
                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d", 
            ],
            [
                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629", 
            ],
            [
                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06", 
            ],
            [
                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374", 
            ],
            [
                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee", 
            ],
            [
                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1", 
            ],
            [
                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b", 
            ],
            [
                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661", 
            ],
            [
                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6", 
            ],
            [
                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e", 
            ],
            [
                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d", 
            ],
            [
                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc", 
            ],
            [
                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4", 
            ],
            [
                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c", 
            ],
            [
                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b", 
            ],
            [
                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913", 
            ],
            [
                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154", 
            ],
            [
                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865", 
            ],
            [
                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc", 
            ],
            [
                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224", 
            ],
            [
                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e", 
            ],
            [
                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6", 
            ],
            [
                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511", 
            ],
            [
                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b", 
            ],
            [
                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2", 
            ],
            [
                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c", 
            ],
            [
                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3", 
            ],
            [
                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d", 
            ],
            [
                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700", 
            ],
            [
                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4", 
            ],
            [
                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196", 
            ],
            [
                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4", 
            ],
            [
                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257", 
            ],
            [
                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13", 
            ],
            [
                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096", 
            ],
            [
                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38", 
            ],
            [
                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f", 
            ],
            [
                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448", 
            ],
            [
                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a", 
            ],
            [
                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4", 
            ],
            [
                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437", 
            ],
            [
                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7", 
            ],
            [
                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d", 
            ],
            [
                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a", 
            ],
            [
                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54", 
            ],
            [
                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77", 
            ],
            [
                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517", 
            ],
            [
                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10", 
            ],
            [
                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125", 
            ],
            [
                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e", 
            ],
            [
                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1", 
            ],
            [
                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2", 
            ],
            [
                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423", 
            ],
            [
                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8", 
            ],
            [
                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758", 
            ],
            [
                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375", 
            ],
            [
                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d", 
            ],
            [
                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec", 
            ],
            [
                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0", 
            ],
            [
                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c", 
            ],
            [
                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4", 
            ],
            [
                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f", 
            ],
            [
                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649", 
            ],
            [
                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826", 
            ],
            [
                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5", 
            ],
            [
                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87", 
            ],
            [
                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b", 
            ],
            [
                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc", 
            ],
            [
                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c", 
            ],
            [
                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f", 
            ],
            [
                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a", 
            ],
            [
                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46", 
            ],
            [
                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f", 
            ],
            [
                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03", 
            ],
            [
                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08", 
            ],
            [
                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8", 
            ],
            [
                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373", 
            ],
            [
                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3", 
            ],
            [
                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8", 
            ],
            [
                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1", 
            ],
            [
                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9", 
            ], 
        ]
    }
};

},{}],"5gDK1":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var HmacDRBG = require("hmac-drbg");
var utils = require("../utils");
var curves = require("../curves");
var rand = require("brorand");
var assert = utils.assert;
var KeyPair = require("./key");
var Signature = require("./signature");
function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === "string") {
        assert(Object.prototype.hasOwnProperty.call(curves, options), "Unknown curve " + options);
        options = curves[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for(;;){
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === "object") {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray("be", bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray("be", bytes);
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new Signature({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, "hex");
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, "The recovery param is more than two bits");
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e1) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error("Unable to find valid recovery factor");
};

},{"bn.js":"VopIn","hmac-drbg":"eMMR6","../utils":"8sNT5","../curves":"6yRo9","brorand":"8FGdh","./key":"c4oIH","./signature":"cRuxW"}],"eMMR6":[function(require,module,exports) {
"use strict";
var hash = require("hash.js");
var utils = require("minimalistic-crypto-utils");
var assert = require("minimalistic-assert");
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils.toArray(options.pers, options.persEnc || "hex");
    assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0x00
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        0x01
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
    // Optional encoding
    if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = utils.toArray(add, addEnc || "hex");
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
};

},{"hash.js":"gOEGU","minimalistic-crypto-utils":"6f39G","minimalistic-assert":"8OvWh"}],"c4oIH":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var utils = require("../utils");
var assert = utils.assert;
function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: "Invalid public key"
    };
    if (!pub.validate()) return {
        result: false,
        reason: "Public key is not a point"
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: "Public key * N != O"
    };
    return {
        result: true,
        reason: null
    };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === "string") {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex") return this.priv.toString(16, 2);
    else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === "mont") assert(key.x, "Need x coordinate");
        else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") assert(key.x && key.y, "Need both x and y coordinate");
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) assert(pub.validate(), "public point not validated");
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};

},{"bn.js":"VopIn","../utils":"8sNT5"}],"cRuxW":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var utils = require("../utils");
var assert = utils.assert;
function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert(options.r && options.s, "Signature without r or s");
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;
function Position() {
    this.place = 0;
}
function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) return initial;
    var octetLen = initial & 0xf;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 0x7f) return false;
    p.place = off;
    return val;
}
function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) return false;
    var len = getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 0x02) return false;
    var rlen = getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) return false;
    var slen = getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;
    return true;
};
function constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
    arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
    var arr = [
        0x02
    ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        0x30
    ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
};

},{"bn.js":"VopIn","../utils":"8sNT5"}],"jPbam":[function(require,module,exports) {
"use strict";
var hash = require("hash.js");
var curves = require("../curves");
var utils = require("../utils");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require("./key");
var Signature = require("./signature");
function EDDSA(curve) {
    assert(curve === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof EDDSA)) return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
}
module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
    return utils.intFromLE(hash.digest()).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};
EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};
EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature) return sig;
    return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
};
EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
};
EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

},{"hash.js":"gOEGU","../curves":"6yRo9","../utils":"8sNT5","./key":"hOVET","./signature":"a5qj9"}],"hOVET":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = parseBytes(params.pub);
}
KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(eddsa, {
        pub: pub
    });
};
KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair) return secret;
    return new KeyPair(eddsa, {
        secret: secret
    });
};
KeyPair.prototype.secret = function secret() {
    return this._secret;
};
cachedProperty(KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, "pub", function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, "privBytes", function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
cachedProperty(KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, "hash", function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
};
KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, "KeyPair is public only");
    return utils.encode(this.secret(), enc);
};
KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
};
module.exports = KeyPair;

},{"../utils":"8sNT5"}],"a5qj9":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var utils = require("../utils");
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== "object") sig = parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    assert(sig.R && sig.S, "Signature without R or S");
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof BN) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
cachedProperty(Signature, "S", function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, "R", function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), "hex").toUpperCase();
};
module.exports = Signature;

},{"bn.js":"VopIn","../utils":"8sNT5"}],"7qwA7":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("./util/_");
var Address = require("./address");
var Base58Check = require("./encoding/base58check");
var BN = require("./crypto/bn");
var JSUtil = require("./util/js");
var Networks = require("./networks");
var Point = require("./crypto/point");
var PublicKey = require("./publickey");
var Random = require("./crypto/random");
var $ = require("./util/preconditions");
/**
 * Instantiate a PrivateKey from a BN, Buffer or WIF string.
 *
 * @param {string} data - The encoded data in various formats
 * @param {Network|string=} network - a {@link Network} object, or a string with the network name
 * @returns {PrivateKey} A new valid instance of an PrivateKey
 * @constructor
 */ function PrivateKey(data, network) {
    if (!(this instanceof PrivateKey)) return new PrivateKey(data, network);
    if (data instanceof PrivateKey) return data;
    var info = this._classifyArguments(data, network);
    // validation
    if (!info.bn || info.bn.cmp(new BN(0)) === 0) throw new TypeError("Number can not be equal to zero, undefined, null or false");
    if (!info.bn.lt(Point.getN())) throw new TypeError("Number must be less than N");
    if (typeof info.network === "undefined") throw new TypeError('Must specify the network ("livenet" or "testnet")');
    JSUtil.defineImmutable(this, {
        bn: info.bn,
        compressed: info.compressed,
        network: info.network
    });
    Object.defineProperty(this, "publicKey", {
        configurable: false,
        enumerable: true,
        get: this.toPublicKey.bind(this)
    });
    return this;
}
/**
 * Internal helper to instantiate PrivateKey internal `info` object from
 * different kinds of arguments passed to the constructor.
 *
 * @param {*} data
 * @param {Network|string=} network - a {@link Network} object, or a string with the network name
 * @return {Object}
 */ PrivateKey.prototype._classifyArguments = function(data, network) {
    var info = {
        compressed: true,
        network: network ? Networks.get(network) : Networks.defaultNetwork
    };
    // detect type of data
    if (_.isUndefined(data) || _.isNull(data)) info.bn = PrivateKey._getRandomBN();
    else if (data instanceof BN) info.bn = data;
    else if (data instanceof Buffer || data instanceof Uint8Array) info = PrivateKey._transformBuffer(data, network);
    else if (data.bn && data.network) info = PrivateKey._transformObject(data);
    else if (!network && Networks.get(data)) {
        info.bn = PrivateKey._getRandomBN();
        info.network = Networks.get(data);
    } else if (typeof data === "string") {
        if (JSUtil.isHexa(data)) info.bn = new BN(Buffer.from(data, "hex"));
        else info = PrivateKey._transformWIF(data, network);
    } else throw new TypeError("First argument is an unrecognized data type.");
    return info;
};
/**
 * Internal function to get a random Big Number (BN)
 *
 * @returns {BN} A new randomly generated BN
 * @private
 */ PrivateKey._getRandomBN = function() {
    var condition;
    var bn;
    do {
        var privbuf = Random.getRandomBuffer(32);
        bn = BN.fromBuffer(privbuf);
        condition = bn.lt(Point.getN());
    }while (!condition);
    return bn;
};
/**
 * Internal function to transform a WIF Buffer into a private key
 *
 * @param {Buffer} buf - An WIF string
 * @param {Network|string=} network - a {@link Network} object, or a string with the network name
 * @returns {Object} An object with keys: bn, network and compressed
 * @private
 */ PrivateKey._transformBuffer = function(buf, network) {
    var info = {};
    if (buf.length === 32) return PrivateKey._transformBNBuffer(buf, network);
    info.network = Networks.get(buf[0], "privatekey");
    if (!info.network) throw new Error("Invalid network");
    if (network && info.network !== Networks.get(network)) throw new TypeError("Private key network mismatch");
    if (buf.length === 34 && buf[33] === 1) info.compressed = true;
    else if (buf.length === 33) info.compressed = false;
    else throw new Error("Length of buffer must be 33 (uncompressed) or 34 (compressed)");
    info.bn = BN.fromBuffer(buf.slice(1, 33));
    return info;
};
/**
 * Internal function to transform a BN buffer into a private key
 *
 * @param {Buffer} buf
 * @param {Network|string=} network - a {@link Network} object, or a string with the network name
 * @returns {object} an Object with keys: bn, network, and compressed
 * @private
 */ PrivateKey._transformBNBuffer = function(buf, network) {
    var info = {};
    info.network = Networks.get(network) || Networks.defaultNetwork;
    info.bn = BN.fromBuffer(buf);
    info.compressed = false;
    return info;
};
/**
 * Internal function to transform a WIF string into a private key
 *
 * @param {string} buf - An WIF string
 * @returns {Object} An object with keys: bn, network and compressed
 * @private
 */ PrivateKey._transformWIF = function(str, network) {
    return PrivateKey._transformBuffer(Base58Check.decode(str), network);
};
/**
 * Instantiate a PrivateKey from a Buffer with the DER or WIF representation
 *
 * @param {Buffer} buf
 * @param {Network} network
 * @return {PrivateKey}
 */ PrivateKey.fromBuffer = function(buf, network) {
    return new PrivateKey(buf, network);
};
PrivateKey.fromHex = function(hex, network) {
    return PrivateKey.fromBuffer(Buffer.from(hex, "hex"), network);
};
/**
 * Internal function to transform a JSON string on plain object into a private key
 * return this.
 *
 * @param {string} json - A JSON string or plain object
 * @returns {Object} An object with keys: bn, network and compressed
 * @private
 */ PrivateKey._transformObject = function(json) {
    var bn = new BN(json.bn, "hex");
    var network = Networks.get(json.network);
    return {
        bn: bn,
        network: network,
        compressed: json.compressed
    };
};
/**
 * Instantiate a PrivateKey from a WIF string
 *
 * @param {string} str - The WIF encoded private key string
 * @returns {PrivateKey} A new valid instance of PrivateKey
 */ PrivateKey.fromString = PrivateKey.fromWIF = function(str) {
    $.checkArgument(_.isString(str), "First argument is expected to be a string.");
    return new PrivateKey(str);
};
/**
 * Instantiate a PrivateKey from a plain JavaScript object
 *
 * @param {Object} obj - The output from privateKey.toObject()
 */ PrivateKey.fromObject = PrivateKey.fromJSON = function(obj) {
    $.checkArgument(_.isObject(obj), "First argument is expected to be an object.");
    return new PrivateKey(obj);
};
/**
 * Instantiate a PrivateKey from random bytes
 *
 * @param {string=} network - Either "livenet" or "testnet"
 * @returns {PrivateKey} A new valid instance of PrivateKey
 */ PrivateKey.fromRandom = function(network) {
    var bn = PrivateKey._getRandomBN();
    return new PrivateKey(bn, network);
};
/**
 * Check if there would be any errors when initializing a PrivateKey
 *
 * @param {string} data - The encoded data in various formats
 * @param {string=} network - Either "livenet" or "testnet"
 * @returns {null|Error} An error if exists
 */ PrivateKey.getValidationError = function(data, network) {
    var error;
    try {
        new PrivateKey(data, network) // eslint-disable-line
        ;
    } catch (e) {
        error = e;
    }
    return error;
};
/**
 * Check if the parameters are valid
 *
 * @param {string} data - The encoded data in various formats
 * @param {string=} network - Either "livenet" or "testnet"
 * @returns {Boolean} If the private key is would be valid
 */ PrivateKey.isValid = function(data, network) {
    if (!data) return false;
    return !PrivateKey.getValidationError(data, network);
};
/**
 * Will output the PrivateKey in WIF
 *
 * @returns {string}
 */ PrivateKey.prototype.toString = function() {
    return this.toWIF();
};
/**
 * Will output the PrivateKey to a WIF string
 *
 * @returns {string} A WIP representation of the private key
 */ PrivateKey.prototype.toWIF = function() {
    var network = this.network;
    var compressed = this.compressed;
    var buf;
    if (compressed) buf = Buffer.concat([
        Buffer.from([
            network.privatekey
        ]),
        this.bn.toBuffer({
            size: 32
        }),
        Buffer.from([
            0x01
        ])
    ]);
    else buf = Buffer.concat([
        Buffer.from([
            network.privatekey
        ]),
        this.bn.toBuffer({
            size: 32
        })
    ]);
    return Base58Check.encode(buf);
};
/**
 * Will return the private key as a BN instance
 *
 * @returns {BN} A BN instance of the private key
 */ PrivateKey.prototype.toBigNumber = function() {
    return this.bn;
};
/**
 * Will return the private key as a BN buffer
 *
 * @returns {Buffer} A buffer of the private key
 */ PrivateKey.prototype.toBuffer = function() {
    return this.bn.toBuffer({
        size: 32
    });
};
PrivateKey.prototype.toHex = function() {
    return this.toBuffer().toString("hex");
};
/**
 * Will return the corresponding public key
 *
 * @returns {PublicKey} A public key generated from the private key
 */ PrivateKey.prototype.toPublicKey = function() {
    if (!this._pubkey) this._pubkey = PublicKey.fromPrivateKey(this);
    return this._pubkey;
};
/**
 * Will return an address for the private key
 * @param {Network=} network - optional parameter specifying
 * the desired network for the address
 *
 * @returns {Address} An address generated from the private key
 */ PrivateKey.prototype.toAddress = function(network) {
    var pubkey = this.toPublicKey();
    return Address.fromPublicKey(pubkey, network || this.network);
};
/**
 * @returns {Object} A plain object representation
 */ PrivateKey.prototype.toObject = PrivateKey.prototype.toJSON = function toObject() {
    return {
        bn: this.bn.toString("hex"),
        compressed: this.compressed,
        network: this.network.toString()
    };
};
/**
 * Will return a string formatted for the console
 *
 * @returns {string} Private key
 */ PrivateKey.prototype.inspect = function() {
    var uncompressed = !this.compressed ? ", uncompressed" : "";
    return "<PrivateKey: " + this.toHex() + ", network: " + this.network + uncompressed + ">";
};
module.exports = PrivateKey;

},{"buffer":"fCgem","./util/_":"f1m1Z","./address":"lDqbu","./encoding/base58check":"kLrpR","./crypto/bn":"35huv","./util/js":"it7yM","./networks":"ai5AV","./crypto/point":"2XxZb","./publickey":"cwKNK","./crypto/random":"0GrP8","./util/preconditions":"c91dJ"}],"0GrP8":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
function Random() {}
/* secure random bytes that sometimes throws an error due to lack of entropy */ Random.getRandomBuffer = function(size) {
    return Random.getRandomBufferBrowser(size);
};
Random.getRandomBufferNode = function(size) {
    var crypto = require("crypto");
    return crypto.randomBytes(size);
};
Random.getRandomBufferBrowser = function(size) {
    if (!window.crypto && !window.msCrypto) throw new Error("window.crypto not available");
    var crypto;
    if (window.crypto && window.crypto.getRandomValues) crypto = window.crypto;
    else if (window.msCrypto && window.msCrypto.getRandomValues) crypto = window.msCrypto;
    else throw new Error("window.crypto.getRandomValues not available");
    var bbuf = new Uint8Array(size);
    crypto.getRandomValues(bbuf);
    var buf = Buffer.from(bbuf);
    return buf;
};
module.exports = Random;

},{"buffer":"fCgem","crypto":"hagNj"}],"hagNj":[function(require,module,exports) {
"use strict";
exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require("randombytes");
exports.createHash = exports.Hash = require("create-hash");
exports.createHmac = exports.Hmac = require("create-hmac");
var algos = require("browserify-sign/algos");
var algoKeys = Object.keys(algos);
var hashes = [
    "sha1",
    "sha224",
    "sha256",
    "sha384",
    "sha512",
    "md5",
    "rmd160"
].concat(algoKeys);
exports.getHashes = function() {
    return hashes;
};
var p = require("pbkdf2");
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;
var aes = require("browserify-cipher");
exports.Cipher = aes.Cipher;
exports.createCipher = aes.createCipher;
exports.Cipheriv = aes.Cipheriv;
exports.createCipheriv = aes.createCipheriv;
exports.Decipher = aes.Decipher;
exports.createDecipher = aes.createDecipher;
exports.Decipheriv = aes.Decipheriv;
exports.createDecipheriv = aes.createDecipheriv;
exports.getCiphers = aes.getCiphers;
exports.listCiphers = aes.listCiphers;
var dh = require("diffie-hellman");
exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
exports.getDiffieHellman = dh.getDiffieHellman;
exports.createDiffieHellman = dh.createDiffieHellman;
exports.DiffieHellman = dh.DiffieHellman;
var sign = require("browserify-sign");
exports.createSign = sign.createSign;
exports.Sign = sign.Sign;
exports.createVerify = sign.createVerify;
exports.Verify = sign.Verify;
exports.createECDH = require("create-ecdh");
var publicEncrypt = require("public-encrypt");
exports.publicEncrypt = publicEncrypt.publicEncrypt;
exports.privateEncrypt = publicEncrypt.privateEncrypt;
exports.publicDecrypt = publicEncrypt.publicDecrypt;
exports.privateDecrypt = publicEncrypt.privateDecrypt;
// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })
var rf = require("randomfill");
exports.randomFill = rf.randomFill;
exports.randomFillSync = rf.randomFillSync;
exports.createCredentials = function() {
    throw new Error([
        "sorry, createCredentials is not implemented yet",
        "we accept pull requests",
        "https://github.com/crypto-browserify/crypto-browserify"
    ].join("\n"));
};
exports.constants = {
    "DH_CHECK_P_NOT_SAFE_PRIME": 2,
    "DH_CHECK_P_NOT_PRIME": 1,
    "DH_UNABLE_TO_CHECK_GENERATOR": 4,
    "DH_NOT_SUITABLE_GENERATOR": 8,
    "NPN_ENABLED": 1,
    "ALPN_ENABLED": 1,
    "RSA_PKCS1_PADDING": 1,
    "RSA_SSLV23_PADDING": 2,
    "RSA_NO_PADDING": 3,
    "RSA_PKCS1_OAEP_PADDING": 4,
    "RSA_X931_PADDING": 5,
    "RSA_PKCS1_PSS_PADDING": 6,
    "POINT_CONVERSION_COMPRESSED": 2,
    "POINT_CONVERSION_UNCOMPRESSED": 4,
    "POINT_CONVERSION_HYBRID": 6
};

},{"randombytes":"8hjhE","create-hash":"2WyL8","create-hmac":"k1utz","browserify-sign/algos":"busIB","pbkdf2":"g38Hg","browserify-cipher":"d4idn","diffie-hellman":"hwD3y","browserify-sign":"jbRNy","create-ecdh":"9Rcg1","public-encrypt":"h9Rdh","randomfill":"k3tsT"}],"8hjhE":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var process = require("process");
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295;
function oldBrowser() {
    throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
}
var Buffer = require("safe-buffer").Buffer;
var crypto = global.crypto || global.msCrypto;
if (crypto && crypto.getRandomValues) module.exports = randomBytes;
else module.exports = oldBrowser;
function randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
    var bytes = Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        else crypto.getRandomValues(bytes);
    }
    if (typeof cb === "function") return process.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

},{"process":"d5jf4","safe-buffer":"eW7r9"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"2WyL8":[function(require,module,exports) {
"use strict";
var inherits = require("inherits");
var MD5 = require("md5.js");
var RIPEMD160 = require("ripemd160");
var sha = require("sha.js");
var Base = require("cipher-base");
function Hash(hash) {
    Base.call(this, "digest");
    this._hash = hash;
}
inherits(Hash, Base);
Hash.prototype._update = function(data) {
    this._hash.update(data);
};
Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === "md5") return new MD5();
    if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD160();
    return new Hash(sha(alg));
};

},{"inherits":"bRL3M","md5.js":"45VeE","ripemd160":"bFDDq","sha.js":"jkn7m","cipher-base":"g5fTz"}],"45VeE":[function(require,module,exports) {
"use strict";
var inherits = require("inherits");
var HashBase = require("hash-base");
var Buffer = require("safe-buffer").Buffer;
var ARRAY16 = new Array(16);
function MD5() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
}
inherits(MD5, HashBase);
MD5.prototype._update = function() {
    var M = ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fnF(a, b, c, d, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function fnG(a, b, c, d, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function fnH(a, b, c, d, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function fnI(a, b, c, d, m, k, s) {
    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = MD5;

},{"inherits":"bRL3M","hash-base":"51qBP","safe-buffer":"eW7r9"}],"51qBP":[function(require,module,exports) {
"use strict";
var Buffer = require("safe-buffer").Buffer;
var Transform = require("readable-stream").Transform;
var inherits = require("inherits");
function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== "string") throw new TypeError(prefix + " must be a string or a buffer");
}
function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, "Data");
    if (this._finalized) throw new Error("Digest already called");
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }
    return this;
};
HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
};
HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
};
module.exports = HashBase;

},{"safe-buffer":"eW7r9","readable-stream":"jXNWE","inherits":"hYQAT"}],"jXNWE":[function(require,module,exports) {
exports = module.exports = require("./lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require("./lib/_stream_writable.js");
exports.Duplex = require("./lib/_stream_duplex.js");
exports.Transform = require("./lib/_stream_transform.js");
exports.PassThrough = require("./lib/_stream_passthrough.js");
exports.finished = require("./lib/internal/streams/end-of-stream.js");
exports.pipeline = require("./lib/internal/streams/pipeline.js");

},{"./lib/_stream_readable.js":"6NdbQ","./lib/_stream_writable.js":"gTkcq","./lib/_stream_duplex.js":"kKNA3","./lib/_stream_transform.js":"ba8Mr","./lib/_stream_passthrough.js":"2xP98","./lib/internal/streams/end-of-stream.js":"aOMy2","./lib/internal/streams/pipeline.js":"fyp4t"}],"6NdbQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var process = require("process");
var global = arguments[3];
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("events").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("util");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("./internal/streams/buffer_list");
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("inherits")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("./_stream_duplex");
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup"); // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit("pipe", src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount("data") > 0) self.resume();
}
function nReadingNextTick(self) {
    debug("readable nexttick read 0");
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume"); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("./internal/streams/async_iterator");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug("endReadableNT", state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("./internal/streams/from");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"d5jf4","events":"1VQLm","./internal/streams/stream":"60BLS","buffer":"fCgem","util":"f2Ci1","./internal/streams/buffer_list":"hf3P2","./internal/streams/destroy":"YI8DF","./internal/streams/state":"61BRN","../errors":"aJlwj","inherits":"bRL3M","./_stream_duplex":"kKNA3","string_decoder/":"3vmkr","./internal/streams/async_iterator":"k019Y","./internal/streams/from":"ak0YH"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"60BLS":[function(require,module,exports) {
module.exports = require("events").EventEmitter;

},{"events":"1VQLm"}],"hf3P2":[function(require,module,exports) {
"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require("buffer"), Buffer = _require.Buffer;
var _require2 = require("util"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || "inspect";
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"buffer":"fCgem","util":"f2Ci1"}],"YI8DF":[function(require,module,exports) {
"use strict"; // undocumented cb() API, needed for core, not for public API
var process = require("process");
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"d5jf4"}],"61BRN":[function(require,module,exports) {
"use strict";
var ERR_INVALID_OPT_VALUE = require("../../../errors").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"aJlwj"}],"aJlwj":[function(require,module,exports) {
"use strict";
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
module.exports.codes = codes;

},{}],"kKNA3":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
"use strict";
var process = require("process");
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("./_stream_readable");
var Writable = require("./_stream_writable");
require("inherits")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"d5jf4","./_stream_readable":"6NdbQ","./_stream_writable":"gTkcq","inherits":"bRL3M"}],"gTkcq":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
"use strict";
var global = arguments[3];
var process = require("process");
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("util-deprecate")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("inherits")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("./_stream_duplex"); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"d5jf4","util-deprecate":"j92NQ","./internal/streams/stream":"60BLS","buffer":"fCgem","./internal/streams/destroy":"YI8DF","./internal/streams/state":"61BRN","../errors":"aJlwj","inherits":"bRL3M","./_stream_duplex":"kKNA3"}],"j92NQ":[function(require,module,exports) {
var global = arguments[3];
/**
 * Module exports.
 */ module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config("throwDeprecation")) throw new Error(msg);
            else if (config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

},{}],"3vmkr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
/*<replacement>*/ var Buffer = require("safe-buffer").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "�";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "�";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "�";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "�";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

},{"safe-buffer":"eW7r9"}],"k019Y":[function(require,module,exports) {
"use strict";
var process = require("process");
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require("./end-of-stream");
var kLastResolve = Symbol("lastResolve");
var kLastReject = Symbol("lastReject");
var kError = Symbol("error");
var kEnded = Symbol("ended");
var kLastPromise = Symbol("lastPromise");
var kHandlePromise = Symbol("handlePromise");
var kStream = Symbol("stream");
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"d5jf4","./end-of-stream":"aOMy2"}],"aOMy2":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var ERR_STREAM_PREMATURE_CLOSE = require("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = eos;

},{"../../../errors":"aJlwj"}],"ak0YH":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

},{}],"ba8Mr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = Transform;
var _require$codes = require("../errors").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("./_stream_duplex");
require("inherits")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"aJlwj","./_stream_duplex":"kKNA3","inherits":"bRL3M"}],"2xP98":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = PassThrough;
var Transform = require("./_stream_transform");
require("inherits")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"ba8Mr","inherits":"bRL3M"}],"fyp4t":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("../../../errors").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if (eos === undefined) eos = require("./end-of-stream");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== "function") return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"aJlwj","./end-of-stream":"aOMy2"}],"hYQAT":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"bFDDq":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var inherits = require("inherits");
var HashBase = require("hash-base");
var ARRAY16 = new Array(16);
var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var hl = [
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
];
var hr = [
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
];
function RIPEMD160() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
}
inherits(RIPEMD160, HashBase);
RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fn1(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function fn2(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function fn3(a, b, c, d, e, m, k, s) {
    return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function fn4(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function fn5(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = RIPEMD160;

},{"buffer":"fCgem","inherits":"bRL3M","hash-base":"51qBP"}],"jkn7m":[function(require,module,exports) {
var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
};
exports.sha = require("./sha");
exports.sha1 = require("./sha1");
exports.sha224 = require("./sha224");
exports.sha256 = require("./sha256");
exports.sha384 = require("./sha384");
exports.sha512 = require("./sha512");

},{"./sha":"6PecA","./sha1":"iCEYJ","./sha224":"7e0O2","./sha256":"kVAym","./sha384":"bWRvM","./sha512":"aZK4H"}],"6PecA":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ var inherits = require("inherits");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha, Hash);
Sha.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"7wpAR":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
// prototype class for hash functions
function Hash(blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
Hash.prototype.update = function(data, enc) {
    if (typeof data === "string") {
        enc = enc || "utf8";
        data = Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
};
module.exports = Hash;

},{"safe-buffer":"eW7r9"}],"iCEYJ":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ var inherits = require("inherits");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha1() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl1(num) {
    return num << 1 | num >>> 31;
}
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha1.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha1;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"7e0O2":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("inherits");
var Sha256 = require("./sha256");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var W = new Array(64);
function Sha224() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha224, Sha256);
Sha224.prototype.init = function() {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
};
Sha224.prototype._hash = function() {
    var H = Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = Sha224;

},{"inherits":"bRL3M","./sha256":"kVAym","./hash":"7wpAR","safe-buffer":"eW7r9"}],"kVAym":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("inherits");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var K = [
    0x428A2F98,
    0x71374491,
    0xB5C0FBCF,
    0xE9B5DBA5,
    0x3956C25B,
    0x59F111F1,
    0x923F82A4,
    0xAB1C5ED5,
    0xD807AA98,
    0x12835B01,
    0x243185BE,
    0x550C7DC3,
    0x72BE5D74,
    0x80DEB1FE,
    0x9BDC06A7,
    0xC19BF174,
    0xE49B69C1,
    0xEFBE4786,
    0x0FC19DC6,
    0x240CA1CC,
    0x2DE92C6F,
    0x4A7484AA,
    0x5CB0A9DC,
    0x76F988DA,
    0x983E5152,
    0xA831C66D,
    0xB00327C8,
    0xBF597FC7,
    0xC6E00BF3,
    0xD5A79147,
    0x06CA6351,
    0x14292967,
    0x27B70A85,
    0x2E1B2138,
    0x4D2C6DFC,
    0x53380D13,
    0x650A7354,
    0x766A0ABB,
    0x81C2C92E,
    0x92722C85,
    0xA2BFE8A1,
    0xA81A664B,
    0xC24B8B70,
    0xC76C51A3,
    0xD192E819,
    0xD6990624,
    0xF40E3585,
    0x106AA070,
    0x19A4C116,
    0x1E376C08,
    0x2748774C,
    0x34B0BCB5,
    0x391C0CB3,
    0x4ED8AA4A,
    0x5B9CCA4F,
    0x682E6FF3,
    0x748F82EE,
    0x78A5636F,
    0x84C87814,
    0x8CC70208,
    0x90BEFFFA,
    0xA4506CEB,
    0xBEF9A3F7,
    0xC67178F2
];
var W = new Array(64);
function Sha256() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
};
function ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
    var H = Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = Sha256;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"bWRvM":[function(require,module,exports) {
var inherits = require("inherits");
var SHA512 = require("./sha512");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var W = new Array(160);
function Sha384() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha384, SHA512);
Sha384.prototype.init = function() {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
};
Sha384.prototype._hash = function() {
    var H = Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = Sha384;

},{"inherits":"bRL3M","./sha512":"aZK4H","./hash":"7wpAR","safe-buffer":"eW7r9"}],"aZK4H":[function(require,module,exports) {
var inherits = require("inherits");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
var W = new Array(160);
function Sha512() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
};
function Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};
Sha512.prototype._hash = function() {
    var H = Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = Sha512;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"g5fTz":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
var Transform = require("stream").Transform;
var StringDecoder = require("string_decoder").StringDecoder;
var inherits = require("inherits");
function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === "string";
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
inherits(CipherBase, Transform);
CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === "string") data = Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
CipherBase.prototype.setAutoPadding = function() {};
CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
};
CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
};
CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
};
CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error("can't switch encodings");
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = CipherBase;

},{"safe-buffer":"eW7r9","stream":"j77ns","string_decoder":"3vmkr","inherits":"bRL3M"}],"j77ns":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;
var EE = require("events").EventEmitter;
var inherits = require("inherits");
inherits(Stream, EE);
Stream.Readable = require("readable-stream/lib/_stream_readable.js");
Stream.Writable = require("readable-stream/lib/_stream_writable.js");
Stream.Duplex = require("readable-stream/lib/_stream_duplex.js");
Stream.Transform = require("readable-stream/lib/_stream_transform.js");
Stream.PassThrough = require("readable-stream/lib/_stream_passthrough.js");
Stream.finished = require("readable-stream/lib/internal/streams/end-of-stream.js");
Stream.pipeline = require("readable-stream/lib/internal/streams/pipeline.js");
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream() {
    EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on("data", ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on("drain", ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

},{"events":"1VQLm","inherits":"kQ6W8","readable-stream/lib/_stream_readable.js":"6NdbQ","readable-stream/lib/_stream_writable.js":"gTkcq","readable-stream/lib/_stream_duplex.js":"kKNA3","readable-stream/lib/_stream_transform.js":"ba8Mr","readable-stream/lib/_stream_passthrough.js":"2xP98","readable-stream/lib/internal/streams/end-of-stream.js":"aOMy2","readable-stream/lib/internal/streams/pipeline.js":"fyp4t"}],"kQ6W8":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"k1utz":[function(require,module,exports) {
"use strict";
var inherits = require("inherits");
var Legacy = require("./legacy");
var Base = require("cipher-base");
var Buffer = require("safe-buffer").Buffer;
var md5 = require("create-hash/md5");
var RIPEMD160 = require("ripemd160");
var sha = require("sha.js");
var ZEROS = Buffer.alloc(128);
function Hmac(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") key = Buffer.from(key);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
    this._hash.update(ipad);
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === "rmd160" || alg === "ripemd160") return new Hmac("rmd160", key);
    if (alg === "md5") return new Legacy(md5, key);
    return new Hmac(alg, key);
};

},{"inherits":"bRL3M","./legacy":"kO6k7","cipher-base":"g5fTz","safe-buffer":"eW7r9","create-hash/md5":"h5gRT","ripemd160":"bFDDq","sha.js":"jkn7m"}],"kO6k7":[function(require,module,exports) {
"use strict";
var inherits = require("inherits");
var Buffer = require("safe-buffer").Buffer;
var Base = require("cipher-base");
var ZEROS = Buffer.alloc(128);
var blocksize = 64;
function Hmac(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") key = Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) key = alg(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = [
        ipad
    ];
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
Hmac.prototype._final = function() {
    var h = this._alg(Buffer.concat(this._hash));
    return this._alg(Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = Hmac;

},{"inherits":"bRL3M","safe-buffer":"eW7r9","cipher-base":"g5fTz"}],"h5gRT":[function(require,module,exports) {
var MD5 = require("md5.js");
module.exports = function(buffer) {
    return new MD5().update(buffer).digest();
};

},{"md5.js":"45VeE"}],"busIB":[function(require,module,exports) {
module.exports = require("./browser/algorithms.json");

},{"./browser/algorithms.json":"kWFdV"}],"kWFdV":[function(require,module,exports) {
module.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');

},{}],"g38Hg":[function(require,module,exports) {
exports.pbkdf2 = require("./lib/async");
exports.pbkdf2Sync = require("./lib/sync");

},{"./lib/async":"aqdig","./lib/sync":"lh9gw"}],"aqdig":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("safe-buffer").Buffer;
var checkParameters = require("./precondition");
var defaultEncoding = require("./default-encoding");
var sync = require("./sync");
var toBuffer = require("./to-buffer");
var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
    sha: "SHA-1",
    "sha-1": "SHA-1",
    sha1: "SHA-1",
    sha256: "SHA-256",
    "sha-256": "SHA-256",
    sha384: "SHA-384",
    "sha-384": "SHA-384",
    "sha-512": "SHA-512",
    sha512: "SHA-512"
};
var checks = [];
function checkNative(algo) {
    if (global.process && !global.process.browser) return Promise.resolve(false);
    if (!subtle || !subtle.importKey || !subtle.deriveBits) return Promise.resolve(false);
    if (checks[algo] !== undefined) return checks[algo];
    ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    checks[algo] = prom;
    return prom;
}
var nextTick;
function getNextTick() {
    if (nextTick) return nextTick;
    if (global.process && global.process.nextTick) nextTick = global.process.nextTick;
    else if (global.queueMicrotask) nextTick = global.queueMicrotask;
    else if (global.setImmediate) nextTick = global.setImmediate;
    else nextTick = global.setTimeout;
    return nextTick;
}
function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey("raw", password, {
        name: "PBKDF2"
    }, false, [
        "deriveBits"
    ]).then(function(key) {
        return subtle.deriveBits({
            name: "PBKDF2",
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return Buffer.from(res);
    });
}
function resolvePromise(promise, callback) {
    promise.then(function(out) {
        getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === "function") {
        callback = digest;
        digest = undefined;
    }
    digest = digest || "sha1";
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof global.Promise !== "function") {
        getNextTick()(function() {
            var out;
            try {
                out = sync(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, "Password");
    salt = toBuffer(salt, defaultEncoding, "Salt");
    if (typeof callback !== "function") throw new Error("No callback provided to pbkdf2");
    resolvePromise(checkNative(algo).then(function(resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
        return sync(password, salt, iterations, keylen, digest);
    }), callback);
};

},{"safe-buffer":"eW7r9","./precondition":"jg75G","./default-encoding":"T9r9Q","./sync":"lh9gw","./to-buffer":"kaFyH"}],"jg75G":[function(require,module,exports) {
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== "number") throw new TypeError("Iterations not a number");
    if (iterations < 0) throw new TypeError("Bad iterations");
    if (typeof keylen !== "number") throw new TypeError("Key length not a number");
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) throw new TypeError("Bad key length");
};

},{}],"T9r9Q":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
var defaultEncoding;
/* istanbul ignore next */ if (global.process && global.process.browser) defaultEncoding = "utf-8";
else if (global.process && global.process.version) {
    var pVersionMajor = parseInt(process.version.split(".")[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
} else defaultEncoding = "utf-8";
module.exports = defaultEncoding;

},{"process":"d5jf4"}],"lh9gw":[function(require,module,exports) {
var md5 = require("create-hash/md5");
var RIPEMD160 = require("ripemd160");
var sha = require("sha.js");
var Buffer = require("safe-buffer").Buffer;
var checkParameters = require("./precondition");
var defaultEncoding = require("./default-encoding");
var toBuffer = require("./to-buffer");
var ZEROS = Buffer.alloc(128);
var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function Hmac(alg, key, saltLen) {
    var hash = getDigest(alg);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = sizes[alg];
}
Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function getDigest(alg) {
    function shaFunc(data) {
        return sha(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
    }
    if (alg === "rmd160" || alg === "ripemd160") return rmd160Func;
    if (alg === "md5") return md5;
    return shaFunc;
}
function pbkdf2(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, "Password");
    salt = toBuffer(salt, defaultEncoding, "Salt");
    digest = digest || "sha1";
    var hmac = new Hmac(digest, password, salt.length);
    var DK = Buffer.allocUnsafe(keylen);
    var block1 = Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = pbkdf2;

},{"create-hash/md5":"h5gRT","ripemd160":"bFDDq","sha.js":"jkn7m","safe-buffer":"eW7r9","./precondition":"jg75G","./default-encoding":"T9r9Q","./to-buffer":"kaFyH"}],"kaFyH":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
module.exports = function(thing, encoding, name) {
    if (Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === "string") return Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return Buffer.from(thing.buffer);
    else throw new TypeError(name + " must be a string, a Buffer, a typed array or a DataView");
};

},{"safe-buffer":"eW7r9"}],"d4idn":[function(require,module,exports) {
var DES = require("browserify-des");
var aes = require("browserify-aes/browser");
var aesModes = require("browserify-aes/modes");
var desModes = require("browserify-des/modes");
var ebtk = require("evp_bytestokey");
function createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys.key, keys.iv);
}
function createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys.key, keys.iv);
}
function createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError("invalid suite type");
}
function createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError("invalid suite type");
}
function getCiphers() {
    return Object.keys(desModes).concat(aes.getCiphers());
}
exports.createCipher = exports.Cipher = createCipher;
exports.createCipheriv = exports.Cipheriv = createCipheriv;
exports.createDecipher = exports.Decipher = createDecipher;
exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"browserify-des":"d7hSK","browserify-aes/browser":"hnlHj","browserify-aes/modes":"jyQSU","browserify-des/modes":"iO8co","evp_bytestokey":"1rd4d"}],"d7hSK":[function(require,module,exports) {
var CipherBase = require("cipher-base");
var des = require("des.js");
var inherits = require("inherits");
var Buffer = require("safe-buffer").Buffer;
var modes = {
    "des-ede3-cbc": des.CBC.instantiate(des.EDE),
    "des-ede3": des.EDE,
    "des-ede-cbc": des.CBC.instantiate(des.EDE),
    "des-ede": des.EDE,
    "des-cbc": des.CBC.instantiate(des.DES),
    "des-ecb": des.DES
};
modes.des = modes["des-cbc"];
modes.des3 = modes["des-ede3-cbc"];
module.exports = DES;
inherits(DES, CipherBase);
function DES(opts) {
    CipherBase.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = modes[modeName];
    var type;
    if (opts.decrypt) type = "decrypt";
    else type = "encrypt";
    var key = opts.key;
    if (!Buffer.isBuffer(key)) key = Buffer.from(key);
    if (modeName === "des-ede" || modeName === "des-ede-cbc") key = Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!Buffer.isBuffer(iv)) iv = Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
DES.prototype._update = function(data) {
    return Buffer.from(this._des.update(data));
};
DES.prototype._final = function() {
    return Buffer.from(this._des.final());
};

},{"cipher-base":"g5fTz","des.js":"jn95T","inherits":"bRL3M","safe-buffer":"eW7r9"}],"jn95T":[function(require,module,exports) {
"use strict";
exports.utils = require("./des/utils");
exports.Cipher = require("./des/cipher");
exports.DES = require("./des/des");
exports.CBC = require("./des/cbc");
exports.EDE = require("./des/ede");

},{"./des/utils":"aeccw","./des/cipher":"jz3In","./des/des":"gDFTo","./des/cbc":"lPo0P","./des/ede":"avp7S"}],"aeccw":[function(require,module,exports) {
"use strict";
exports.readUInt32BE = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 0xff;
    bytes[2 + off] = value >>> 8 & 0xff;
    bytes[3 + off] = value & 0xff;
};
exports.ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.r28shl = function r28shl(num, shift) {
    return num << shift & 0xfffffff | num >>> 28 - shift;
};
var pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
exports.pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 0x1;
    }
    for(var i = len; i < pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 0x1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.expand = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 0x3f;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 0x3f;
        outR <<= 6;
    }
    outR |= (r & 0x1f) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
exports.substitute = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 0x3f;
        var sb = sTable[i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 0x3f;
        var sb = sTable[256 + i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
exports.permute = function permute(num) {
    var out = 0;
    for(var i = 0; i < permuteTable.length; i++){
        out <<= 1;
        out |= num >>> permuteTable[i] & 0x1;
    }
    return out >>> 0;
};
exports.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = "0" + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(" ");
};

},{}],"jz3In":[function(require,module,exports) {
"use strict";
var assert = require("minimalistic-assert");
function Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
}
module.exports = Cipher;
Cipher.prototype._init = function _init() {
// Might be overrided
};
Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === "decrypt") return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === "encrypt") last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    assert.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

},{"minimalistic-assert":"8OvWh"}],"gDFTo":[function(require,module,exports) {
"use strict";
var assert = require("minimalistic-assert");
var inherits = require("inherits");
var utils = require("./utils");
var Cipher = require("./cipher");
function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function DES(options) {
    Cipher.call(this, options);
    var state = new DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;
DES.create = function create(options) {
    return new DES(options);
};
var shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    assert.equal(key.length, this.blockSize, "Invalid key length");
    var kL = utils.readUInt32BE(key, 0);
    var kR = utils.readUInt32BE(key, 4);
    utils.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
    }
};
DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = utils.readUInt32BE(inp, inOff);
    var r = utils.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    utils.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === "encrypt") this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    utils.writeUInt32BE(out, l, outOff);
    utils.writeUInt32BE(out, r, outOff + 4);
};
DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)assert.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    utils.rip(r, l, out, off);
};
DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    utils.rip(l, r, out, off);
};

},{"minimalistic-assert":"8OvWh","inherits":"bRL3M","./utils":"aeccw","./cipher":"jz3In"}],"lPo0P":[function(require,module,exports) {
"use strict";
var assert = require("minimalistic-assert");
var inherits = require("inherits");
var proto = {};
function CBCState(iv) {
    assert.equal(iv.length, 8, "Invalid IV length");
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    inherits(CBC, Base);
    var keys = Object.keys(proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
exports.instantiate = instantiate;
proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
};
proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === "encrypt") {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

},{"minimalistic-assert":"8OvWh","inherits":"bRL3M"}],"avp7S":[function(require,module,exports) {
"use strict";
var assert = require("minimalistic-assert");
var inherits = require("inherits");
var Cipher = require("./cipher");
var DES = require("./des");
function EDEState(type, key) {
    assert.equal(key.length, 24, "Invalid key length");
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === "encrypt") this.ciphers = [
        DES.create({
            type: "encrypt",
            key: k1
        }),
        DES.create({
            type: "decrypt",
            key: k2
        }),
        DES.create({
            type: "encrypt",
            key: k3
        })
    ];
    else this.ciphers = [
        DES.create({
            type: "decrypt",
            key: k3
        }),
        DES.create({
            type: "encrypt",
            key: k2
        }),
        DES.create({
            type: "decrypt",
            key: k1
        })
    ];
}
function EDE(options) {
    Cipher.call(this, options);
    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
}
inherits(EDE, Cipher);
module.exports = EDE;
EDE.create = function create(options) {
    return new EDE(options);
};
EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"minimalistic-assert":"8OvWh","inherits":"bRL3M","./cipher":"jz3In","./des":"gDFTo"}],"hnlHj":[function(require,module,exports) {
var ciphers = require("./encrypter");
var deciphers = require("./decrypter");
var modes = require("./modes/list.json");
function getCiphers() {
    return Object.keys(modes);
}
exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"./encrypter":"7DBsd","./decrypter":"cixt2","./modes/list.json":"1XQMU"}],"7DBsd":[function(require,module,exports) {
var MODES = require("./modes");
var AuthCipher = require("./authCipher");
var Buffer = require("safe-buffer").Buffer;
var StreamCipher = require("./streamCipher");
var Transform = require("cipher-base");
var aes = require("./aes");
var ebtk = require("evp_bytestokey");
var inherits = require("inherits");
function Cipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Cipher, Transform);
Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
var PADDING = Buffer.alloc(16, 0x10);
Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error("data not multiple of block length");
    }
};
Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)padBuff.writeUInt8(len, i);
    return Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function createCipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    if (typeof password === "string") password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
    if (typeof iv === "string") iv = Buffer.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
    if (config.type === "stream") return new StreamCipher(config.module, password, iv);
    else if (config.type === "auth") return new AuthCipher(config.module, password, iv);
    return new Cipher(config.module, password, iv);
}
function createCipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv);
}
exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

},{"./modes":"jyQSU","./authCipher":"kn9wf","safe-buffer":"eW7r9","./streamCipher":"4ZMNU","cipher-base":"g5fTz","./aes":"4VzKF","evp_bytestokey":"1rd4d","inherits":"bRL3M"}],"jyQSU":[function(require,module,exports) {
var modeModules = {
    ECB: require("./ecb"),
    CBC: require("./cbc"),
    CFB: require("./cfb"),
    CFB8: require("./cfb8"),
    CFB1: require("./cfb1"),
    OFB: require("./ofb"),
    CTR: require("./ctr"),
    GCM: require("./ctr")
};
var modes = require("./list.json");
for(var key in modes)modes[key].module = modeModules[modes[key].mode];
module.exports = modes;

},{"./ecb":"f4tme","./cbc":"8JcO4","./cfb":"dVMRE","./cfb8":"jk3Qm","./cfb1":"4BsKj","./ofb":"9DT3x","./ctr":"fLj86","./list.json":"1XQMU"}],"f4tme":[function(require,module,exports) {
exports.encrypt = function(self, block) {
    return self._cipher.encryptBlock(block);
};
exports.decrypt = function(self, block) {
    return self._cipher.decryptBlock(block);
};

},{}],"8JcO4":[function(require,module,exports) {
var xor = require("buffer-xor");
exports.encrypt = function(self, block) {
    var data = xor(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
exports.decrypt = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return xor(out, pad);
};

},{"buffer-xor":"eYhY5"}],"eYhY5":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

},{"buffer":"fCgem"}],"dVMRE":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
var xor = require("buffer-xor");
function encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = xor(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
exports.encrypt = function(self, data, decrypt) {
    var out = Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = Buffer.concat([
                out,
                encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = Buffer.concat([
                out,
                encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

},{"safe-buffer":"eW7r9","buffer-xor":"eYhY5"}],"jk3Qm":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = Buffer.concat([
        self._prev.slice(1),
        Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"safe-buffer":"eW7r9"}],"4BsKj":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while(++i < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += (value & 0x80) >> i % 8;
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = Buffer.allocUnsafe(buffer.length);
    buffer = Buffer.concat([
        buffer,
        Buffer.from([
            value
        ])
    ]);
    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"safe-buffer":"eW7r9"}],"9DT3x":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var xor = require("buffer-xor");
function getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
exports.encrypt = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = Buffer.concat([
        self._cache,
        getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"buffer":"fCgem","buffer-xor":"eYhY5"}],"fLj86":[function(require,module,exports) {
var xor = require("buffer-xor");
var Buffer = require("safe-buffer").Buffer;
var incr32 = require("../incr32");
function getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    incr32(self._prev);
    return out;
}
var blockSize = 16;
exports.encrypt = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self._cache.length;
    self._cache = Buffer.concat([
        self._cache,
        Buffer.allocUnsafe(chunkNum * blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = getBlock(self);
        var offset = start + i * blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"buffer-xor":"eYhY5","safe-buffer":"eW7r9","../incr32":"bZlDZ"}],"bZlDZ":[function(require,module,exports) {
function incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = incr32;

},{}],"1XQMU":[function(require,module,exports) {
module.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');

},{}],"kn9wf":[function(require,module,exports) {
var aes = require("./aes");
var Buffer = require("safe-buffer").Buffer;
var Transform = require("cipher-base");
var inherits = require("inherits");
var GHASH = require("./ghash");
var xor = require("buffer-xor");
var incr32 = require("./incr32");
function xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new GHASH(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer.alloc(toPad, 0));
    }
    ghash.update(Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = Buffer.from(self._finID);
    incr32(out);
    return out;
}
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    var h = Buffer.alloc(4, 0);
    this._cipher = new aes.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new GHASH(ck);
    iv = calcIv(this, iv, ck);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
    var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
    this._authTag = tag;
    this._cipher.scrub();
};
StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
    return this._authTag;
};
StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
    this._authTag = tag;
};
StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error("Attempting to set AAD in unsupported state");
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = StreamCipher;

},{"./aes":"4VzKF","safe-buffer":"eW7r9","cipher-base":"g5fTz","inherits":"bRL3M","./ghash":"lmx0M","buffer-xor":"eYhY5","./incr32":"bZlDZ"}],"4VzKF":[function(require,module,exports) {
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/
var Buffer = require("safe-buffer").Buffer;
function asUInt32Array(buf) {
    if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var RCON = [
    0x00,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1b,
    0x36
];
var G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 0x11b;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function AES(key) {
    this._key = asUInt32Array(key);
    this._reset();
}
AES.blockSize = 16;
AES.keySize = 32;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;
AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
            t ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
AES.prototype.encryptBlockRaw = function(M) {
    M = asUInt32Array(M);
    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};
AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
AES.prototype.decryptBlock = function(M) {
    M = asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
AES.prototype.scrub = function() {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
};
module.exports.AES = AES;

},{"safe-buffer":"eW7r9"}],"lmx0M":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
var ZEROES = Buffer.alloc(16, 0);
function toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function fromArray(out) {
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function GHASH(key) {
    this.h = key;
    this.state = Buffer.alloc(16, 0);
    this.cache = Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function(block) {
    var i = -1;
    while(++i < block.length)this.state[i] ^= block[i];
    this._multiply();
};
GHASH.prototype._multiply = function() {
    var Vi = toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while(++i < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = fromArray(Zi);
};
GHASH.prototype.update = function(buf) {
    this.cache = Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash(Buffer.concat([
        this.cache,
        ZEROES
    ], 16));
    this.ghash(fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = GHASH;

},{"safe-buffer":"eW7r9"}],"4ZMNU":[function(require,module,exports) {
var aes = require("./aes");
var Buffer = require("safe-buffer").Buffer;
var Transform = require("cipher-base");
var inherits = require("inherits");
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = StreamCipher;

},{"./aes":"4VzKF","safe-buffer":"eW7r9","cipher-base":"g5fTz","inherits":"bRL3M"}],"1rd4d":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
var MD5 = require("md5.js");
/* eslint-disable camelcase */ function EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!Buffer.isBuffer(password)) password = Buffer.from(password, "binary");
    if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, "binary");
        if (salt.length !== 8) throw new RangeError("salt should be Buffer with 8 byte length");
    }
    var keyLen = keyBits / 8;
    var key = Buffer.alloc(keyLen);
    var iv = Buffer.alloc(ivLen || 0);
    var tmp = Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new MD5();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = EVP_BytesToKey;

},{"safe-buffer":"eW7r9","md5.js":"45VeE"}],"cixt2":[function(require,module,exports) {
var AuthCipher = require("./authCipher");
var Buffer = require("safe-buffer").Buffer;
var MODES = require("./modes");
var StreamCipher = require("./streamCipher");
var Transform = require("cipher-base");
var aes = require("./aes");
var ebtk = require("evp_bytestokey");
var inherits = require("inherits");
function Decipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._last = void 0;
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Decipher, Transform);
Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error("data not multiple of block length");
};
Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error("unable to decrypt data");
    var i = -1;
    while(++i < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error("unable to decrypt data");
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function createDecipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    if (typeof iv === "string") iv = Buffer.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
    if (typeof password === "string") password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
    if (config.type === "stream") return new StreamCipher(config.module, password, iv, true);
    else if (config.type === "auth") return new AuthCipher(config.module, password, iv, true);
    return new Decipher(config.module, password, iv);
}
function createDecipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv);
}
exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

},{"./authCipher":"kn9wf","safe-buffer":"eW7r9","./modes":"jyQSU","./streamCipher":"4ZMNU","cipher-base":"g5fTz","./aes":"4VzKF","evp_bytestokey":"1rd4d","inherits":"bRL3M"}],"iO8co":[function(require,module,exports) {
exports["des-ecb"] = {
    key: 8,
    iv: 0
};
exports["des-cbc"] = exports.des = {
    key: 8,
    iv: 8
};
exports["des-ede3-cbc"] = exports.des3 = {
    key: 24,
    iv: 8
};
exports["des-ede3"] = {
    key: 24,
    iv: 0
};
exports["des-ede-cbc"] = {
    key: 16,
    iv: 8
};
exports["des-ede"] = {
    key: 16,
    iv: 0
};

},{}],"hwD3y":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var generatePrime = require("./lib/generatePrime");
var primes = require("./lib/primes.json");
var DH = require("./lib/dh");
function getDiffieHellman(mod) {
    var prime = new Buffer(primes[mod].prime, "hex");
    var gen = new Buffer(primes[mod].gen, "hex");
    return new DH(prime, gen);
}
var ENCODINGS = {
    "binary": true,
    "hex": true,
    "base64": true
};
function createDiffieHellman(prime, enc, generator, genc) {
    if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) return createDiffieHellman(prime, "binary", enc, generator);
    enc = enc || "binary";
    genc = genc || "binary";
    generator = generator || new Buffer([
        2
    ]);
    if (!Buffer.isBuffer(generator)) generator = new Buffer(generator, genc);
    if (typeof prime === "number") return new DH(generatePrime(prime, generator), generator, true);
    if (!Buffer.isBuffer(prime)) prime = new Buffer(prime, enc);
    return new DH(prime, generator, true);
}
exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

},{"buffer":"fCgem","./lib/generatePrime":"ZMXAL","./lib/primes.json":"ch1XV","./lib/dh":"f8kfc"}],"ZMXAL":[function(require,module,exports) {
var randomBytes = require("randombytes");
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require("bn.js");
var TWENTYFOUR = new BN(24);
var MillerRabin = require("miller-rabin");
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;
function _getPrimes() {
    if (primes !== null) return primes;
    var limit = 0x100000;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    primes = res;
    return res;
}
function simpleSieve(p) {
    var primes = _getPrimes();
    for(var i = 0; i < primes.length; i++)if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) return true;
        else return false;
    }
    return true;
}
function fermatTest(p) {
    var red = BN.mont(p);
    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new BN([
            0x8c,
            0x7b
        ]);
        else return new BN([
            0x8c,
            0x27
        ]);
    }
    gen = new BN(gen);
    var num, n2;
    while(true){
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd(ONE);
        if (!num.testn(1)) num.iadd(TWO);
        if (!gen.cmp(TWO)) while(num.mod(TWENTYFOUR).cmp(ELEVEN))num.iadd(FOUR);
        else if (!gen.cmp(FIVE)) while(num.mod(TEN).cmp(THREE))num.iadd(FOUR);
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) return num;
    }
}

},{"randombytes":"8hjhE","bn.js":"VopIn","miller-rabin":"i79Nu"}],"i79Nu":[function(require,module,exports) {
var bn = require("bn.js");
var brorand = require("brorand");
function MillerRabin(rand) {
    this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;
MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
};
MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new bn(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0);
    return a;
};
MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

},{"bn.js":"VopIn","brorand":"8FGdh"}],"ch1XV":[function(require,module,exports) {
module.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');

},{}],"f8kfc":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require("bn.js");
var MillerRabin = require("miller-rabin");
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require("./generatePrime");
var randomBytes = require("randombytes");
module.exports = DH;
function setPublicKey(pub, enc) {
    enc = enc || "utf8";
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this._pub = new BN(pub);
    return this;
}
function setPrivateKey(priv, enc) {
    enc = enc || "utf8";
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    this._priv = new BN(priv);
    return this;
}
var primeCache = {};
function checkPrime(prime, generator) {
    var gen = generator.toString("hex");
    var hex = [
        gen,
        prime.toString(16)
    ].join("_");
    if (hex in primeCache) return primeCache[hex];
    var error = 0;
    if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === "02" || gen === "05") // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        primeCache[hex] = error;
        return error;
    }
    if (!millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case "02":
            if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case "05":
            rem = prime.mod(TEN);
            if (rem.cmp(THREE) && rem.cmp(SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    primeCache[hex] = error;
    return error;
}
function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new BN(prime);
    this._prime = BN.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty(DH.prototype, "verifyError", {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== "number") this._primeCode = checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new BN(randomBytes(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue(this._pub, enc);
};
DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue(this._priv, enc);
};
DH.prototype.getPrime = function(enc) {
    return formatReturnValue(this.__prime, enc);
};
DH.prototype.getGenerator = function(enc) {
    return formatReturnValue(this._gen, enc);
};
DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || "utf8";
    if (!Buffer.isBuffer(gen)) gen = new Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new BN(gen);
    return this;
};
function formatReturnValue(bn, enc) {
    var buf = new Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"buffer":"fCgem","bn.js":"VopIn","miller-rabin":"i79Nu","./generatePrime":"ZMXAL","randombytes":"8hjhE"}],"jbRNy":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
var createHash = require("create-hash");
var stream = require("readable-stream");
var inherits = require("inherits");
var sign = require("./sign");
var verify = require("./verify");
var algorithms = require("./algorithms.json");
Object.keys(algorithms).forEach(function(key) {
    algorithms[key].id = Buffer.from(algorithms[key].id, "hex");
    algorithms[key.toLowerCase()] = algorithms[key];
});
function Sign(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error("Unknown message digest");
    this._hashType = data.hash;
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Sign, stream.Writable);
Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
Sign.prototype.update = function update(data, enc) {
    if (typeof data === "string") data = Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = sign(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function Verify(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error("Unknown message digest");
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Verify, stream.Writable);
Verify.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
Verify.prototype.update = function update(data, enc) {
    if (typeof data === "string") data = Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === "string") sig = Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return verify(sig, hash, key, this._signType, this._tag);
};
function createSign(algorithm) {
    return new Sign(algorithm);
}
function createVerify(algorithm) {
    return new Verify(algorithm);
}
module.exports = {
    Sign: createSign,
    Verify: createVerify,
    createSign: createSign,
    createVerify: createVerify
};

},{"safe-buffer":"eW7r9","create-hash":"2WyL8","readable-stream":"jXNWE","inherits":"ciYqL","./sign":"lDgyi","./verify":"vbFso","./algorithms.json":"kWFdV"}],"ciYqL":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"lDgyi":[function(require,module,exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require("safe-buffer").Buffer;
var createHmac = require("create-hmac");
var crt = require("browserify-rsa");
var EC = require("elliptic").ec;
var BN = require("bn.js");
var parseKeys = require("parse-asn1");
var curves = require("./curves.json");
function sign(hash, key, hashType, signType, tag) {
    var priv = parseKeys(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") throw new Error("wrong private key type");
        return ecSign(hash, priv);
    } else if (priv.type === "dsa") {
        if (signType !== "dsa") throw new Error("wrong private key type");
        return dsaSign(hash, priv, hashType);
    } else {
        if (signType !== "rsa" && signType !== "ecdsa/rsa") throw new Error("wrong private key type");
    }
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(0xff);
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    var out = crt(pad, priv);
    return out;
}
function ecSign(hash, priv) {
    var curveId = curves[priv.curve.join(".")];
    if (!curveId) throw new Error("unknown curve " + priv.curve.join("."));
    var curve = new EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return Buffer.from(out.toDER());
}
function dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new BN(0);
    var k;
    var H = bits2int(hash, q).mod(q);
    var s = false;
    var kv = getKey(x, q, hash, algo);
    while(s === false){
        k = makeKey(q, kv, algo);
        r = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new BN(0);
        }
    }
    return toDER(r, s);
}
function toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        0x30,
        total,
        0x02,
        r.length
    ];
    res = res.concat(r, [
        0x02,
        s.length
    ], s);
    return Buffer.from(res);
}
function getKey(x, q, hash, algo) {
    x = Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - x.length);
        x = Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = bits2octets(hash, q);
    var v = Buffer.alloc(hlen);
    v.fill(1);
    var k = Buffer.alloc(hlen);
    k = createHmac(algo, k).update(v).update(Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    k = createHmac(algo, k).update(v).update(Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function bits2int(obits, q) {
    var bits = new BN(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function bits2octets(bits, q) {
    bits = bits2int(bits, q);
    bits = bits.mod(q);
    var out = Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - out.length);
        out = Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
            t = Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = bits2int(t, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([
            0
        ])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1);
    return k;
}
function makeR(g, k, p, q) {
    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;

},{"safe-buffer":"eW7r9","create-hmac":"k1utz","browserify-rsa":"e594P","elliptic":"1NKsH","bn.js":"dkoZR","parse-asn1":"4Szbv","./curves.json":"iadQk"}],"e594P":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require("bn.js");
var randomBytes = require("randombytes");
function blind(priv) {
    var r = getr(priv);
    var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new BN(randomBytes(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));
    return r;
}
function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(BN.mont(priv.prime1));
    var c2 = blinded.toRed(BN.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, "be", len);
}
crt.getr = getr;
module.exports = crt;

},{"buffer":"fCgem","bn.js":"a7QF4","randombytes":"8hjhE"}],"a7QF4":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("buffer").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, "Invalid character in " + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"buffer":"f2Ci1"}],"dkoZR":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("buffer").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, "Invalid character in " + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"buffer":"f2Ci1"}],"4Szbv":[function(require,module,exports) {
var asn1 = require("./asn1");
var aesid = require("./aesid.json");
var fixProc = require("./fixProc");
var ciphers = require("browserify-aes");
var compat = require("pbkdf2");
var Buffer = require("safe-buffer").Buffer;
module.exports = parseKeys;
function parseKeys(buffer) {
    var password;
    if (typeof buffer === "object" && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === "string") buffer = Buffer.from(buffer);
    var stripped = fixProc(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case "CERTIFICATE":
            ndata = asn1.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case "PUBLIC KEY":
            if (!ndata) ndata = asn1.PublicKey.decode(data, "der");
            subtype = ndata.algorithm.algorithm.join(".");
            switch(subtype){
                case "1.2.840.113549.1.1.1":
                    return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
                case "1.2.840.10045.2.1":
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: "ec",
                        data: ndata
                    };
                case "1.2.840.10040.4.1":
                    ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, "der");
                    return {
                        type: "dsa",
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error("unknown key id " + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case "ENCRYPTED PRIVATE KEY":
            data = asn1.EncryptedPrivateKey.decode(data, "der");
            data = decrypt(data, password);
        // falls through
        case "PRIVATE KEY":
            ndata = asn1.PrivateKey.decode(data, "der");
            subtype = ndata.algorithm.algorithm.join(".");
            switch(subtype){
                case "1.2.840.113549.1.1.1":
                    return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
                case "1.2.840.10045.2.1":
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
                    };
                case "1.2.840.10040.4.1":
                    ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, "der");
                    return {
                        type: "dsa",
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error("unknown key id " + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case "RSA PUBLIC KEY":
            return asn1.RSAPublicKey.decode(data, "der");
        case "RSA PRIVATE KEY":
            return asn1.RSAPrivateKey.decode(data, "der");
        case "DSA PRIVATE KEY":
            return {
                type: "dsa",
                params: asn1.DSAPrivateKey.decode(data, "der")
            };
        case "EC PRIVATE KEY":
            data = asn1.ECPrivateKey.decode(data, "der");
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error("unknown key type " + type);
    }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split("-")[1], 10) / 8;
    var key = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
    var cipher = ciphers.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return Buffer.concat(out);
}

},{"./asn1":"l0ugz","./aesid.json":"bvb6u","./fixProc":"bNDUb","browserify-aes":"hnlHj","pbkdf2":"g38Hg","safe-buffer":"eW7r9"}],"l0ugz":[function(require,module,exports) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
"use strict";
var asn1 = require("asn1.js");
exports.certificate = require("./certificate");
var RSAPrivateKey = asn1.define("RSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
});
exports.RSAPrivateKey = RSAPrivateKey;
var RSAPublicKey = asn1.define("RSAPublicKey", function() {
    this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
});
exports.RSAPublicKey = RSAPublicKey;
var PublicKey = asn1.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
});
exports.PublicKey = PublicKey;
var AlgorithmIdentifier = asn1.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
});
var PrivateKeyInfo = asn1.define("PrivateKeyInfo", function() {
    this.seq().obj(this.key("version").int(), this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPrivateKey").octstr());
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define("EncryptedPrivateKeyInfo", function() {
    this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
});
exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
var DSAPrivateKey = asn1.define("DSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
});
exports.DSAPrivateKey = DSAPrivateKey;
exports.DSAparam = asn1.define("DSAparam", function() {
    this.int();
});
var ECPrivateKey = asn1.define("ECPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(ECParameters), this.key("publicKey").optional().explicit(1).bitstr());
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define("ECParameters", function() {
    this.choice({
        namedCurve: this.objid()
    });
});
exports.signature = asn1.define("signature", function() {
    this.seq().obj(this.key("r").int(), this.key("s").int());
});

},{"asn1.js":"iV1JX","./certificate":"Tf0QA"}],"iV1JX":[function(require,module,exports) {
"use strict";
const asn1 = exports;
asn1.bignum = require("bn.js");
asn1.define = require("./asn1/api").define;
asn1.base = require("./asn1/base");
asn1.constants = require("./asn1/constants");
asn1.decoders = require("./asn1/decoders");
asn1.encoders = require("./asn1/encoders");

},{"bn.js":"VopIn","./asn1/api":"2oHUo","./asn1/base":"3q4wA","./asn1/constants":"oiTK8","./asn1/decoders":"awa6C","./asn1/encoders":"2psTt"}],"2oHUo":[function(require,module,exports) {
"use strict";
const encoders = require("./encoders");
const decoders = require("./decoders");
const inherits = require("inherits");
const api = exports;
api.define = function define(name, body) {
    return new Entity(name, body);
};
function Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
}
Entity.prototype._createNamed = function createNamed(Base) {
    const name = this.name;
    function Generated(entity) {
        this._initNamed(entity, name);
    }
    inherits(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
    };
    return new Generated(this);
};
Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || "der";
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(decoders[enc]);
    return this.decoders[enc];
};
Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || "der";
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(encoders[enc]);
    return this.encoders[enc];
};
Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

},{"./encoders":"2psTt","./decoders":"awa6C","inherits":"bRL3M"}],"2psTt":[function(require,module,exports) {
"use strict";
const encoders = exports;
encoders.der = require("./der");
encoders.pem = require("./pem");

},{"./der":"b1CZy","./pem":"jRlrF"}],"b1CZy":[function(require,module,exports) {
"use strict";
const inherits = require("inherits");
const Buffer = require("safer-buffer").Buffer;
const Node = require("../base/node");
// Import DER constants
const der = require("../constants/der");
function DEREncoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DEREncoder;
DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function DERNode(parent) {
    Node.call(this, "der", parent);
}
inherits(DERNode, Node);
DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 0x80) {
        const header = Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    let lenOctets = 1;
    for(let i = content.length; i >= 0x100; i >>= 8)lenOctets++;
    const header1 = Buffer.alloc(2 + lenOctets);
    header1[0] = encodedTag;
    header1[1] = 0x80 | lenOctets;
    for(let i1 = 1 + lenOctets, j = content.length; j > 0; i1--, j >>= 8)header1[i1] = j & 0xff;
    return this._createEncoderBuffer([
        header1,
        content
    ]);
};
DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === "bitstr") return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === "bmpstr") {
        const buf = Buffer.alloc(str.length * 2);
        for(let i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === "numstr") {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === "printstr") {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === "objDesc") return this._createEncoderBuffer(str);
    else return this.reporter.error("Encoding of string type: " + tag + " unsupported");
};
DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === "string") {
        if (!values) return this.reporter.error("string objid given, but no values map found");
        if (!values.hasOwnProperty(id)) return this.reporter.error("objid not found in values map");
        id = values[id].split(/[\s.]+/g);
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(let i1 = 0; i1 < id.length; i1++)id[i1] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error("Second objid identifier OOB");
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    let size = 0;
    for(let i2 = 0; i2 < id.length; i2++){
        let ident = id[i2];
        for(size++; ident >= 0x80; ident >>= 7)size++;
    }
    const objid = Buffer.alloc(size);
    let offset = objid.length - 1;
    for(let i3 = id.length - 1; i3 >= 0; i3--){
        let ident1 = id[i3];
        objid[offset--] = ident1 & 0x7f;
        while((ident1 >>= 7) > 0)objid[offset--] = 0x80 | ident1 & 0x7f;
    }
    return this._createEncoderBuffer(objid);
};
function two(num) {
    if (num < 10) return "0" + num;
    else return num;
}
DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === "gentime") str = [
        two(date.getUTCFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        "Z"
    ].join("");
    else if (tag === "utctime") str = [
        two(date.getUTCFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        "Z"
    ].join("");
    else this.reporter.error("Encoding " + tag + " time is not supported yet");
    return this._encodeStr(str, "octstr");
};
DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer("");
};
DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === "string") {
        if (!values) return this.reporter.error("String int or enum given, but no values map");
        if (!values.hasOwnProperty(num)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== "number" && !Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) numArray.unshift(0);
        num = Buffer.from(numArray);
    }
    if (Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0) size++;
        const out = Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 0x80) return this._createEncoderBuffer(num);
    if (num < 0x100) return this._createEncoderBuffer([
        0,
        num
    ]);
    let size1 = 1;
    for(let i = num; i >= 0x100; i >>= 8)size1++;
    const out1 = new Array(size1);
    for(let i1 = out1.length - 1; i1 >= 0; i1--){
        out1[i1] = num & 0xff;
        num >>= 8;
    }
    if (out1[0] & 0x80) out1.unshift(0);
    return this._createEncoderBuffer(Buffer.from(out1));
};
DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 0xff : 0);
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function") entity = entity(obj);
    return entity._getEncoder("der").tree;
};
DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i;
    if (state["default"] === null) return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === "seqof") tag = "seq";
    else if (tag === "setof") tag = "set";
    if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];
    else if (typeof tag === "number" && (tag | 0) === tag) res = tag;
    else return reporter.error("Unknown tag: " + tag);
    if (res >= 0x1f) return reporter.error("Multi-octet tag encoding unsupported");
    if (!primitive) res |= 0x20;
    res |= der.tagClassByName[cls || "universal"] << 6;
    return res;
}

},{"inherits":"bRL3M","safer-buffer":"aLyFx","../base/node":"l9Edp","../constants/der":"i6Hqy"}],"aLyFx":[function(require,module,exports) {
/* eslint-disable node/no-deprecated-api */ "use strict";
var process = require("process");
var buffer = require("buffer");
var Buffer = buffer.Buffer;
var safer = {};
var key;
for(key in buffer){
    if (!buffer.hasOwnProperty(key)) continue;
    if (key === "SlowBuffer" || key === "Buffer") continue;
    safer[key] = buffer[key];
}
var Safer = safer.Buffer = {};
for(key in Buffer){
    if (!Buffer.hasOwnProperty(key)) continue;
    if (key === "allocUnsafe" || key === "allocUnsafeSlow") continue;
    Safer[key] = Buffer[key];
}
safer.Buffer.prototype = Buffer.prototype;
if (!Safer.from || Safer.from === Uint8Array.from) Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    if (value && typeof value.length === "undefined") throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    return Buffer(value, encodingOrOffset, length);
};
if (!Safer.alloc) Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    if (size < 0 || size >= 2147483648) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === "string") buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!safer.kStringMaxLength) try {
    safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!safer.constants) {
    safer.constants = {
        MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
}
module.exports = safer;

},{"process":"d5jf4","buffer":"fCgem"}],"l9Edp":[function(require,module,exports) {
"use strict";
const Reporter = require("../base/reporter").Reporter;
const EncoderBuffer = require("../base/buffer").EncoderBuffer;
const DecoderBuffer = require("../base/buffer").DecoderBuffer;
const assert = require("minimalistic-assert");
// Supported tags
const tags = [
    "seq",
    "seqof",
    "set",
    "setof",
    "objid",
    "bool",
    "gentime",
    "utctime",
    "null_",
    "enum",
    "int",
    "objDesc",
    "bitstr",
    "bmpstr",
    "charstr",
    "genstr",
    "graphstr",
    "ia5str",
    "iso646str",
    "numstr",
    "octstr",
    "printstr",
    "t61str",
    "unistr",
    "utf8str",
    "videostr"
];
// Public methods list
const methods = [
    "key",
    "obj",
    "use",
    "optional",
    "explicit",
    "implicit",
    "def",
    "choice",
    "any",
    "contains"
].concat(tags);
// Overrided methods list
const overrided = [
    "_peekTag",
    "_decodeTag",
    "_use",
    "_decodeStr",
    "_decodeObjid",
    "_decodeTime",
    "_decodeNull",
    "_decodeInt",
    "_decodeBool",
    "_decodeList",
    "_encodeComposite",
    "_encodeStr",
    "_encodeObjid",
    "_encodeTime",
    "_encodeNull",
    "_encodeInt",
    "_encodeBool"
];
function Node(enc, parent, name) {
    const state = {};
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state["default"] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = Node;
const stateProps = [
    "enc",
    "parent",
    "children",
    "tag",
    "args",
    "reverseArgs",
    "choice",
    "optional",
    "any",
    "obj",
    "use",
    "alteredUse",
    "key",
    "default",
    "explicit",
    "implicit",
    "contains"
];
Node.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {};
    stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
Node.prototype._wrap = function wrap() {
    const state = this._baseState;
    methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            const clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
        };
    }, this);
};
Node.prototype._init = function init(body) {
    const state = this._baseState;
    assert(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    assert.equal(state.children.length, 1, "Root node can have only one child");
};
Node.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    // Filter children and args
    const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== "object" || arg.constructor !== Object) return arg;
            const res = {};
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                const value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
overrided.forEach(function(method) {
    Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + " not implemented for encoding: " + state.enc);
    };
});
//
// Public methods
//
tags.forEach(function(tag) {
    Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
Node.prototype.use = function use(item) {
    assert(item);
    const state = this._baseState;
    assert(state.use === null);
    state.use = item;
    return this;
};
Node.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
};
Node.prototype.def = function def(val) {
    const state = this._baseState;
    assert(state["default"] === null);
    state["default"] = val;
    state.optional = true;
    return this;
};
Node.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
Node.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
Node.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
Node.prototype.key = function key(newKey) {
    const state = this._baseState;
    assert(state.key === null);
    state.key = newKey;
    return this;
};
Node.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
};
Node.prototype.choice = function choice(obj) {
    const state = this._baseState;
    assert(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
    }));
    return this;
};
Node.prototype.contains = function contains(item) {
    const state = this._baseState;
    assert(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
Node.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    let result = state["default"];
    let present = true;
    let prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            const save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    let prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            const explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit)) return explicit;
            input = explicit;
        }
        const start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            let save1;
            if (state.any) save1 = input.save();
            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save1);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, "tagged");
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, "content");
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
            const data = new DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === "seq" || tag === "set") return null;
    if (tag === "seqof" || tag === "setof") return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === "objid" && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === "objid") return this._decodeObjid(input, null, null, options);
    else if (tag === "gentime" || tag === "utctime") return this._decodeTime(input, tag, options);
    else if (tag === "null_") return this._decodeNull(input, options);
    else if (tag === "bool") return this._decodeBool(input, options);
    else if (tag === "objDesc") return this._decodeStr(input, tag, options);
    else if (tag === "int" || tag === "enum") return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error("unknown tag: " + tag);
};
Node.prototype._getUse = function _getUse(entity, obj) {
    const state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    assert(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
Node.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
            const value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error("Choice not matched");
    return result;
};
//
// Encoding
//
Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
};
Node.prototype._encode = function encode(data, reporter, parent) {
    const state = this._baseState;
    if (state["default"] !== null && state["default"] === data) return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
Node.prototype._encodeValue = function encode(data, reporter, parent) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());
    let result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state.optional && data === undefined) {
        if (state["default"] !== null) data = state["default"];
        else return;
    }
    // Encode children first
    let content = null;
    let primitive = false;
    if (state.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state.choice) result = this._encodeChoice(data, reporter);
    else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state.children) {
        content = state.children.map(function(child) {
            if (child._baseState.tag === "null_") return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error("Child should have a key");
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== "object") return reporter.error("Child expected, but input is not object");
            const res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state.tag === "seqof" || state.tag === "setof") {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state.args && state.args.length === 1)) return reporter.error("Too many args for : " + state.tag);
            if (!Array.isArray(data)) return reporter.error("seqof/setof, but data is not Array");
            const child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                const state = this._baseState;
                return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state.use !== null) result = this._getUse(state.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? "universal" : "context";
        if (tag === null) {
            if (state.use === null) reporter.error("Tag could be omitted only for .use()");
        } else if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, "context", result);
    return result;
};
Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) assert(false, data.type + " not found in " + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === "objid" && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === "objid") return this._encodeObjid(data, null, null);
    else if (tag === "gentime" || tag === "utctime") return this._encodeTime(data, tag);
    else if (tag === "null_") return this._encodeNull();
    else if (tag === "int" || tag === "enum") return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === "bool") return this._encodeBool(data);
    else if (tag === "objDesc") return this._encodeStr(data, tag);
    else throw new Error("Unsupported tag: " + tag);
};
Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/reporter":"2Vti8","../base/buffer":"1GNVB","minimalistic-assert":"8OvWh"}],"2Vti8":[function(require,module,exports) {
"use strict";
const inherits = require("inherits");
function Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
    };
}
exports.Reporter = Reporter;
Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
};
Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
Reporter.prototype.path = function path() {
    return this._reporterState.path.join("/");
};
Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {};
    return prev;
};
Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
};
Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof ReporterError;
    if (inherited) err = msg;
    else err = new ReporterError(state.path.map(function(elem) {
        return "[" + JSON.stringify(elem) + "]";
    }).join(""), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
}
inherits(ReporterError, Error);
ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + " at: " + (this.path || "(shallow)");
    if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

},{"inherits":"bRL3M"}],"1GNVB":[function(require,module,exports) {
"use strict";
const inherits = require("inherits");
const Reporter = require("../base/reporter").Reporter;
const Buffer = require("safer-buffer").Buffer;
function DecoderBuffer(base, options) {
    Reporter.call(this, options);
    if (!Buffer.isBuffer(base)) {
        this.error("Input not Buffer");
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;
DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof DecoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === "object" && Buffer.isBuffer(data.base) && data.constructor.name === "DecoderBuffer" && typeof data.offset === "number" && typeof data.length === "number" && typeof data.save === "function" && typeof data.restore === "function" && typeof data.isEmpty === "function" && typeof data.readUInt8 === "function" && typeof data.skip === "function" && typeof data.raw === "function";
    return isCompatible;
};
DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
    };
};
DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    const res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    Reporter.prototype.restore.call(this, save.reporter);
    return res;
};
DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || "DecoderBuffer overrun");
};
DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || "DecoderBuffer overrun");
    const res = new DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
};
function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!EncoderBuffer.isEncoderBuffer(item)) item = new EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === "number") {
        if (!(0 <= value && value <= 0xff)) return reporter.error("non-byte EncoderBuffer value");
        this.value = value;
        this.length = 1;
    } else if (typeof value === "string") {
        this.value = value;
        this.length = Buffer.byteLength(value);
    } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error("Unsupported type: " + typeof value);
}
exports.EncoderBuffer = EncoderBuffer;
EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof EncoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === "object" && data.constructor.name === "EncoderBuffer" && typeof data.length === "number" && typeof data.join === "function";
    return isCompatible;
};
EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === "number") out[offset] = this.value;
        else if (typeof this.value === "string") out.write(this.value, offset);
        else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

},{"inherits":"bRL3M","../base/reporter":"2Vti8","safer-buffer":"aLyFx"}],"i6Hqy":[function(require,module,exports) {
"use strict";
// Helper
function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
}
exports.tagClass = {
    0: "universal",
    1: "application",
    2: "context",
    3: "private"
};
exports.tagClassByName = reverse(exports.tagClass);
exports.tag = {
    0x00: "end",
    0x01: "bool",
    0x02: "int",
    0x03: "bitstr",
    0x04: "octstr",
    0x05: "null_",
    0x06: "objid",
    0x07: "objDesc",
    0x08: "external",
    0x09: "real",
    0x0a: "enum",
    0x0b: "embed",
    0x0c: "utf8str",
    0x0d: "relativeOid",
    0x10: "seq",
    0x11: "set",
    0x12: "numstr",
    0x13: "printstr",
    0x14: "t61str",
    0x15: "videostr",
    0x16: "ia5str",
    0x17: "utctime",
    0x18: "gentime",
    0x19: "graphstr",
    0x1a: "iso646str",
    0x1b: "genstr",
    0x1c: "unistr",
    0x1d: "charstr",
    0x1e: "bmpstr"
};
exports.tagByName = reverse(exports.tag);

},{}],"jRlrF":[function(require,module,exports) {
"use strict";
const inherits = require("inherits");
const DEREncoder = require("./der");
function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = "pem";
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;
PEMEncoder.prototype.encode = function encode(data, options) {
    const buf = DEREncoder.prototype.encode.call(this, data);
    const p = buf.toString("base64");
    const out = [
        "-----BEGIN " + options.label + "-----"
    ];
    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push("-----END " + options.label + "-----");
    return out.join("\n");
};

},{"inherits":"bRL3M","./der":"b1CZy"}],"awa6C":[function(require,module,exports) {
"use strict";
const decoders = exports;
decoders.der = require("./der");
decoders.pem = require("./pem");

},{"./der":"foBr8","./pem":"iexo6"}],"foBr8":[function(require,module,exports) {
"use strict";
const inherits = require("inherits");
const bignum = require("bn.js");
const DecoderBuffer = require("../base/buffer").DecoderBuffer;
const Node = require("../base/node");
// Import DER constants
const der = require("../constants/der");
function DERDecoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DERDecoder;
DERDecoder.prototype.decode = function decode(data, options) {
    if (!DecoderBuffer.isDecoderBuffer(data)) data = new DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function DERNode(parent) {
    Node.call(this, "der", parent);
}
inherits(DERNode, Node);
DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    const state = buffer.save();
    const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
};
DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    const decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    let len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    const state = buffer.save();
    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === "end") break;
    }
};
DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    const result = [];
    while(!buffer.isEmpty()){
        const possibleEnd = this._peekTag(buffer, "end");
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, "der", options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === "bitstr") {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === "bmpstr") {
        const raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error("Decoding of string type: bmpstr length mismatch");
        let str = "";
        for(let i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === "numstr") {
        const numstr = buffer.raw().toString("ascii");
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === "octstr") return buffer.raw();
    else if (tag === "objDesc") return buffer.raw();
    else if (tag === "printstr") {
        const printstr = buffer.raw().toString("ascii");
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error("Decoding of string type: " + tag + " unsupported");
};
DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 0x80) identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        let tmp = values[result.join(" ")];
        if (tmp === undefined) tmp = values[result.join(".")];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    const str = buffer.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === "gentime") {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === "utctime") {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error("Decoding " + tag + " time is not supported yet");
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
DERNode.prototype._decodeBool = function decodeBool(buffer) {
    const res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    const raw = buffer.raw();
    let res = new bignum(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function") entity = entity(obj);
    return entity._getDecoder("der").tree;
};
// Utility methods
function derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    const cls = der.tagClass[tag >> 6];
    const primitive = (tag & 0x20) === 0;
    // Multi-octet tag - load
    if ((tag & 0x1f) === 0x1f) {
        let oct = tag;
        tag = 0;
        while((oct & 0x80) === 0x80){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 0x7f;
        }
    } else tag &= 0x1f;
    const tagStr = der.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 0x80) return null;
    // Definite form
    if ((len & 0x80) === 0) // Short form
    return len;
    // Long form
    const num = len & 0x7f;
    if (num > 4) return buf.error("length octect is too long");
    len = 0;
    for(let i = 0; i < num; i++){
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

},{"inherits":"bRL3M","bn.js":"VopIn","../base/buffer":"1GNVB","../base/node":"l9Edp","../constants/der":"i6Hqy"}],"iexo6":[function(require,module,exports) {
"use strict";
const inherits = require("inherits");
const Buffer = require("safer-buffer").Buffer;
const DERDecoder = require("./der");
function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = "pem";
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;
PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for(let i = 0; i < lines.length; i++){
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== "BEGIN") break;
            start = i;
        } else {
            if (match[1] !== "END") break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error("PEM section not found for: " + label);
    const base64 = lines.slice(start + 1, end).join("");
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, "");
    const input = Buffer.from(base64, "base64");
    return DERDecoder.prototype.decode.call(this, input, options);
};

},{"inherits":"bRL3M","safer-buffer":"aLyFx","./der":"foBr8"}],"3q4wA":[function(require,module,exports) {
"use strict";
const base = exports;
base.Reporter = require("./reporter").Reporter;
base.DecoderBuffer = require("./buffer").DecoderBuffer;
base.EncoderBuffer = require("./buffer").EncoderBuffer;
base.Node = require("./node");

},{"./reporter":"2Vti8","./buffer":"1GNVB","./node":"l9Edp"}],"oiTK8":[function(require,module,exports) {
"use strict";
const constants = exports;
// Helper
constants._reverse = function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
};
constants.der = require("./der");

},{"./der":"i6Hqy"}],"Tf0QA":[function(require,module,exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
"use strict";
var asn = require("asn1.js");
var Time = asn.define("Time", function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
    this.seq().obj(this.key("type").objid(), this.key("value").any());
});
var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
});
var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
});
var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
    this.setof(AttributeTypeValue);
});
var RDNSequence = asn.define("RDNSequence", function() {
    this.seqof(RelativeDistinguishedName);
});
var Name = asn.define("Name", function() {
    this.choice({
        rdnSequence: this.use(RDNSequence)
    });
});
var Validity = asn.define("Validity", function() {
    this.seq().obj(this.key("notBefore").use(Time), this.key("notAfter").use(Time));
});
var Extension = asn.define("Extension", function() {
    this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
});
var TBSCertificate = asn.define("TBSCertificate", function() {
    this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(AlgorithmIdentifier), this.key("issuer").use(Name), this.key("validity").use(Validity), this.key("subject").use(Name), this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(Extension).optional());
});
var X509Certificate = asn.define("X509Certificate", function() {
    this.seq().obj(this.key("tbsCertificate").use(TBSCertificate), this.key("signatureAlgorithm").use(AlgorithmIdentifier), this.key("signatureValue").bitstr());
});
module.exports = X509Certificate;

},{"asn1.js":"iV1JX"}],"bvb6u":[function(require,module,exports) {
module.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');

},{}],"bNDUb":[function(require,module,exports) {
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
var evp = require("evp_bytestokey");
var ciphers = require("browserify-aes");
var Buffer = require("safe-buffer").Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match(findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ""), "base64");
    } else {
        var suite = "aes" + match[1];
        var iv = Buffer.from(match[2], "hex");
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ""), "base64");
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = Buffer.concat(out);
    }
    var tag = key.match(startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

},{"evp_bytestokey":"1rd4d","browserify-aes":"hnlHj","safe-buffer":"eW7r9"}],"iadQk":[function(require,module,exports) {
module.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');

},{}],"vbFso":[function(require,module,exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require("safe-buffer").Buffer;
var BN = require("bn.js");
var EC = require("elliptic").ec;
var parseKeys = require("parse-asn1");
var curves = require("./curves.json");
function verify(sig, hash, key, signType, tag) {
    var pub = parseKeys(key);
    if (pub.type === "ec") {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") throw new Error("wrong public key type");
        return ecVerify(sig, hash, pub);
    } else if (pub.type === "dsa") {
        if (signType !== "dsa") throw new Error("wrong public key type");
        return dsaVerify(sig, hash, pub);
    } else {
        if (signType !== "rsa" && signType !== "ecdsa/rsa") throw new Error("wrong public key type");
    }
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(0xff);
        padNum++;
    }
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    pad = Buffer.from(pad);
    var red = BN.mont(pub.modulus);
    sig = new BN(sig).toRed(red);
    sig = sig.redPow(new BN(pub.publicExponent));
    sig = Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while(++i < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function ecVerify(sig, hash, pub) {
    var curveId = curves[pub.data.algorithm.curve.join(".")];
    if (!curveId) throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
    var curve = new EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = parseKeys.signature.decode(sig, "der");
    var s = unpacked.s;
    var r = unpacked.r;
    checkValue(s, q);
    checkValue(r, q);
    var montp = BN.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error("invalid sig");
    if (b.cmp(q) >= q) throw new Error("invalid sig");
}
module.exports = verify;

},{"safe-buffer":"eW7r9","bn.js":"dkoZR","elliptic":"1NKsH","parse-asn1":"4Szbv","./curves.json":"iadQk"}],"9Rcg1":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var elliptic = require("elliptic");
var BN = require("bn.js");
module.exports = function createECDH(curve) {
    return new ECDH(curve);
};
var aliases = {
    secp256k1: {
        name: "secp256k1",
        byteLength: 32
    },
    secp224r1: {
        name: "p224",
        byteLength: 28
    },
    prime256v1: {
        name: "p256",
        byteLength: 32
    },
    prime192v1: {
        name: "p192",
        byteLength: 24
    },
    ed25519: {
        name: "ed25519",
        byteLength: 32
    },
    secp384r1: {
        name: "p384",
        byteLength: 48
    },
    secp521r1: {
        name: "p521",
        byteLength: 66
    }
};
aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;
function ECDH(curve) {
    this.curveType = aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || "utf8";
    if (!Buffer.isBuffer(other)) other = new Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return formatReturnValue(out, enc, this.curveType.byteLength);
};
ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === "compressed", true);
    if (format === "hybrid") {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return formatReturnValue(key, enc);
};
ECDH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue(this.keys.getPrivate(), enc);
};
ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || "utf8";
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || "utf8";
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length);
        zeros.fill(0);
        buf = Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"buffer":"fCgem","elliptic":"1NKsH","bn.js":"VopIn"}],"h9Rdh":[function(require,module,exports) {
exports.publicEncrypt = require("./publicEncrypt");
exports.privateDecrypt = require("./privateDecrypt");
exports.privateEncrypt = function privateEncrypt(key, buf) {
    return exports.publicEncrypt(key, buf, true);
};
exports.publicDecrypt = function publicDecrypt(key, buf) {
    return exports.privateDecrypt(key, buf, true);
};

},{"./publicEncrypt":"e6nSQ","./privateDecrypt":"jIkKI"}],"e6nSQ":[function(require,module,exports) {
var parseKeys = require("parse-asn1");
var randomBytes = require("randombytes");
var createHash = require("create-hash");
var mgf = require("./mgf");
var xor = require("./xor");
var BN = require("bn.js");
var withPublic = require("./withPublic");
var crt = require("browserify-rsa");
var Buffer = require("safe-buffer").Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = oaep(key, msg);
    else if (padding === 1) paddedMsg = pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new BN(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error("data too long for modulus");
    } else throw new Error("unknown padding");
    if (reverse) return crt(paddedMsg, key);
    else return withPublic(paddedMsg, key);
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash("sha1").update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error("message too long");
    var ps = Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = randomBytes(hLen);
    var maskedDb = xor(Buffer.concat([
        iHash,
        ps,
        Buffer.alloc(1, 1),
        msg
    ], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new BN(Buffer.concat([
        Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error("message too long");
    var ps;
    if (reverse) ps = Buffer.alloc(k - mLen - 3, 0xff);
    else ps = nonZero(k - mLen - 3);
    return new BN(Buffer.concat([
        Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        Buffer.alloc(1),
        msg
    ], k));
}
function nonZero(len) {
    var out = Buffer.allocUnsafe(len);
    var i = 0;
    var cache = randomBytes(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = randomBytes(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

},{"parse-asn1":"4Szbv","randombytes":"8hjhE","create-hash":"2WyL8","./mgf":"e2JgG","./xor":"iaxu0","bn.js":"VopIn","./withPublic":"fFkPV","browserify-rsa":"e594P","safe-buffer":"eW7r9"}],"e2JgG":[function(require,module,exports) {
var createHash = require("create-hash");
var Buffer = require("safe-buffer").Buffer;
module.exports = function(seed, len) {
    var t = Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = i2ops(i++);
        t = Buffer.concat([
            t,
            createHash("sha1").update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function i2ops(c) {
    var out = Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

},{"create-hash":"2WyL8","safe-buffer":"eW7r9"}],"iaxu0":[function(require,module,exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while(++i < len)a[i] ^= b[i];
    return a;
};

},{}],"fFkPV":[function(require,module,exports) {
var BN = require("bn.js");
var Buffer = require("safe-buffer").Buffer;
function withPublic(paddedMsg, key) {
    return Buffer.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
}
module.exports = withPublic;

},{"bn.js":"VopIn","safe-buffer":"eW7r9"}],"jIkKI":[function(require,module,exports) {
var parseKeys = require("parse-asn1");
var mgf = require("./mgf");
var xor = require("./xor");
var BN = require("bn.js");
var crt = require("browserify-rsa");
var createHash = require("create-hash");
var withPublic = require("./withPublic");
var Buffer = require("safe-buffer").Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) throw new Error("decryption error");
    var msg;
    if (reverse) msg = withPublic(new BN(enc), key);
    else msg = crt(enc, key);
    var zBuffer = Buffer.alloc(k - msg.length);
    msg = Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return oaep(key, msg);
    else if (padding === 1) return pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error("unknown padding");
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = createHash("sha1").update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error("decryption error");
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) throw new Error("decryption error");
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error("decryption error");
    return db.slice(i);
}
function pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error("decryption error");
    return msg.slice(i);
}
function compare(a, b) {
    a = Buffer.from(a);
    b = Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while(++i < len)dif += a[i] ^ b[i];
    return dif;
}

},{"parse-asn1":"4Szbv","./mgf":"e2JgG","./xor":"iaxu0","bn.js":"VopIn","browserify-rsa":"e594P","create-hash":"2WyL8","./withPublic":"fFkPV","safe-buffer":"eW7r9"}],"k3tsT":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var process = require("process");
function oldBrowser() {
    throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
}
var safeBuffer = require("safe-buffer");
var randombytes = require("randombytes");
var Buffer = safeBuffer.Buffer;
var kBufferMaxLength = safeBuffer.kMaxLength;
var crypto = global.crypto || global.msCrypto;
var kMaxUint32 = Math.pow(2, 32) - 1;
function assertOffset(offset, length) {
    if (typeof offset !== "number" || offset !== offset) throw new TypeError("offset must be a number");
    if (offset > kMaxUint32 || offset < 0) throw new TypeError("offset must be a uint32");
    if (offset > kBufferMaxLength || offset > length) throw new RangeError("offset out of range");
}
function assertSize(size, offset, length) {
    if (typeof size !== "number" || size !== size) throw new TypeError("size must be a number");
    if (size > kMaxUint32 || size < 0) throw new TypeError("size must be a uint32");
    if (size + offset > length || size > kBufferMaxLength) throw new RangeError("buffer too small");
}
if (crypto && crypto.getRandomValues || false) {
    exports.randomFill = randomFill;
    exports.randomFillSync = randomFillSync;
} else {
    exports.randomFill = oldBrowser;
    exports.randomFillSync = oldBrowser;
}
function randomFill(buf, offset, size, cb) {
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === "function") {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === "function") {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== "function") throw new TypeError('"cb" argument must be a function');
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb);
}
function actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    crypto.getRandomValues(uint);
    if (cb) {
        process.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        randombytes(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes = randombytes(size);
    bytes.copy(buf, offset);
    return buf;
}
function randomFillSync(buf, offset, size) {
    if (typeof offset === "undefined") offset = 0;
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size);
}

},{"process":"d5jf4","safe-buffer":"eW7r9","randombytes":"8hjhE"}],"FcGOz":[function(require,module,exports) {
module.exports = require("./script");
module.exports.Interpreter = require("./interpreter");

},{"./script":"97HeK","./interpreter":"8BEKS"}],"97HeK":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var Address = require("../address");
var BufferReader = require("../encoding/bufferreader");
var BufferWriter = require("../encoding/bufferwriter");
var Hash = require("../crypto/hash");
var Opcode = require("../opcode");
var PublicKey = require("../publickey");
var Signature = require("../crypto/signature");
var Networks = require("../networks");
var $ = require("../util/preconditions");
var _ = require("../util/_");
var errors = require("../errors");
var buffer = require("buffer");
var JSUtil = require("../util/js");
/**
 * A bitcoin transaction script. Each transaction's inputs and outputs
 * has a script that is evaluated to validate it's spending.
 *
 * See https://en.bitcoin.it/wiki/Script
 *
 * @constructor
 * @param {Object|string|Buffer=} from optional data to populate script
 */ var Script = function Script(from) {
    if (!(this instanceof Script)) return new Script(from);
    this.chunks = [];
    if (Buffer.isBuffer(from)) return Script.fromBuffer(from);
    else if (from instanceof Address) return Script.fromAddress(from);
    else if (from instanceof Script) return Script.fromBuffer(from.toBuffer());
    else if (_.isString(from)) return Script.fromString(from);
    else if (_.isObject(from) && _.isArray(from.chunks)) this.set(from);
};
Script.prototype.set = function(obj) {
    $.checkArgument(_.isObject(obj));
    $.checkArgument(_.isArray(obj.chunks));
    this.chunks = obj.chunks;
    return this;
};
Script.fromBuffer = function(buffer) {
    var script = new Script();
    script.chunks = [];
    var br = new BufferReader(buffer);
    while(!br.finished())try {
        var opcodenum = br.readUInt8();
        var len, buf;
        if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {
            len = opcodenum;
            script.chunks.push({
                buf: br.read(len),
                len: len,
                opcodenum: opcodenum
            });
        } else if (opcodenum === Opcode.OP_PUSHDATA1) {
            len = br.readUInt8();
            buf = br.read(len);
            script.chunks.push({
                buf: buf,
                len: len,
                opcodenum: opcodenum
            });
        } else if (opcodenum === Opcode.OP_PUSHDATA2) {
            len = br.readUInt16LE();
            buf = br.read(len);
            script.chunks.push({
                buf: buf,
                len: len,
                opcodenum: opcodenum
            });
        } else if (opcodenum === Opcode.OP_PUSHDATA4) {
            len = br.readUInt32LE();
            buf = br.read(len);
            script.chunks.push({
                buf: buf,
                len: len,
                opcodenum: opcodenum
            });
        } else script.chunks.push({
            opcodenum: opcodenum
        });
    } catch (e) {
        if (e instanceof RangeError) throw new errors.Script.InvalidBuffer(buffer.toString("hex"));
        throw e;
    }
    return script;
};
Script.prototype.toBuffer = function() {
    var bw = new BufferWriter();
    for(var i = 0; i < this.chunks.length; i++){
        var chunk = this.chunks[i];
        var opcodenum = chunk.opcodenum;
        bw.writeUInt8(chunk.opcodenum);
        if (chunk.buf) {
            if (opcodenum < Opcode.OP_PUSHDATA1) bw.write(chunk.buf);
            else if (opcodenum === Opcode.OP_PUSHDATA1) {
                bw.writeUInt8(chunk.len);
                bw.write(chunk.buf);
            } else if (opcodenum === Opcode.OP_PUSHDATA2) {
                bw.writeUInt16LE(chunk.len);
                bw.write(chunk.buf);
            } else if (opcodenum === Opcode.OP_PUSHDATA4) {
                bw.writeUInt32LE(chunk.len);
                bw.write(chunk.buf);
            }
        }
    }
    return bw.concat();
};
Script.fromASM = function(str) {
    var script = new Script();
    script.chunks = [];
    var tokens = str.split(" ");
    var i = 0;
    while(i < tokens.length){
        var token = tokens[i];
        var opcode = Opcode(token);
        var opcodenum = opcode.toNumber();
        // we start with two special cases, 0 and -1, which are handled specially in
        // toASM. see _chunkToString.
        if (token === "0") {
            opcodenum = 0;
            script.chunks.push({
                opcodenum: opcodenum
            });
            i = i + 1;
        } else if (token === "-1") {
            opcodenum = Opcode.OP_1NEGATE;
            script.chunks.push({
                opcodenum: opcodenum
            });
            i = i + 1;
        } else if (_.isUndefined(opcodenum)) {
            var buf = Buffer.from(tokens[i], "hex");
            if (buf.toString("hex") !== tokens[i]) throw new Error("invalid hex string in script");
            var len = buf.length;
            if (len >= 0 && len < Opcode.OP_PUSHDATA1) opcodenum = len;
            else if (len < Math.pow(2, 8)) opcodenum = Opcode.OP_PUSHDATA1;
            else if (len < Math.pow(2, 16)) opcodenum = Opcode.OP_PUSHDATA2;
            else if (len < Math.pow(2, 32)) opcodenum = Opcode.OP_PUSHDATA4;
            script.chunks.push({
                buf: buf,
                len: buf.length,
                opcodenum: opcodenum
            });
            i = i + 1;
        } else {
            script.chunks.push({
                opcodenum: opcodenum
            });
            i = i + 1;
        }
    }
    return script;
};
Script.fromHex = function(str) {
    return new Script(buffer.Buffer.from(str, "hex"));
};
Script.fromString = function(str) {
    if (JSUtil.isHexa(str) || str.length === 0) return new Script(buffer.Buffer.from(str, "hex"));
    var script = new Script();
    script.chunks = [];
    var tokens = str.split(" ");
    var i = 0;
    while(i < tokens.length){
        var token = tokens[i];
        var opcode = Opcode(token);
        var opcodenum = opcode.toNumber();
        if (_.isUndefined(opcodenum)) {
            opcodenum = parseInt(token);
            if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {
                script.chunks.push({
                    buf: Buffer.from(tokens[i + 1].slice(2), "hex"),
                    len: opcodenum,
                    opcodenum: opcodenum
                });
                i = i + 2;
            } else throw new Error("Invalid script: " + JSON.stringify(str));
        } else if (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {
            if (tokens[i + 2].slice(0, 2) !== "0x") throw new Error("Pushdata data must start with 0x");
            script.chunks.push({
                buf: Buffer.from(tokens[i + 2].slice(2), "hex"),
                len: parseInt(tokens[i + 1]),
                opcodenum: opcodenum
            });
            i = i + 3;
        } else {
            script.chunks.push({
                opcodenum: opcodenum
            });
            i = i + 1;
        }
    }
    return script;
};
Script.prototype._chunkToString = function(chunk, type) {
    var opcodenum = chunk.opcodenum;
    var asm = type === "asm";
    var str = "";
    if (!chunk.buf) {
        // no data chunk
        if (typeof Opcode.reverseMap[opcodenum] !== "undefined") {
            if (asm) {
                // A few cases where the opcode name differs from reverseMap
                // aside from 1 to 16 data pushes.
                if (opcodenum === 0) // OP_0 -> 0
                str = str + " 0";
                else if (opcodenum === 79) // OP_1NEGATE -> 1
                str = str + " -1";
                else str = str + " " + Opcode(opcodenum).toString();
            } else str = str + " " + Opcode(opcodenum).toString();
        } else {
            var numstr = opcodenum.toString(16);
            if (numstr.length % 2 !== 0) numstr = "0" + numstr;
            if (asm) str = str + " " + numstr;
            else str = str + " " + "0x" + numstr;
        }
    } else {
        // data chunk
        if (!asm && (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4)) str = str + " " + Opcode(opcodenum).toString();
        if (chunk.len > 0) {
            if (asm) str = str + " " + chunk.buf.toString("hex");
            else str = str + " " + chunk.len + " " + "0x" + chunk.buf.toString("hex");
        }
    }
    return str;
};
Script.prototype.toASM = function() {
    var str = "";
    for(var i = 0; i < this.chunks.length; i++){
        var chunk = this.chunks[i];
        str += this._chunkToString(chunk, "asm");
    }
    return str.substr(1);
};
Script.prototype.toString = function() {
    var str = "";
    for(var i = 0; i < this.chunks.length; i++){
        var chunk = this.chunks[i];
        str += this._chunkToString(chunk);
    }
    return str.substr(1);
};
Script.prototype.toHex = function() {
    return this.toBuffer().toString("hex");
};
Script.prototype.inspect = function() {
    return "<Script: " + this.toString() + ">";
};
// script classification methods
/**
 * @returns {boolean} if this is a pay to pubkey hash output script
 */ Script.prototype.isPublicKeyHashOut = function() {
    return !!(this.chunks.length === 5 && this.chunks[0].opcodenum === Opcode.OP_DUP && this.chunks[1].opcodenum === Opcode.OP_HASH160 && this.chunks[2].buf && this.chunks[2].buf.length === 20 && this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY && this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);
};
/**
 * @returns {boolean} if this is a pay to public key hash input script
 */ Script.prototype.isPublicKeyHashIn = function() {
    if (this.chunks.length === 2) {
        var signatureBuf = this.chunks[0].buf;
        var pubkeyBuf = this.chunks[1].buf;
        if (signatureBuf && signatureBuf.length && signatureBuf[0] === 0x30 && pubkeyBuf && pubkeyBuf.length) {
            var version = pubkeyBuf[0];
            if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) return true;
            else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) return true;
        }
    }
    return false;
};
Script.prototype.getPublicKey = function() {
    $.checkState(this.isPublicKeyOut(), "Can't retrieve PublicKey from a non-PK output");
    return this.chunks[0].buf;
};
Script.prototype.getPublicKeyHash = function() {
    $.checkState(this.isPublicKeyHashOut(), "Can't retrieve PublicKeyHash from a non-PKH output");
    return this.chunks[2].buf;
};
/**
 * @returns {boolean} if this is a public key output script
 */ Script.prototype.isPublicKeyOut = function() {
    if (this.chunks.length === 2 && this.chunks[0].buf && this.chunks[0].buf.length && this.chunks[1].opcodenum === Opcode.OP_CHECKSIG) {
        var pubkeyBuf = this.chunks[0].buf;
        var version = pubkeyBuf[0];
        var isVersion = false;
        if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) isVersion = true;
        else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) isVersion = true;
        if (isVersion) return PublicKey.isValid(pubkeyBuf);
    }
    return false;
};
/**
 * @returns {boolean} if this is a pay to public key input script
 */ Script.prototype.isPublicKeyIn = function() {
    if (this.chunks.length === 1) {
        var signatureBuf = this.chunks[0].buf;
        if (signatureBuf && signatureBuf.length && signatureBuf[0] === 0x30) return true;
    }
    return false;
};
/**
 * @returns {boolean} if this is a p2sh output script
 */ Script.prototype.isScriptHashOut = function() {
    var buf = this.toBuffer();
    return buf.length === 23 && buf[0] === Opcode.OP_HASH160 && buf[1] === 0x14 && buf[buf.length - 1] === Opcode.OP_EQUAL;
};
/**
 * @returns {boolean} if this is a p2sh input script
 * Note that these are frequently indistinguishable from pubkeyhashin
 */ Script.prototype.isScriptHashIn = function() {
    if (this.chunks.length <= 1) return false;
    var redeemChunk = this.chunks[this.chunks.length - 1];
    var redeemBuf = redeemChunk.buf;
    if (!redeemBuf) return false;
    var redeemScript;
    try {
        redeemScript = Script.fromBuffer(redeemBuf);
    } catch (e) {
        if (e instanceof errors.Script.InvalidBuffer) return false;
        throw e;
    }
    var type = redeemScript.classify();
    return type !== Script.types.UNKNOWN;
};
/**
 * @returns {boolean} if this is a mutlsig output script
 */ Script.prototype.isMultisigOut = function() {
    return this.chunks.length > 3 && Opcode.isSmallIntOp(this.chunks[0].opcodenum) && this.chunks.slice(1, this.chunks.length - 2).every(function(obj) {
        return obj.buf && Buffer.isBuffer(obj.buf);
    }) && Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) && this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG;
};
/**
 * @returns {boolean} if this is a multisig input script
 */ Script.prototype.isMultisigIn = function() {
    return this.chunks.length >= 2 && this.chunks[0].opcodenum === 0 && this.chunks.slice(1, this.chunks.length).every(function(obj) {
        return obj.buf && Buffer.isBuffer(obj.buf) && Signature.isTxDER(obj.buf);
    });
};
/**
 * @returns {boolean} true if this is a valid standard OP_RETURN output
 */ Script.prototype.isDataOut = function() {
    var step1 = this.chunks.length >= 1 && this.chunks[0].opcodenum === Opcode.OP_RETURN;
    if (!step1) return false;
    var chunks = this.chunks.slice(1);
    var script2 = new Script({
        chunks: chunks
    });
    return script2.isPushOnly();
};
Script.prototype.isSafeDataOut = function() {
    if (this.chunks.length < 2) return false;
    if (this.chunks[0].opcodenum !== Opcode.OP_FALSE) return false;
    var chunks = this.chunks.slice(1);
    var script2 = new Script({
        chunks
    });
    return script2.isDataOut();
};
/**
 * Retrieve the associated data for this script.
 * In the case of a pay to public key hash or P2SH, return the hash.
 * In the case of safe OP_RETURN data, return an array of buffers
 * In the case of a standard deprecated OP_RETURN, return the data
 * @returns {Buffer}
 */ Script.prototype.getData = function() {
    if (this.isSafeDataOut()) {
        var chunks = this.chunks.slice(2);
        var buffers = chunks.map((chunk)=>chunk.buf);
        return buffers;
    }
    if (this.isDataOut() || this.isScriptHashOut()) {
        if (_.isUndefined(this.chunks[1])) return Buffer.alloc(0);
        else return Buffer.from(this.chunks[1].buf);
    }
    if (this.isPublicKeyHashOut()) return Buffer.from(this.chunks[2].buf);
    throw new Error("Unrecognized script type to get data from");
};
/**
 * @returns {boolean} if the script is only composed of data pushing
 * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)
 */ Script.prototype.isPushOnly = function() {
    return _.every(this.chunks, function(chunk) {
        return chunk.opcodenum <= Opcode.OP_16 || chunk.opcodenum === Opcode.OP_PUSHDATA1 || chunk.opcodenum === Opcode.OP_PUSHDATA2 || chunk.opcodenum === Opcode.OP_PUSHDATA4;
    });
};
Script.types = {};
Script.types.UNKNOWN = "Unknown";
Script.types.PUBKEY_OUT = "Pay to public key";
Script.types.PUBKEY_IN = "Spend from public key";
Script.types.PUBKEYHASH_OUT = "Pay to public key hash";
Script.types.PUBKEYHASH_IN = "Spend from public key hash";
Script.types.SCRIPTHASH_OUT = "Pay to script hash";
Script.types.SCRIPTHASH_IN = "Spend from script hash";
Script.types.MULTISIG_OUT = "Pay to multisig";
Script.types.MULTISIG_IN = "Spend from multisig";
Script.types.DATA_OUT = "Data push";
Script.types.SAFE_DATA_OUT = "Safe data push";
Script.OP_RETURN_STANDARD_SIZE = 220;
/**
 * @returns {object} The Script type if it is a known form,
 * or Script.UNKNOWN if it isn't
 */ Script.prototype.classify = function() {
    if (this._isInput) return this.classifyInput();
    else if (this._isOutput) return this.classifyOutput();
    else {
        var outputType = this.classifyOutput();
        return outputType !== Script.types.UNKNOWN ? outputType : this.classifyInput();
    }
};
Script.outputIdentifiers = {};
Script.outputIdentifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;
Script.outputIdentifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;
Script.outputIdentifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;
Script.outputIdentifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;
Script.outputIdentifiers.DATA_OUT = Script.prototype.isDataOut;
Script.outputIdentifiers.SAFE_DATA_OUT = Script.prototype.isSafeDataOut;
/**
 * @returns {object} The Script type if it is a known form,
 * or Script.UNKNOWN if it isn't
 */ Script.prototype.classifyOutput = function() {
    for(var type in Script.outputIdentifiers){
        if (Script.outputIdentifiers[type].bind(this)()) return Script.types[type];
    }
    return Script.types.UNKNOWN;
};
Script.inputIdentifiers = {};
Script.inputIdentifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;
Script.inputIdentifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;
Script.inputIdentifiers.MULTISIG_IN = Script.prototype.isMultisigIn;
Script.inputIdentifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;
/**
 * @returns {object} The Script type if it is a known form,
 * or Script.UNKNOWN if it isn't
 */ Script.prototype.classifyInput = function() {
    for(var type in Script.inputIdentifiers){
        if (Script.inputIdentifiers[type].bind(this)()) return Script.types[type];
    }
    return Script.types.UNKNOWN;
};
/**
 * @returns {boolean} if script is one of the known types
 */ Script.prototype.isStandard = function() {
    // TODO: Add BIP62 compliance
    return this.classify() !== Script.types.UNKNOWN;
};
// Script construction methods
/**
 * Adds a script element at the start of the script.
 * @param {*} obj a string, number, Opcode, Buffer, or object to add
 * @returns {Script} this script instance
 */ Script.prototype.prepend = function(obj) {
    this._addByType(obj, true);
    return this;
};
/**
 * Compares a script with another script
 */ Script.prototype.equals = function(script) {
    $.checkState(script instanceof Script, "Must provide another script");
    if (this.chunks.length !== script.chunks.length) return false;
    var i;
    for(i = 0; i < this.chunks.length; i++){
        if (Buffer.isBuffer(this.chunks[i].buf) && !Buffer.isBuffer(script.chunks[i].buf)) return false;
        if (Buffer.isBuffer(this.chunks[i].buf) && !this.chunks[i].buf.equals(script.chunks[i].buf)) return false;
        else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) return false;
    }
    return true;
};
/**
 * Adds a script element to the end of the script.
 *
 * @param {*} obj a string, number, Opcode, Buffer, or object to add
 * @returns {Script} this script instance
 *
 */ Script.prototype.add = function(obj) {
    this._addByType(obj, false);
    return this;
};
Script.prototype._addByType = function(obj, prepend) {
    if (typeof obj === "string") this._addOpcode(obj, prepend);
    else if (typeof obj === "number") this._addOpcode(obj, prepend);
    else if (obj instanceof Opcode) this._addOpcode(obj, prepend);
    else if (Buffer.isBuffer(obj)) this._addBuffer(obj, prepend);
    else if (obj instanceof Script) this.chunks = this.chunks.concat(obj.chunks);
    else if (typeof obj === "object") this._insertAtPosition(obj, prepend);
    else throw new Error("Invalid script chunk");
};
Script.prototype._insertAtPosition = function(op, prepend) {
    if (prepend) this.chunks.unshift(op);
    else this.chunks.push(op);
};
Script.prototype._addOpcode = function(opcode, prepend) {
    var op;
    if (typeof opcode === "number") op = opcode;
    else if (opcode instanceof Opcode) op = opcode.toNumber();
    else op = Opcode(opcode).toNumber();
    this._insertAtPosition({
        opcodenum: op
    }, prepend);
    return this;
};
Script.prototype._addBuffer = function(buf, prepend) {
    var opcodenum;
    var len = buf.length;
    if (len >= 0 && len < Opcode.OP_PUSHDATA1) opcodenum = len;
    else if (len < Math.pow(2, 8)) opcodenum = Opcode.OP_PUSHDATA1;
    else if (len < Math.pow(2, 16)) opcodenum = Opcode.OP_PUSHDATA2;
    else if (len < Math.pow(2, 32)) opcodenum = Opcode.OP_PUSHDATA4;
    else throw new Error("You can't push that much data");
    this._insertAtPosition({
        buf: buf,
        len: len,
        opcodenum: opcodenum
    }, prepend);
    return this;
};
Script.prototype.removeCodeseparators = function() {
    var chunks = [];
    for(var i = 0; i < this.chunks.length; i++)if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) chunks.push(this.chunks[i]);
    this.chunks = chunks;
    return this;
};
// high level script builder methods
/**
 * @returns {Script} a new Multisig output script for given public keys,
 * requiring m of those public keys to spend
 * @param {PublicKey[]} publicKeys - list of all public keys controlling the output
 * @param {number} threshold - amount of required signatures to spend the output
 * @param {Object=} opts - Several options:
 *        - noSorting: defaults to false, if true, don't sort the given
 *                      public keys before creating the script
 */ Script.buildMultisigOut = function(publicKeys, threshold, opts) {
    $.checkArgument(threshold <= publicKeys.length, "Number of required signatures must be less than or equal to the number of public keys");
    opts = opts || {};
    var script = new Script();
    script.add(Opcode.smallInt(threshold));
    publicKeys = _.map(publicKeys, PublicKey);
    var sorted = publicKeys;
    if (!opts.noSorting) sorted = publicKeys.map((k)=>k.toString("hex")).sort().map((k)=>new PublicKey(k));
    for(var i = 0; i < sorted.length; i++){
        var publicKey = sorted[i];
        script.add(publicKey.toBuffer());
    }
    script.add(Opcode.smallInt(publicKeys.length));
    script.add(Opcode.OP_CHECKMULTISIG);
    return script;
};
/**
 * A new Multisig input script for the given public keys, requiring m of those public keys to spend
 *
 * @param {PublicKey[]} pubkeys list of all public keys controlling the output
 * @param {number} threshold amount of required signatures to spend the output
 * @param {Array} signatures and array of signature buffers to append to the script
 * @param {Object=} opts
 * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)
 * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript
 *
 * @returns {Script}
 */ Script.buildMultisigIn = function(pubkeys, threshold, signatures, opts) {
    $.checkArgument(_.isArray(pubkeys));
    $.checkArgument(_.isNumber(threshold));
    $.checkArgument(_.isArray(signatures));
    opts = opts || {};
    var s = new Script();
    s.add(Opcode.OP_0);
    _.each(signatures, function(signature) {
        $.checkArgument(Buffer.isBuffer(signature), "Signatures must be an array of Buffers");
        // TODO: allow signatures to be an array of Signature objects
        s.add(signature);
    });
    return s;
};
/**
 * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend
 *
 * @param {PublicKey[]} pubkeys list of all public keys controlling the output
 * @param {number} threshold amount of required signatures to spend the output
 * @param {Array} signatures and array of signature buffers to append to the script
 * @param {Object=} opts
 * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)
 * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript
 *
 * @returns {Script}
 */ Script.buildP2SHMultisigIn = function(pubkeys, threshold, signatures, opts) {
    $.checkArgument(_.isArray(pubkeys));
    $.checkArgument(_.isNumber(threshold));
    $.checkArgument(_.isArray(signatures));
    opts = opts || {};
    var s = new Script();
    s.add(Opcode.OP_0);
    _.each(signatures, function(signature) {
        $.checkArgument(Buffer.isBuffer(signature), "Signatures must be an array of Buffers");
        // TODO: allow signatures to be an array of Signature objects
        s.add(signature);
    });
    s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());
    return s;
};
/**
 * @returns {Script} a new pay to public key hash output for the given
 * address or public key
 * @param {(Address|PublicKey)} to - destination address or public key
 */ Script.buildPublicKeyHashOut = function(to) {
    $.checkArgument(!_.isUndefined(to));
    $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));
    if (to instanceof PublicKey) to = to.toAddress();
    else if (_.isString(to)) to = new Address(to);
    var s = new Script();
    s.add(Opcode.OP_DUP).add(Opcode.OP_HASH160).add(to.hashBuffer).add(Opcode.OP_EQUALVERIFY).add(Opcode.OP_CHECKSIG);
    s._network = to.network;
    return s;
};
/**
 * @returns {Script} a new pay to public key output for the given
 *  public key
 */ Script.buildPublicKeyOut = function(pubkey) {
    $.checkArgument(pubkey instanceof PublicKey);
    var s = new Script();
    s.add(pubkey.toBuffer()).add(Opcode.OP_CHECKSIG);
    return s;
};
/**
 * @returns {Script} a new OP_RETURN script with data
 * @param {(string|Buffer|Array)} data - the data to embed in the output - it is a string, buffer, or array of strings or buffers
 * @param {(string)} encoding - the type of encoding of the string(s)
 */ Script.buildDataOut = function(data, encoding) {
    $.checkArgument(_.isUndefined(data) || _.isString(data) || _.isArray(data) || Buffer.isBuffer(data));
    var datas = data;
    if (!_.isArray(datas)) datas = [
        data
    ];
    var s = new Script();
    s.add(Opcode.OP_RETURN);
    for (let data1 of datas){
        $.checkArgument(_.isUndefined(data1) || _.isString(data1) || Buffer.isBuffer(data1));
        if (_.isString(data1)) data1 = Buffer.from(data1, encoding);
        if (!_.isUndefined(data1)) s.add(data1);
    }
    return s;
};
/**
 * @returns {Script} a new OP_RETURN script with data
 * @param {(string|Buffer|Array)} data - the data to embed in the output - it is a string, buffer, or array of strings or buffers
 * @param {(string)} encoding - the type of encoding of the string(s)
 */ Script.buildSafeDataOut = function(data, encoding) {
    var s2 = Script.buildDataOut(data, encoding);
    var s1 = new Script();
    s1.add(Opcode.OP_FALSE);
    s1.add(s2);
    return s1;
};
/**
 * @param {Script|Address} script - the redeemScript for the new p2sh output.
 *    It can also be a p2sh address
 * @returns {Script} new pay to script hash script for given script
 */ Script.buildScriptHashOut = function(script) {
    $.checkArgument(script instanceof Script || script instanceof Address && script.isPayToScriptHash());
    var s = new Script();
    s.add(Opcode.OP_HASH160).add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer())).add(Opcode.OP_EQUAL);
    s._network = script._network || script.network;
    return s;
};
/**
 * Builds a scriptSig (a script for an input) that signs a public key output script.
 *
 * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding
 * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)
 */ Script.buildPublicKeyIn = function(signature, sigtype) {
    $.checkArgument(signature instanceof Signature || Buffer.isBuffer(signature));
    $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));
    if (signature instanceof Signature) signature = signature.toBuffer();
    var script = new Script();
    script.add(Buffer.concat([
        signature,
        Buffer.from([
            (sigtype || Signature.SIGHASH_ALL) & 0xff
        ])
    ]));
    return script;
};
/**
 * Builds a scriptSig (a script for an input) that signs a public key hash
 * output script.
 *
 * @param {Buffer|string|PublicKey} publicKey
 * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding
 * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)
 */ Script.buildPublicKeyHashIn = function(publicKey, signature, sigtype) {
    $.checkArgument(signature instanceof Signature || Buffer.isBuffer(signature));
    $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));
    if (signature instanceof Signature) signature = signature.toBuffer();
    var script = new Script().add(Buffer.concat([
        signature,
        Buffer.from([
            (sigtype || Signature.SIGHASH_ALL) & 0xff
        ])
    ])).add(new PublicKey(publicKey).toBuffer());
    return script;
};
/**
 * @returns {Script} an empty script
 */ Script.empty = function() {
    return new Script();
};
/**
 * @returns {Script} a new pay to script hash script that pays to this script
 */ Script.prototype.toScriptHashOut = function() {
    return Script.buildScriptHashOut(this);
};
/**
 * @return {Script} an output script built from the address
 */ Script.fromAddress = function(address) {
    address = Address(address);
    if (address.isPayToScriptHash()) return Script.buildScriptHashOut(address);
    else if (address.isPayToPublicKeyHash()) return Script.buildPublicKeyHashOut(address);
    throw new errors.Script.UnrecognizedAddress(address);
};
/**
 * Will return the associated address information object
 * @return {Address|boolean}
 */ Script.prototype.getAddressInfo = function(opts) {
    if (this._isInput) return this._getInputAddressInfo();
    else if (this._isOutput) return this._getOutputAddressInfo();
    else {
        var info = this._getOutputAddressInfo();
        if (!info) return this._getInputAddressInfo();
        return info;
    }
};
/**
 * Will return the associated output scriptPubKey address information object
 * @return {Address|boolean}
 * @private
 */ Script.prototype._getOutputAddressInfo = function() {
    var info = {};
    if (this.isScriptHashOut()) {
        info.hashBuffer = this.getData();
        info.type = Address.PayToScriptHash;
    } else if (this.isPublicKeyHashOut()) {
        info.hashBuffer = this.getData();
        info.type = Address.PayToPublicKeyHash;
    } else return false;
    return info;
};
/**
 * Will return the associated input scriptSig address information object
 * @return {Address|boolean}
 * @private
 */ Script.prototype._getInputAddressInfo = function() {
    var info = {};
    if (this.isPublicKeyHashIn()) {
        // hash the publickey found in the scriptSig
        info.hashBuffer = Hash.sha256ripemd160(this.chunks[1].buf);
        info.type = Address.PayToPublicKeyHash;
    } else if (this.isScriptHashIn()) {
        // hash the redeemscript found at the end of the scriptSig
        info.hashBuffer = Hash.sha256ripemd160(this.chunks[this.chunks.length - 1].buf);
        info.type = Address.PayToScriptHash;
    } else return false;
    return info;
};
/**
 * @param {Network=} network
 * @return {Address|boolean} the associated address for this script if possible, or false
 */ Script.prototype.toAddress = function(network) {
    var info = this.getAddressInfo();
    if (!info) return false;
    info.network = Networks.get(network) || this._network || Networks.defaultNetwork;
    return new Address(info);
};
/**
 * Analogous to bitcoind's FindAndDelete. Find and delete equivalent chunks,
 * typically used with push data chunks.  Note that this will find and delete
 * not just the same data, but the same data with the same push data op as
 * produced by default. i.e., if a pushdata in a tx does not use the minimal
 * pushdata op, then when you try to remove the data it is pushing, it will not
 * be removed, because they do not use the same pushdata op.
 */ Script.prototype.findAndDelete = function(script) {
    var buf = script.toBuffer();
    var hex = buf.toString("hex");
    for(var i = 0; i < this.chunks.length; i++){
        var script2 = Script({
            chunks: [
                this.chunks[i]
            ]
        });
        var buf2 = script2.toBuffer();
        var hex2 = buf2.toString("hex");
        if (hex === hex2) this.chunks.splice(i, 1);
    }
    return this;
};
/**
 * Comes from bitcoind's script interpreter CheckMinimalPush function
 * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.
 */ Script.prototype.checkMinimalPush = function(i) {
    var chunk = this.chunks[i];
    var buf = chunk.buf;
    var opcodenum = chunk.opcodenum;
    if (!buf) return true;
    if (buf.length === 0) // Could have used OP_0.
    return opcodenum === Opcode.OP_0;
    else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) // Could have used OP_1 .. OP_16.
    return opcodenum === Opcode.OP_1 + (buf[0] - 1);
    else if (buf.length === 1 && buf[0] === 0x81) // Could have used OP_1NEGATE
    return opcodenum === Opcode.OP_1NEGATE;
    else if (buf.length <= 75) // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).
    return opcodenum === buf.length;
    else if (buf.length <= 255) // Could have used OP_PUSHDATA.
    return opcodenum === Opcode.OP_PUSHDATA1;
    else if (buf.length <= 65535) // Could have used OP_PUSHDATA2.
    return opcodenum === Opcode.OP_PUSHDATA2;
    return true;
};
/**
 * Comes from bitcoind's script DecodeOP_N function
 * @param {number} opcode
 * @returns {number} numeric value in range of 0 to 16
 */ Script.prototype._decodeOP_N = function(opcode) {
    if (opcode === Opcode.OP_0) return 0;
    else if (opcode >= Opcode.OP_1 && opcode <= Opcode.OP_16) return opcode - (Opcode.OP_1 - 1);
    else throw new Error("Invalid opcode: " + JSON.stringify(opcode));
};
/**
 * Comes from bitcoind's script GetSigOpCount(boolean) function
 * @param {boolean} use current (true) or pre-version-0.6 (false) logic
 * @returns {number} number of signature operations required by this script
 */ Script.prototype.getSignatureOperationsCount = function(accurate) {
    accurate = _.isUndefined(accurate) ? true : accurate;
    var self = this;
    var n = 0;
    var lastOpcode = Opcode.OP_INVALIDOPCODE;
    _.each(self.chunks, function getChunk(chunk) {
        var opcode = chunk.opcodenum;
        if (opcode === Opcode.OP_CHECKSIG || opcode === Opcode.OP_CHECKSIGVERIFY) n++;
        else if (opcode === Opcode.OP_CHECKMULTISIG || opcode === Opcode.OP_CHECKMULTISIGVERIFY) {
            if (accurate && lastOpcode >= Opcode.OP_1 && lastOpcode <= Opcode.OP_16) n += self._decodeOP_N(lastOpcode);
            else n += 20;
        }
        lastOpcode = opcode;
    });
    return n;
};
module.exports = Script;

},{"buffer":"fCgem","../address":"lDqbu","../encoding/bufferreader":"icuYB","../encoding/bufferwriter":"a0ZPc","../crypto/hash":"jgMGE","../opcode":"1EJ2h","../publickey":"cwKNK","../crypto/signature":"axUut","../networks":"ai5AV","../util/preconditions":"c91dJ","../util/_":"f1m1Z","../errors":"9UULR","../util/js":"it7yM"}],"icuYB":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var $ = require("../util/preconditions");
var BN = require("../crypto/bn");
var BufferReader = function BufferReader(buf) {
    if (!(this instanceof BufferReader)) return new BufferReader(buf);
    if (_.isUndefined(buf)) return;
    if (Buffer.isBuffer(buf)) this.set({
        buf: buf
    });
    else if (_.isString(buf)) {
        var b = Buffer.from(buf, "hex");
        if (b.length * 2 !== buf.length) throw new TypeError("Invalid hex string");
        this.set({
            buf: b
        });
    } else if (_.isObject(buf)) {
        var obj = buf;
        this.set(obj);
    } else throw new TypeError("Unrecognized argument for BufferReader");
};
BufferReader.prototype.set = function(obj) {
    this.buf = obj.buf || this.buf || undefined;
    this.pos = obj.pos || this.pos || 0;
    return this;
};
BufferReader.prototype.eof = function() {
    return this.pos >= this.buf.length;
};
BufferReader.prototype.finished = BufferReader.prototype.eof;
BufferReader.prototype.read = function(len) {
    $.checkArgument(!_.isUndefined(len), "Must specify a length");
    var buf = this.buf.slice(this.pos, this.pos + len);
    this.pos = this.pos + len;
    return buf;
};
BufferReader.prototype.readAll = function() {
    var buf = this.buf.slice(this.pos, this.buf.length);
    this.pos = this.buf.length;
    return buf;
};
BufferReader.prototype.readUInt8 = function() {
    var val = this.buf.readUInt8(this.pos);
    this.pos = this.pos + 1;
    return val;
};
BufferReader.prototype.readUInt16BE = function() {
    var val = this.buf.readUInt16BE(this.pos);
    this.pos = this.pos + 2;
    return val;
};
BufferReader.prototype.readUInt16LE = function() {
    var val = this.buf.readUInt16LE(this.pos);
    this.pos = this.pos + 2;
    return val;
};
BufferReader.prototype.readUInt32BE = function() {
    var val = this.buf.readUInt32BE(this.pos);
    this.pos = this.pos + 4;
    return val;
};
BufferReader.prototype.readUInt32LE = function() {
    var val = this.buf.readUInt32LE(this.pos);
    this.pos = this.pos + 4;
    return val;
};
BufferReader.prototype.readInt32LE = function() {
    var val = this.buf.readInt32LE(this.pos);
    this.pos = this.pos + 4;
    return val;
};
BufferReader.prototype.readUInt64BEBN = function() {
    var buf = this.buf.slice(this.pos, this.pos + 8);
    var bn = BN.fromBuffer(buf);
    this.pos = this.pos + 8;
    return bn;
};
BufferReader.prototype.readUInt64LEBN = function() {
    var second = this.buf.readUInt32LE(this.pos);
    var first = this.buf.readUInt32LE(this.pos + 4);
    var combined = first * 0x100000000 + second;
    // Instantiating an instance of BN with a number is faster than with an
    // array or string. However, the maximum safe number for a double precision
    // floating point is 2 ^ 52 - 1 (0x1fffffffffffff), thus we can safely use
    // non-floating point numbers less than this amount (52 bits). And in the case
    // that the number is larger, we can instatiate an instance of BN by passing
    // an array from the buffer (slower) and specifying the endianness.
    var bn;
    if (combined <= 0x1fffffffffffff) bn = new BN(combined);
    else {
        var data = Array.prototype.slice.call(this.buf, this.pos, this.pos + 8);
        bn = new BN(data, 10, "le");
    }
    this.pos = this.pos + 8;
    return bn;
};
BufferReader.prototype.readVarintNum = function() {
    var first = this.readUInt8();
    switch(first){
        case 0xFD:
            return this.readUInt16LE();
        case 0xFE:
            return this.readUInt32LE();
        case 0xFF:
            var bn = this.readUInt64LEBN();
            var n = bn.toNumber();
            if (n <= Math.pow(2, 53)) return n;
            else throw new Error("number too large to retain precision - use readVarintBN");
        // break // unreachable
        default:
            return first;
    }
};
/**
 * reads a length prepended buffer
 */ BufferReader.prototype.readVarLengthBuffer = function() {
    var len = this.readVarintNum();
    var buf = this.read(len);
    $.checkState(buf.length === len, "Invalid length while reading varlength buffer. Expected to read: " + len + " and read " + buf.length);
    return buf;
};
BufferReader.prototype.readVarintBuf = function() {
    var first = this.buf.readUInt8(this.pos);
    switch(first){
        case 0xFD:
            return this.read(3);
        case 0xFE:
            return this.read(5);
        case 0xFF:
            return this.read(9);
        default:
            return this.read(1);
    }
};
BufferReader.prototype.readVarintBN = function() {
    var first = this.readUInt8();
    switch(first){
        case 0xFD:
            return new BN(this.readUInt16LE());
        case 0xFE:
            return new BN(this.readUInt32LE());
        case 0xFF:
            return this.readUInt64LEBN();
        default:
            return new BN(first);
    }
};
BufferReader.prototype.reverse = function() {
    var buf = Buffer.alloc(this.buf.length);
    for(var i = 0; i < buf.length; i++)buf[i] = this.buf[this.buf.length - 1 - i];
    this.buf = buf;
    return this;
};
BufferReader.prototype.readReverse = function(len) {
    if (_.isUndefined(len)) len = this.buf.length;
    var buf = this.buf.slice(this.pos, this.pos + len);
    this.pos = this.pos + len;
    return Buffer.from(buf).reverse();
};
module.exports = BufferReader;

},{"buffer":"fCgem","../util/_":"f1m1Z","../util/preconditions":"c91dJ","../crypto/bn":"35huv"}],"a0ZPc":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var assert = require("assert");
var BufferWriter = function BufferWriter(obj) {
    if (!(this instanceof BufferWriter)) return new BufferWriter(obj);
    this.bufLen = 0;
    if (obj) this.set(obj);
    else this.bufs = [];
};
BufferWriter.prototype.set = function(obj) {
    this.bufs = obj.bufs || this.bufs || [];
    this.bufLen = this.bufs.reduce(function(prev, buf) {
        return prev + buf.length;
    }, 0);
    return this;
};
BufferWriter.prototype.toBuffer = function() {
    return this.concat();
};
BufferWriter.prototype.concat = function() {
    return Buffer.concat(this.bufs, this.bufLen);
};
BufferWriter.prototype.write = function(buf) {
    assert(Buffer.isBuffer(buf));
    this.bufs.push(buf);
    this.bufLen += buf.length;
    return this;
};
BufferWriter.prototype.writeReverse = function(buf) {
    assert(Buffer.isBuffer(buf));
    this.bufs.push(Buffer.from(buf).reverse());
    this.bufLen += buf.length;
    return this;
};
BufferWriter.prototype.writeUInt8 = function(n) {
    var buf = Buffer.alloc(1);
    buf.writeUInt8(n, 0);
    this.write(buf);
    return this;
};
BufferWriter.prototype.writeUInt16BE = function(n) {
    var buf = Buffer.alloc(2);
    buf.writeUInt16BE(n, 0);
    this.write(buf);
    return this;
};
BufferWriter.prototype.writeUInt16LE = function(n) {
    var buf = Buffer.alloc(2);
    buf.writeUInt16LE(n, 0);
    this.write(buf);
    return this;
};
BufferWriter.prototype.writeUInt32BE = function(n) {
    var buf = Buffer.alloc(4);
    buf.writeUInt32BE(n, 0);
    this.write(buf);
    return this;
};
BufferWriter.prototype.writeInt32LE = function(n) {
    var buf = Buffer.alloc(4);
    buf.writeInt32LE(n, 0);
    this.write(buf);
    return this;
};
BufferWriter.prototype.writeUInt32LE = function(n) {
    var buf = Buffer.alloc(4);
    buf.writeUInt32LE(n, 0);
    this.write(buf);
    return this;
};
BufferWriter.prototype.writeUInt64BEBN = function(bn) {
    var buf = bn.toBuffer({
        size: 8
    });
    this.write(buf);
    return this;
};
BufferWriter.prototype.writeUInt64LEBN = function(bn) {
    var buf = bn.toBuffer({
        size: 8
    });
    this.writeReverse(buf);
    return this;
};
BufferWriter.prototype.writeVarintNum = function(n) {
    var buf = BufferWriter.varintBufNum(n);
    this.write(buf);
    return this;
};
BufferWriter.prototype.writeVarintBN = function(bn) {
    var buf = BufferWriter.varintBufBN(bn);
    this.write(buf);
    return this;
};
BufferWriter.varintBufNum = function(n) {
    var buf;
    if (n < 253) {
        buf = Buffer.alloc(1);
        buf.writeUInt8(n, 0);
    } else if (n < 0x10000) {
        buf = Buffer.alloc(3);
        buf.writeUInt8(253, 0);
        buf.writeUInt16LE(n, 1);
    } else if (n < 0x100000000) {
        buf = Buffer.alloc(5);
        buf.writeUInt8(254, 0);
        buf.writeUInt32LE(n, 1);
    } else {
        buf = Buffer.alloc(9);
        buf.writeUInt8(255, 0);
        buf.writeInt32LE(n & -1, 1);
        buf.writeUInt32LE(Math.floor(n / 0x100000000), 5);
    }
    return buf;
};
BufferWriter.varintBufBN = function(bn) {
    var buf;
    var n = bn.toNumber();
    if (n < 253) {
        buf = Buffer.alloc(1);
        buf.writeUInt8(n, 0);
    } else if (n < 0x10000) {
        buf = Buffer.alloc(3);
        buf.writeUInt8(253, 0);
        buf.writeUInt16LE(n, 1);
    } else if (n < 0x100000000) {
        buf = Buffer.alloc(5);
        buf.writeUInt8(254, 0);
        buf.writeUInt32LE(n, 1);
    } else {
        var bw = new BufferWriter();
        bw.writeUInt8(255);
        bw.writeUInt64LEBN(bn);
        buf = bw.concat();
    }
    return buf;
};
module.exports = BufferWriter;

},{"buffer":"fCgem","assert":"f3tT4"}],"f3tT4":[function(require,module,exports) {
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var process = require("process");
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof(obj) {
        return typeof obj;
    };
    else _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var _require = require("./internal/errors"), _require$codes = _require.codes, ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE, ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
var AssertionError = require("./internal/assert/assertion_error");
var _require2 = require("util/"), inspect = _require2.inspect;
var _require$types = require("util/").types, isPromise = _require$types.isPromise, isRegExp = _require$types.isRegExp;
var objectAssign = Object.assign ? Object.assign : require("es6-object-assign").assign;
var objectIs = Object.is ? Object.is : require("object-is");
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;
function lazyLoadComparison() {
    var comparison = require("./internal/util/comparisons");
    isDeepEqual = comparison.isDeepEqual;
    isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex
var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = [
    "\\u0000",
    "\\u0001",
    "\\u0002",
    "\\u0003",
    "\\u0004",
    "\\u0005",
    "\\u0006",
    "\\u0007",
    "\\b",
    "",
    "",
    "\\u000b",
    "\\f",
    "",
    "\\u000e",
    "\\u000f",
    "\\u0010",
    "\\u0011",
    "\\u0012",
    "\\u0013",
    "\\u0014",
    "\\u0015",
    "\\u0016",
    "\\u0017",
    "\\u0018",
    "\\u0019",
    "\\u001a",
    "\\u001b",
    "\\u001c",
    "\\u001d",
    "\\u001e",
    "\\u001f"
];
var escapeFn = function escapeFn(str) {
    return meta[str.charCodeAt(0)];
};
var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.
var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.
function innerFail(obj) {
    if (obj.message instanceof Error) throw obj.message;
    throw new AssertionError(obj);
}
function fail(actual, expected, message, operator, stackStartFn) {
    var argsLen = arguments.length;
    var internalMessage;
    if (argsLen === 0) internalMessage = "Failed";
    else if (argsLen === 1) {
        message = actual;
        actual = undefined;
    } else {
        if (warned === false) {
            warned = true;
            var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
            warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
        }
        if (argsLen === 2) operator = "!=";
    }
    if (message instanceof Error) throw message;
    var errArgs = {
        actual: actual,
        expected: expected,
        operator: operator === undefined ? "fail" : operator,
        stackStartFn: stackStartFn || fail
    };
    if (message !== undefined) errArgs.message = message;
    var err = new AssertionError(errArgs);
    if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
    }
    throw err;
}
assert.fail = fail; // The AssertionError is defined in internal/error.
assert.AssertionError = AssertionError;
function innerOk(fn, argLen, value, message) {
    if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
            generatedMessage = true;
            message = "No value argument passed to `assert.ok()`";
        } else if (message instanceof Error) throw message;
        var err = new AssertionError({
            actual: value,
            expected: true,
            message: message,
            operator: "==",
            stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
    }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.
function ok() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    innerOk.apply(void 0, [
        ok,
        args.length
    ].concat(args));
}
assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.
/* eslint-disable no-restricted-properties */ assert.equal = function equal(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
     // eslint-disable-next-line eqeqeq
    if (actual != expected) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "==",
        stackStartFn: equal
    });
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.
assert.notEqual = function notEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
     // eslint-disable-next-line eqeqeq
    if (actual == expected) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "!=",
        stackStartFn: notEqual
    });
}; // The equivalence assertion tests a deep equality relation.
assert.deepEqual = function deepEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (!isDeepEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "deepEqual",
        stackStartFn: deepEqual
    });
}; // The non-equivalence assertion tests for any deep inequality.
assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (isDeepEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "notDeepEqual",
        stackStartFn: notDeepEqual
    });
};
/* eslint-enable */ assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (!isDeepStrictEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "deepStrictEqual",
        stackStartFn: deepStrictEqual
    });
};
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (isDeepStrictEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "notDeepStrictEqual",
        stackStartFn: notDeepStrictEqual
    });
}
assert.strictEqual = function strictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (!objectIs(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "strictEqual",
        stackStartFn: strictEqual
    });
};
assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (objectIs(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "notStrictEqual",
        stackStartFn: notStrictEqual
    });
};
var Comparison = function Comparison(obj, keys, actual) {
    var _this = this;
    _classCallCheck(this, Comparison);
    keys.forEach(function(key) {
        if (key in obj) {
            if (actual !== undefined && typeof actual[key] === "string" && isRegExp(obj[key]) && obj[key].test(actual[key])) _this[key] = actual[key];
            else _this[key] = obj[key];
        }
    });
};
function compareExceptionKey(actual, expected, key, message, keys, fn) {
    if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
            // Create placeholder objects to create a nice output.
            var a = new Comparison(actual, keys);
            var b = new Comparison(expected, keys, actual);
            var err = new AssertionError({
                actual: a,
                expected: b,
                operator: "deepStrictEqual",
                stackStartFn: fn
            });
            err.actual = actual;
            err.expected = expected;
            err.operator = fn.name;
            throw err;
        }
        innerFail({
            actual: actual,
            expected: expected,
            message: message,
            operator: fn.name,
            stackStartFn: fn
        });
    }
}
function expectedException(actual, expected, msg, fn) {
    if (typeof expected !== "function") {
        if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.
        if (arguments.length === 2) throw new ERR_INVALID_ARG_TYPE("expected", [
            "Function",
            "RegExp"
        ], expected);
         // Handle primitives properly.
        if (_typeof(actual) !== "object" || actual === null) {
            var err = new AssertionError({
                actual: actual,
                expected: expected,
                message: msg,
                operator: "deepStrictEqual",
                stackStartFn: fn
            });
            err.operator = fn.name;
            throw err;
        }
        var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
        // as well.
        if (expected instanceof Error) keys.push("name", "message");
        else if (keys.length === 0) throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
        if (isDeepEqual === undefined) lazyLoadComparison();
        keys.forEach(function(key) {
            if (typeof actual[key] === "string" && isRegExp(expected[key]) && expected[key].test(actual[key])) return;
            compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
    } // Guard instanceof against arrow functions as they don't have a prototype.
    if (expected.prototype !== undefined && actual instanceof expected) return true;
    if (Error.isPrototypeOf(expected)) return false;
    return expected.call({}, actual) === true;
}
function getActual(fn) {
    if (typeof fn !== "function") throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn);
    try {
        fn();
    } catch (e) {
        return e;
    }
    return NO_EXCEPTION_SENTINEL;
}
function checkIsPromise(obj) {
    // Accept native ES6 promises and promises that are implemented in a similar
    // way. Do not accept thenables that use a function as `obj` and that have no
    // `catch` handler.
    // TODO: thenables are checked up until they have the correct methods,
    // but according to documentation, the `then` method should receive
    // the `fulfill` and `reject` arguments as well or it may be never resolved.
    return isPromise(obj) || obj !== null && _typeof(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
}
function waitForActual(promiseFn) {
    return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === "function") {
            // Return a rejected promise if `promiseFn` throws synchronously.
            resultPromise = promiseFn(); // Fail in case no promise is returned.
            if (!checkIsPromise(resultPromise)) throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
        } else if (checkIsPromise(promiseFn)) resultPromise = promiseFn;
        else throw new ERR_INVALID_ARG_TYPE("promiseFn", [
            "Function",
            "Promise"
        ], promiseFn);
        return Promise.resolve().then(function() {
            return resultPromise;
        }).then(function() {
            return NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
            return e;
        });
    });
}
function expectsError(stackStartFn, actual, error, message) {
    if (typeof error === "string") {
        if (arguments.length === 4) throw new ERR_INVALID_ARG_TYPE("error", [
            "Object",
            "Error",
            "Function",
            "RegExp"
        ], error);
        if (_typeof(actual) === "object" && actual !== null) {
            if (actual.message === error) throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
        } else if (actual === error) throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
        message = error;
        error = undefined;
    } else if (error != null && _typeof(error) !== "object" && typeof error !== "function") throw new ERR_INVALID_ARG_TYPE("error", [
        "Object",
        "Error",
        "Function",
        "RegExp"
    ], error);
    if (actual === NO_EXCEPTION_SENTINEL) {
        var details = "";
        if (error && error.name) details += " (".concat(error.name, ")");
        details += message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
        innerFail({
            actual: undefined,
            expected: error,
            operator: stackStartFn.name,
            message: "Missing expected ".concat(fnType).concat(details),
            stackStartFn: stackStartFn
        });
    }
    if (error && !expectedException(actual, error, message, stackStartFn)) throw actual;
}
function expectsNoError(stackStartFn, actual, error, message) {
    if (actual === NO_EXCEPTION_SENTINEL) return;
    if (typeof error === "string") {
        message = error;
        error = undefined;
    }
    if (!error || expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
        innerFail({
            actual: actual,
            expected: error,
            operator: stackStartFn.name,
            message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
            stackStartFn: stackStartFn
        });
    }
    throw actual;
}
assert.throws = function throws(promiseFn) {
    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
    expectsError.apply(void 0, [
        throws,
        getActual(promiseFn)
    ].concat(args));
};
assert.rejects = function rejects(promiseFn) {
    for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)args[_key3 - 1] = arguments[_key3];
    return waitForActual(promiseFn).then(function(result) {
        return expectsError.apply(void 0, [
            rejects,
            result
        ].concat(args));
    });
};
assert.doesNotThrow = function doesNotThrow(fn) {
    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)args[_key4 - 1] = arguments[_key4];
    expectsNoError.apply(void 0, [
        doesNotThrow,
        getActual(fn)
    ].concat(args));
};
assert.doesNotReject = function doesNotReject(fn) {
    for(var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++)args[_key5 - 1] = arguments[_key5];
    return waitForActual(fn).then(function(result) {
        return expectsNoError.apply(void 0, [
            doesNotReject,
            result
        ].concat(args));
    });
};
assert.ifError = function ifError(err) {
    if (err !== null && err !== undefined) {
        var message = "ifError got unwanted exception: ";
        if (_typeof(err) === "object" && typeof err.message === "string") {
            if (err.message.length === 0 && err.constructor) message += err.constructor.name;
            else message += err.message;
        } else message += inspect(err);
        var newErr = new AssertionError({
            actual: err,
            expected: null,
            operator: "ifError",
            message: message,
            stackStartFn: ifError
        }); // Make sure we actually have a stack trace!
        var origStack = err.stack;
        if (typeof origStack === "string") {
            // This will remove any duplicated frames from the error frames taken
            // from within `ifError` and add the original error frames to the newly
            // created ones.
            var tmp2 = origStack.split("\n");
            tmp2.shift(); // Filter all frames existing in err.stack.
            var tmp1 = newErr.stack.split("\n");
            for(var i = 0; i < tmp2.length; i++){
                // Find the first occurrence of the frame.
                var pos = tmp1.indexOf(tmp2[i]);
                if (pos !== -1) {
                    // Only keep new frames.
                    tmp1 = tmp1.slice(0, pos);
                    break;
                }
            }
            newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
        }
        throw newErr;
    }
}; // Expose a strict only variant of assert
function strict() {
    for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)args[_key6] = arguments[_key6];
    innerOk.apply(void 0, [
        strict,
        args.length
    ].concat(args));
}
assert.strict = objectAssign(strict, assert, {
    equal: assert.strictEqual,
    deepEqual: assert.deepStrictEqual,
    notEqual: assert.notStrictEqual,
    notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

},{"process":"d5jf4","./internal/errors":"cwQVR","./internal/assert/assertion_error":"lQlQt","util/":"cxohQ","es6-object-assign":"713SE","object-is":"k2tpA","./internal/util/comparisons":"d5TM9"}],"cwQVR":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f
/* eslint node-core/documented-errors: "error" */ /* eslint node-core/alphabetize-errors: "error" */ /* eslint node-core/prefer-util-format-errors: "error" */ "use strict"; // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof(obj) {
        return typeof obj;
    };
    else _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
    return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
var codes = {}; // Lazy loaded
var assert;
var util;
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        _inherits(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            var _this;
            _classCallCheck(this, NodeError);
            _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
            _this.code = code;
            return _this;
        }
        return NodeError;
    }(Base);
    codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    if (assert === undefined) assert = require("../assert");
    assert(typeof name === "string", "'name' must be a string"); // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    } // TODO(BridgeAR): Improve the output by showing `null` and similar.
    msg += ". Received type ".concat(_typeof(actual));
    return msg;
}, TypeError);
createErrorType("ERR_INVALID_ARG_VALUE", function(name, value) {
    var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "is invalid";
    if (util === undefined) util = require("util/");
    var inspected = util.inspect(value);
    if (inspected.length > 128) inspected = "".concat(inspected.slice(0, 128), "...");
    return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name, value) {
    var type;
    if (value && value.constructor && value.constructor.name) type = "instance of ".concat(value.constructor.name);
    else type = "type ".concat(_typeof(value));
    return "Expected ".concat(input, ' to be returned from the "').concat(name, '"') + " function but got ".concat(type, ".");
}, TypeError);
createErrorType("ERR_MISSING_ARGS", function() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    if (assert === undefined) assert = require("../assert");
    assert(args.length > 0, "At least one arg needs to be specified");
    var msg = "The ";
    var len = args.length;
    args = args.map(function(a) {
        return '"'.concat(a, '"');
    });
    switch(len){
        case 1:
            msg += "".concat(args[0], " argument");
            break;
        case 2:
            msg += "".concat(args[0], " and ").concat(args[1], " arguments");
            break;
        default:
            msg += args.slice(0, len - 1).join(", ");
            msg += ", and ".concat(args[len - 1], " arguments");
            break;
    }
    return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

},{"../assert":"f3tT4","util/":"cxohQ"}],"cxohQ":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    return descriptors;
};
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
    if (!isString(f)) {
        var objects = [];
        for(var i = 0; i < arguments.length; i++)objects.push(inspect(arguments[i]));
        return objects.join(" ");
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
        if (x === "%%") return "%";
        if (i >= len) return x;
        switch(x){
            case "%s":
                return String(args[i++]);
            case "%d":
                return Number(args[i++]);
            case "%j":
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return "[Circular]";
                }
            default:
                return x;
        }
    });
    for(var x = args[i]; i < len; x = args[++i])if (isNull(x) || !isObject(x)) str += " " + x;
    else str += " " + inspect(x);
    return str;
};
// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
    if (typeof process !== "undefined" && process.noDeprecation === true) return fn;
    // Allow for deprecating things in the process of starting up.
    if (typeof process === "undefined") return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
    };
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (process.throwDeprecation) throw new Error(msg);
            else if (process.traceDeprecation) console.trace(msg);
            else console.error(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
};
var debugs = {};
var debugEnvRegex = /^$/;
var debugEnv;
exports.debuglog = function(set) {
    set = set.toUpperCase();
    if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
            var pid = process.pid;
            debugs[set] = function() {
                var msg = exports.format.apply(exports, arguments);
                console.error("%s %d: %s", set, pid, msg);
            };
        } else debugs[set] = function() {};
    }
    return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
    // default options
    var ctx = {
        seen: [],
        stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) // legacy...
    ctx.showHidden = opts;
    else if (opts) // got an "options" object
    exports._extend(ctx, opts);
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
    "bold": [
        1,
        22
    ],
    "italic": [
        3,
        23
    ],
    "underline": [
        4,
        24
    ],
    "inverse": [
        7,
        27
    ],
    "white": [
        37,
        39
    ],
    "grey": [
        90,
        39
    ],
    "black": [
        30,
        39
    ],
    "blue": [
        34,
        39
    ],
    "cyan": [
        36,
        39
    ],
    "green": [
        32,
        39
    ],
    "magenta": [
        35,
        39
    ],
    "red": [
        31,
        39
    ],
    "yellow": [
        33,
        39
    ]
};
// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
    "special": "cyan",
    "number": "yellow",
    "boolean": "yellow",
    "undefined": "grey",
    "null": "bold",
    "string": "green",
    "date": "magenta",
    // "name": intentionally not styling
    "regexp": "red"
};
function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];
    if (style) return "\x1b[" + inspect.colors[style][0] + "m" + str + "\x1b[" + inspect.colors[style][1] + "m";
    else return str;
}
function stylizeNoColor(str, styleType) {
    return str;
}
function arrayToHash(array) {
    var hash = {};
    array.forEach(function(val, idx) {
        hash[val] = true;
    });
    return hash;
}
function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) ret = formatValue(ctx, ret, recurseTimes);
        return ret;
    }
    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) return primitive;
    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);
    if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) return formatError(value);
    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
        if (isFunction(value)) {
            var name = value.name ? ": " + value.name : "";
            return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), "date");
        if (isError(value)) return formatError(value);
    }
    var base = "", array = false, braces = [
        "{",
        "}"
    ];
    // Make Array say that they are Array
    if (isArray(value)) {
        array = true;
        braces = [
            "[",
            "]"
        ];
    }
    // Make functions say that they are functions
    if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
    }
    // Make RegExps say that they are RegExps
    if (isRegExp(value)) base = " " + RegExp.prototype.toString.call(value);
    // Make dates with properties first say the date
    if (isDate(value)) base = " " + Date.prototype.toUTCString.call(value);
    // Make error with message first say the error
    if (isError(value)) base = " " + formatError(value);
    if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
    if (recurseTimes < 0) {
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        else return ctx.stylize("[Object]", "special");
    }
    ctx.seen.push(value);
    var output;
    if (array) output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    else output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
    if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
    }
    if (isNumber(value)) return ctx.stylize("" + value, "number");
    if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
    // For some reason typeof null is "object", so special case here.
    if (isNull(value)) return ctx.stylize("null", "null");
}
function formatError(value) {
    return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for(var i = 0, l = value.length; i < l; ++i)if (hasOwnProperty(value, String(i))) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    else output.push("");
    keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    });
    return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
    };
    if (desc.get) {
        if (desc.set) str = ctx.stylize("[Getter/Setter]", "special");
        else str = ctx.stylize("[Getter]", "special");
    } else if (desc.set) str = ctx.stylize("[Setter]", "special");
    if (!hasOwnProperty(visibleKeys, key)) name = "[" + key + "]";
    if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) str = formatValue(ctx, desc.value, null);
            else str = formatValue(ctx, desc.value, recurseTimes - 1);
            if (str.indexOf("\n") > -1) {
                if (array) str = str.split("\n").map(function(line) {
                    return "  " + line;
                }).join("\n").substr(2);
                else str = "\n" + str.split("\n").map(function(line) {
                    return "   " + line;
                }).join("\n");
            }
        } else str = ctx.stylize("[Circular]", "special");
    }
    if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) return str;
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, "name");
        } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, "string");
        }
    }
    return name + ": " + str;
}
function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0);
    if (length > 60) return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
    return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require("./support/types");
function isArray(ar) {
    return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
    return typeof arg === "boolean";
}
exports.isBoolean = isBoolean;
function isNull(arg) {
    return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
    return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
    return typeof arg === "number";
}
exports.isNumber = isNumber;
function isString(arg) {
    return typeof arg === "string";
}
exports.isString = isString;
function isSymbol(arg) {
    return typeof arg === "symbol";
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
    return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
    return isObject(re) && objectToString(re) === "[object RegExp]";
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;
function isObject(arg) {
    return typeof arg === "object" && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
    return isObject(d) && objectToString(d) === "[object Date]";
}
exports.isDate = isDate;
exports.types.isDate = isDate;
function isError(e) {
    return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;
function isFunction(arg) {
    return typeof arg === "function";
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
    return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require("./support/isBuffer");
function objectToString(o) {
    return Object.prototype.toString.call(o);
}
function pad(n) {
    return n < 10 ? "0" + n.toString(10) : n.toString(10);
}
var months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
// 26 Feb 16:19:34
function timestamp() {
    var d = new Date();
    var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
    ].join(":");
    return [
        d.getDate(),
        months[d.getMonth()],
        time
    ].join(" ");
}
// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
    console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ exports.inherits = require("inherits");
exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while(i--)origin[keys[i]] = add[keys[i]];
    return origin;
};
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : undefined;
exports.promisify = function promisify(original) {
    if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
        return fn;
    }
    function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
        });
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        args.push(function(err, value) {
            if (err) promiseReject(err);
            else promiseResolve(value);
        });
        try {
            original.apply(this, args);
        } catch (err) {
            promiseReject(err);
        }
        return promise;
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
    });
    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};
exports.promisify.custom = kCustomPromisifiedSymbol;
function callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
    }
    return cb(reason);
}
function callbackify(original) {
    if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") throw new TypeError("The last argument must be of type Function");
        var self = this;
        var cb = function() {
            return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args).then(function(ret) {
            process.nextTick(cb.bind(null, null, ret));
        }, function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
        });
    }
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
    return callbackified;
}
exports.callbackify = callbackify;

},{"process":"d5jf4","./support/types":"bnQvf","./support/isBuffer":"inNNy","inherits":"bRL3M"}],"bnQvf":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
"use strict";
var isArgumentsObject = require("is-arguments");
var isGeneratorFunction = require("is-generator-function");
var whichTypedArray = require("which-typed-array");
var isTypedArray = require("is-typed-array");
function uncurryThis(f) {
    return f.call.bind(f);
}
var BigIntSupported = typeof BigInt !== "undefined";
var SymbolSupported = typeof Symbol !== "undefined";
var ObjectToString = uncurryThis(Object.prototype.toString);
var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);
if (BigIntSupported) var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
if (SymbolSupported) var symbolValue = uncurryThis(Symbol.prototype.valueOf);
function checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== "object") return false;
    try {
        prototypeValueOf(value);
        return true;
    } catch (e) {
        return false;
    }
}
exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;
// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
    return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
}
exports.isPromise = isPromise;
function isArrayBufferView(value) {
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) return ArrayBuffer.isView(value);
    return isTypedArray(value) || isDataView(value);
}
exports.isArrayBufferView = isArrayBufferView;
function isUint8Array(value) {
    return whichTypedArray(value) === "Uint8Array";
}
exports.isUint8Array = isUint8Array;
function isUint8ClampedArray(value) {
    return whichTypedArray(value) === "Uint8ClampedArray";
}
exports.isUint8ClampedArray = isUint8ClampedArray;
function isUint16Array(value) {
    return whichTypedArray(value) === "Uint16Array";
}
exports.isUint16Array = isUint16Array;
function isUint32Array(value) {
    return whichTypedArray(value) === "Uint32Array";
}
exports.isUint32Array = isUint32Array;
function isInt8Array(value) {
    return whichTypedArray(value) === "Int8Array";
}
exports.isInt8Array = isInt8Array;
function isInt16Array(value) {
    return whichTypedArray(value) === "Int16Array";
}
exports.isInt16Array = isInt16Array;
function isInt32Array(value) {
    return whichTypedArray(value) === "Int32Array";
}
exports.isInt32Array = isInt32Array;
function isFloat32Array(value) {
    return whichTypedArray(value) === "Float32Array";
}
exports.isFloat32Array = isFloat32Array;
function isFloat64Array(value) {
    return whichTypedArray(value) === "Float64Array";
}
exports.isFloat64Array = isFloat64Array;
function isBigInt64Array(value) {
    return whichTypedArray(value) === "BigInt64Array";
}
exports.isBigInt64Array = isBigInt64Array;
function isBigUint64Array(value) {
    return whichTypedArray(value) === "BigUint64Array";
}
exports.isBigUint64Array = isBigUint64Array;
function isMapToString(value) {
    return ObjectToString(value) === "[object Map]";
}
isMapToString.working = typeof Map !== "undefined" && isMapToString(new Map());
function isMap(value) {
    if (typeof Map === "undefined") return false;
    return isMapToString.working ? isMapToString(value) : value instanceof Map;
}
exports.isMap = isMap;
function isSetToString(value) {
    return ObjectToString(value) === "[object Set]";
}
isSetToString.working = typeof Set !== "undefined" && isSetToString(new Set());
function isSet(value) {
    if (typeof Set === "undefined") return false;
    return isSetToString.working ? isSetToString(value) : value instanceof Set;
}
exports.isSet = isSet;
function isWeakMapToString(value) {
    return ObjectToString(value) === "[object WeakMap]";
}
isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(new WeakMap());
function isWeakMap(value) {
    if (typeof WeakMap === "undefined") return false;
    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;
function isWeakSetToString(value) {
    return ObjectToString(value) === "[object WeakSet]";
}
isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(new WeakSet());
function isWeakSet(value) {
    return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;
function isArrayBufferToString(value) {
    return ObjectToString(value) === "[object ArrayBuffer]";
}
isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
function isArrayBuffer(value) {
    if (typeof ArrayBuffer === "undefined") return false;
    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;
function isDataViewToString(value) {
    return ObjectToString(value) === "[object DataView]";
}
isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
function isDataView(value) {
    if (typeof DataView === "undefined") return false;
    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
}
exports.isDataView = isDataView;
// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
    return ObjectToString(value) === "[object SharedArrayBuffer]";
}
function isSharedArrayBuffer(value) {
    if (typeof SharedArrayBufferCopy === "undefined") return false;
    if (typeof isSharedArrayBufferToString.working === "undefined") isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;
function isAsyncFunction(value) {
    return ObjectToString(value) === "[object AsyncFunction]";
}
exports.isAsyncFunction = isAsyncFunction;
function isMapIterator(value) {
    return ObjectToString(value) === "[object Map Iterator]";
}
exports.isMapIterator = isMapIterator;
function isSetIterator(value) {
    return ObjectToString(value) === "[object Set Iterator]";
}
exports.isSetIterator = isSetIterator;
function isGeneratorObject(value) {
    return ObjectToString(value) === "[object Generator]";
}
exports.isGeneratorObject = isGeneratorObject;
function isWebAssemblyCompiledModule(value) {
    return ObjectToString(value) === "[object WebAssembly.Module]";
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
function isNumberObject(value) {
    return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;
function isStringObject(value) {
    return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;
function isBooleanObject(value) {
    return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;
function isBigIntObject(value) {
    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;
function isSymbolObject(value) {
    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;
function isBoxedPrimitive(value) {
    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
}
exports.isBoxedPrimitive = isBoxedPrimitive;
function isAnyArrayBuffer(value) {
    return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;
[
    "isProxy",
    "isExternal",
    "isModuleNamespaceObject"
].forEach(function(method) {
    Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
            throw new Error(method + " is not supported in userland");
        }
    });
});

},{"is-arguments":"czr4n","is-generator-function":"2XUdn","which-typed-array":"lVUO7","is-typed-array":"1ihkG"}],"czr4n":[function(require,module,exports) {
"use strict";
var hasToStringTag = require("has-tostringtag/shams")();
var callBound = require("call-bind/callBound");
var $toString = callBound("Object.prototype.toString");
var isStandardArguments = function isArguments(value) {
    if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) return false;
    return $toString(value) === "[object Arguments]";
};
var isLegacyArguments = function isArguments(value) {
    if (isStandardArguments(value)) return true;
    return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
};
var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
}();
isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{"has-tostringtag/shams":"9LdQ9","call-bind/callBound":"5yYiF"}],"9LdQ9":[function(require,module,exports) {
"use strict";
var hasSymbols = require("has-symbols/shams");
module.exports = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
};

},{"has-symbols/shams":"euYk7"}],"euYk7":[function(require,module,exports) {
"use strict";
/* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") return false;
    if (typeof Symbol.iterator === "symbol") return true;
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") return false;
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") return false;
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(sym in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

},{}],"5yYiF":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("get-intrinsic");
var callBind = require("./");
var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) return callBind(intrinsic);
    return intrinsic;
};

},{"get-intrinsic":"dZb05","./":"bfo8D"}],"dZb05":[function(require,module,exports) {
"use strict";
var undefined;
var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;
// eslint-disable-next-line consistent-return
var getEvalledConstructor = function(expressionSyntax) {
    try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {}
};
var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) try {
    $gOPD({}, "");
} catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
}
var throwTypeError = function() {
    throw new $TypeError();
};
var ThrowTypeError = $gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
            return throwTypeError;
        }
    }
}() : throwTypeError;
var hasSymbols = require("has-symbols")();
var getProto = Object.getPrototypeOf || function(x) {
    return x.__proto__;
}; // eslint-disable-line no-proto
var needsEval = {};
var TypedArray = typeof Uint8Array === "undefined" ? undefined : getProto(Uint8Array);
var INTRINSICS = {
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
    "%AsyncFromSyncIteratorPrototype%": undefined,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined : BigInt,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": Error,
    "%eval%": eval,
    "%EvalError%": EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
    "%JSON%": typeof JSON === "object" ? JSON : undefined,
    "%Map%": typeof Map === "undefined" ? undefined : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined : Proxy,
    "%RangeError%": RangeError,
    "%ReferenceError%": ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined,
    "%Symbol%": hasSymbols ? Symbol : undefined,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined : Uint32Array,
    "%URIError%": URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined : WeakSet
};
var doEval = function doEval(name) {
    var value;
    if (name === "%AsyncFunction%") value = getEvalledConstructor("async function () {}");
    else if (name === "%GeneratorFunction%") value = getEvalledConstructor("function* () {}");
    else if (name === "%AsyncGeneratorFunction%") value = getEvalledConstructor("async function* () {}");
    else if (name === "%AsyncGenerator%") {
        var fn = doEval("%AsyncGeneratorFunction%");
        if (fn) value = fn.prototype;
    } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval("%AsyncGenerator%");
        if (gen) value = getProto(gen.prototype);
    }
    INTRINSICS[name] = value;
    return value;
};
var LEGACY_ALIASES = {
    "%ArrayBufferPrototype%": [
        "ArrayBuffer",
        "prototype"
    ],
    "%ArrayPrototype%": [
        "Array",
        "prototype"
    ],
    "%ArrayProto_entries%": [
        "Array",
        "prototype",
        "entries"
    ],
    "%ArrayProto_forEach%": [
        "Array",
        "prototype",
        "forEach"
    ],
    "%ArrayProto_keys%": [
        "Array",
        "prototype",
        "keys"
    ],
    "%ArrayProto_values%": [
        "Array",
        "prototype",
        "values"
    ],
    "%AsyncFunctionPrototype%": [
        "AsyncFunction",
        "prototype"
    ],
    "%AsyncGenerator%": [
        "AsyncGeneratorFunction",
        "prototype"
    ],
    "%AsyncGeneratorPrototype%": [
        "AsyncGeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%BooleanPrototype%": [
        "Boolean",
        "prototype"
    ],
    "%DataViewPrototype%": [
        "DataView",
        "prototype"
    ],
    "%DatePrototype%": [
        "Date",
        "prototype"
    ],
    "%ErrorPrototype%": [
        "Error",
        "prototype"
    ],
    "%EvalErrorPrototype%": [
        "EvalError",
        "prototype"
    ],
    "%Float32ArrayPrototype%": [
        "Float32Array",
        "prototype"
    ],
    "%Float64ArrayPrototype%": [
        "Float64Array",
        "prototype"
    ],
    "%FunctionPrototype%": [
        "Function",
        "prototype"
    ],
    "%Generator%": [
        "GeneratorFunction",
        "prototype"
    ],
    "%GeneratorPrototype%": [
        "GeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%Int8ArrayPrototype%": [
        "Int8Array",
        "prototype"
    ],
    "%Int16ArrayPrototype%": [
        "Int16Array",
        "prototype"
    ],
    "%Int32ArrayPrototype%": [
        "Int32Array",
        "prototype"
    ],
    "%JSONParse%": [
        "JSON",
        "parse"
    ],
    "%JSONStringify%": [
        "JSON",
        "stringify"
    ],
    "%MapPrototype%": [
        "Map",
        "prototype"
    ],
    "%NumberPrototype%": [
        "Number",
        "prototype"
    ],
    "%ObjectPrototype%": [
        "Object",
        "prototype"
    ],
    "%ObjProto_toString%": [
        "Object",
        "prototype",
        "toString"
    ],
    "%ObjProto_valueOf%": [
        "Object",
        "prototype",
        "valueOf"
    ],
    "%PromisePrototype%": [
        "Promise",
        "prototype"
    ],
    "%PromiseProto_then%": [
        "Promise",
        "prototype",
        "then"
    ],
    "%Promise_all%": [
        "Promise",
        "all"
    ],
    "%Promise_reject%": [
        "Promise",
        "reject"
    ],
    "%Promise_resolve%": [
        "Promise",
        "resolve"
    ],
    "%RangeErrorPrototype%": [
        "RangeError",
        "prototype"
    ],
    "%ReferenceErrorPrototype%": [
        "ReferenceError",
        "prototype"
    ],
    "%RegExpPrototype%": [
        "RegExp",
        "prototype"
    ],
    "%SetPrototype%": [
        "Set",
        "prototype"
    ],
    "%SharedArrayBufferPrototype%": [
        "SharedArrayBuffer",
        "prototype"
    ],
    "%StringPrototype%": [
        "String",
        "prototype"
    ],
    "%SymbolPrototype%": [
        "Symbol",
        "prototype"
    ],
    "%SyntaxErrorPrototype%": [
        "SyntaxError",
        "prototype"
    ],
    "%TypedArrayPrototype%": [
        "TypedArray",
        "prototype"
    ],
    "%TypeErrorPrototype%": [
        "TypeError",
        "prototype"
    ],
    "%Uint8ArrayPrototype%": [
        "Uint8Array",
        "prototype"
    ],
    "%Uint8ClampedArrayPrototype%": [
        "Uint8ClampedArray",
        "prototype"
    ],
    "%Uint16ArrayPrototype%": [
        "Uint16Array",
        "prototype"
    ],
    "%Uint32ArrayPrototype%": [
        "Uint32Array",
        "prototype"
    ],
    "%URIErrorPrototype%": [
        "URIError",
        "prototype"
    ],
    "%WeakMapPrototype%": [
        "WeakMap",
        "prototype"
    ],
    "%WeakSetPrototype%": [
        "WeakSet",
        "prototype"
    ]
};
var bind = require("function-bind");
var hasOwn = require("has");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    else if (last === "%" && first !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
};
/* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) value = doEval(intrinsicName);
        if (typeof value === "undefined" && !allowMissing) throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) throw new $TypeError("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof allowMissing !== "boolean") throw new $TypeError('"allowMissing" argument must be a boolean');
    if ($exec(/^%?[^%]*%?$/g, name) === null) throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) throw new $SyntaxError("property names with quotes must have matching quotes");
        if (part === "constructor" || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
                return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
                var desc = $gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && "get" in desc && !("originalValue" in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = hasOwn(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

},{"has-symbols":"3dK91","function-bind":"6J4ob","has":"ksyoO"}],"3dK91":[function(require,module,exports) {
"use strict";
var origSymbol = typeof Symbol !== "undefined" && Symbol;
var hasSymbolSham = require("./shams");
module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") return false;
    if (typeof Symbol !== "function") return false;
    if (typeof origSymbol("foo") !== "symbol") return false;
    if (typeof Symbol("bar") !== "symbol") return false;
    return hasSymbolSham();
};

},{"./shams":"euYk7"}],"6J4ob":[function(require,module,exports) {
"use strict";
var implementation = require("./implementation");
module.exports = Function.prototype.bind || implementation;

},{"./implementation":"jwaxQ"}],"jwaxQ":[function(require,module,exports) {
"use strict";
/* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = "[object Function]";
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.call(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, args.concat(slice.call(arguments)));
            if (Object(result) === result) return result;
            return this;
        } else return target.apply(that, args.concat(slice.call(arguments)));
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs.push("$" + i);
    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

},{}],"ksyoO":[function(require,module,exports) {
"use strict";
var bind = require("function-bind");
module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":"6J4ob"}],"bfo8D":[function(require,module,exports) {
"use strict";
var bind = require("function-bind");
var GetIntrinsic = require("get-intrinsic");
var $apply = GetIntrinsic("%Function.prototype.apply%");
var $call = GetIntrinsic("%Function.prototype.call%");
var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
var $max = GetIntrinsic("%Math.max%");
if ($defineProperty) try {
    $defineProperty({}, "a", {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = null;
}
module.exports = function callBind(originalFunction) {
    var func = $reflectApply(bind, $call, arguments);
    if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) // original length, plus the receiver, minus any additional arguments (after the receiver)
        $defineProperty(func, "length", {
            value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
        });
    }
    return func;
};
var applyBind = function applyBind() {
    return $reflectApply(bind, $apply, arguments);
};
if ($defineProperty) $defineProperty(module.exports, "apply", {
    value: applyBind
});
else module.exports.apply = applyBind;

},{"function-bind":"6J4ob","get-intrinsic":"dZb05"}],"2XUdn":[function(require,module,exports) {
"use strict";
var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = require("has-tostringtag/shams")();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function() {
    if (!hasToStringTag) return false;
    try {
        return Function("return function*() {}")();
    } catch (e) {}
};
var GeneratorFunction;
module.exports = function isGeneratorFunction(fn) {
    if (typeof fn !== "function") return false;
    if (isFnRegex.test(fnToStr.call(fn))) return true;
    if (!hasToStringTag) {
        var str = toStr.call(fn);
        return str === "[object GeneratorFunction]";
    }
    if (!getProto) return false;
    if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
    }
    return getProto(fn) === GeneratorFunction;
};

},{"has-tostringtag/shams":"9LdQ9"}],"lVUO7":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var forEach = require("for-each");
var availableTypedArrays = require("available-typed-arrays");
var callBound = require("call-bind/callBound");
var $toString = callBound("Object.prototype.toString");
var hasToStringTag = require("has-tostringtag/shams")();
var g = typeof globalThis === "undefined" ? global : globalThis;
var typedArrays = availableTypedArrays();
var $slice = callBound("String.prototype.slice");
var toStrTags = {};
var gOPD = require("es-abstract/helpers/getOwnPropertyDescriptor");
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) forEach(typedArrays, function(typedArray) {
    if (typeof g[typedArray] === "function") {
        var arr = new g[typedArray]();
        if (Symbol.toStringTag in arr) {
            var proto = getPrototypeOf(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor) {
                var superProto = getPrototypeOf(proto);
                descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            toStrTags[typedArray] = descriptor.get;
        }
    }
});
var tryTypedArrays = function tryAllTypedArrays(value) {
    var foundName = false;
    forEach(toStrTags, function(getter, typedArray) {
        if (!foundName) try {
            var name = getter.call(value);
            if (name === typedArray) foundName = name;
        } catch (e) {}
    });
    return foundName;
};
var isTypedArray = require("is-typed-array");
module.exports = function whichTypedArray(value) {
    if (!isTypedArray(value)) return false;
    if (!hasToStringTag || !(Symbol.toStringTag in value)) return $slice($toString(value), 8, -1);
    return tryTypedArrays(value);
};

},{"for-each":"1Sol9","available-typed-arrays":"kfela","call-bind/callBound":"5yYiF","has-tostringtag/shams":"9LdQ9","es-abstract/helpers/getOwnPropertyDescriptor":"6LOU8","is-typed-array":"1ihkG"}],"1Sol9":[function(require,module,exports) {
"use strict";
var isCallable = require("is-callable");
var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var forEachArray = function forEachArray(array, iterator, receiver) {
    for(var i = 0, len = array.length; i < len; i++)if (hasOwnProperty.call(array, i)) {
        if (receiver == null) iterator(array[i], i, array);
        else iterator.call(receiver, array[i], i, array);
    }
};
var forEachString = function forEachString(string, iterator, receiver) {
    for(var i = 0, len = string.length; i < len; i++)// no such thing as a sparse string.
    if (receiver == null) iterator(string.charAt(i), i, string);
    else iterator.call(receiver, string.charAt(i), i, string);
};
var forEachObject = function forEachObject(object, iterator, receiver) {
    for(var k in object)if (hasOwnProperty.call(object, k)) {
        if (receiver == null) iterator(object[k], k, object);
        else iterator.call(receiver, object[k], k, object);
    }
};
var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) throw new TypeError("iterator must be a function");
    var receiver;
    if (arguments.length >= 3) receiver = thisArg;
    if (toStr.call(list) === "[object Array]") forEachArray(list, iterator, receiver);
    else if (typeof list === "string") forEachString(list, iterator, receiver);
    else forEachObject(list, iterator, receiver);
};
module.exports = forEach;

},{"is-callable":"9ocyk"}],"9ocyk":[function(require,module,exports) {
"use strict";
var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") try {
    badArrayLike = Object.defineProperty({}, "length", {
        get: function() {
            throw isCallableMarker;
        }
    });
    isCallableMarker = {};
    // eslint-disable-next-line no-throw-literal
    reflectApply(function() {
        throw 42;
    }, null, badArrayLike);
} catch (_) {
    if (_ !== isCallableMarker) reflectApply = null;
}
else reflectApply = null;
var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
    try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
    } catch (e) {
        return false; // not a function
    }
};
var tryFunctionObject = function tryFunctionToStr(value) {
    try {
        if (isES6ClassFn(value)) return false;
        fnToStr.call(value);
        return true;
    } catch (e) {
        return false;
    }
};
var toStr = Object.prototype.toString;
var fnClass = "[object Function]";
var genClass = "[object GeneratorFunction]";
var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag; // better: use `has-tostringtag`
/* globals document: false */ var documentDotAll = typeof document === "object" && typeof document.all === "undefined" && document.all !== undefined ? document.all : {};
module.exports = reflectApply ? function isCallable(value) {
    if (value === documentDotAll) return true;
    if (!value) return false;
    if (typeof value !== "function" && typeof value !== "object") return false;
    if (typeof value === "function" && !value.prototype) return true;
    try {
        reflectApply(value, null, badArrayLike);
    } catch (e) {
        if (e !== isCallableMarker) return false;
    }
    return !isES6ClassFn(value);
} : function isCallable(value) {
    if (value === documentDotAll) return true;
    if (!value) return false;
    if (typeof value !== "function" && typeof value !== "object") return false;
    if (typeof value === "function" && !value.prototype) return true;
    if (hasToStringTag) return tryFunctionObject(value);
    if (isES6ClassFn(value)) return false;
    var strClass = toStr.call(value);
    return strClass === fnClass || strClass === genClass;
};

},{}],"kfela":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var possibleNames = [
    "BigInt64Array",
    "BigUint64Array",
    "Float32Array",
    "Float64Array",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray"
];
var g = typeof globalThis === "undefined" ? global : globalThis;
module.exports = function availableTypedArrays() {
    var out = [];
    for(var i = 0; i < possibleNames.length; i++)if (typeof g[possibleNames[i]] === "function") out[out.length] = possibleNames[i];
    return out;
};

},{}],"6LOU8":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("get-intrinsic");
var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
if ($gOPD) try {
    $gOPD([], "length");
} catch (e) {
    // IE 8 has a broken gOPD
    $gOPD = null;
}
module.exports = $gOPD;

},{"get-intrinsic":"dZb05"}],"1ihkG":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var forEach = require("for-each");
var availableTypedArrays = require("available-typed-arrays");
var callBound = require("call-bind/callBound");
var $toString = callBound("Object.prototype.toString");
var hasToStringTag = require("has-tostringtag/shams")();
var g = typeof globalThis === "undefined" ? global : globalThis;
var typedArrays = availableTypedArrays();
var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
    for(var i = 0; i < array.length; i += 1){
        if (array[i] === value) return i;
    }
    return -1;
};
var $slice = callBound("String.prototype.slice");
var toStrTags = {};
var gOPD = require("es-abstract/helpers/getOwnPropertyDescriptor");
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) forEach(typedArrays, function(typedArray) {
    var arr = new g[typedArray]();
    if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = gOPD(proto, Symbol.toStringTag);
        if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
        }
        toStrTags[typedArray] = descriptor.get;
    }
});
var tryTypedArrays = function tryAllTypedArrays(value) {
    var anyTrue = false;
    forEach(toStrTags, function(getter, typedArray) {
        if (!anyTrue) try {
            anyTrue = getter.call(value) === typedArray;
        } catch (e) {}
    });
    return anyTrue;
};
module.exports = function isTypedArray(value) {
    if (!value || typeof value !== "object") return false;
    if (!hasToStringTag || !(Symbol.toStringTag in value)) {
        var tag = $slice($toString(value), 8, -1);
        return $indexOf(typedArrays, tag) > -1;
    }
    if (!gOPD) return false;
    return tryTypedArrays(value);
};

},{"for-each":"1Sol9","available-typed-arrays":"kfela","call-bind/callBound":"5yYiF","has-tostringtag/shams":"9LdQ9","es-abstract/helpers/getOwnPropertyDescriptor":"6LOU8"}],"inNNy":[function(require,module,exports) {
module.exports = function isBuffer(arg) {
    return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
};

},{}],"lQlQt":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c
"use strict";
var process = require("process");
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
    return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
}
function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) _construct = Reflect.construct;
    else _construct = function _construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof(obj) {
        return typeof obj;
    };
    else _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return _typeof(obj);
}
var _require = require("util/"), inspect = _require.inspect;
var _require2 = require("../errors"), ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
function repeat(str, count) {
    count = Math.floor(count);
    if (str.length == 0 || count == 0) return "";
    var maxCount = str.length * count;
    count = Math.floor(Math.log(count) / Math.log(2));
    while(count){
        str += str;
        count--;
    }
    str += str.substring(0, maxCount - str.length);
    return str;
}
var blue = "";
var green = "";
var red = "";
var white = "";
var kReadableOperator = {
    deepStrictEqual: "Expected values to be strictly deep-equal:",
    strictEqual: "Expected values to be strictly equal:",
    strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
    deepEqual: "Expected values to be loosely deep-equal:",
    equal: "Expected values to be loosely equal:",
    notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
    notStrictEqual: 'Expected "actual" to be strictly unequal to:',
    notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
    notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
    notEqual: 'Expected "actual" to be loosely unequal to:',
    notIdentical: "Values identical but not reference-equal:"
}; // Comparing short primitives should just show === / !== instead of using the
// diff.
var kMaxShortLength = 10;
function copyError(source) {
    var keys = Object.keys(source);
    var target = Object.create(Object.getPrototypeOf(source));
    keys.forEach(function(key) {
        target[key] = source[key];
    });
    Object.defineProperty(target, "message", {
        value: source.message
    });
    return target;
}
function inspectValue(val) {
    // The util.inspect default values could be changed. This makes sure the
    // error messages contain the necessary information nevertheless.
    return inspect(val, {
        compact: false,
        customInspect: false,
        depth: 1000,
        maxArrayLength: Infinity,
        // Assert compares only enumerable properties (with a few exceptions).
        showHidden: false,
        // Having a long line as error is better than wrapping the line for
        // comparison for now.
        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
        // have meta information about the inspected properties (i.e., know where
        // in what line the property starts and ends).
        breakLength: Infinity,
        // Assert does not detect proxies currently.
        showProxy: false,
        sorted: true,
        // Inspect getters as we also check them when comparing entries.
        getters: true
    });
}
function createErrDiff(actual, expected, operator) {
    var other = "";
    var res = "";
    var lastPos = 0;
    var end = "";
    var skipped = false;
    var actualInspected = inspectValue(actual);
    var actualLines = actualInspected.split("\n");
    var expectedLines = inspectValue(expected).split("\n");
    var i = 0;
    var indicator = ""; // In case both values are objects explicitly mark them as not reference equal
    // for the `strictEqual` operator.
    if (operator === "strictEqual" && _typeof(actual) === "object" && _typeof(expected) === "object" && actual !== null && expected !== null) operator = "strictEqualObject";
     // If "actual" and "expected" fit on a single line and they are not strictly
    // equal, check further special handling.
    if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
        // kMaxShortLength and if neither is an object and at least one of them is
        // not `zero`, use the strict equal comparison to visualize the output.
        if (inputLength <= kMaxShortLength) {
            if ((_typeof(actual) !== "object" || actual === null) && (_typeof(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) // -0 === +0
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
        } else if (operator !== "strictEqualObject") {
            // If the stderr is a tty and the input length is lower than the current
            // columns per line, add a mismatch indicator below the output. If it is
            // not a tty, use a default value of 80 characters.
            var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
            if (inputLength < maxLength) {
                while(actualLines[0][i] === expectedLines[0][i])i++;
                 // Ignore the first characters.
                if (i > 2) {
                    // Add position indicator for the first mismatch in case it is a
                    // single line and the input length is less than the column length.
                    indicator = "\n  ".concat(repeat(" ", i), "^");
                    i = 0;
                }
            }
        }
    } // Remove all ending lines that match (this optimizes the output for
    // readability by reducing the number of total changed lines).
    var a = actualLines[actualLines.length - 1];
    var b = expectedLines[expectedLines.length - 1];
    while(a === b){
        if (i++ < 2) end = "\n  ".concat(a).concat(end);
        else other = a;
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0) break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
    }
    var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
    // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
    if (maxLines === 0) {
        // We have to get the result again. The lines were all removed before.
        var _actualLines = actualInspected.split("\n"); // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.
        if (_actualLines.length > 30) {
            _actualLines[26] = "".concat(blue, "...").concat(white);
            while(_actualLines.length > 27)_actualLines.pop();
        }
        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
    }
    if (i > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
    }
    if (other !== "") {
        end = "\n  ".concat(other).concat(end);
        other = "";
    }
    var printedLines = 0;
    var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
    var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
    for(i = 0; i < maxLines; i++){
        // Only extra expected lines exist
        var cur = i - lastPos;
        if (actualLines.length < i + 1) {
            // If the last diverging line is more than one line above and the
            // current line is at least line three, add some of the former lines and
            // also add dots to indicate skipped entries.
            if (cur > 1 && i > 2) {
                if (cur > 4) {
                    res += "\n".concat(blue, "...").concat(white);
                    skipped = true;
                } else if (cur > 3) {
                    res += "\n  ".concat(expectedLines[i - 2]);
                    printedLines++;
                }
                res += "\n  ".concat(expectedLines[i - 1]);
                printedLines++;
            } // Mark the current line as the last diverging one.
            lastPos = i; // Add the expected line to the cache.
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
            printedLines++; // Only extra actual lines exist
        } else if (expectedLines.length < i + 1) {
            // If the last diverging line is more than one line above and the
            // current line is at least line three, add some of the former lines and
            // also add dots to indicate skipped entries.
            if (cur > 1 && i > 2) {
                if (cur > 4) {
                    res += "\n".concat(blue, "...").concat(white);
                    skipped = true;
                } else if (cur > 3) {
                    res += "\n  ".concat(actualLines[i - 2]);
                    printedLines++;
                }
                res += "\n  ".concat(actualLines[i - 1]);
                printedLines++;
            } // Mark the current line as the last diverging one.
            lastPos = i; // Add the actual line to the result.
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
            printedLines++; // Lines diverge
        } else {
            var expectedLine = expectedLines[i];
            var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
            // a trailing comma. In that case it is actually identical and we should
            // mark it as such.
            var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
            // add a comma at the end of the actual line. Otherwise the output could
            // look weird as in:
            //
            //   [
            //     1         // No comma at the end!
            // +   2
            //   ]
            //
            if (divergingLines && endsWith(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
                divergingLines = false;
                actualLine += ",";
            }
            if (divergingLines) {
                // If the last diverging line is more than one line above and the
                // current line is at least line three, add some of the former lines and
                // also add dots to indicate skipped entries.
                if (cur > 1 && i > 2) {
                    if (cur > 4) {
                        res += "\n".concat(blue, "...").concat(white);
                        skipped = true;
                    } else if (cur > 3) {
                        res += "\n  ".concat(actualLines[i - 2]);
                        printedLines++;
                    }
                    res += "\n  ".concat(actualLines[i - 1]);
                    printedLines++;
                } // Mark the current line as the last diverging one.
                lastPos = i; // Add the actual line to the result and cache the expected diverging
                // line so consecutive diverging lines show up as +++--- and not +-+-+-.
                res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
                other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
                printedLines += 2; // Lines are identical
            } else {
                // Add all cached information to the result before adding other things
                // and reset the cache.
                res += other;
                other = ""; // If the last diverging line is exactly one line above or if it is the
                // very first line, add the line to the result.
                if (cur === 1 || i === 0) {
                    res += "\n  ".concat(actualLine);
                    printedLines++;
                }
            }
        } // Inspected object to big (Show ~20 rows max)
        if (printedLines > 20 && i < maxLines - 2) return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
    return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
}
var AssertionError = /*#__PURE__*/ function(_Error) {
    _inherits(AssertionError, _Error);
    function AssertionError(options) {
        var _this;
        _classCallCheck(this, AssertionError);
        if (_typeof(options) !== "object" || options === null) throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
        else {
            if (process.stderr && process.stderr.isTTY) {
                // Reset on each call to make sure we handle dynamically set environment
                // variables correct.
                if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
                    blue = "\x1b[34m";
                    green = "\x1b[32m";
                    white = "\x1b[39m";
                    red = "\x1b[31m";
                } else {
                    blue = "";
                    green = "";
                    white = "";
                    red = "";
                }
            } // Prevent the error stack from being visible by duplicating the error
            // in a very close way to the original in case both sides are actually
            // instances of Error.
            if (_typeof(actual) === "object" && actual !== null && _typeof(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
                actual = copyError(actual);
                expected = copyError(expected);
            }
            if (operator === "deepStrictEqual" || operator === "strictEqual") _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
            else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
                // In case the objects are equal but the operator requires unequal, show
                // the first object and say A equals B
                var base = kReadableOperator[operator];
                var res = inspectValue(actual).split("\n"); // In case "actual" is an object, it should not be reference equal.
                if (operator === "notStrictEqual" && _typeof(actual) === "object" && actual !== null) base = kReadableOperator.notStrictEqualObject;
                 // Only remove lines in case it makes sense to collapse those.
                // TODO: Accept env to always show the full error.
                if (res.length > 30) {
                    res[26] = "".concat(blue, "...").concat(white);
                    while(res.length > 27)res.pop();
                } // Only print a single input.
                if (res.length === 1) _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
                else _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join("\n"), "\n")));
            } else {
                var _res = inspectValue(actual);
                var other = "";
                var knownOperators = kReadableOperator[operator];
                if (operator === "notDeepEqual" || operator === "notEqual") {
                    _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
                    if (_res.length > 1024) _res = "".concat(_res.slice(0, 1021), "...");
                } else {
                    other = "".concat(inspectValue(expected));
                    if (_res.length > 512) _res = "".concat(_res.slice(0, 509), "...");
                    if (other.length > 512) other = "".concat(other.slice(0, 509), "...");
                    if (operator === "deepEqual" || operator === "equal") _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
                    else other = " ".concat(operator, " ").concat(other);
                }
                _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
            }
        }
        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized(_this), "name", {
            value: "AssertionError [ERR_ASSERTION]",
            enumerable: false,
            writable: true,
            configurable: true
        });
        _this.code = "ERR_ASSERTION";
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) // eslint-disable-next-line no-restricted-syntax
        Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
         // Create error message including the error code in the name.
        _this.stack; // Reset the name.
        _this.name = "AssertionError";
        return _possibleConstructorReturn(_this);
    }
    _createClass(AssertionError, [
        {
            key: "toString",
            value: function toString() {
                return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
            }
        },
        {
            key: inspect.custom,
            value: function value(recurseTimes, ctx) {
                // This limits the `actual` and `expected` property default inspection to
                // the minimum depth. Otherwise those values would be too verbose compared
                // to the actual error message which contains a combined view of these two
                // input values.
                return inspect(this, _objectSpread({}, ctx, {
                    customInspect: false,
                    depth: 0
                }));
            }
        }
    ]);
    return AssertionError;
}(_wrapNativeSuper(Error));
module.exports = AssertionError;

},{"process":"d5jf4","util/":"cxohQ","../errors":"cwQVR"}],"713SE":[function(require,module,exports) {
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */ "use strict";
function assign(target, firstSource) {
    if (target === undefined || target === null) throw new TypeError("Cannot convert first argument to object");
    var to = Object(target);
    for(var i = 1; i < arguments.length; i++){
        var nextSource = arguments[i];
        if (nextSource === undefined || nextSource === null) continue;
        var keysArray = Object.keys(Object(nextSource));
        for(var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++){
            var nextKey = keysArray[nextIndex];
            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
            if (desc !== undefined && desc.enumerable) to[nextKey] = nextSource[nextKey];
        }
    }
    return to;
}
function polyfill() {
    if (!Object.assign) Object.defineProperty(Object, "assign", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: assign
    });
}
module.exports = {
    assign: assign,
    polyfill: polyfill
};

},{}],"k2tpA":[function(require,module,exports) {
"use strict";
var define = require("define-properties");
var callBind = require("call-bind");
var implementation = require("./implementation");
var getPolyfill = require("./polyfill");
var shim = require("./shim");
var polyfill = callBind(getPolyfill(), Object);
define(polyfill, {
    getPolyfill: getPolyfill,
    implementation: implementation,
    shim: shim
});
module.exports = polyfill;

},{"define-properties":"6eq5U","call-bind":"bfo8D","./implementation":"WLxcH","./polyfill":"ezjA5","./shim":"9p2yJ"}],"6eq5U":[function(require,module,exports) {
"use strict";
var keys = require("object-keys");
var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;
var isFunction = function(fn) {
    return typeof fn === "function" && toStr.call(fn) === "[object Function]";
};
var hasPropertyDescriptors = require("has-property-descriptors")();
var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;
var defineProperty = function(object, name, value, predicate) {
    if (name in object && (!isFunction(predicate) || !predicate())) return;
    if (supportsDescriptors) origDefineProperty(object, name, {
        configurable: true,
        enumerable: false,
        value: value,
        writable: true
    });
    else object[name] = value; // eslint-disable-line no-param-reassign
};
var defineProperties = function(object, map) {
    var predicates = arguments.length > 2 ? arguments[2] : {};
    var props = keys(map);
    if (hasSymbols) props = concat.call(props, Object.getOwnPropertySymbols(map));
    for(var i = 0; i < props.length; i += 1)defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
};
defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;

},{"object-keys":"eNyf4","has-property-descriptors":"esBLZ"}],"eNyf4":[function(require,module,exports) {
"use strict";
var slice = Array.prototype.slice;
var isArgs = require("./isArguments");
var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) {
    return origKeys(o);
} : require("./implementation");
var originalKeys = Object.keys;
keysShim.shim = function shimObjectKeys() {
    if (Object.keys) {
        var keysWorksWithArguments = function() {
            // Safari 5.0 bug
            var args = Object.keys(arguments);
            return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) Object.keys = function keys(object) {
            if (isArgs(object)) return originalKeys(slice.call(object));
            return originalKeys(object);
        };
    } else Object.keys = keysShim;
    return Object.keys || keysShim;
};
module.exports = keysShim;

},{"./isArguments":"1HhOq","./implementation":"aV01q"}],"1HhOq":[function(require,module,exports) {
"use strict";
var toStr = Object.prototype.toString;
module.exports = function isArguments(value) {
    var str = toStr.call(value);
    var isArgs = str === "[object Arguments]";
    if (!isArgs) isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
    return isArgs;
};

},{}],"aV01q":[function(require,module,exports) {
"use strict";
var keysShim;
if (!Object.keys) {
    // modified from https://github.com/es-shims/es5-shim
    var has = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var isArgs = require("./isArguments"); // eslint-disable-line global-require
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var hasDontEnumBug = !isEnumerable.call({
        toString: null
    }, "toString");
    var hasProtoEnumBug = isEnumerable.call(function() {}, "prototype");
    var dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
    ];
    var equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
    };
    var excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
    };
    var hasAutomationEqualityBug = function() {
        /* global window */ if (typeof window === "undefined") return false;
        for(var k in window)try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") try {
                equalsConstructorPrototype(window[k]);
            } catch (e) {
                return true;
            }
        } catch (e1) {
            return true;
        }
        return false;
    }();
    var equalsConstructorPrototypeIfNotBuggy = function(o) {
        /* global window */ if (typeof window === "undefined" || !hasAutomationEqualityBug) return equalsConstructorPrototype(o);
        try {
            return equalsConstructorPrototype(o);
        } catch (e) {
            return false;
        }
    };
    keysShim = function keys(object) {
        var isObject = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) throw new TypeError("Object.keys called on a non-object");
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) for(var i = 0; i < object.length; ++i)theKeys.push(String(i));
        if (isArguments && object.length > 0) for(var j = 0; j < object.length; ++j)theKeys.push(String(j));
        else {
            for(var name in object)if (!(skipProto && name === "prototype") && has.call(object, name)) theKeys.push(String(name));
        }
        if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
            for(var k = 0; k < dontEnums.length; ++k)if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) theKeys.push(dontEnums[k]);
        }
        return theKeys;
    };
}
module.exports = keysShim;

},{"./isArguments":"1HhOq"}],"esBLZ":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("get-intrinsic");
var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
var hasPropertyDescriptors = function hasPropertyDescriptors() {
    if ($defineProperty) try {
        $defineProperty({}, "a", {
            value: 1
        });
        return true;
    } catch (e) {
        // IE 8 has a broken defineProperty
        return false;
    }
    return false;
};
hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    // node v0.6 has a bug where array lengths can be Set but not Defined
    if (!hasPropertyDescriptors()) return null;
    try {
        return $defineProperty([], "length", {
            value: 1
        }).length !== 1;
    } catch (e) {
        // In Firefox 4-22, defining length on an array throws an exception.
        return true;
    }
};
module.exports = hasPropertyDescriptors;

},{"get-intrinsic":"dZb05"}],"WLxcH":[function(require,module,exports) {
"use strict";
var numberIsNaN = function(value) {
    return value !== value;
};
module.exports = function is(a, b) {
    if (a === 0 && b === 0) return 1 / a === 1 / b;
    if (a === b) return true;
    if (numberIsNaN(a) && numberIsNaN(b)) return true;
    return false;
};

},{}],"ezjA5":[function(require,module,exports) {
"use strict";
var implementation = require("./implementation");
module.exports = function getPolyfill() {
    return typeof Object.is === "function" ? Object.is : implementation;
};

},{"./implementation":"WLxcH"}],"9p2yJ":[function(require,module,exports) {
"use strict";
var getPolyfill = require("./polyfill");
var define = require("define-properties");
module.exports = function shimObjectIs() {
    var polyfill = getPolyfill();
    define(Object, {
        is: polyfill
    }, {
        is: function testObjectIs() {
            return Object.is !== polyfill;
        }
    });
    return polyfill;
};

},{"./polyfill":"ezjA5","define-properties":"6eq5U"}],"d5TM9":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
"use strict";
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof(obj) {
        return typeof obj;
    };
    else _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return _typeof(obj);
}
var regexFlagsSupported = /a/g.flags !== undefined;
var arrayFromSet = function arrayFromSet(set) {
    var array = [];
    set.forEach(function(value) {
        return array.push(value);
    });
    return array;
};
var arrayFromMap = function arrayFromMap(map) {
    var array = [];
    map.forEach(function(value, key) {
        return array.push([
            key,
            value
        ]);
    });
    return array;
};
var objectIs = Object.is ? Object.is : require("object-is");
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
    return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : require("is-nan");
function uncurryThis(f) {
    return f.call.bind(f);
}
var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);
var _require$types = require("util/").types, isAnyArrayBuffer = _require$types.isAnyArrayBuffer, isArrayBufferView = _require$types.isArrayBufferView, isDate = _require$types.isDate, isMap = _require$types.isMap, isRegExp = _require$types.isRegExp, isSet = _require$types.isSet, isNativeError = _require$types.isNativeError, isBoxedPrimitive = _require$types.isBoxedPrimitive, isNumberObject = _require$types.isNumberObject, isStringObject = _require$types.isStringObject, isBooleanObject = _require$types.isBooleanObject, isBigIntObject = _require$types.isBigIntObject, isSymbolObject = _require$types.isSymbolObject, isFloat32Array = _require$types.isFloat32Array, isFloat64Array = _require$types.isFloat64Array;
function isNonIndex(key) {
    if (key.length === 0 || key.length > 10) return true;
    for(var i = 0; i < key.length; i++){
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57) return true;
    } // The maximum size for an array is 2 ** 32 -1.
    return key.length === 10 && key >= Math.pow(2, 32);
}
function getOwnNonIndexProperties(value) {
    return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */ function compare(a, b) {
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
}
var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags
function areSimilarRegExps(a, b) {
    return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}
function areSimilarFloatArrays(a, b) {
    if (a.byteLength !== b.byteLength) return false;
    for(var offset = 0; offset < a.byteLength; offset++){
        if (a[offset] !== b[offset]) return false;
    }
    return true;
}
function areSimilarTypedArrays(a, b) {
    if (a.byteLength !== b.byteLength) return false;
    return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}
function areEqualArrayBuffers(buf1, buf2) {
    return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}
function isEqualBoxedPrimitive(val1, val2) {
    if (isNumberObject(val1)) return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
    if (isStringObject(val1)) return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
    if (isBooleanObject(val1)) return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
    if (isBigIntObject(val1)) return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
    return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.
function innerDeepEqual(val1, val2, strict, memos) {
    // All identical values are equivalent, as determined by ===.
    if (val1 === val2) {
        if (val1 !== 0) return true;
        return strict ? objectIs(val1, val2) : true;
    } // Check more closely if val1 and val2 are equal.
    if (strict) {
        if (_typeof(val1) !== "object") return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
        if (_typeof(val2) !== "object" || val1 === null || val2 === null) return false;
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) return false;
    } else {
        if (val1 === null || _typeof(val1) !== "object") {
            if (val2 === null || _typeof(val2) !== "object") // eslint-disable-next-line eqeqeq
            return val1 == val2;
            return false;
        }
        if (val2 === null || _typeof(val2) !== "object") return false;
    }
    var val1Tag = objectToString(val1);
    var val2Tag = objectToString(val2);
    if (val1Tag !== val2Tag) return false;
    if (Array.isArray(val1)) {
        // Check for sparse arrays and general fast path
        if (val1.length !== val2.length) return false;
        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (keys1.length !== keys2.length) return false;
        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
    } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
    // wan't to early return out of the rest of the checks. However we can check
    // if the second value is one of these values and the first isn't.
    if (val1Tag === "[object Object]") {
        // return keyCheck(val1, val2, strict, memos, kNoIterator);
        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) return false;
    }
    if (isDate(val1)) {
        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) return false;
    } else if (isRegExp(val1)) {
        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) return false;
    } else if (isNativeError(val1) || val1 instanceof Error) {
        // Do not compare the stack as it might differ even though the error itself
        // is otherwise identical.
        if (val1.message !== val2.message || val1.name !== val2.name) return false;
    } else if (isArrayBufferView(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
            if (!areSimilarFloatArrays(val1, val2)) return false;
        } else if (!areSimilarTypedArrays(val1, val2)) return false;
         // Buffer.compare returns true, so val1.length === val2.length. If they both
        // only contain numeric keys, we don't need to exam further than checking
        // the symbols.
        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (_keys.length !== _keys2.length) return false;
        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
    } else if (isSet(val1)) {
        if (!isSet(val2) || val1.size !== val2.size) return false;
        return keyCheck(val1, val2, strict, memos, kIsSet);
    } else if (isMap(val1)) {
        if (!isMap(val2) || val1.size !== val2.size) return false;
        return keyCheck(val1, val2, strict, memos, kIsMap);
    } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) return false;
    } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) return false;
    return keyCheck(val1, val2, strict, memos, kNoIterator);
}
function getEnumerables(val, keys) {
    return keys.filter(function(k) {
        return propertyIsEnumerable(val, k);
    });
}
function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
    // For all remaining Object pairs, including Array, objects and Maps,
    // equivalence is determined by having:
    // a) The same number of owned enumerable properties
    // b) The same set of keys/indexes (although not necessarily the same order)
    // c) Equivalent values for every corresponding key/index
    // d) For Sets and Maps, equal contents
    // Note: this accounts for both named and indexed properties on Arrays.
    if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.
        if (aKeys.length !== bKeys.length) return false;
    } // Cheap key test
    var i = 0;
    for(; i < aKeys.length; i++){
        if (!hasOwnProperty(val2, aKeys[i])) return false;
    }
    if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
            var count = 0;
            for(i = 0; i < symbolKeysA.length; i++){
                var key = symbolKeysA[i];
                if (propertyIsEnumerable(val1, key)) {
                    if (!propertyIsEnumerable(val2, key)) return false;
                    aKeys.push(key);
                    count++;
                } else if (propertyIsEnumerable(val2, key)) return false;
            }
            var symbolKeysB = objectGetOwnPropertySymbols(val2);
            if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) return false;
        } else {
            var _symbolKeysB = objectGetOwnPropertySymbols(val2);
            if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) return false;
        }
    }
    if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) return true;
     // Use memos to handle cycles.
    if (memos === undefined) memos = {
        val1: new Map(),
        val2: new Map(),
        position: 0
    };
    else {
        // We prevent up to two map.has(x) calls by directly retrieving the value
        // and checking for undefined. The map can only contain numbers, so it is
        // safe to check for undefined only.
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== undefined) {
            var val2MemoB = memos.val2.get(val2);
            if (val2MemoB !== undefined) return val2MemoA === val2MemoB;
        }
        memos.position++;
    }
    memos.val1.set(val1, memos.position);
    memos.val2.set(val2, memos.position);
    var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
    memos.val1.delete(val1);
    memos.val2.delete(val2);
    return areEq;
}
function setHasEqualElement(set, val1, strict, memo) {
    // Go looking.
    var setValues = arrayFromSet(set);
    for(var i = 0; i < setValues.length; i++){
        var val2 = setValues[i];
        if (innerDeepEqual(val1, val2, strict, memo)) {
            // Remove the matching element to make sure we do not check that again.
            set.delete(val2);
            return true;
        }
    }
    return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').
function findLooseMatchingPrimitives(prim) {
    switch(_typeof(prim)){
        case "undefined":
            return null;
        case "object":
            // Only pass in null as object!
            return undefined;
        case "symbol":
            return false;
        case "string":
            prim = +prim;
        // Loose equal entries exist only if the string is possible to convert to
        // a regular number and not NaN.
        // Fall through
        case "number":
            if (numberIsNaN(prim)) return false;
    }
    return true;
}
function setMightHaveLoosePrim(a, b, prim) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) return altValue;
    return b.has(altValue) && !a.has(altValue);
}
function mapMightHaveLoosePrim(a, b, prim, item, memo) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) return altValue;
    var curB = b.get(altValue);
    if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) return false;
    return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}
function setEquiv(a, b, strict, memo) {
    // This is a lazily initiated Set of entries which have to be compared
    // pairwise.
    var set = null;
    var aValues = arrayFromSet(a);
    for(var i = 0; i < aValues.length; i++){
        var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
        // heavy sets but it is a minor slow down for primitives. As they are fast
        // to check this improves the worst case scenario instead.
        if (_typeof(val) === "object" && val !== null) {
            if (set === null) set = new Set();
             // If the specified value doesn't exist in the second set its an not null
            // object (or non strict only: a not matching primitive) we'll need to go
            // hunting for something thats deep-(strict-)equal to it. To make this
            // O(n log n) complexity we have to copy these values in a new set first.
            set.add(val);
        } else if (!b.has(val)) {
            if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.
            if (!setMightHaveLoosePrim(a, b, val)) return false;
            if (set === null) set = new Set();
            set.add(val);
        }
    }
    if (set !== null) {
        var bValues = arrayFromSet(b);
        for(var _i = 0; _i < bValues.length; _i++){
            var _val = bValues[_i]; // We have to check if a primitive value is already
            // matching and only if it's not, go hunting for it.
            if (_typeof(_val) === "object" && _val !== null) {
                if (!setHasEqualElement(set, _val, strict, memo)) return false;
            } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) return false;
        }
        return set.size === 0;
    }
    return true;
}
function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
    // To be able to handle cases like:
    //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
    // ... we need to consider *all* matching keys, not just the first we find.
    var setValues = arrayFromSet(set);
    for(var i = 0; i < setValues.length; i++){
        var key2 = setValues[i];
        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
            set.delete(key2);
            return true;
        }
    }
    return false;
}
function mapEquiv(a, b, strict, memo) {
    var set = null;
    var aEntries = arrayFromMap(a);
    for(var i = 0; i < aEntries.length; i++){
        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
        if (_typeof(key) === "object" && key !== null) {
            if (set === null) set = new Set();
            set.add(key);
        } else {
            // By directly retrieving the value we prevent another b.has(key) check in
            // almost all possible cases.
            var item2 = b.get(key);
            if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
                if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
                // keys.
                if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
                if (set === null) set = new Set();
                set.add(key);
            }
        }
    }
    if (set !== null) {
        var bEntries = arrayFromMap(b);
        for(var _i2 = 0; _i2 < bEntries.length; _i2++){
            var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), key = _bEntries$_i[0], item = _bEntries$_i[1];
            if (_typeof(key) === "object" && key !== null) {
                if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
            } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) return false;
        }
        return set.size === 0;
    }
    return true;
}
function objEquiv(a, b, strict, keys, memos, iterationType) {
    // Sets and maps don't have their entries accessible via normal object
    // properties.
    var i = 0;
    if (iterationType === kIsSet) {
        if (!setEquiv(a, b, strict, memos)) return false;
    } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b, strict, memos)) return false;
    } else if (iterationType === kIsArray) for(; i < a.length; i++){
        if (hasOwnProperty(a, i)) {
            if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) return false;
        } else if (hasOwnProperty(b, i)) return false;
        else {
            // Array is sparse.
            var keysA = Object.keys(a);
            for(; i < keysA.length; i++){
                var key = keysA[i];
                if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) return false;
            }
            if (keysA.length !== Object.keys(b).length) return false;
            return true;
        }
    }
     // The pair must have equivalent values for every corresponding key.
    // Possibly expensive deep test:
    for(i = 0; i < keys.length; i++){
        var _key = keys[i];
        if (!innerDeepEqual(a[_key], b[_key], strict, memos)) return false;
    }
    return true;
}
function isDeepEqual(val1, val2) {
    return innerDeepEqual(val1, val2, kLoose);
}
function isDeepStrictEqual(val1, val2) {
    return innerDeepEqual(val1, val2, kStrict);
}
module.exports = {
    isDeepEqual: isDeepEqual,
    isDeepStrictEqual: isDeepStrictEqual
};

},{"object-is":"k2tpA","is-nan":"hY4fH","util/":"cxohQ"}],"hY4fH":[function(require,module,exports) {
"use strict";
var callBind = require("call-bind");
var define = require("define-properties");
var implementation = require("./implementation");
var getPolyfill = require("./polyfill");
var shim = require("./shim");
var polyfill = callBind(getPolyfill(), Number);
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ define(polyfill, {
    getPolyfill: getPolyfill,
    implementation: implementation,
    shim: shim
});
module.exports = polyfill;

},{"call-bind":"bfo8D","define-properties":"6eq5U","./implementation":"lxsrq","./polyfill":"h00Nr","./shim":"cr2es"}],"lxsrq":[function(require,module,exports) {
"use strict";
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module.exports = function isNaN(value) {
    return value !== value;
};

},{}],"h00Nr":[function(require,module,exports) {
"use strict";
var implementation = require("./implementation");
module.exports = function getPolyfill() {
    if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) return Number.isNaN;
    return implementation;
};

},{"./implementation":"lxsrq"}],"cr2es":[function(require,module,exports) {
"use strict";
var define = require("define-properties");
var getPolyfill = require("./polyfill");
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module.exports = function shimNumberIsNaN() {
    var polyfill = getPolyfill();
    define(Number, {
        isNaN: polyfill
    }, {
        isNaN: function testIsNaN() {
            return Number.isNaN !== polyfill;
        }
    });
    return polyfill;
};

},{"define-properties":"6eq5U","./polyfill":"h00Nr"}],"1EJ2h":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("./util/_");
var $ = require("./util/preconditions");
var JSUtil = require("./util/js");
function Opcode(num) {
    if (!(this instanceof Opcode)) return new Opcode(num);
    var value;
    if (_.isNumber(num)) value = num;
    else if (_.isString(num)) value = Opcode.map[num];
    else throw new TypeError('Unrecognized num type: "' + typeof num + '" for Opcode');
    JSUtil.defineImmutable(this, {
        num: value
    });
    return this;
}
Opcode.fromBuffer = function(buf) {
    $.checkArgument(Buffer.isBuffer(buf));
    return new Opcode(Number("0x" + buf.toString("hex")));
};
Opcode.fromNumber = function(num) {
    $.checkArgument(_.isNumber(num));
    return new Opcode(num);
};
Opcode.fromString = function(str) {
    $.checkArgument(_.isString(str));
    var value = Opcode.map[str];
    if (typeof value === "undefined") throw new TypeError("Invalid opcodestr");
    return new Opcode(value);
};
Opcode.prototype.toHex = function() {
    return this.num.toString(16);
};
Opcode.prototype.toBuffer = function() {
    return Buffer.from(this.toHex(), "hex");
};
Opcode.prototype.toNumber = function() {
    return this.num;
};
Opcode.prototype.toString = function() {
    var str = Opcode.reverseMap[this.num];
    if (typeof str === "undefined") throw new Error("Opcode does not have a string representation");
    return str;
};
Opcode.smallInt = function(n) {
    $.checkArgument(_.isNumber(n), "Invalid Argument: n should be number");
    $.checkArgument(n >= 0 && n <= 16, "Invalid Argument: n must be between 0 and 16");
    if (n === 0) return Opcode("OP_0");
    return new Opcode(Opcode.map.OP_1 + n - 1);
};
Opcode.map = {
    // push value
    OP_FALSE: 0,
    OP_0: 0,
    OP_PUSHDATA1: 76,
    OP_PUSHDATA2: 77,
    OP_PUSHDATA4: 78,
    OP_1NEGATE: 79,
    OP_RESERVED: 80,
    OP_TRUE: 81,
    OP_1: 81,
    OP_2: 82,
    OP_3: 83,
    OP_4: 84,
    OP_5: 85,
    OP_6: 86,
    OP_7: 87,
    OP_8: 88,
    OP_9: 89,
    OP_10: 90,
    OP_11: 91,
    OP_12: 92,
    OP_13: 93,
    OP_14: 94,
    OP_15: 95,
    OP_16: 96,
    // control
    OP_NOP: 97,
    OP_VER: 98,
    OP_IF: 99,
    OP_NOTIF: 100,
    OP_VERIF: 101,
    OP_VERNOTIF: 102,
    OP_ELSE: 103,
    OP_ENDIF: 104,
    OP_VERIFY: 105,
    OP_RETURN: 106,
    // stack ops
    OP_TOALTSTACK: 107,
    OP_FROMALTSTACK: 108,
    OP_2DROP: 109,
    OP_2DUP: 110,
    OP_3DUP: 111,
    OP_2OVER: 112,
    OP_2ROT: 113,
    OP_2SWAP: 114,
    OP_IFDUP: 115,
    OP_DEPTH: 116,
    OP_DROP: 117,
    OP_DUP: 118,
    OP_NIP: 119,
    OP_OVER: 120,
    OP_PICK: 121,
    OP_ROLL: 122,
    OP_ROT: 123,
    OP_SWAP: 124,
    OP_TUCK: 125,
    // splice ops
    OP_CAT: 126,
    OP_SPLIT: 127,
    OP_NUM2BIN: 128,
    OP_BIN2NUM: 129,
    OP_SIZE: 130,
    // bit logic
    OP_INVERT: 131,
    OP_AND: 132,
    OP_OR: 133,
    OP_XOR: 134,
    OP_EQUAL: 135,
    OP_EQUALVERIFY: 136,
    OP_RESERVED1: 137,
    OP_RESERVED2: 138,
    // numeric
    OP_1ADD: 139,
    OP_1SUB: 140,
    OP_2MUL: 141,
    OP_2DIV: 142,
    OP_NEGATE: 143,
    OP_ABS: 144,
    OP_NOT: 145,
    OP_0NOTEQUAL: 146,
    OP_ADD: 147,
    OP_SUB: 148,
    OP_MUL: 149,
    OP_DIV: 150,
    OP_MOD: 151,
    OP_LSHIFT: 152,
    OP_RSHIFT: 153,
    OP_BOOLAND: 154,
    OP_BOOLOR: 155,
    OP_NUMEQUAL: 156,
    OP_NUMEQUALVERIFY: 157,
    OP_NUMNOTEQUAL: 158,
    OP_LESSTHAN: 159,
    OP_GREATERTHAN: 160,
    OP_LESSTHANOREQUAL: 161,
    OP_GREATERTHANOREQUAL: 162,
    OP_MIN: 163,
    OP_MAX: 164,
    OP_WITHIN: 165,
    // crypto
    OP_RIPEMD160: 166,
    OP_SHA1: 167,
    OP_SHA256: 168,
    OP_HASH160: 169,
    OP_HASH256: 170,
    OP_CODESEPARATOR: 171,
    OP_CHECKSIG: 172,
    OP_CHECKSIGVERIFY: 173,
    OP_CHECKMULTISIG: 174,
    OP_CHECKMULTISIGVERIFY: 175,
    OP_CHECKLOCKTIMEVERIFY: 177,
    OP_CHECKSEQUENCEVERIFY: 178,
    // expansion
    OP_NOP1: 176,
    OP_NOP2: 177,
    OP_NOP3: 178,
    OP_NOP4: 179,
    OP_NOP5: 180,
    OP_NOP6: 181,
    OP_NOP7: 182,
    OP_NOP8: 183,
    OP_NOP9: 184,
    OP_NOP10: 185,
    // template matching params
    OP_PUBKEYHASH: 253,
    OP_PUBKEY: 254,
    OP_INVALIDOPCODE: 255
};
Opcode.reverseMap = [];
for(var k in Opcode.map)Opcode.reverseMap[Opcode.map[k]] = k;
// Easier access to opcodes
_.extend(Opcode, Opcode.map);
/**
 * @returns true if opcode is one of OP_0, OP_1, ..., OP_16
 */ Opcode.isSmallIntOp = function(opcode) {
    if (opcode instanceof Opcode) opcode = opcode.toNumber();
    return opcode === Opcode.map.OP_0 || opcode >= Opcode.map.OP_1 && opcode <= Opcode.map.OP_16;
};
/**
 * Will return a string formatted for the console
 *
 * @returns {string} Script opcode
 */ Opcode.prototype.inspect = function() {
    return "<Opcode: " + this.toString() + ", hex: " + this.toHex() + ", decimal: " + this.num + ">";
};
module.exports = Opcode;

},{"buffer":"fCgem","./util/_":"f1m1Z","./util/preconditions":"c91dJ","./util/js":"it7yM"}],"axUut":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var BN = require("./bn");
var _ = require("../util/_");
var $ = require("../util/preconditions");
var JSUtil = require("../util/js");
var Signature = function Signature(r, s) {
    if (!(this instanceof Signature)) return new Signature(r, s);
    if (r instanceof BN) this.set({
        r: r,
        s: s
    });
    else if (r) {
        var obj = r;
        this.set(obj);
    }
};
Signature.prototype.set = function(obj) {
    this.r = obj.r || this.r || undefined;
    this.s = obj.s || this.s || undefined;
    this.i = typeof obj.i !== "undefined" ? obj.i : this.i // public key recovery parameter in range [0, 3]
    ;
    this.compressed = typeof obj.compressed !== "undefined" ? obj.compressed : this.compressed // whether the recovered pubkey is compressed
    ;
    this.nhashtype = obj.nhashtype || this.nhashtype || undefined;
    return this;
};
Signature.fromCompact = function(buf) {
    $.checkArgument(Buffer.isBuffer(buf), "Argument is expected to be a Buffer");
    var sig = new Signature();
    var compressed = true;
    var i = buf.slice(0, 1)[0] - 27 - 4;
    if (i < 0) {
        compressed = false;
        i = i + 4;
    }
    var b2 = buf.slice(1, 33);
    var b3 = buf.slice(33, 65);
    $.checkArgument(i === 0 || i === 1 || i === 2 || i === 3, new Error("i must be 0, 1, 2, or 3"));
    $.checkArgument(b2.length === 32, new Error("r must be 32 bytes"));
    $.checkArgument(b3.length === 32, new Error("s must be 32 bytes"));
    sig.compressed = compressed;
    sig.i = i;
    sig.r = BN.fromBuffer(b2);
    sig.s = BN.fromBuffer(b3);
    return sig;
};
Signature.fromDER = Signature.fromBuffer = function(buf, strict) {
    var obj = Signature.parseDER(buf, strict);
    var sig = new Signature();
    sig.r = obj.r;
    sig.s = obj.s;
    return sig;
};
// The format used in a tx
Signature.fromTxFormat = function(buf) {
    var nhashtype = buf.readUInt8(buf.length - 1);
    var derbuf = buf.slice(0, buf.length - 1);
    var sig = Signature.fromDER(derbuf, false);
    sig.nhashtype = nhashtype;
    return sig;
};
Signature.fromString = function(str) {
    var buf = Buffer.from(str, "hex");
    return Signature.fromDER(buf);
};
/**
 * In order to mimic the non-strict DER encoding of OpenSSL, set strict = false.
 */ Signature.parseDER = function(buf, strict) {
    $.checkArgument(Buffer.isBuffer(buf), new Error("DER formatted signature should be a buffer"));
    if (_.isUndefined(strict)) strict = true;
    var header = buf[0];
    $.checkArgument(header === 0x30, new Error("Header byte should be 0x30"));
    var length = buf[1];
    var buflength = buf.slice(2).length;
    $.checkArgument(!strict || length === buflength, new Error("Length byte should length of what follows"));
    length = length < buflength ? length : buflength;
    var rheader = buf[2];
    $.checkArgument(rheader === 0x02, new Error("Integer byte for r should be 0x02"));
    var rlength = buf[3];
    var rbuf = buf.slice(4, 4 + rlength);
    var r = BN.fromBuffer(rbuf);
    var rneg = buf[4] === 0x00;
    $.checkArgument(rlength === rbuf.length, new Error("Length of r incorrect"));
    var sheader = buf[4 + rlength + 0];
    $.checkArgument(sheader === 0x02, new Error("Integer byte for s should be 0x02"));
    var slength = buf[4 + rlength + 1];
    var sbuf = buf.slice(4 + rlength + 2, 4 + rlength + 2 + slength);
    var s = BN.fromBuffer(sbuf);
    var sneg = buf[4 + rlength + 2 + 2] === 0x00;
    $.checkArgument(slength === sbuf.length, new Error("Length of s incorrect"));
    var sumlength = 4 + rlength + 2 + slength;
    $.checkArgument(length === sumlength - 2, new Error("Length of signature incorrect"));
    var obj = {
        header: header,
        length: length,
        rheader: rheader,
        rlength: rlength,
        rneg: rneg,
        rbuf: rbuf,
        r: r,
        sheader: sheader,
        slength: slength,
        sneg: sneg,
        sbuf: sbuf,
        s: s
    };
    return obj;
};
Signature.prototype.toCompact = function(i, compressed) {
    i = typeof i === "number" ? i : this.i;
    compressed = typeof compressed === "boolean" ? compressed : this.compressed;
    if (!(i === 0 || i === 1 || i === 2 || i === 3)) throw new Error("i must be equal to 0, 1, 2, or 3");
    var val = i + 27 + 4;
    if (compressed === false) val = val - 4;
    var b1 = Buffer.from([
        val
    ]);
    var b2 = this.r.toBuffer({
        size: 32
    });
    var b3 = this.s.toBuffer({
        size: 32
    });
    return Buffer.concat([
        b1,
        b2,
        b3
    ]);
};
Signature.prototype.toBuffer = Signature.prototype.toDER = function() {
    var rnbuf = this.r.toBuffer();
    var snbuf = this.s.toBuffer();
    var rneg = !!(rnbuf[0] & 0x80);
    var sneg = !!(snbuf[0] & 0x80);
    var rbuf = rneg ? Buffer.concat([
        Buffer.from([
            0x00
        ]),
        rnbuf
    ]) : rnbuf;
    var sbuf = sneg ? Buffer.concat([
        Buffer.from([
            0x00
        ]),
        snbuf
    ]) : snbuf;
    var rlength = rbuf.length;
    var slength = sbuf.length;
    var length = 2 + rlength + 2 + slength;
    var rheader = 0x02;
    var sheader = 0x02;
    var header = 0x30;
    var der = Buffer.concat([
        Buffer.from([
            header,
            length,
            rheader,
            rlength
        ]),
        rbuf,
        Buffer.from([
            sheader,
            slength
        ]),
        sbuf
    ]);
    return der;
};
Signature.prototype.toString = function() {
    var buf = this.toDER();
    return buf.toString("hex");
};
/**
 * This function is translated from bitcoind's IsDERSignature and is used in
 * the script interpreter.  This "DER" format actually includes an extra byte,
 * the nhashtype, at the end. It is really the tx format, not DER format.
 *
 * A canonical signature exists of: [30] [total len] [02] [len R] [R] [02] [len S] [S] [hashtype]
 * Where R and S are not negative (their first byte has its highest bit not set), and not
 * excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,
 * in which case a single 0 byte is necessary and even required).
 *
 * See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623
 */ Signature.isTxDER = function(buf) {
    if (buf.length < 9) //  Non-canonical signature: too short
    return false;
    if (buf.length > 73) // Non-canonical signature: too long
    return false;
    if (buf[0] !== 0x30) //  Non-canonical signature: wrong type
    return false;
    if (buf[1] !== buf.length - 3) //  Non-canonical signature: wrong length marker
    return false;
    var nLenR = buf[3];
    if (5 + nLenR >= buf.length) //  Non-canonical signature: S length misplaced
    return false;
    var nLenS = buf[5 + nLenR];
    if (nLenR + nLenS + 7 !== buf.length) //  Non-canonical signature: R+S length mismatch
    return false;
    var R = buf.slice(4);
    if (buf[2] !== 0x02) //  Non-canonical signature: R value type mismatch
    return false;
    if (nLenR === 0) //  Non-canonical signature: R length is zero
    return false;
    if (R[0] & 0x80) //  Non-canonical signature: R value negative
    return false;
    if (nLenR > 1 && R[0] === 0x00 && !(R[1] & 0x80)) //  Non-canonical signature: R value excessively padded
    return false;
    var S = buf.slice(6 + nLenR);
    if (buf[6 + nLenR - 2] !== 0x02) //  Non-canonical signature: S value type mismatch
    return false;
    if (nLenS === 0) //  Non-canonical signature: S length is zero
    return false;
    if (S[0] & 0x80) //  Non-canonical signature: S value negative
    return false;
    if (nLenS > 1 && S[0] === 0x00 && !(S[1] & 0x80)) //  Non-canonical signature: S value excessively padded
    return false;
    return true;
};
/**
 * Compares to bitcoind's IsLowDERSignature
 * See also ECDSA signature algorithm which enforces this.
 * See also BIP 62, "low S values in signatures"
 */ Signature.prototype.hasLowS = function() {
    if (this.s.lt(new BN(1)) || this.s.gt(new BN("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0", "hex"))) return false;
    return true;
};
/**
 * @returns true if the nhashtype is exactly equal to one of the standard options or combinations thereof.
 * Translated from bitcoind's IsDefinedHashtypeSignature
 */ Signature.prototype.hasDefinedHashtype = function() {
    if (!JSUtil.isNaturalNumber(this.nhashtype)) return false;
    // accept with or without Signature.SIGHASH_ANYONECANPAY by ignoring the bit
    var temp = this.nhashtype & 0x1F;
    if (temp < Signature.SIGHASH_ALL || temp > Signature.SIGHASH_SINGLE) return false;
    return true;
};
Signature.prototype.toTxFormat = function() {
    var derbuf = this.toDER();
    var buf = Buffer.alloc(1);
    buf.writeUInt8(this.nhashtype, 0);
    return Buffer.concat([
        derbuf,
        buf
    ]);
};
Signature.SIGHASH_ALL = 0x01;
Signature.SIGHASH_NONE = 0x02;
Signature.SIGHASH_SINGLE = 0x03;
Signature.SIGHASH_FORKID = 0x40;
Signature.SIGHASH_ANYONECANPAY = 0x80;
module.exports = Signature;

},{"buffer":"fCgem","./bn":"35huv","../util/_":"f1m1Z","../util/preconditions":"c91dJ","../util/js":"it7yM"}],"8BEKS":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var Script = require("./script");
var Opcode = require("../opcode");
var BN = require("../crypto/bn");
var Hash = require("../crypto/hash");
var Signature = require("../crypto/signature");
var PublicKey = require("../publickey");
var cloneDeep = require("clone-deep");
/**
 * Bitcoin transactions contain scripts. Each input has a script called the
 * scriptSig, and each output has a script called the scriptPubkey. To validate
 * an input, the input's script is concatenated with the referenced output script,
 * and the result is executed. If at the end of execution the stack contains a
 * "true" value, then the transaction is valid.
 *
 * The primary way to use this class is via the verify function.
 * e.g., Interpreter().verify( ... );
 */ var Interpreter = function Interpreter(obj) {
    if (!(this instanceof Interpreter)) return new Interpreter(obj);
    if (obj) {
        this.initialize();
        this.set(obj);
    } else this.initialize();
};
/**
 * Verifies a Script by executing it and returns true if it is valid.
 * This function needs to be provided with the scriptSig and the scriptPubkey
 * separately.
 * @param {Script} scriptSig - the script's first part (corresponding to the tx input)
 * @param {Script} scriptPubkey - the script's last part (corresponding to the tx output)
 * @param {Transaction=} tx - the Transaction containing the scriptSig in one input (used
 *    to check signature validity for some opcodes like OP_CHECKSIG)
 * @param {number} nin - index of the transaction input containing the scriptSig verified.
 * @param {number} flags - evaluation flags. See Interpreter.SCRIPT_* constants
 * @param {number} satoshisBN - amount in satoshis of the input to be verified (when FORKID signhash is used)
 *
 * Translated from bitcoind's VerifyScript
 */ Interpreter.prototype.verify = function(scriptSig, scriptPubkey, tx, nin, flags, satoshisBN) {
    var Transaction = require("../transaction");
    if (_.isUndefined(tx)) tx = new Transaction();
    if (_.isUndefined(nin)) nin = 0;
    if (_.isUndefined(flags)) flags = 0;
    // If FORKID is enabled, we also ensure strict encoding.
    if (flags & Interpreter.SCRIPT_ENABLE_SIGHASH_FORKID) {
        flags |= Interpreter.SCRIPT_VERIFY_STRICTENC;
        // If FORKID is enabled, we need the input amount.
        if (!satoshisBN) throw new Error("internal error - need satoshisBN to verify FORKID transactions");
    }
    this.set({
        script: scriptSig,
        tx: tx,
        nin: nin,
        flags: flags,
        satoshisBN: satoshisBN
    });
    var stackCopy;
    if ((flags & Interpreter.SCRIPT_VERIFY_SIGPUSHONLY) !== 0 && !scriptSig.isPushOnly()) {
        this.errstr = "SCRIPT_ERR_SIG_PUSHONLY";
        return false;
    }
    // evaluate scriptSig
    if (!this.evaluate()) return false;
    if (flags & Interpreter.SCRIPT_VERIFY_P2SH) stackCopy = this.stack.slice();
    var stack = this.stack;
    this.initialize();
    this.set({
        script: scriptPubkey,
        stack: stack,
        tx: tx,
        nin: nin,
        flags: flags,
        satoshisBN: satoshisBN
    });
    // evaluate scriptPubkey
    if (!this.evaluate()) return false;
    if (this.stack.length === 0) {
        this.errstr = "SCRIPT_ERR_EVAL_FALSE_NO_RESULT";
        return false;
    }
    var buf = this.stack[this.stack.length - 1];
    if (!Interpreter.castToBool(buf)) {
        this.errstr = "SCRIPT_ERR_EVAL_FALSE_IN_STACK";
        return false;
    }
    // Additional validation for spend-to-script-hash transactions:
    if (flags & Interpreter.SCRIPT_VERIFY_P2SH && scriptPubkey.isScriptHashOut()) {
        // scriptSig must be literals-only or validation fails
        if (!scriptSig.isPushOnly()) {
            this.errstr = "SCRIPT_ERR_SIG_PUSHONLY";
            return false;
        }
        // stackCopy cannot be empty here, because if it was the
        // P2SH  HASH <> EQUAL  scriptPubKey would be evaluated with
        // an empty stack and the EvalScript above would return false.
        if (stackCopy.length === 0) throw new Error("internal error - stack copy empty");
        var redeemScriptSerialized = stackCopy[stackCopy.length - 1];
        var redeemScript = Script.fromBuffer(redeemScriptSerialized);
        stackCopy.pop();
        this.initialize();
        this.set({
            script: redeemScript,
            stack: stackCopy,
            tx: tx,
            nin: nin,
            flags: flags,
            satoshisBN: satoshisBN
        });
        // evaluate redeemScript
        if (!this.evaluate()) return false;
        if (stackCopy.length === 0) {
            this.errstr = "SCRIPT_ERR_EVAL_FALSE_NO_P2SH_STACK";
            return false;
        }
        if (!Interpreter.castToBool(stackCopy[stackCopy.length - 1])) {
            this.errstr = "SCRIPT_ERR_EVAL_FALSE_IN_P2SH_STACK";
            return false;
        }
    }
    // The CLEANSTACK check is only performed after potential P2SH evaluation,
    // as the non-P2SH evaluation of a P2SH script will obviously not result in
    // a clean stack (the P2SH inputs remain). The same holds for witness
    // evaluation.
    if ((flags & Interpreter.SCRIPT_VERIFY_CLEANSTACK) !== 0) {
        // Disallow CLEANSTACK without P2SH, as otherwise a switch
        // CLEANSTACK->P2SH+CLEANSTACK would be possible, which is not a
        // softfork (and P2SH should be one).
        if ((flags & Interpreter.SCRIPT_VERIFY_P2SH) === 0) throw new Error("internal error - CLEANSTACK without P2SH");
        if (stackCopy.length !== 1) {
            this.errstr = "SCRIPT_ERR_CLEANSTACK";
            return false;
        }
    }
    return true;
};
module.exports = Interpreter;
Interpreter.prototype.initialize = function(obj) {
    this.stack = [];
    this.altstack = [];
    this.pc = 0;
    this.pbegincodehash = 0;
    this.nOpCount = 0;
    this.vfExec = [];
    this.errstr = "";
    this.flags = 0;
};
Interpreter.prototype.set = function(obj) {
    this.script = obj.script || this.script;
    this.tx = obj.tx || this.tx;
    this.nin = typeof obj.nin !== "undefined" ? obj.nin : this.nin;
    this.satoshisBN = obj.satoshisBN || this.satoshisBN;
    this.stack = obj.stack || this.stack;
    this.altstack = obj.altstack || this.altstack;
    this.pc = typeof obj.pc !== "undefined" ? obj.pc : this.pc;
    this.pbegincodehash = typeof obj.pbegincodehash !== "undefined" ? obj.pbegincodehash : this.pbegincodehash;
    this.nOpCount = typeof obj.nOpCount !== "undefined" ? obj.nOpCount : this.nOpCount;
    this.vfExec = obj.vfExec || this.vfExec;
    this.errstr = obj.errstr || this.errstr;
    this.flags = typeof obj.flags !== "undefined" ? obj.flags : this.flags;
};
Interpreter.true = Buffer.from([
    1
]);
Interpreter.false = Buffer.from([]);
Interpreter.MAX_SCRIPT_ELEMENT_SIZE = 520;
Interpreter.MAXIMUM_ELEMENT_SIZE = 4;
Interpreter.LOCKTIME_THRESHOLD = 500000000;
Interpreter.LOCKTIME_THRESHOLD_BN = new BN(Interpreter.LOCKTIME_THRESHOLD);
// flags taken from bitcoind
// bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104
Interpreter.SCRIPT_VERIFY_NONE = 0;
// Evaluate P2SH subscripts (softfork safe, BIP16).
Interpreter.SCRIPT_VERIFY_P2SH = 1;
// Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.
// Passing a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) to checksig causes that pubkey to be
// skipped (not softfork safe: this flag can widen the validity of OP_CHECKSIG OP_NOT).
Interpreter.SCRIPT_VERIFY_STRICTENC = 2;
// Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)
Interpreter.SCRIPT_VERIFY_DERSIG = 4;
// Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure
// (softfork safe, BIP62 rule 5).
Interpreter.SCRIPT_VERIFY_LOW_S = 8;
// verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).
Interpreter.SCRIPT_VERIFY_NULLDUMMY = 16;
// Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).
Interpreter.SCRIPT_VERIFY_SIGPUSHONLY = 32;
// Require minimal encodings for all push operations (OP_0... OP_16, OP_1NEGATE where possible, direct
// pushes up to 75 bytes, OP_PUSHDATA up to 255 bytes, OP_PUSHDATA2 for anything larger). Evaluating
// any other push causes the script to fail (BIP62 rule 3).
// In addition, whenever a stack element is interpreted as a number, it must be of minimal length (BIP62 rule 4).
// (softfork safe)
Interpreter.SCRIPT_VERIFY_MINIMALDATA = 64;
// Discourage use of NOPs reserved for upgrades (NOP1-10)
//
// Provided so that nodes can avoid accepting or mining transactions
// containing executed NOP's whose meaning may change after a soft-fork,
// thus rendering the script invalid; with this flag set executing
// discouraged NOPs fails the script. This verification flag will never be
// a mandatory flag applied to scripts in a block. NOPs that are not
// executed, e.g.  within an unexecuted IF ENDIF block, are *not* rejected.
Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = 128;
// Require that only a single stack element remains after evaluation. This
// changes the success criterion from "At least one stack element must
// remain, and when interpreted as a boolean, it must be true" to "Exactly
// one stack element must remain, and when interpreted as a boolean, it must
// be true".
// (softfork safe, BIP62 rule 6)
// Note: CLEANSTACK should never be used without P2SH or WITNESS.
Interpreter.SCRIPT_VERIFY_CLEANSTACK = 256;
// CLTV See BIP65 for details.
Interpreter.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = 512;
// support CHECKSEQUENCEVERIFY opcode
//
// See BIP112 for details
Interpreter.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = 1024;
// Segwit script only: Require the argument of OP_IF/NOTIF to be exactly
// 0x01 or empty vector
//
Interpreter.SCRIPT_VERIFY_MINIMALIF = 8192;
// Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed
//
Interpreter.SCRIPT_VERIFY_NULLFAIL = 16384;
// Public keys in scripts must be compressed
Interpreter.SCRIPT_VERIFY_COMPRESSED_PUBKEYTYPE = 32768;
// Do we accept signature using SIGHASH_FORKID
//
Interpreter.SCRIPT_ENABLE_SIGHASH_FORKID = 65536;
// Do we accept activate replay protection using a different fork id.
//
Interpreter.SCRIPT_ENABLE_REPLAY_PROTECTION = 131072;
// Enable new opcodes.
//
Interpreter.SCRIPT_ENABLE_MONOLITH_OPCODES = 262144;
// Are the Magnetic upgrade opcodes enabled?
//
Interpreter.SCRIPT_ENABLE_MAGNETIC_OPCODES = 524288;
/* Below flags apply in the context of BIP 68 */ /**
 * If this flag set, CTxIn::nSequence is NOT interpreted as a relative
 * lock-time.
 */ Interpreter.SEQUENCE_LOCKTIME_DISABLE_FLAG = -2147483648;
/**
 * If CTxIn::nSequence encodes a relative lock-time and this flag is set,
 * the relative lock-time has units of 512 seconds, otherwise it specifies
 * blocks with a granularity of 1.
 */ Interpreter.SEQUENCE_LOCKTIME_TYPE_FLAG = 4194304;
/**
 * If CTxIn::nSequence encodes a relative lock-time, this mask is applied to
 * extract that lock-time from the sequence field.
 */ Interpreter.SEQUENCE_LOCKTIME_MASK = 0x0000ffff;
Interpreter.castToBool = function(buf) {
    for(var i = 0; i < buf.length; i++)if (buf[i] !== 0) {
        // can be negative zero
        if (i === buf.length - 1 && buf[i] === 0x80) return false;
        return true;
    }
    return false;
};
/**
 * Translated from bitcoind's CheckSignatureEncoding
 */ Interpreter.prototype.checkSignatureEncoding = function(buf) {
    var sig;
    // Empty signature. Not strictly DER encoded, but allowed to provide a
    // compact way to provide an invalid signature for use with CHECK(MULTI)SIG
    if (buf.length === 0) return true;
    if ((this.flags & (Interpreter.SCRIPT_VERIFY_DERSIG | Interpreter.SCRIPT_VERIFY_LOW_S | Interpreter.SCRIPT_VERIFY_STRICTENC)) !== 0 && !Signature.isTxDER(buf)) {
        this.errstr = "SCRIPT_ERR_SIG_DER_INVALID_FORMAT";
        return false;
    } else if ((this.flags & Interpreter.SCRIPT_VERIFY_LOW_S) !== 0) {
        sig = Signature.fromTxFormat(buf);
        if (!sig.hasLowS()) {
            this.errstr = "SCRIPT_ERR_SIG_DER_HIGH_S";
            return false;
        }
    } else if ((this.flags & Interpreter.SCRIPT_VERIFY_STRICTENC) !== 0) {
        sig = Signature.fromTxFormat(buf);
        if (!sig.hasDefinedHashtype()) {
            this.errstr = "SCRIPT_ERR_SIG_HASHTYPE";
            return false;
        }
        if (!(this.flags & Interpreter.SCRIPT_ENABLE_SIGHASH_FORKID) && sig.nhashtype & Signature.SIGHASH_FORKID) {
            this.errstr = "SCRIPT_ERR_ILLEGAL_FORKID";
            return false;
        }
        if (this.flags & Interpreter.SCRIPT_ENABLE_SIGHASH_FORKID && !(sig.nhashtype & Signature.SIGHASH_FORKID)) {
            this.errstr = "SCRIPT_ERR_MUST_USE_FORKID";
            return false;
        }
    }
    return true;
};
/**
 * Translated from bitcoind's CheckPubKeyEncoding
 */ Interpreter.prototype.checkPubkeyEncoding = function(buf) {
    if ((this.flags & Interpreter.SCRIPT_VERIFY_STRICTENC) !== 0 && !PublicKey.isValid(buf)) {
        this.errstr = "SCRIPT_ERR_PUBKEYTYPE";
        return false;
    }
    return true;
};
/**
  *
  * Check the buffer is minimally encoded (see https://github.com/bitcoincashorg/spec/blob/master/may-2018-reenabled-opcodes.md#op_bin2num)
  *
  *
  */ Interpreter._isMinimallyEncoded = function(buf, nMaxNumSize) {
    nMaxNumSize = nMaxNumSize || Interpreter.MAXIMUM_ELEMENT_SIZE;
    if (buf.length > nMaxNumSize) return false;
    if (buf.length > 0) // Check that the number is encoded with the minimum possible number
    // of bytes.
    //
    // If the most-significant-byte - excluding the sign bit - is zero
    // then we're not minimal. Note how this test also rejects the
    // negative-zero encoding, 0x80.
    {
        if ((buf[buf.length - 1] & 0x7f) === 0) {
            // One exception: if there's more than one byte and the most
            // significant bit of the second-most-significant-byte is set it
            // would conflict with the sign bit. An example of this case is
            // +-255, which encode to 0xff00 and 0xff80 respectively.
            // (big-endian).
            if (buf.length <= 1 || (buf[buf.length - 2] & 0x80) === 0) return false;
        }
    }
    return true;
};
/**
  *
  * minimally encode the buffer content
  *
  * @param {number} nMaxNumSize (max allowed size)
  */ Interpreter._minimallyEncode = function(buf) {
    if (buf.length === 0) return buf;
    // If the last byte is not 0x00 or 0x80, we are minimally encoded.
    var last = buf[buf.length - 1];
    if (last & 0x7f) return buf;
    // If the script is one byte long, then we have a zero, which encodes as an
    // empty array.
    if (buf.length === 1) return Buffer.from("");
    // If the next byte has it sign bit set, then we are minimaly encoded.
    if (buf[buf.length - 2] & 0x80) return buf;
    // We are not minimally encoded, we need to figure out how much to trim.
    for(var i = buf.length - 1; i > 0; i--)// We found a non zero byte, time to encode.
    if (buf[i - 1] !== 0) {
        if (buf[i - 1] & 0x80) // We found a byte with it sign bit set so we need one more
        // byte.
        buf[i++] = last;
        else // the sign bit is clear, we can use it.
        buf[i - 1] |= last;
        return buf.slice(0, i);
    }
    // If we found the whole thing is zeros, then we have a zero.
    return Buffer.from("");
};
/**
 * Based on bitcoind's EvalScript function, with the inner loop moved to
 * Interpreter.prototype.step()
 * bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104
 */ Interpreter.prototype.evaluate = function() {
    // TODO: script size should be configurable. no magic numbers
    if (this.script.toBuffer().length > 10000) {
        this.errstr = "SCRIPT_ERR_SCRIPT_SIZE";
        return false;
    }
    try {
        while(this.pc < this.script.chunks.length){
            let thisStep = {
                pc: this.pc,
                opcode: Opcode.fromNumber(this.script.chunks[this.pc].opcodenum)
            };
            var fSuccess = this.step();
            if (!fSuccess) return false;
            this._callbackStep(thisStep);
        }
        // Size limits
        if (this.stack.length + this.altstack.length > 1000) {
            this.errstr = "SCRIPT_ERR_STACK_SIZE";
            return false;
        }
    } catch (e) {
        this.errstr = "SCRIPT_ERR_UNKNOWN_ERROR: " + e;
        return false;
    }
    if (this.vfExec.length > 0) {
        this.errstr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL";
        return false;
    }
    return true;
};
Interpreter.prototype._callbackStep = function(thisStep) {
    if (typeof this.stepListener === "function") try {
        this.stepListener(thisStep, cloneDeep(this.stack, true), cloneDeep(this.altstack, true));
    } catch (err) {
        console.log(`Error in Step callback:${err}`);
    }
};
/**
 * Checks a locktime parameter with the transaction's locktime.
 * There are two times of nLockTime: lock-by-blockheight and lock-by-blocktime,
 * distinguished by whether nLockTime < LOCKTIME_THRESHOLD = 500000000
 *
 * See the corresponding code on bitcoin core:
 * https://github.com/bitcoin/bitcoin/blob/ffd75adce01a78b3461b3ff05bcc2b530a9ce994/src/script/interpreter.cpp#L1129
 *
 * @param {BN} nLockTime the locktime read from the script
 * @return {boolean} true if the transaction's locktime is less than or equal to
 *                   the transaction's locktime
 */ Interpreter.prototype.checkLockTime = function(nLockTime) {
    // We want to compare apples to apples, so fail the script
    // unless the type of nLockTime being tested is the same as
    // the nLockTime in the transaction.
    if (!(this.tx.nLockTime < Interpreter.LOCKTIME_THRESHOLD && nLockTime.lt(Interpreter.LOCKTIME_THRESHOLD_BN) || this.tx.nLockTime >= Interpreter.LOCKTIME_THRESHOLD && nLockTime.gte(Interpreter.LOCKTIME_THRESHOLD_BN))) return false;
    // Now that we know we're comparing apples-to-apples, the
    // comparison is a simple numeric one.
    if (nLockTime.gt(new BN(this.tx.nLockTime))) return false;
    // Finally the nLockTime feature can be disabled and thus
    // CHECKLOCKTIMEVERIFY bypassed if every txin has been
    // finalized by setting nSequence to maxint. The
    // transaction would be allowed into the blockchain, making
    // the opcode ineffective.
    //
    // Testing if this vin is not final is sufficient to
    // prevent this condition. Alternatively we could test all
    // inputs, but testing just this input minimizes the data
    // required to prove correct CHECKLOCKTIMEVERIFY execution.
    if (this.tx.inputs[this.nin].isFinal()) return false;
    return true;
};
/**
 * Checks a sequence parameter with the transaction's sequence.
 * @param {BN} nSequence the sequence read from the script
 * @return {boolean} true if the transaction's sequence is less than or equal to
 *                   the transaction's sequence
 */ Interpreter.prototype.checkSequence = function(nSequence) {
    // Relative lock times are supported by comparing the passed in operand to
    // the sequence number of the input.
    var txToSequence = this.tx.inputs[this.nin].sequenceNumber;
    // Fail if the transaction's version number is not set high enough to
    // trigger BIP 68 rules.
    if (this.tx.version < 2) return false;
    // Sequence numbers with their most significant bit set are not consensus
    // constrained. Testing that the transaction's sequence number do not have
    // this bit set prevents using this property to get around a
    // CHECKSEQUENCEVERIFY check.
    if (txToSequence & Interpreter.SEQUENCE_LOCKTIME_DISABLE_FLAG) return false;
    // Mask off any bits that do not have consensus-enforced meaning before
    // doing the integer comparisons
    var nLockTimeMask = Interpreter.SEQUENCE_LOCKTIME_TYPE_FLAG | Interpreter.SEQUENCE_LOCKTIME_MASK;
    var txToSequenceMasked = new BN(txToSequence & nLockTimeMask);
    var nSequenceMasked = nSequence.and(nLockTimeMask);
    // There are two kinds of nSequence: lock-by-blockheight and
    // lock-by-blocktime, distinguished by whether nSequenceMasked <
    // CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG.
    //
    // We want to compare apples to apples, so fail the script unless the type
    // of nSequenceMasked being tested is the same as the nSequenceMasked in the
    // transaction.
    var SEQUENCE_LOCKTIME_TYPE_FLAG_BN = new BN(Interpreter.SEQUENCE_LOCKTIME_TYPE_FLAG);
    if (!(txToSequenceMasked.lt(SEQUENCE_LOCKTIME_TYPE_FLAG_BN) && nSequenceMasked.lt(SEQUENCE_LOCKTIME_TYPE_FLAG_BN) || txToSequenceMasked.gte(SEQUENCE_LOCKTIME_TYPE_FLAG_BN) && nSequenceMasked.gte(SEQUENCE_LOCKTIME_TYPE_FLAG_BN))) return false;
    // Now that we know we're comparing apples-to-apples, the comparison is a
    // simple numeric one.
    if (nSequenceMasked.gt(txToSequenceMasked)) return false;
    return true;
};
function padBufferToSize(buf, len) {
    let b = buf;
    while(b.length < len)b = Buffer.concat([
        Buffer.from([
            0x00
        ]),
        b
    ]);
    return b;
}
/**
 * Based on the inner loop of bitcoind's EvalScript function
 * bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104
 */ Interpreter.prototype.step = function() {
    var self = this;
    function stacktop(i) {
        return self.stack[self.stack.length + i];
    }
    function isOpcodeDisabled(opcode) {
        switch(opcode){
            case Opcode.OP_2MUL:
            case Opcode.OP_2DIV:
                // Disabled opcodes.
                return true;
            case Opcode.OP_INVERT:
            case Opcode.OP_MUL:
            case Opcode.OP_LSHIFT:
            case Opcode.OP_RSHIFT:
                // Opcodes that have been reenabled.
                if ((self.flags & Interpreter.SCRIPT_ENABLE_MAGNETIC_OPCODES) === 0) return true;
                break;
            case Opcode.OP_DIV:
            case Opcode.OP_MOD:
            case Opcode.OP_SPLIT:
            case Opcode.OP_CAT:
            case Opcode.OP_AND:
            case Opcode.OP_OR:
            case Opcode.OP_XOR:
            case Opcode.OP_BIN2NUM:
            case Opcode.OP_NUM2BIN:
                // Opcodes that have been reenabled.
                if ((self.flags & Interpreter.SCRIPT_ENABLE_MONOLITH_OPCODES) === 0) return true;
                break;
            default:
                break;
        }
        return false;
    }
    var fRequireMinimal = (this.flags & Interpreter.SCRIPT_VERIFY_MINIMALDATA) !== 0;
    // bool fExec = !count(vfExec.begin(), vfExec.end(), false);
    var fExec = this.vfExec.indexOf(false) === -1;
    var buf, buf1, buf2, spliced, n, x1, x2, bn, bn1, bn2, bufSig, bufPubkey, subscript;
    var sig, pubkey;
    var fValue, fSuccess;
    // Read instruction
    var chunk = this.script.chunks[this.pc];
    this.pc++;
    var opcodenum = chunk.opcodenum;
    if (_.isUndefined(opcodenum)) {
        this.errstr = "SCRIPT_ERR_UNDEFINED_OPCODE";
        return false;
    }
    if (chunk.buf && chunk.buf.length > Interpreter.MAX_SCRIPT_ELEMENT_SIZE) {
        this.errstr = "SCRIPT_ERR_PUSH_SIZE";
        return false;
    }
    // Note how Opcode.OP_RESERVED does not count towards the opcode limit.
    if (opcodenum > Opcode.OP_16 && ++this.nOpCount > 201) {
        this.errstr = "SCRIPT_ERR_OP_COUNT";
        return false;
    }
    if (isOpcodeDisabled(opcodenum)) {
        this.errstr = "SCRIPT_ERR_DISABLED_OPCODE";
        return false;
    }
    if (fExec && opcodenum >= 0 && opcodenum <= Opcode.OP_PUSHDATA4) {
        if (fRequireMinimal && !this.script.checkMinimalPush(this.pc - 1)) {
            this.errstr = "SCRIPT_ERR_MINIMALDATA";
            return false;
        }
        if (!chunk.buf) this.stack.push(Interpreter.false);
        else if (chunk.len !== chunk.buf.length) throw new Error(`Length of push value not equal to length of data (${chunk.len},${chunk.buf.length})`);
        else this.stack.push(chunk.buf);
    } else if (fExec || Opcode.OP_IF <= opcodenum && opcodenum <= Opcode.OP_ENDIF) switch(opcodenum){
        // Push value
        case Opcode.OP_1NEGATE:
        case Opcode.OP_1:
        case Opcode.OP_2:
        case Opcode.OP_3:
        case Opcode.OP_4:
        case Opcode.OP_5:
        case Opcode.OP_6:
        case Opcode.OP_7:
        case Opcode.OP_8:
        case Opcode.OP_9:
        case Opcode.OP_10:
        case Opcode.OP_11:
        case Opcode.OP_12:
        case Opcode.OP_13:
        case Opcode.OP_14:
        case Opcode.OP_15:
        case Opcode.OP_16:
            // ( -- value)
            // ScriptNum bn((int)opcode - (int)(Opcode.OP_1 - 1));
            n = opcodenum - (Opcode.OP_1 - 1);
            buf = new BN(n).toScriptNumBuffer();
            this.stack.push(buf);
            break;
        //
        // Control
        //
        case Opcode.OP_NOP:
            break;
        case Opcode.OP_NOP2:
        case Opcode.OP_CHECKLOCKTIMEVERIFY:
            if (!(this.flags & Interpreter.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {
                // not enabled; treat as a NOP2
                if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {
                    this.errstr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS";
                    return false;
                }
                break;
            }
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            // Note that elsewhere numeric opcodes are limited to
            // operands in the range -2**31+1 to 2**31-1, however it is
            // legal for opcodes to produce results exceeding that
            // range. This limitation is implemented by CScriptNum's
            // default 4-byte limit.
            //
            // If we kept to that limit we'd have a year 2038 problem,
            // even though the nLockTime field in transactions
            // themselves is uint32 which only becomes meaningless
            // after the year 2106.
            //
            // Thus as a special case we tell CScriptNum to accept up
            // to 5-byte bignums, which are good until 2**39-1, well
            // beyond the 2**32-1 limit of the nLockTime field itself.
            var nLockTime = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal, 5);
            // In the rare event that the argument may be < 0 due to
            // some arithmetic being done first, you can always use
            // 0 MAX CHECKLOCKTIMEVERIFY.
            if (nLockTime.lt(new BN(0))) {
                this.errstr = "SCRIPT_ERR_NEGATIVE_LOCKTIME";
                return false;
            }
            // Actually compare the specified lock time with the transaction.
            if (!this.checkLockTime(nLockTime)) {
                this.errstr = "SCRIPT_ERR_UNSATISFIED_LOCKTIME";
                return false;
            }
            break;
        case Opcode.OP_NOP3:
        case Opcode.OP_CHECKSEQUENCEVERIFY:
            if (!(this.flags & Interpreter.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {
                // not enabled; treat as a NOP3
                if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {
                    this.errstr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS";
                    return false;
                }
                break;
            }
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            // nSequence, like nLockTime, is a 32-bit unsigned
            // integer field. See the comment in CHECKLOCKTIMEVERIFY
            // regarding 5-byte numeric operands.
            var nSequence = BN.fromScriptNumBuffer(stacktop(-1), fRequireMinimal, 5);
            // In the rare event that the argument may be < 0 due to
            // some arithmetic being done first, you can always use
            // 0 MAX CHECKSEQUENCEVERIFY.
            if (nSequence.lt(new BN(0))) {
                this.errstr = "SCRIPT_ERR_NEGATIVE_LOCKTIME";
                return false;
            }
            // To provide for future soft-fork extensibility, if the
            // operand has the disabled lock-time flag set,
            // CHECKSEQUENCEVERIFY behaves as a NOP.
            if ((nSequence & Interpreter.SEQUENCE_LOCKTIME_DISABLE_FLAG) !== 0) break;
            // Actually compare the specified lock time with the transaction.
            if (!this.checkSequence(nSequence)) {
                this.errstr = "SCRIPT_ERR_UNSATISFIED_LOCKTIME";
                return false;
            }
            break;
        case Opcode.OP_NOP1:
        case Opcode.OP_NOP4:
        case Opcode.OP_NOP5:
        case Opcode.OP_NOP6:
        case Opcode.OP_NOP7:
        case Opcode.OP_NOP8:
        case Opcode.OP_NOP9:
        case Opcode.OP_NOP10:
            if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {
                this.errstr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS";
                return false;
            }
            break;
        case Opcode.OP_IF:
        case Opcode.OP_NOTIF:
            // <expression> if [statements] [else [statements]] endif
            // bool fValue = false;
            fValue = false;
            if (fExec) {
                if (this.stack.length < 1) {
                    this.errstr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL";
                    return false;
                }
                buf = stacktop(-1);
                if (this.flags & Interpreter.SCRIPT_VERIFY_MINIMALIF) {
                    if (buf.length > 1) {
                        this.errstr = "SCRIPT_ERR_MINIMALIF";
                        return false;
                    }
                    if (buf.length === 1 && buf[0] !== 1) {
                        this.errstr = "SCRIPT_ERR_MINIMALIF";
                        return false;
                    }
                }
                fValue = Interpreter.castToBool(buf);
                if (opcodenum === Opcode.OP_NOTIF) fValue = !fValue;
                this.stack.pop();
            }
            this.vfExec.push(fValue);
            break;
        case Opcode.OP_ELSE:
            if (this.vfExec.length === 0) {
                this.errstr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL";
                return false;
            }
            this.vfExec[this.vfExec.length - 1] = !this.vfExec[this.vfExec.length - 1];
            break;
        case Opcode.OP_ENDIF:
            if (this.vfExec.length === 0) {
                this.errstr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL";
                return false;
            }
            this.vfExec.pop();
            break;
        case Opcode.OP_VERIFY:
            // (true -- ) or
            // (false -- false) and return
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf = stacktop(-1);
            fValue = Interpreter.castToBool(buf);
            if (fValue) this.stack.pop();
            else {
                this.errstr = "SCRIPT_ERR_VERIFY";
                return false;
            }
            break;
        case Opcode.OP_RETURN:
            this.errstr = "SCRIPT_ERR_OP_RETURN";
            return false;
        // break // unreachable
        //
        // Stack ops
        //
        case Opcode.OP_TOALTSTACK:
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            this.altstack.push(this.stack.pop());
            break;
        case Opcode.OP_FROMALTSTACK:
            if (this.altstack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_ALTSTACK_OPERATION";
                return false;
            }
            this.stack.push(this.altstack.pop());
            break;
        case Opcode.OP_2DROP:
            // (x1 x2 -- )
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            this.stack.pop();
            this.stack.pop();
            break;
        case Opcode.OP_2DUP:
            // (x1 x2 -- x1 x2 x1 x2)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf1 = stacktop(-2);
            buf2 = stacktop(-1);
            this.stack.push(Buffer.from(buf1));
            this.stack.push(Buffer.from(buf2));
            break;
        case Opcode.OP_3DUP:
            // (x1 x2 x3 -- x1 x2 x3 x1 x2 x3)
            if (this.stack.length < 3) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf1 = stacktop(-3);
            buf2 = stacktop(-2);
            var buf3 = stacktop(-1);
            this.stack.push(Buffer.from(buf1));
            this.stack.push(Buffer.from(buf2));
            this.stack.push(Buffer.from(buf3));
            break;
        case Opcode.OP_2OVER:
            // (x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2)
            if (this.stack.length < 4) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf1 = stacktop(-4);
            buf2 = stacktop(-3);
            this.stack.push(Buffer.from(buf1));
            this.stack.push(Buffer.from(buf2));
            break;
        case Opcode.OP_2ROT:
            // (x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2)
            if (this.stack.length < 6) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            spliced = this.stack.splice(this.stack.length - 6, 2);
            this.stack.push(spliced[0]);
            this.stack.push(spliced[1]);
            break;
        case Opcode.OP_2SWAP:
            // (x1 x2 x3 x4 -- x3 x4 x1 x2)
            if (this.stack.length < 4) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            spliced = this.stack.splice(this.stack.length - 4, 2);
            this.stack.push(spliced[0]);
            this.stack.push(spliced[1]);
            break;
        case Opcode.OP_IFDUP:
            // (x - 0 | x x)
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf = stacktop(-1);
            fValue = Interpreter.castToBool(buf);
            if (fValue) this.stack.push(Buffer.from(buf));
            break;
        case Opcode.OP_DEPTH:
            // -- stacksize
            buf = new BN(this.stack.length).toScriptNumBuffer();
            this.stack.push(buf);
            break;
        case Opcode.OP_DROP:
            // (x -- )
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            this.stack.pop();
            break;
        case Opcode.OP_DUP:
            // (x -- x x)
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            this.stack.push(Buffer.from(stacktop(-1)));
            break;
        case Opcode.OP_NIP:
            // (x1 x2 -- x2)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            this.stack.splice(this.stack.length - 2, 1);
            break;
        case Opcode.OP_OVER:
            // (x1 x2 -- x1 x2 x1)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            this.stack.push(Buffer.from(stacktop(-2)));
            break;
        case Opcode.OP_PICK:
        case Opcode.OP_ROLL:
            // (xn ... x2 x1 x0 n - xn ... x2 x1 x0 xn)
            // (xn ... x2 x1 x0 n - ... x2 x1 x0 xn)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf = stacktop(-1);
            bn = BN.fromScriptNumBuffer(buf, fRequireMinimal);
            n = bn.toNumber();
            this.stack.pop();
            if (n < 0 || n >= this.stack.length) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf = stacktop(-n - 1);
            if (opcodenum === Opcode.OP_ROLL) this.stack.splice(this.stack.length - n - 1, 1);
            this.stack.push(Buffer.from(buf));
            break;
        case Opcode.OP_ROT:
            // (x1 x2 x3 -- x2 x3 x1)
            //  x2 x1 x3  after first swap
            //  x2 x3 x1  after second swap
            if (this.stack.length < 3) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            x1 = stacktop(-3);
            x2 = stacktop(-2);
            var x3 = stacktop(-1);
            this.stack[this.stack.length - 3] = x2;
            this.stack[this.stack.length - 2] = x3;
            this.stack[this.stack.length - 1] = x1;
            break;
        case Opcode.OP_SWAP:
            // (x1 x2 -- x2 x1)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            x1 = stacktop(-2);
            x2 = stacktop(-1);
            this.stack[this.stack.length - 2] = x2;
            this.stack[this.stack.length - 1] = x1;
            break;
        case Opcode.OP_TUCK:
            // (x1 x2 -- x2 x1 x2)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            this.stack.splice(this.stack.length - 2, 0, Buffer.from(stacktop(-1)));
            break;
        case Opcode.OP_SIZE:
            // (in -- in size)
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            bn = new BN(stacktop(-1).length);
            this.stack.push(bn.toScriptNumBuffer());
            break;
        //
        // Bitwise logic
        //
        case Opcode.OP_AND:
        case Opcode.OP_OR:
        case Opcode.OP_XOR:
            // (x1 x2 - out)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf1 = stacktop(-2);
            buf2 = stacktop(-1);
            // Inputs must be the same size
            if (buf1.length !== buf2.length) {
                this.errstr = "SCRIPT_ERR_INVALID_OPERAND_SIZE";
                return false;
            }
            // To avoid allocating, we modify vch1 in place.
            switch(opcodenum){
                case Opcode.OP_AND:
                    for(let i = 0; i < buf1.length; i++)buf1[i] &= buf2[i];
                    break;
                case Opcode.OP_OR:
                    for(let i1 = 0; i1 < buf1.length; i1++)buf1[i1] |= buf2[i1];
                    break;
                case Opcode.OP_XOR:
                    for(let i2 = 0; i2 < buf1.length; i2++)buf1[i2] ^= buf2[i2];
                    break;
                default:
                    break;
            }
            // And pop vch2.
            this.stack.pop();
            break;
        case Opcode.OP_INVERT:
            // (x -- out)
            if (this.stack.length < 1) this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
            buf = stacktop(-1);
            for(let i3 = 0; i3 < buf.length; i3++)buf[i3] = ~buf[i3];
            break;
        case Opcode.OP_LSHIFT:
        case Opcode.OP_RSHIFT:
            // (x n -- out)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf1 = stacktop(-2);
            if (buf1.length === 0) this.stack.pop();
            else {
                bn1 = new BN(buf1);
                bn2 = BN.fromScriptNumBuffer(stacktop(-1), fRequireMinimal);
                n = bn2.toNumber();
                if (n < 0) {
                    this.errstr = "SCRIPT_ERR_INVALID_NUMBER_RANGE";
                    return false;
                }
                this.stack.pop();
                this.stack.pop();
                let shifted;
                if (opcodenum === Opcode.OP_LSHIFT) shifted = bn1.ushln(n);
                if (opcodenum === Opcode.OP_RSHIFT) shifted = bn1.ushrn(n);
                // bitcoin client implementation of l/rshift is unconventional, therefore this implementation is a bit unconventional
                // bn library has shift functions however it expands the carried bits into a new byte
                // in contrast to the bitcoin client implementation which drops off the carried bits
                // in other words, if operand was 1 byte then we put 1 byte back on the stack instead of expanding to more shifted bytes
                let bufShifted = padBufferToSize(Buffer.from(shifted.toArray().slice(buf1.length * -1)), buf1.length);
                this.stack.push(bufShifted);
            }
            break;
        case Opcode.OP_EQUAL:
        case Opcode.OP_EQUALVERIFY:
            // case Opcode.OP_NOTEQUAL: // use Opcode.OP_NUMNOTEQUAL
            // (x1 x2 - bool)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf1 = stacktop(-2);
            buf2 = stacktop(-1);
            var fEqual = buf1.toString("hex") === buf2.toString("hex");
            this.stack.pop();
            this.stack.pop();
            this.stack.push(fEqual ? Interpreter.true : Interpreter.false);
            if (opcodenum === Opcode.OP_EQUALVERIFY) {
                if (fEqual) this.stack.pop();
                else {
                    this.errstr = "SCRIPT_ERR_EQUALVERIFY";
                    return false;
                }
            }
            break;
        //
        // Numeric
        //
        case Opcode.OP_1ADD:
        case Opcode.OP_1SUB:
        case Opcode.OP_NEGATE:
        case Opcode.OP_ABS:
        case Opcode.OP_NOT:
        case Opcode.OP_0NOTEQUAL:
            // (in -- out)
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf = stacktop(-1);
            bn = BN.fromScriptNumBuffer(buf, fRequireMinimal);
            switch(opcodenum){
                case Opcode.OP_1ADD:
                    bn = bn.add(BN.One);
                    break;
                case Opcode.OP_1SUB:
                    bn = bn.sub(BN.One);
                    break;
                case Opcode.OP_NEGATE:
                    bn = bn.neg();
                    break;
                case Opcode.OP_ABS:
                    if (bn.cmp(BN.Zero) < 0) bn = bn.neg();
                    break;
                case Opcode.OP_NOT:
                    bn = new BN((bn.cmp(BN.Zero) === 0) + 0);
                    break;
                case Opcode.OP_0NOTEQUAL:
                    bn = new BN((bn.cmp(BN.Zero) !== 0) + 0);
                    break;
            }
            this.stack.pop();
            this.stack.push(bn.toScriptNumBuffer());
            break;
        case Opcode.OP_ADD:
        case Opcode.OP_SUB:
        case Opcode.OP_MUL:
        case Opcode.OP_MOD:
        case Opcode.OP_DIV:
        case Opcode.OP_BOOLAND:
        case Opcode.OP_BOOLOR:
        case Opcode.OP_NUMEQUAL:
        case Opcode.OP_NUMEQUALVERIFY:
        case Opcode.OP_NUMNOTEQUAL:
        case Opcode.OP_LESSTHAN:
        case Opcode.OP_GREATERTHAN:
        case Opcode.OP_LESSTHANOREQUAL:
        case Opcode.OP_GREATERTHANOREQUAL:
        case Opcode.OP_MIN:
        case Opcode.OP_MAX:
            // (x1 x2 -- out)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            bn1 = BN.fromScriptNumBuffer(stacktop(-2), fRequireMinimal);
            bn2 = BN.fromScriptNumBuffer(stacktop(-1), fRequireMinimal);
            bn = new BN(0);
            switch(opcodenum){
                case Opcode.OP_ADD:
                    bn = bn1.add(bn2);
                    break;
                case Opcode.OP_SUB:
                    bn = bn1.sub(bn2);
                    break;
                case Opcode.OP_MUL:
                    bn = bn1.mul(bn2);
                    break;
                case Opcode.OP_DIV:
                    // denominator must not be 0
                    if (bn2 === 0) {
                        this.errstr = "SCRIPT_ERR_DIV_BY_ZERO";
                        return false;
                    }
                    bn = bn1.div(bn2);
                    break;
                case Opcode.OP_MOD:
                    // divisor must not be 0
                    if (bn2 === 0) {
                        this.errstr = "SCRIPT_ERR_DIV_BY_ZERO";
                        return false;
                    }
                    bn = bn1.mod(bn2);
                    break;
                case Opcode.OP_BOOLAND:
                    bn = new BN((bn1.cmp(BN.Zero) !== 0 && bn2.cmp(BN.Zero) !== 0) + 0);
                    break;
                // case Opcode.OP_BOOLOR:        bn = (bn1 !== bnZero || bn2 !== bnZero); break;
                case Opcode.OP_BOOLOR:
                    bn = new BN((bn1.cmp(BN.Zero) !== 0 || bn2.cmp(BN.Zero) !== 0) + 0);
                    break;
                // case Opcode.OP_NUMEQUAL:      bn = (bn1 === bn2); break;
                case Opcode.OP_NUMEQUAL:
                    bn = new BN((bn1.cmp(bn2) === 0) + 0);
                    break;
                // case Opcode.OP_NUMEQUALVERIFY:    bn = (bn1 === bn2); break;
                case Opcode.OP_NUMEQUALVERIFY:
                    bn = new BN((bn1.cmp(bn2) === 0) + 0);
                    break;
                // case Opcode.OP_NUMNOTEQUAL:     bn = (bn1 !== bn2); break;
                case Opcode.OP_NUMNOTEQUAL:
                    bn = new BN((bn1.cmp(bn2) !== 0) + 0);
                    break;
                // case Opcode.OP_LESSTHAN:      bn = (bn1 < bn2); break;
                case Opcode.OP_LESSTHAN:
                    bn = new BN((bn1.cmp(bn2) < 0) + 0);
                    break;
                // case Opcode.OP_GREATERTHAN:     bn = (bn1 > bn2); break;
                case Opcode.OP_GREATERTHAN:
                    bn = new BN((bn1.cmp(bn2) > 0) + 0);
                    break;
                // case Opcode.OP_LESSTHANOREQUAL:   bn = (bn1 <= bn2); break;
                case Opcode.OP_LESSTHANOREQUAL:
                    bn = new BN((bn1.cmp(bn2) <= 0) + 0);
                    break;
                // case Opcode.OP_GREATERTHANOREQUAL:  bn = (bn1 >= bn2); break;
                case Opcode.OP_GREATERTHANOREQUAL:
                    bn = new BN((bn1.cmp(bn2) >= 0) + 0);
                    break;
                case Opcode.OP_MIN:
                    bn = bn1.cmp(bn2) < 0 ? bn1 : bn2;
                    break;
                case Opcode.OP_MAX:
                    bn = bn1.cmp(bn2) > 0 ? bn1 : bn2;
                    break;
            }
            this.stack.pop();
            this.stack.pop();
            this.stack.push(bn.toScriptNumBuffer());
            if (opcodenum === Opcode.OP_NUMEQUALVERIFY) {
                // if (CastToBool(stacktop(-1)))
                if (Interpreter.castToBool(stacktop(-1))) this.stack.pop();
                else {
                    this.errstr = "SCRIPT_ERR_NUMEQUALVERIFY";
                    return false;
                }
            }
            break;
        case Opcode.OP_WITHIN:
            // (x min max -- out)
            if (this.stack.length < 3) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            bn1 = BN.fromScriptNumBuffer(stacktop(-3), fRequireMinimal);
            bn2 = BN.fromScriptNumBuffer(stacktop(-2), fRequireMinimal);
            var bn3 = BN.fromScriptNumBuffer(stacktop(-1), fRequireMinimal);
            // bool fValue = (bn2 <= bn1 && bn1 < bn3);
            fValue = bn2.cmp(bn1) <= 0 && bn1.cmp(bn3) < 0;
            this.stack.pop();
            this.stack.pop();
            this.stack.pop();
            this.stack.push(fValue ? Interpreter.true : Interpreter.false);
            break;
        //
        // Crypto
        //
        case Opcode.OP_RIPEMD160:
        case Opcode.OP_SHA1:
        case Opcode.OP_SHA256:
        case Opcode.OP_HASH160:
        case Opcode.OP_HASH256:
            // (in -- hash)
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf = stacktop(-1);
            // valtype vchHash((opcode === Opcode.OP_RIPEMD160 ||
            //                 opcode === Opcode.OP_SHA1 || opcode === Opcode.OP_HASH160) ? 20 : 32);
            var bufHash;
            if (opcodenum === Opcode.OP_RIPEMD160) bufHash = Hash.ripemd160(buf);
            else if (opcodenum === Opcode.OP_SHA1) bufHash = Hash.sha1(buf);
            else if (opcodenum === Opcode.OP_SHA256) bufHash = Hash.sha256(buf);
            else if (opcodenum === Opcode.OP_HASH160) bufHash = Hash.sha256ripemd160(buf);
            else if (opcodenum === Opcode.OP_HASH256) bufHash = Hash.sha256sha256(buf);
            this.stack.pop();
            this.stack.push(bufHash);
            break;
        case Opcode.OP_CODESEPARATOR:
            // Hash starts after the code separator
            this.pbegincodehash = this.pc;
            break;
        case Opcode.OP_CHECKSIG:
        case Opcode.OP_CHECKSIGVERIFY:
            // (sig pubkey -- bool)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            bufSig = stacktop(-2);
            bufPubkey = stacktop(-1);
            if (!this.checkSignatureEncoding(bufSig) || !this.checkPubkeyEncoding(bufPubkey)) return false;
            // Subset of script starting at the most recent codeseparator
            // CScript scriptCode(pbegincodehash, pend);
            subscript = new Script().set({
                chunks: this.script.chunks.slice(this.pbegincodehash)
            });
            // Drop the signature, since there's no way for a signature to sign itself
            var tmpScript = new Script().add(bufSig);
            subscript.findAndDelete(tmpScript);
            try {
                sig = Signature.fromTxFormat(bufSig);
                pubkey = PublicKey.fromBuffer(bufPubkey, false);
                fSuccess = this.tx.verifySignature(sig, pubkey, this.nin, subscript, this.satoshisBN, this.flags);
            } catch (e) {
                // invalid sig or pubkey
                fSuccess = false;
            }
            if (!fSuccess && this.flags & Interpreter.SCRIPT_VERIFY_NULLFAIL && bufSig.length) {
                this.errstr = "SCRIPT_ERR_NULLFAIL";
                return false;
            }
            this.stack.pop();
            this.stack.pop();
            // stack.push_back(fSuccess ? vchTrue : vchFalse);
            this.stack.push(fSuccess ? Interpreter.true : Interpreter.false);
            if (opcodenum === Opcode.OP_CHECKSIGVERIFY) {
                if (fSuccess) this.stack.pop();
                else {
                    this.errstr = "SCRIPT_ERR_CHECKSIGVERIFY";
                    return false;
                }
            }
            break;
        case Opcode.OP_CHECKMULTISIG:
        case Opcode.OP_CHECKMULTISIGVERIFY:
            // ([sig ...] num_of_signatures [pubkey ...] num_of_pubkeys -- bool)
            var i4 = 1;
            if (this.stack.length < i4) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            var nKeysCount = BN.fromScriptNumBuffer(stacktop(-i4), fRequireMinimal).toNumber();
            // TODO: Keys and opcount are parameterized in client. No magic numbers!
            if (nKeysCount < 0 || nKeysCount > 20) {
                this.errstr = "SCRIPT_ERR_PUBKEY_COUNT";
                return false;
            }
            this.nOpCount += nKeysCount;
            if (this.nOpCount > 201) {
                this.errstr = "SCRIPT_ERR_OP_COUNT";
                return false;
            }
            // int ikey = ++i;
            var ikey = ++i4;
            i4 += nKeysCount;
            // ikey2 is the position of last non-signature item in
            // the stack. Top stack item = 1. With
            // SCRIPT_VERIFY_NULLFAIL, this is used for cleanup if
            // operation fails.
            var ikey2 = nKeysCount + 2;
            if (this.stack.length < i4) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            var nSigsCount = BN.fromScriptNumBuffer(stacktop(-i4), fRequireMinimal).toNumber();
            if (nSigsCount < 0 || nSigsCount > nKeysCount) {
                this.errstr = "SCRIPT_ERR_SIG_COUNT";
                return false;
            }
            // int isig = ++i;
            var isig = ++i4;
            i4 += nSigsCount;
            if (this.stack.length < i4) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            // Subset of script starting at the most recent codeseparator
            subscript = new Script().set({
                chunks: this.script.chunks.slice(this.pbegincodehash)
            });
            // Drop the signatures, since there's no way for a signature to sign itself
            for(var k = 0; k < nSigsCount; k++){
                bufSig = stacktop(-isig - k);
                subscript.findAndDelete(new Script().add(bufSig));
            }
            fSuccess = true;
            while(fSuccess && nSigsCount > 0){
                // valtype& vchSig  = stacktop(-isig);
                bufSig = stacktop(-isig);
                // valtype& vchPubKey = stacktop(-ikey);
                bufPubkey = stacktop(-ikey);
                if (!this.checkSignatureEncoding(bufSig) || !this.checkPubkeyEncoding(bufPubkey)) return false;
                var fOk;
                try {
                    sig = Signature.fromTxFormat(bufSig);
                    pubkey = PublicKey.fromBuffer(bufPubkey, false);
                    fOk = this.tx.verifySignature(sig, pubkey, this.nin, subscript, this.satoshisBN, this.flags);
                } catch (e1) {
                    // invalid sig or pubkey
                    fOk = false;
                }
                if (fOk) {
                    isig++;
                    nSigsCount--;
                }
                ikey++;
                nKeysCount--;
                // If there are more signatures left than keys left,
                // then too many signatures have failed
                if (nSigsCount > nKeysCount) fSuccess = false;
            }
            // Clean up stack of actual arguments
            while(i4-- > 1){
                if (!fSuccess && this.flags & Interpreter.SCRIPT_VERIFY_NULLFAIL && !ikey2 && stacktop(-1).length) {
                    this.errstr = "SCRIPT_ERR_NULLFAIL";
                    return false;
                }
                if (ikey2 > 0) ikey2--;
                this.stack.pop();
            }
            // A bug causes CHECKMULTISIG to consume one extra argument
            // whose contents were not checked in any way.
            //
            // Unfortunately this is a potential source of mutability,
            // so optionally verify it is exactly equal to zero prior
            // to removing it from the stack.
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            if (this.flags & Interpreter.SCRIPT_VERIFY_NULLDUMMY && stacktop(-1).length) {
                this.errstr = "SCRIPT_ERR_SIG_NULLDUMMY";
                return false;
            }
            this.stack.pop();
            this.stack.push(fSuccess ? Interpreter.true : Interpreter.false);
            if (opcodenum === Opcode.OP_CHECKMULTISIGVERIFY) {
                if (fSuccess) this.stack.pop();
                else {
                    this.errstr = "SCRIPT_ERR_CHECKMULTISIGVERIFY";
                    return false;
                }
            }
            break;
        //
        // Byte string operations
        //
        case Opcode.OP_CAT:
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf1 = stacktop(-2);
            buf2 = stacktop(-1);
            if (buf1.length + buf2.length > Interpreter.MAX_SCRIPT_ELEMENT_SIZE) {
                this.errstr = "SCRIPT_ERR_PUSH_SIZE";
                return false;
            }
            this.stack[this.stack.length - 2] = Buffer.concat([
                buf1,
                buf2
            ]);
            this.stack.pop();
            break;
        case Opcode.OP_SPLIT:
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf1 = stacktop(-2);
            // Make sure the split point is apropriate.
            var position = BN.fromScriptNumBuffer(stacktop(-1), fRequireMinimal).toNumber();
            if (position < 0 || position > buf1.length) {
                this.errstr = "SCRIPT_ERR_INVALID_SPLIT_RANGE";
                return false;
            }
            // Prepare the results in their own buffer as `data`
            // will be invalidated.
            // Copy buffer data, to slice it before
            var n1 = Buffer.from(buf1);
            // Replace existing stack values by the new values.
            this.stack[this.stack.length - 2] = n1.slice(0, position);
            this.stack[this.stack.length - 1] = n1.slice(position);
            break;
        //
        // Conversion operations
        //
        case Opcode.OP_NUM2BIN:
            // (in -- out)
            if (this.stack.length < 2) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            var size = BN.fromScriptNumBuffer(stacktop(-1), fRequireMinimal).toNumber();
            if (size > Interpreter.MAX_SCRIPT_ELEMENT_SIZE) {
                this.errstr = "SCRIPT_ERR_PUSH_SIZE";
                return false;
            }
            this.stack.pop();
            var rawnum = stacktop(-1);
            // Try to see if we can fit that number in the number of
            // byte requested.
            rawnum = Interpreter._minimallyEncode(rawnum);
            if (rawnum.length > size) {
                // We definitively cannot.
                this.errstr = "SCRIPT_ERR_IMPOSSIBLE_ENCODING";
                return false;
            }
            // We already have an element of the right size, we
            // don't need to do anything.
            if (rawnum.length === size) {
                this.stack[this.stack.length - 1] = rawnum;
                break;
            }
            var signbit = 0x00;
            if (rawnum.length > 0) {
                signbit = rawnum[rawnum.length - 1] & 0x80;
                rawnum[rawnum.length - 1] &= 0x7f;
            }
            var num = Buffer.alloc(size);
            rawnum.copy(num, 0);
            var l = rawnum.length - 1;
            while((l++) < size - 2)num[l] = 0x00;
            num[l] = signbit;
            this.stack[this.stack.length - 1] = num;
            break;
        case Opcode.OP_BIN2NUM:
            // (in -- out)
            if (this.stack.length < 1) {
                this.errstr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                return false;
            }
            buf1 = stacktop(-1);
            buf2 = Interpreter._minimallyEncode(buf1);
            this.stack[this.stack.length - 1] = buf2;
            // The resulting number must be a valid number.
            if (!Interpreter._isMinimallyEncoded(buf2)) {
                this.errstr = "SCRIPT_ERR_INVALID_NUMBER_RANGE";
                return false;
            }
            break;
        default:
            this.errstr = "SCRIPT_ERR_BAD_OPCODE";
            return false;
    }
    return true;
};

},{"buffer":"fCgem","../util/_":"f1m1Z","./script":"97HeK","../opcode":"1EJ2h","../crypto/bn":"35huv","../crypto/hash":"jgMGE","../crypto/signature":"axUut","../publickey":"cwKNK","clone-deep":"g7F6b","../transaction":"ewby0"}],"g7F6b":[function(require,module,exports) {
"use strict";
/**
 * Module dependenices
 */ const clone = require("shallow-clone");
const typeOf = require("kind-of");
const isPlainObject = require("is-plain-object");
function cloneDeep(val, instanceClone) {
    switch(typeOf(val)){
        case "object":
            return cloneObjectDeep(val, instanceClone);
        case "array":
            return cloneArrayDeep(val, instanceClone);
        default:
            return clone(val);
    }
}
function cloneObjectDeep(val, instanceClone) {
    if (typeof instanceClone === "function") return instanceClone(val);
    if (instanceClone || isPlainObject(val)) {
        const res = new val.constructor();
        for(let key in val)res[key] = cloneDeep(val[key], instanceClone);
        return res;
    }
    return val;
}
function cloneArrayDeep(val, instanceClone) {
    const res = new val.constructor(val.length);
    for(let i = 0; i < val.length; i++)res[i] = cloneDeep(val[i], instanceClone);
    return res;
}
/**
 * Expose `cloneDeep`
 */ module.exports = cloneDeep;

},{"shallow-clone":"fqIJX","kind-of":"iaObk","is-plain-object":"1pLOI"}],"fqIJX":[function(require,module,exports) {
/*!
 * shallow-clone <https://github.com/jonschlinkert/shallow-clone>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */ "use strict";
var Buffer = require("buffer").Buffer;
const valueOf = Symbol.prototype.valueOf;
const typeOf = require("kind-of");
function clone(val, deep) {
    switch(typeOf(val)){
        case "array":
            return val.slice();
        case "object":
            return Object.assign({}, val);
        case "date":
            return new val.constructor(Number(val));
        case "map":
            return new Map(val);
        case "set":
            return new Set(val);
        case "buffer":
            return cloneBuffer(val);
        case "symbol":
            return cloneSymbol(val);
        case "arraybuffer":
            return cloneArrayBuffer(val);
        case "float32array":
        case "float64array":
        case "int16array":
        case "int32array":
        case "int8array":
        case "uint16array":
        case "uint32array":
        case "uint8clampedarray":
        case "uint8array":
            return cloneTypedArray(val);
        case "regexp":
            return cloneRegExp(val);
        case "error":
            return Object.create(val);
        default:
            return val;
    }
}
function cloneRegExp(val) {
    const flags = val.flags !== void 0 ? val.flags : /\w+$/.exec(val) || void 0;
    const re = new val.constructor(val.source, flags);
    re.lastIndex = val.lastIndex;
    return re;
}
function cloneArrayBuffer(val) {
    const res = new val.constructor(val.byteLength);
    new Uint8Array(res).set(new Uint8Array(val));
    return res;
}
function cloneTypedArray(val, deep) {
    return new val.constructor(val.buffer, val.byteOffset, val.length);
}
function cloneBuffer(val) {
    const len = val.length;
    const buf = Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : Buffer.from(len);
    val.copy(buf);
    return buf;
}
function cloneSymbol(val) {
    return valueOf ? Object(valueOf.call(val)) : {};
}
/**
 * Expose `clone`
 */ module.exports = clone;

},{"buffer":"fCgem","kind-of":"iaObk"}],"iaObk":[function(require,module,exports) {
var toString = Object.prototype.toString;
module.exports = function kindOf(val) {
    if (val === void 0) return "undefined";
    if (val === null) return "null";
    var type = typeof val;
    if (type === "boolean") return "boolean";
    if (type === "string") return "string";
    if (type === "number") return "number";
    if (type === "symbol") return "symbol";
    if (type === "function") return isGeneratorFn(val) ? "generatorfunction" : "function";
    if (isArray(val)) return "array";
    if (isBuffer(val)) return "buffer";
    if (isArguments(val)) return "arguments";
    if (isDate(val)) return "date";
    if (isError(val)) return "error";
    if (isRegexp(val)) return "regexp";
    switch(ctorName(val)){
        case "Symbol":
            return "symbol";
        case "Promise":
            return "promise";
        // Set, Map, WeakSet, WeakMap
        case "WeakMap":
            return "weakmap";
        case "WeakSet":
            return "weakset";
        case "Map":
            return "map";
        case "Set":
            return "set";
        // 8-bit typed arrays
        case "Int8Array":
            return "int8array";
        case "Uint8Array":
            return "uint8array";
        case "Uint8ClampedArray":
            return "uint8clampedarray";
        // 16-bit typed arrays
        case "Int16Array":
            return "int16array";
        case "Uint16Array":
            return "uint16array";
        // 32-bit typed arrays
        case "Int32Array":
            return "int32array";
        case "Uint32Array":
            return "uint32array";
        case "Float32Array":
            return "float32array";
        case "Float64Array":
            return "float64array";
    }
    if (isGeneratorObj(val)) return "generator";
    // Non-plain objects
    type = toString.call(val);
    switch(type){
        case "[object Object]":
            return "object";
        // iterators
        case "[object Map Iterator]":
            return "mapiterator";
        case "[object Set Iterator]":
            return "setiterator";
        case "[object String Iterator]":
            return "stringiterator";
        case "[object Array Iterator]":
            return "arrayiterator";
    }
    // other
    return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
};
function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
}
function isArray(val) {
    if (Array.isArray) return Array.isArray(val);
    return val instanceof Array;
}
function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
}
function isDate(val) {
    if (val instanceof Date) return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
}
function isRegexp(val) {
    if (val instanceof RegExp) return true;
    return typeof val.flags === "string" && typeof val.ignoreCase === "boolean" && typeof val.multiline === "boolean" && typeof val.global === "boolean";
}
function isGeneratorFn(name, val) {
    return ctorName(name) === "GeneratorFunction";
}
function isGeneratorObj(val) {
    return typeof val.throw === "function" && typeof val.return === "function" && typeof val.next === "function";
}
function isArguments(val) {
    try {
        if (typeof val.length === "number" && typeof val.callee === "function") return true;
    } catch (err) {
        if (err.message.indexOf("callee") !== -1) return true;
    }
    return false;
}
/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */ function isBuffer(val) {
    if (val.constructor && typeof val.constructor.isBuffer === "function") return val.constructor.isBuffer(val);
    return false;
}

},{}],"1pLOI":[function(require,module,exports) {
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */ "use strict";
var isObject = require("isobject");
function isObjectObject(o) {
    return isObject(o) === true && Object.prototype.toString.call(o) === "[object Object]";
}
module.exports = function isPlainObject(o) {
    var ctor, prot;
    if (isObjectObject(o) === false) return false;
    // If has modified constructor
    ctor = o.constructor;
    if (typeof ctor !== "function") return false;
    // If has modified prototype
    prot = ctor.prototype;
    if (isObjectObject(prot) === false) return false;
    // If constructor does not have an Object-specific method
    if (prot.hasOwnProperty("isPrototypeOf") === false) return false;
    // Most likely a plain Object
    return true;
};

},{"isobject":"u8nQr"}],"u8nQr":[function(require,module,exports) {
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */ "use strict";
module.exports = function isObject(val) {
    return val != null && typeof val === "object" && Array.isArray(val) === false;
};

},{}],"ewby0":[function(require,module,exports) {
module.exports = require("./transaction");
module.exports.Input = require("./input");
module.exports.Output = require("./output");
module.exports.UnspentOutput = require("./unspentoutput");
module.exports.Signature = require("./signature");
module.exports.Sighash = require("./sighash");

},{"./transaction":"ibKkK","./input":"cwgR2","./output":"hePxj","./unspentoutput":"7PXRj","./signature":"iQYQL","./sighash":"hsca5"}],"ibKkK":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var $ = require("../util/preconditions");
var buffer = require("buffer");
var errors = require("../errors");
var JSUtil = require("../util/js");
var BufferReader = require("../encoding/bufferreader");
var BufferWriter = require("../encoding/bufferwriter");
var Varint = require("../encoding/varint");
var Hash = require("../crypto/hash");
var Signature = require("../crypto/signature");
var Sighash = require("./sighash");
var Address = require("../address");
var UnspentOutput = require("./unspentoutput");
var Input = require("./input");
var PublicKeyHashInput = Input.PublicKeyHash;
var PublicKeyInput = Input.PublicKey;
var MultiSigScriptHashInput = Input.MultiSigScriptHash;
var MultiSigInput = Input.MultiSig;
var Output = require("./output");
var Script = require("../script");
var PrivateKey = require("../privatekey");
var BN = require("../crypto/bn");
/**
 * Represents a transaction, a set of inputs and outputs to change ownership of tokens
 *
 * @param {*} serialized
 * @constructor
 */ function Transaction(serialized) {
    if (!(this instanceof Transaction)) return new Transaction(serialized);
    this.inputs = [];
    this.outputs = [];
    this._inputAmount = undefined;
    this._outputAmount = undefined;
    if (serialized) {
        if (serialized instanceof Transaction) return Transaction.shallowCopy(serialized);
        else if (JSUtil.isHexa(serialized)) this.fromString(serialized);
        else if (Buffer.isBuffer(serialized)) this.fromBuffer(serialized);
        else if (_.isObject(serialized)) this.fromObject(serialized);
        else throw new errors.InvalidArgument("Must provide an object or string to deserialize a transaction");
    } else this._newTransaction();
}
var CURRENT_VERSION = 1;
var DEFAULT_NLOCKTIME = 0;
var MAX_BLOCK_SIZE = 1000000;
// Minimum amount for an output for it not to be considered a dust output
Transaction.DUST_AMOUNT = 546;
// Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference
Transaction.FEE_SECURITY_MARGIN = 150;
// max amount of satoshis in circulation
Transaction.MAX_MONEY = 21000000 * 1e8;
// nlocktime limit to be considered block height rather than a timestamp
Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;
// Max value for an unsigned 32 bit value
Transaction.NLOCKTIME_MAX_VALUE = 4294967295;
// Value used for fee estimation (satoshis per kilobyte)
Transaction.FEE_PER_KB = 500;
// Safe upper bound for change address script size in bytes
Transaction.CHANGE_OUTPUT_MAX_SIZE = 62;
/* Constructors and Serialization */ /**
 * Create a 'shallow' copy of the transaction, by serializing and deserializing
 * it dropping any additional information that inputs and outputs may have hold
 *
 * @param {Transaction} transaction
 * @return {Transaction}
 */ Transaction.shallowCopy = function(transaction) {
    var copy = new Transaction(transaction.toBuffer());
    return copy;
};
var hashProperty = {
    configurable: false,
    enumerable: true,
    get: function() {
        this._hash = new BufferReader(this._getHash()).readReverse().toString("hex");
        return this._hash;
    }
};
Object.defineProperty(Transaction.prototype, "hash", hashProperty);
Object.defineProperty(Transaction.prototype, "id", hashProperty);
var ioProperty = {
    configurable: false,
    enumerable: true,
    get: function() {
        return this._getInputAmount();
    }
};
Object.defineProperty(Transaction.prototype, "inputAmount", ioProperty);
ioProperty.get = function() {
    return this._getOutputAmount();
};
Object.defineProperty(Transaction.prototype, "outputAmount", ioProperty);
/**
 * Retrieve the little endian hash of the transaction (used for serialization)
 * @return {Buffer}
 */ Transaction.prototype._getHash = function() {
    return Hash.sha256sha256(this.toBuffer());
};
/**
 * Retrieve a hexa string that can be used with bitcoind's CLI interface
 * (decoderawtransaction, sendrawtransaction)
 *
 * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,
 *   it's expected to contain a set of flags to skip certain tests:
 * * `disableAll`: disable all checks
 * * `disableLargeFees`: disable checking for fees that are too large
 * * `disableIsFullySigned`: disable checking if all inputs are fully signed
 * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts
 * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts
 * @return {string}
 */ Transaction.prototype.serialize = function(unsafe) {
    if (unsafe === true || unsafe && unsafe.disableAll) return this.uncheckedSerialize();
    else return this.checkedSerialize(unsafe);
};
Transaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function() {
    return this.toBuffer().toString("hex");
};
/**
 * Retrieve a hexa string that can be used with bitcoind's CLI interface
 * (decoderawtransaction, sendrawtransaction)
 *
 * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}
 * @return {string}
 */ Transaction.prototype.checkedSerialize = function(opts) {
    var serializationError = this.getSerializationError(opts);
    if (serializationError) {
        serializationError.message += " - For more information please see: https://bsv.io/api/lib/transaction#serialization-checks";
        throw serializationError;
    }
    return this.uncheckedSerialize();
};
Transaction.prototype.invalidSatoshis = function() {
    var invalid = false;
    for(var i = 0; i < this.outputs.length; i++)if (this.outputs[i].invalidSatoshis()) invalid = true;
    return invalid;
};
/**
 * Retrieve a possible error that could appear when trying to serialize and
 * broadcast this transaction.
 *
 * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}
 * @return {bsv.Error}
 */ Transaction.prototype.getSerializationError = function(opts) {
    opts = opts || {};
    if (this.invalidSatoshis()) return new errors.Transaction.InvalidSatoshis();
    var unspent = this._getUnspentValue();
    var unspentError;
    if (unspent < 0) {
        if (!opts.disableMoreOutputThanInput) unspentError = new errors.Transaction.InvalidOutputAmountSum();
    } else unspentError = this._hasFeeError(opts, unspent);
    return unspentError || this._hasDustOutputs(opts) || this._isMissingSignatures(opts);
};
Transaction.prototype._hasFeeError = function(opts, unspent) {
    if (!_.isUndefined(this._fee) && this._fee !== unspent) return new errors.Transaction.FeeError.Different("Unspent value is " + unspent + " but specified fee is " + this._fee);
    if (!opts.disableLargeFees) {
        var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());
        if (unspent > maximumFee) {
            if (this._missingChange()) return new errors.Transaction.ChangeAddressMissing("Fee is too large and no change address was provided");
            return new errors.Transaction.FeeError.TooLarge("expected less than " + maximumFee + " but got " + unspent);
        }
    }
};
Transaction.prototype._missingChange = function() {
    return !this._changeScript;
};
Transaction.prototype._hasDustOutputs = function(opts) {
    if (opts.disableDustOutputs) return;
    var index, output;
    for(index in this.outputs){
        output = this.outputs[index];
        if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut() && !output.script.isSafeDataOut()) return new errors.Transaction.DustOutputs();
    }
};
Transaction.prototype._isMissingSignatures = function(opts) {
    if (opts.disableIsFullySigned) return;
    if (!this.isFullySigned()) return new errors.Transaction.MissingSignatures();
};
Transaction.prototype.inspect = function() {
    return "<Transaction: " + this.uncheckedSerialize() + ">";
};
Transaction.prototype.toBuffer = function() {
    var writer = new BufferWriter();
    return this.toBufferWriter(writer).toBuffer();
};
Transaction.prototype.toBufferWriter = function(writer) {
    writer.writeInt32LE(this.version);
    writer.writeVarintNum(this.inputs.length);
    _.each(this.inputs, function(input) {
        input.toBufferWriter(writer);
    });
    writer.writeVarintNum(this.outputs.length);
    _.each(this.outputs, function(output) {
        output.toBufferWriter(writer);
    });
    writer.writeUInt32LE(this.nLockTime);
    return writer;
};
Transaction.prototype.fromBuffer = function(buffer) {
    var reader = new BufferReader(buffer);
    return this.fromBufferReader(reader);
};
Transaction.prototype.fromBufferReader = function(reader) {
    $.checkArgument(!reader.finished(), "No transaction data received");
    var i, sizeTxIns, sizeTxOuts;
    this.version = reader.readInt32LE();
    sizeTxIns = reader.readVarintNum();
    for(i = 0; i < sizeTxIns; i++){
        var input = Input.fromBufferReader(reader);
        this.inputs.push(input);
    }
    sizeTxOuts = reader.readVarintNum();
    for(i = 0; i < sizeTxOuts; i++)this.outputs.push(Output.fromBufferReader(reader));
    this.nLockTime = reader.readUInt32LE();
    return this;
};
Transaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {
    var inputs = [];
    this.inputs.forEach(function(input) {
        inputs.push(input.toObject());
    });
    var outputs = [];
    this.outputs.forEach(function(output) {
        outputs.push(output.toObject());
    });
    var obj = {
        hash: this.hash,
        version: this.version,
        inputs: inputs,
        outputs: outputs,
        nLockTime: this.nLockTime
    };
    if (this._changeScript) obj.changeScript = this._changeScript.toString();
    if (!_.isUndefined(this._changeIndex)) obj.changeIndex = this._changeIndex;
    if (!_.isUndefined(this._fee)) obj.fee = this._fee;
    return obj;
};
Transaction.prototype.fromObject = function fromObject(arg) {
    $.checkArgument(_.isObject(arg) || arg instanceof Transaction);
    var self = this;
    var transaction;
    if (arg instanceof Transaction) transaction = transaction.toObject();
    else transaction = arg;
    _.each(transaction.inputs, function(input) {
        if (!input.output || !input.output.script) {
            self.uncheckedAddInput(new Input(input));
            return;
        }
        var script = new Script(input.output.script);
        var txin;
        if (script.isPublicKeyHashOut()) txin = new Input.PublicKeyHash(input);
        else if (script.isScriptHashOut() && input.publicKeys && input.threshold) txin = new Input.MultiSigScriptHash(input, input.publicKeys, input.threshold, input.signatures);
        else if (script.isPublicKeyOut()) txin = new Input.PublicKey(input);
        else throw new errors.Transaction.Input.UnsupportedScript(input.output.script);
        self.addInput(txin);
    });
    _.each(transaction.outputs, function(output) {
        self.addOutput(new Output(output));
    });
    if (transaction.changeIndex) this._changeIndex = transaction.changeIndex;
    if (transaction.changeScript) this._changeScript = new Script(transaction.changeScript);
    if (transaction.fee) this._fee = transaction.fee;
    this.nLockTime = transaction.nLockTime;
    this.version = transaction.version;
    this._checkConsistency(arg);
    return this;
};
Transaction.prototype._checkConsistency = function(arg) {
    if (!_.isUndefined(this._changeIndex)) {
        $.checkState(this._changeScript, "Change script is expected.");
        $.checkState(this.outputs[this._changeIndex], "Change index points to undefined output.");
        $.checkState(this.outputs[this._changeIndex].script.toString() === this._changeScript.toString(), "Change output has an unexpected script.");
    }
    if (arg && arg.hash) $.checkState(arg.hash === this.hash, "Hash in object does not match transaction hash.");
};
/**
 * Sets nLockTime so that transaction is not valid until the desired date(a
 * timestamp in seconds since UNIX epoch is also accepted)
 *
 * @param {Date | Number} time
 * @return {Transaction} this
 */ Transaction.prototype.lockUntilDate = function(time) {
    $.checkArgument(time);
    if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) throw new errors.Transaction.LockTimeTooEarly();
    if (_.isDate(time)) time = time.getTime() / 1000;
    for(var i = 0; i < this.inputs.length; i++)if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;
    this.nLockTime = time;
    return this;
};
/**
 * Sets nLockTime so that transaction is not valid until the desired block
 * height.
 *
 * @param {Number} height
 * @return {Transaction} this
 */ Transaction.prototype.lockUntilBlockHeight = function(height) {
    $.checkArgument(_.isNumber(height));
    if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) throw new errors.Transaction.BlockHeightTooHigh();
    if (height < 0) throw new errors.Transaction.NLockTimeOutOfRange();
    for(var i = 0; i < this.inputs.length; i++)if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;
    this.nLockTime = height;
    return this;
};
/**
 *  Returns a semantic version of the transaction's nLockTime.
 *  @return {Number|Date}
 *  If nLockTime is 0, it returns null,
 *  if it is < 500000000, it returns a block height (number)
 *  else it returns a Date object.
 */ Transaction.prototype.getLockTime = function() {
    if (!this.nLockTime) return null;
    if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) return this.nLockTime;
    return new Date(1000 * this.nLockTime);
};
Transaction.prototype.fromString = function(string) {
    this.fromBuffer(buffer.Buffer.from(string, "hex"));
};
Transaction.prototype._newTransaction = function() {
    this.version = CURRENT_VERSION;
    this.nLockTime = DEFAULT_NLOCKTIME;
};
/* Transaction creation interface */ /**
 * @typedef {Object} Transaction~fromObject
 * @property {string} prevTxId
 * @property {number} outputIndex
 * @property {(Buffer|string|Script)} script
 * @property {number} satoshis
 */ /**
 * Add an input to this transaction. This is a high level interface
 * to add an input, for more control, use @{link Transaction#addInput}.
 *
 * Can receive, as output information, the output of bitcoind's `listunspent` command,
 * and a slightly fancier format recognized by bsv:
 *
 * ```
 * {
 *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',
 *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',
 *  outputIndex: 0,
 *  script: Script.empty(),
 *  satoshis: 1020000
 * }
 * ```
 * Where `address` can be either a string or a bsv Address object. The
 * same is true for `script`, which can be a string or a bsv Script.
 *
 * Beware that this resets all the signatures for inputs (in further versions,
 * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).
 *
 * @example
 * ```javascript
 * var transaction = new Transaction();
 *
 * // From a pay to public key hash output from bitcoind's listunspent
 * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});
 *
 * // From a pay to public key hash output
 * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});
 *
 * // From a multisig P2SH output
 * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},
 *                  ['03000...', '02000...'], 2);
 * ```
 *
 * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo
 * @param {Array=} pubkeys
 * @param {number=} threshold
 */ Transaction.prototype.from = function(utxo, pubkeys, threshold) {
    if (_.isArray(utxo)) {
        var self = this;
        _.each(utxo, function(utxo) {
            self.from(utxo, pubkeys, threshold);
        });
        return this;
    }
    var exists = _.some(this.inputs, function(input) {
        // TODO: Maybe prevTxId should be a string? Or defined as read only property?
        return input.prevTxId.toString("hex") === utxo.txId && input.outputIndex === utxo.outputIndex;
    });
    if (exists) return this;
    if (pubkeys && threshold) this._fromMultisigUtxo(utxo, pubkeys, threshold);
    else this._fromNonP2SH(utxo);
    return this;
};
Transaction.prototype._fromNonP2SH = function(utxo) {
    var Clazz;
    utxo = new UnspentOutput(utxo);
    if (utxo.script.isPublicKeyHashOut()) Clazz = PublicKeyHashInput;
    else if (utxo.script.isPublicKeyOut()) Clazz = PublicKeyInput;
    else Clazz = Input;
    this.addInput(new Clazz({
        output: new Output({
            script: utxo.script,
            satoshis: utxo.satoshis
        }),
        prevTxId: utxo.txId,
        outputIndex: utxo.outputIndex,
        script: Script.empty()
    }));
};
Transaction.prototype._fromMultisigUtxo = function(utxo, pubkeys, threshold) {
    $.checkArgument(threshold <= pubkeys.length, "Number of required signatures must be greater than the number of public keys");
    var Clazz;
    utxo = new UnspentOutput(utxo);
    if (utxo.script.isMultisigOut()) Clazz = MultiSigInput;
    else if (utxo.script.isScriptHashOut()) Clazz = MultiSigScriptHashInput;
    else throw new Error("@TODO");
    this.addInput(new Clazz({
        output: new Output({
            script: utxo.script,
            satoshis: utxo.satoshis
        }),
        prevTxId: utxo.txId,
        outputIndex: utxo.outputIndex,
        script: Script.empty()
    }, pubkeys, threshold));
};
/**
 * Add an input to this transaction. The input must be an instance of the `Input` class.
 * It should have information about the Output that it's spending, but if it's not already
 * set, two additional parameters, `outputScript` and `satoshis` can be provided.
 *
 * @param {Input} input
 * @param {String|Script} outputScript
 * @param {number} satoshis
 * @return Transaction this, for chaining
 */ Transaction.prototype.addInput = function(input, outputScript, satoshis) {
    $.checkArgumentType(input, Input, "input");
    if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) throw new errors.Transaction.NeedMoreInfo("Need information about the UTXO script and satoshis");
    if (!input.output && outputScript && !_.isUndefined(satoshis)) {
        outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);
        $.checkArgumentType(satoshis, "number", "satoshis");
        input.output = new Output({
            script: outputScript,
            satoshis: satoshis
        });
    }
    return this.uncheckedAddInput(input);
};
/**
 * Add an input to this transaction, without checking that the input has information about
 * the output that it's spending.
 *
 * @param {Input} input
 * @return Transaction this, for chaining
 */ Transaction.prototype.uncheckedAddInput = function(input) {
    $.checkArgumentType(input, Input, "input");
    this.inputs.push(input);
    this._inputAmount = undefined;
    this._updateChangeOutput();
    return this;
};
/**
 * Returns true if the transaction has enough info on all inputs to be correctly validated
 *
 * @return {boolean}
 */ Transaction.prototype.hasAllUtxoInfo = function() {
    return _.every(this.inputs.map(function(input) {
        return !!input.output;
    }));
};
/**
 * Manually set the fee for this transaction. Beware that this resets all the signatures
 * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not
 * be reset).
 *
 * @param {number} amount satoshis to be sent
 * @return {Transaction} this, for chaining
 */ Transaction.prototype.fee = function(amount) {
    $.checkArgument(_.isNumber(amount), "amount must be a number");
    this._fee = amount;
    this._updateChangeOutput();
    return this;
};
/**
 * Manually set the fee per KB for this transaction. Beware that this resets all the signatures
 * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not
 * be reset).
 *
 * @param {number} amount satoshis per KB to be sent
 * @return {Transaction} this, for chaining
 */ Transaction.prototype.feePerKb = function(amount) {
    $.checkArgument(_.isNumber(amount), "amount must be a number");
    this._feePerKb = amount;
    this._updateChangeOutput();
    return this;
};
/* Output management */ /**
 * Set the change address for this transaction
 *
 * Beware that this resets all the signatures for inputs (in further versions,
 * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).
 *
 * @param {Address} address An address for change to be sent to.
 * @return {Transaction} this, for chaining
 */ Transaction.prototype.change = function(address) {
    $.checkArgument(address, "address is required");
    this._changeScript = Script.fromAddress(address);
    this._updateChangeOutput();
    return this;
};
/**
 * @return {Output} change output, if it exists
 */ Transaction.prototype.getChangeOutput = function() {
    if (!_.isUndefined(this._changeIndex)) return this.outputs[this._changeIndex];
    return null;
};
/**
 * @typedef {Object} Transaction~toObject
 * @property {(string|Address)} address
 * @property {number} satoshis
 */ /**
 * Add an output to the transaction.
 *
 * Beware that this resets all the signatures for inputs (in further versions,
 * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).
 *
 * @param {(string|Address|Array.<Transaction~toObject>)} address
 * @param {number} amount in satoshis
 * @return {Transaction} this, for chaining
 */ Transaction.prototype.to = function(address, amount) {
    if (_.isArray(address)) {
        var self = this;
        _.each(address, function(to) {
            self.to(to.address, to.satoshis);
        });
        return this;
    }
    $.checkArgument(JSUtil.isNaturalNumber(amount), "Amount is expected to be a positive integer");
    this.addOutput(new Output({
        script: Script(new Address(address)),
        satoshis: amount
    }));
    return this;
};
/**
 * Add an OP_RETURN output to the transaction.
 *
 * Beware that this resets all the signatures for inputs (in further versions,
 * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).
 *
 * @param {Buffer|string} value the data to be stored in the OP_RETURN output.
 *    In case of a string, the UTF-8 representation will be stored
 * @return {Transaction} this, for chaining
 */ Transaction.prototype.addData = function(value) {
    this.addOutput(new Output({
        script: Script.buildDataOut(value),
        satoshis: 0
    }));
    return this;
};
/**
 * Add an OP_FALSE | OP_RETURN output to the transaction.
 *
 * Beware that this resets all the signatures for inputs (in further versions,
 * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).
 *
 * @param {Buffer|string} value the data to be stored in the OP_RETURN output.
 *    In case of a string, the UTF-8 representation will be stored
 * @return {Transaction} this, for chaining
 */ Transaction.prototype.addSafeData = function(value) {
    this.addOutput(new Output({
        script: Script.buildSafeDataOut(value),
        satoshis: 0
    }));
    return this;
};
/**
 * Add an output to the transaction.
 *
 * @param {Output} output the output to add.
 * @return {Transaction} this, for chaining
 */ Transaction.prototype.addOutput = function(output) {
    $.checkArgumentType(output, Output, "output");
    this._addOutput(output);
    this._updateChangeOutput();
    return this;
};
/**
 * Remove all outputs from the transaction.
 *
 * @return {Transaction} this, for chaining
 */ Transaction.prototype.clearOutputs = function() {
    this.outputs = [];
    this._clearSignatures();
    this._outputAmount = undefined;
    this._changeIndex = undefined;
    this._updateChangeOutput();
    return this;
};
Transaction.prototype._addOutput = function(output) {
    this.outputs.push(output);
    this._outputAmount = undefined;
};
/**
 * Calculates or gets the total output amount in satoshis
 *
 * @return {Number} the transaction total output amount
 */ Transaction.prototype._getOutputAmount = function() {
    if (_.isUndefined(this._outputAmount)) {
        var self = this;
        this._outputAmount = 0;
        _.each(this.outputs, function(output) {
            self._outputAmount += output.satoshis;
        });
    }
    return this._outputAmount;
};
/**
 * Calculates or gets the total input amount in satoshis
 *
 * @return {Number} the transaction total input amount
 */ Transaction.prototype._getInputAmount = function() {
    if (_.isUndefined(this._inputAmount)) {
        var self = this;
        this._inputAmount = 0;
        _.each(this.inputs, function(input) {
            if (_.isUndefined(input.output)) throw new errors.Transaction.Input.MissingPreviousOutput();
            self._inputAmount += input.output.satoshis;
        });
    }
    return this._inputAmount;
};
Transaction.prototype._updateChangeOutput = function() {
    if (!this._changeScript) return;
    this._clearSignatures();
    if (!_.isUndefined(this._changeIndex)) this._removeOutput(this._changeIndex);
    this._changeIndex = this.outputs.length;
    this._addOutput(new Output({
        script: this._changeScript,
        satoshis: 0
    }));
    var available = this._getUnspentValue();
    var fee = this.getFee();
    var changeAmount = available - fee;
    this._removeOutput(this._changeIndex);
    this._changeIndex = undefined;
    if (changeAmount >= Transaction.DUST_AMOUNT) {
        this._changeIndex = this.outputs.length;
        this._addOutput(new Output({
            script: this._changeScript,
            satoshis: changeAmount
        }));
    }
};
/**
 * Calculates the fee of the transaction.
 *
 * If there's a fixed fee set, return that.
 *
 * If there is no change output set, the fee is the
 * total value of the outputs minus inputs. Note that
 * a serialized transaction only specifies the value
 * of its outputs. (The value of inputs are recorded
 * in the previous transaction outputs being spent.)
 * This method therefore raises a "MissingPreviousOutput"
 * error when called on a serialized transaction.
 *
 * If there's no fee set and no change address,
 * estimate the fee based on size.
 *
 * @return {Number} fee of this transaction in satoshis
 */ Transaction.prototype.getFee = function() {
    if (this.isCoinbase()) return 0;
    if (!_.isUndefined(this._fee)) return this._fee;
    // if no change output is set, fees should equal all the unspent amount
    if (!this._changeScript) return this._getUnspentValue();
    return this._estimateFee();
};
/**
 * Estimates fee from serialized transaction size in bytes.
 */ Transaction.prototype._estimateFee = function() {
    var estimatedSize = this._estimateSize();
    return Math.ceil(estimatedSize / 1000 * (this._feePerKb || Transaction.FEE_PER_KB));
};
Transaction.prototype._getUnspentValue = function() {
    return this._getInputAmount() - this._getOutputAmount();
};
Transaction.prototype._clearSignatures = function() {
    _.each(this.inputs, function(input) {
        input.clearSignatures();
    });
};
// 4    version
// ???  num inputs (VARINT)
// --- input list ---
//
// ???  num outputs (VARINT)
// --- output list ---
//      8       value
//      ???     script size (VARINT)
//      ???     script
//
// 4    locktime
Transaction.prototype._estimateSize = function() {
    var result = 8 // size of version + size of locktime
    ;
    result += Varint(this.inputs.length).toBuffer().length;
    result += Varint(this.outputs.length).toBuffer().length;
    _.each(this.inputs, function(input) {
        result += input._estimateSize();
    });
    _.each(this.outputs, function(output) {
        result += output.getSize();
    });
    return result;
};
Transaction.prototype._removeOutput = function(index) {
    var output = this.outputs[index];
    this.outputs = _.without(this.outputs, output);
    this._outputAmount = undefined;
};
Transaction.prototype.removeOutput = function(index) {
    this._removeOutput(index);
    this._updateChangeOutput();
};
/**
 * Sort a transaction's inputs and outputs according to BIP69
 *
 * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}
 * @return {Transaction} this
 */ Transaction.prototype.sort = function() {
    this.sortInputs(function(inputs) {
        var copy = Array.prototype.concat.apply([], inputs);
        copy.sort(function(first, second) {
            return first.prevTxId.compare(second.prevTxId) || first.outputIndex - second.outputIndex;
        });
        return copy;
    });
    this.sortOutputs(function(outputs) {
        var copy = Array.prototype.concat.apply([], outputs);
        copy.sort(function(first, second) {
            return first.satoshis - second.satoshis || first.script.toBuffer().compare(second.script.toBuffer());
        });
        return copy;
    });
    return this;
};
/**
 * Randomize this transaction's outputs ordering. The shuffling algorithm is a
 * version of the Fisher-Yates shuffle.
 *
 * @return {Transaction} this
 */ Transaction.prototype.shuffleOutputs = function() {
    return this.sortOutputs(_.shuffle);
};
/**
 * Sort this transaction's outputs, according to a given sorting function that
 * takes an array as argument and returns a new array, with the same elements
 * but with a different order. The argument function MUST NOT modify the order
 * of the original array
 *
 * @param {Function} sortingFunction
 * @return {Transaction} this
 */ Transaction.prototype.sortOutputs = function(sortingFunction) {
    var outs = sortingFunction(this.outputs);
    return this._newOutputOrder(outs);
};
/**
 * Sort this transaction's inputs, according to a given sorting function that
 * takes an array as argument and returns a new array, with the same elements
 * but with a different order.
 *
 * @param {Function} sortingFunction
 * @return {Transaction} this
 */ Transaction.prototype.sortInputs = function(sortingFunction) {
    this.inputs = sortingFunction(this.inputs);
    this._clearSignatures();
    return this;
};
Transaction.prototype._newOutputOrder = function(newOutputs) {
    var isInvalidSorting = this.outputs.length !== newOutputs.length || _.difference(this.outputs, newOutputs).length !== 0;
    if (isInvalidSorting) throw new errors.Transaction.InvalidSorting();
    if (!_.isUndefined(this._changeIndex)) {
        var changeOutput = this.outputs[this._changeIndex];
        this._changeIndex = newOutputs.indexOf(changeOutput);
    }
    this.outputs = newOutputs;
    return this;
};
Transaction.prototype.removeInput = function(txId, outputIndex) {
    var index;
    if (!outputIndex && _.isNumber(txId)) index = txId;
    else index = _.findIndex(this.inputs, function(input) {
        return input.prevTxId.toString("hex") === txId && input.outputIndex === outputIndex;
    });
    if (index < 0 || index >= this.inputs.length) throw new errors.Transaction.InvalidIndex(index, this.inputs.length);
    var input = this.inputs[index];
    this.inputs = _.without(this.inputs, input);
    this._inputAmount = undefined;
    this._updateChangeOutput();
};
/* Signature handling */ /**
 * Sign the transaction using one or more private keys.
 *
 * It tries to sign each input, verifying that the signature will be valid
 * (matches a public key).
 *
 * @param {Array|String|PrivateKey} privateKey
 * @param {number} sigtype
 * @return {Transaction} this, for chaining
 */ Transaction.prototype.sign = function(privateKey, sigtype) {
    $.checkState(this.hasAllUtxoInfo(), "Not all utxo information is available to sign the transaction.");
    var self = this;
    if (_.isArray(privateKey)) {
        _.each(privateKey, function(privateKey) {
            self.sign(privateKey, sigtype);
        });
        return this;
    }
    _.each(this.getSignatures(privateKey, sigtype), function(signature) {
        self.applySignature(signature);
    });
    return this;
};
Transaction.prototype.getSignatures = function(privKey, sigtype) {
    privKey = new PrivateKey(privKey);
    // By default, signs using ALL|FORKID
    sigtype = sigtype || Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;
    var transaction = this;
    var results = [];
    var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());
    _.each(this.inputs, function forEachInput(input, index) {
        _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData), function(signature) {
            results.push(signature);
        });
    });
    return results;
};
/**
 * Add a signature to the transaction
 *
 * @param {Object} signature
 * @param {number} signature.inputIndex
 * @param {number} signature.sigtype
 * @param {PublicKey} signature.publicKey
 * @param {Signature} signature.signature
 * @return {Transaction} this, for chaining
 */ Transaction.prototype.applySignature = function(signature) {
    this.inputs[signature.inputIndex].addSignature(this, signature);
    return this;
};
Transaction.prototype.isFullySigned = function() {
    _.each(this.inputs, function(input) {
        if (input.isFullySigned === Input.prototype.isFullySigned) throw new errors.Transaction.UnableToVerifySignature("Unrecognized script kind, or not enough information to execute script.This usually happens when creating a transaction from a serialized transaction");
    });
    return _.every(_.map(this.inputs, function(input) {
        return input.isFullySigned();
    }));
};
Transaction.prototype.isValidSignature = function(signature) {
    var self = this;
    if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) throw new errors.Transaction.UnableToVerifySignature("Unrecognized script kind, or not enough information to execute script.This usually happens when creating a transaction from a serialized transaction");
    return this.inputs[signature.inputIndex].isValidSignature(self, signature);
};
/**
 * @returns {bool} whether the signature is valid for this transaction input
 */ Transaction.prototype.verifySignature = function(sig, pubkey, nin, subscript, satoshisBN, flags) {
    return Sighash.verify(this, sig, pubkey, nin, subscript, satoshisBN, flags);
};
/**
 * Check that a transaction passes basic sanity tests. If not, return a string
 * describing the error. This function contains the same logic as
 * CheckTransaction in bitcoin core.
 */ Transaction.prototype.verify = function() {
    // Basic checks that don't depend on any context
    if (this.inputs.length === 0) return "transaction txins empty";
    if (this.outputs.length === 0) return "transaction txouts empty";
    // Check for negative or overflow output values
    var valueoutbn = new BN(0);
    for(var i = 0; i < this.outputs.length; i++){
        var txout = this.outputs[i];
        if (txout.invalidSatoshis()) return "transaction txout " + i + " satoshis is invalid";
        if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) return "transaction txout " + i + " greater than MAX_MONEY";
        valueoutbn = valueoutbn.add(txout._satoshisBN);
        if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) return "transaction txout " + i + " total output greater than MAX_MONEY";
    }
    // Size limits
    if (this.toBuffer().length > MAX_BLOCK_SIZE) return "transaction over the maximum block size";
    // Check for duplicate inputs
    var txinmap = {};
    for(i = 0; i < this.inputs.length; i++){
        var txin = this.inputs[i];
        var inputid = txin.prevTxId + ":" + txin.outputIndex;
        if (!_.isUndefined(txinmap[inputid])) return "transaction input " + i + " duplicate input";
        txinmap[inputid] = true;
    }
    var isCoinbase = this.isCoinbase();
    if (isCoinbase) {
        var buf = this.inputs[0]._scriptBuffer;
        if (buf.length < 2 || buf.length > 100) return "coinbase transaction script size invalid";
    } else for(i = 0; i < this.inputs.length; i++){
        if (this.inputs[i].isNull()) return "transaction input " + i + " has null input";
    }
    return true;
};
/**
 * Analogous to bitcoind's IsCoinBase function in transaction.h
 */ Transaction.prototype.isCoinbase = function() {
    return this.inputs.length === 1 && this.inputs[0].isNull();
};
module.exports = Transaction;

},{"buffer":"fCgem","../util/_":"f1m1Z","../util/preconditions":"c91dJ","../errors":"9UULR","../util/js":"it7yM","../encoding/bufferreader":"icuYB","../encoding/bufferwriter":"a0ZPc","../encoding/varint":"dhZFE","../crypto/hash":"jgMGE","../crypto/signature":"axUut","./sighash":"hsca5","../address":"lDqbu","./unspentoutput":"7PXRj","./input":"cwgR2","./output":"hePxj","../script":"FcGOz","../privatekey":"7qwA7","../crypto/bn":"35huv"}],"dhZFE":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var BufferWriter = require("./bufferwriter");
var BufferReader = require("./bufferreader");
var BN = require("../crypto/bn");
var Varint = function Varint(buf) {
    if (!(this instanceof Varint)) return new Varint(buf);
    if (Buffer.isBuffer(buf)) this.buf = buf;
    else if (typeof buf === "number") {
        var num = buf;
        this.fromNumber(num);
    } else if (buf instanceof BN) {
        var bn = buf;
        this.fromBN(bn);
    } else if (buf) {
        var obj = buf;
        this.set(obj);
    }
};
Varint.prototype.set = function(obj) {
    this.buf = obj.buf || this.buf;
    return this;
};
Varint.prototype.fromString = function(str) {
    this.set({
        buf: Buffer.from(str, "hex")
    });
    return this;
};
Varint.prototype.toString = function() {
    return this.buf.toString("hex");
};
Varint.prototype.fromBuffer = function(buf) {
    this.buf = buf;
    return this;
};
Varint.prototype.fromBufferReader = function(br) {
    this.buf = br.readVarintBuf();
    return this;
};
Varint.prototype.fromBN = function(bn) {
    this.buf = BufferWriter().writeVarintBN(bn).concat();
    return this;
};
Varint.prototype.fromNumber = function(num) {
    this.buf = BufferWriter().writeVarintNum(num).concat();
    return this;
};
Varint.prototype.toBuffer = function() {
    return this.buf;
};
Varint.prototype.toBN = function() {
    return BufferReader(this.buf).readVarintBN();
};
Varint.prototype.toNumber = function() {
    return BufferReader(this.buf).readVarintNum();
};
module.exports = Varint;

},{"buffer":"fCgem","./bufferwriter":"a0ZPc","./bufferreader":"icuYB","../crypto/bn":"35huv"}],"hsca5":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var buffer = require("buffer");
var Signature = require("../crypto/signature");
var Script = require("../script");
var Output = require("./output");
var BufferReader = require("../encoding/bufferreader");
var BufferWriter = require("../encoding/bufferwriter");
var BN = require("../crypto/bn");
var Hash = require("../crypto/hash");
var ECDSA = require("../crypto/ecdsa");
var $ = require("../util/preconditions");
var Interpreter = require("../script/interpreter");
var _ = require("../util/_");
var SIGHASH_SINGLE_BUG = Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex");
var BITS_64_ON = "ffffffffffffffff";
// By default, we sign with sighash_forkid
var DEFAULT_SIGN_FLAGS = Interpreter.SCRIPT_ENABLE_SIGHASH_FORKID;
var sighashPreimageForForkId = function(transaction, sighashType, inputNumber, subscript, satoshisBN) {
    var input = transaction.inputs[inputNumber];
    $.checkArgument(satoshisBN instanceof BN, "For ForkId=0 signatures, satoshis or complete input must be provided");
    function GetPrevoutHash(tx) {
        var writer = new BufferWriter();
        _.each(tx.inputs, function(input) {
            writer.writeReverse(input.prevTxId);
            writer.writeUInt32LE(input.outputIndex);
        });
        var buf = writer.toBuffer();
        var ret = Hash.sha256sha256(buf);
        return ret;
    }
    function GetSequenceHash(tx) {
        var writer = new BufferWriter();
        _.each(tx.inputs, function(input) {
            writer.writeUInt32LE(input.sequenceNumber);
        });
        var buf = writer.toBuffer();
        var ret = Hash.sha256sha256(buf);
        return ret;
    }
    function GetOutputsHash(tx, n) {
        var writer = new BufferWriter();
        if (_.isUndefined(n)) _.each(tx.outputs, function(output) {
            output.toBufferWriter(writer);
        });
        else tx.outputs[n].toBufferWriter(writer);
        var buf = writer.toBuffer();
        var ret = Hash.sha256sha256(buf);
        return ret;
    }
    var hashPrevouts = Buffer.alloc(32);
    var hashSequence = Buffer.alloc(32);
    var hashOutputs = Buffer.alloc(32);
    if (!(sighashType & Signature.SIGHASH_ANYONECANPAY)) hashPrevouts = GetPrevoutHash(transaction);
    if (!(sighashType & Signature.SIGHASH_ANYONECANPAY) && (sighashType & 31) !== Signature.SIGHASH_SINGLE && (sighashType & 31) !== Signature.SIGHASH_NONE) hashSequence = GetSequenceHash(transaction);
    if ((sighashType & 31) !== Signature.SIGHASH_SINGLE && (sighashType & 31) !== Signature.SIGHASH_NONE) hashOutputs = GetOutputsHash(transaction);
    else if ((sighashType & 31) === Signature.SIGHASH_SINGLE && inputNumber < transaction.outputs.length) hashOutputs = GetOutputsHash(transaction, inputNumber);
    var writer = new BufferWriter();
    // Version
    writer.writeInt32LE(transaction.version);
    // Input prevouts/nSequence (none/all, depending on flags)
    writer.write(hashPrevouts);
    writer.write(hashSequence);
    //  outpoint (32-byte hash + 4-byte little endian)
    writer.writeReverse(input.prevTxId);
    writer.writeUInt32LE(input.outputIndex);
    // scriptCode of the input (serialized as scripts inside CTxOuts)
    writer.writeVarintNum(subscript.toBuffer().length);
    writer.write(subscript.toBuffer());
    // value of the output spent by this input (8-byte little endian)
    writer.writeUInt64LEBN(satoshisBN);
    // nSequence of the input (4-byte little endian)
    var sequenceNumber = input.sequenceNumber;
    writer.writeUInt32LE(sequenceNumber);
    // Outputs (none/one/all, depending on flags)
    writer.write(hashOutputs);
    // Locktime
    writer.writeUInt32LE(transaction.nLockTime);
    // sighashType
    writer.writeUInt32LE(sighashType >>> 0);
    var buf = writer.toBuffer();
    return buf;
};
/**
 * Returns a buffer with the which is hashed with sighash that needs to be signed
 * for OP_CHECKSIG.
 *
 * @name Signing.sighash
 * @param {Transaction} transaction the transaction to sign
 * @param {number} sighashType the type of the hash
 * @param {number} inputNumber the input index for the signature
 * @param {Script} subscript the script that will be signed
 * @param {satoshisBN} input's amount (for  ForkId signatures)
 *
 */ var sighashPreimage = function sighashPreimage(transaction, sighashType, inputNumber, subscript, satoshisBN, flags) {
    var Transaction = require("./transaction");
    var Input = require("./input");
    if (_.isUndefined(flags)) flags = DEFAULT_SIGN_FLAGS;
    // Copy transaction
    var txcopy = Transaction.shallowCopy(transaction);
    // Copy script
    subscript = new Script(subscript);
    if (flags & Interpreter.SCRIPT_ENABLE_REPLAY_PROTECTION) {
        // Legacy chain's value for fork id must be of the form 0xffxxxx.
        // By xoring with 0xdead, we ensure that the value will be different
        // from the original one, even if it already starts with 0xff.
        var forkValue = sighashType >> 8;
        var newForkValue = 0xff0000 | forkValue ^ 0xdead;
        sighashType = newForkValue << 8 | sighashType & 0xff;
    }
    if (sighashType & Signature.SIGHASH_FORKID && flags & Interpreter.SCRIPT_ENABLE_SIGHASH_FORKID) return sighashPreimageForForkId(txcopy, sighashType, inputNumber, subscript, satoshisBN);
    // For no ForkId sighash, separators need to be removed.
    subscript.removeCodeseparators();
    var i;
    for(i = 0; i < txcopy.inputs.length; i++)// Blank signatures for other inputs
    txcopy.inputs[i] = new Input(txcopy.inputs[i]).setScript(Script.empty());
    txcopy.inputs[inputNumber] = new Input(txcopy.inputs[inputNumber]).setScript(subscript);
    if ((sighashType & 31) === Signature.SIGHASH_NONE || (sighashType & 31) === Signature.SIGHASH_SINGLE) {
        // clear all sequenceNumbers
        for(i = 0; i < txcopy.inputs.length; i++)if (i !== inputNumber) txcopy.inputs[i].sequenceNumber = 0;
    }
    if ((sighashType & 31) === Signature.SIGHASH_NONE) txcopy.outputs = [];
    else if ((sighashType & 31) === Signature.SIGHASH_SINGLE) {
        // The SIGHASH_SINGLE bug.
        // https://bitcointalk.org/index.php?topic=260595.0
        if (inputNumber >= txcopy.outputs.length) return SIGHASH_SINGLE_BUG;
        txcopy.outputs.length = inputNumber + 1;
        for(i = 0; i < inputNumber; i++)txcopy.outputs[i] = new Output({
            satoshis: BN.fromBuffer(buffer.Buffer.from(BITS_64_ON, "hex")),
            script: Script.empty()
        });
    }
    if (sighashType & Signature.SIGHASH_ANYONECANPAY) txcopy.inputs = [
        txcopy.inputs[inputNumber]
    ];
    var buf = new BufferWriter().write(txcopy.toBuffer()).writeInt32LE(sighashType).toBuffer();
    return buf;
};
/**
 * Returns a buffer of length 32 bytes with the hash that needs to be signed
 * for OP_CHECKSIG.
 *
 * @name Signing.sighash
 * @param {Transaction} transaction the transaction to sign
 * @param {number} sighashType the type of the hash
 * @param {number} inputNumber the input index for the signature
 * @param {Script} subscript the script that will be signed
 * @param {satoshisBN} input's amount (for  ForkId signatures)
 *
 */ var sighash = function sighash(transaction, sighashType, inputNumber, subscript, satoshisBN, flags) {
    var preimage = sighashPreimage(transaction, sighashType, inputNumber, subscript, satoshisBN, flags);
    if (preimage.compare(SIGHASH_SINGLE_BUG) === 0) return preimage;
    var ret = Hash.sha256sha256(preimage);
    ret = new BufferReader(ret).readReverse();
    return ret;
};
/**
 * Create a signature
 *
 * @name Signing.sign
 * @param {Transaction} transaction
 * @param {PrivateKey} privateKey
 * @param {number} sighash
 * @param {number} inputIndex
 * @param {Script} subscript
 * @param {satoshisBN} input's amount
 * @return {Signature}
 */ function sign(transaction, privateKey, sighashType, inputIndex, subscript, satoshisBN, flags) {
    var hashbuf = sighash(transaction, sighashType, inputIndex, subscript, satoshisBN, flags);
    var sig = ECDSA.sign(hashbuf, privateKey, "little").set({
        nhashtype: sighashType
    });
    return sig;
}
/**
 * Verify a signature
 *
 * @name Signing.verify
 * @param {Transaction} transaction
 * @param {Signature} signature
 * @param {PublicKey} publicKey
 * @param {number} inputIndex
 * @param {Script} subscript
 * @param {satoshisBN} input's amount
 * @param {flags} verification flags
 * @return {boolean}
 */ function verify(transaction, signature, publicKey, inputIndex, subscript, satoshisBN, flags) {
    $.checkArgument(!_.isUndefined(transaction));
    $.checkArgument(!_.isUndefined(signature) && !_.isUndefined(signature.nhashtype));
    var hashbuf = sighash(transaction, signature.nhashtype, inputIndex, subscript, satoshisBN, flags);
    return ECDSA.verify(hashbuf, signature, publicKey, "little");
}
/**
 * @namespace Signing
 */ module.exports = {
    sighashPreimage: sighashPreimage,
    sighash: sighash,
    sign: sign,
    verify: verify
};

},{"buffer":"fCgem","../crypto/signature":"axUut","../script":"FcGOz","./output":"hePxj","../encoding/bufferreader":"icuYB","../encoding/bufferwriter":"a0ZPc","../crypto/bn":"35huv","../crypto/hash":"jgMGE","../crypto/ecdsa":"b9rFw","../util/preconditions":"c91dJ","../script/interpreter":"8BEKS","../util/_":"f1m1Z","./transaction":"ibKkK","./input":"cwgR2"}],"hePxj":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var BN = require("../crypto/bn");
var buffer = require("buffer");
var JSUtil = require("../util/js");
var BufferWriter = require("../encoding/bufferwriter");
var Varint = require("../encoding/varint");
var Script = require("../script");
var $ = require("../util/preconditions");
var errors = require("../errors");
var MAX_SAFE_INTEGER = 0x1fffffffffffff;
function Output(args) {
    if (!(this instanceof Output)) return new Output(args);
    if (_.isObject(args)) {
        this.satoshis = args.satoshis;
        if (Buffer.isBuffer(args.script)) this._scriptBuffer = args.script;
        else {
            var script;
            if (_.isString(args.script) && JSUtil.isHexa(args.script)) script = buffer.Buffer.from(args.script, "hex");
            else script = args.script;
            this.setScript(script);
        }
    } else throw new TypeError("Unrecognized argument for Output");
}
Object.defineProperty(Output.prototype, "script", {
    configurable: false,
    enumerable: true,
    get: function() {
        if (this._script) return this._script;
        else {
            this.setScriptFromBuffer(this._scriptBuffer);
            return this._script;
        }
    }
});
Object.defineProperty(Output.prototype, "satoshis", {
    configurable: false,
    enumerable: true,
    get: function() {
        return this._satoshis;
    },
    set: function(num) {
        if (num instanceof BN) {
            this._satoshisBN = num;
            this._satoshis = num.toNumber();
        } else if (_.isString(num)) {
            this._satoshis = parseInt(num);
            this._satoshisBN = BN.fromNumber(this._satoshis);
        } else {
            $.checkArgument(JSUtil.isNaturalNumber(num), "Output satoshis is not a natural number");
            this._satoshisBN = BN.fromNumber(num);
            this._satoshis = num;
        }
        $.checkState(JSUtil.isNaturalNumber(this._satoshis), "Output satoshis is not a natural number");
    }
});
Output.prototype.invalidSatoshis = function() {
    if (this._satoshis > MAX_SAFE_INTEGER) return "transaction txout satoshis greater than max safe integer";
    if (this._satoshis !== this._satoshisBN.toNumber()) return "transaction txout satoshis has corrupted value";
    if (this._satoshis < 0) return "transaction txout negative";
    return false;
};
Object.defineProperty(Output.prototype, "satoshisBN", {
    configurable: false,
    enumerable: true,
    get: function() {
        return this._satoshisBN;
    },
    set: function(num) {
        this._satoshisBN = num;
        this._satoshis = num.toNumber();
        $.checkState(JSUtil.isNaturalNumber(this._satoshis), "Output satoshis is not a natural number");
    }
});
Output.prototype.toObject = Output.prototype.toJSON = function toObject() {
    var obj = {
        satoshis: this.satoshis
    };
    obj.script = this._scriptBuffer.toString("hex");
    return obj;
};
Output.fromObject = function(data) {
    return new Output(data);
};
Output.prototype.setScriptFromBuffer = function(buffer) {
    this._scriptBuffer = buffer;
    try {
        this._script = Script.fromBuffer(this._scriptBuffer);
        this._script._isOutput = true;
    } catch (e) {
        if (e instanceof errors.Script.InvalidBuffer) this._script = null;
        else throw e;
    }
};
Output.prototype.setScript = function(script) {
    if (script instanceof Script) {
        this._scriptBuffer = script.toBuffer();
        this._script = script;
        this._script._isOutput = true;
    } else if (_.isString(script)) {
        this._script = Script.fromString(script);
        this._scriptBuffer = this._script.toBuffer();
        this._script._isOutput = true;
    } else if (Buffer.isBuffer(script)) this.setScriptFromBuffer(script);
    else throw new TypeError("Invalid argument type: script");
    return this;
};
Output.prototype.inspect = function() {
    var scriptStr;
    if (this.script) scriptStr = this.script.inspect();
    else scriptStr = this._scriptBuffer.toString("hex");
    return "<Output (" + this.satoshis + " sats) " + scriptStr + ">";
};
Output.fromBufferReader = function(br) {
    var obj = {};
    obj.satoshis = br.readUInt64LEBN();
    var size = br.readVarintNum();
    if (size !== 0) obj.script = br.read(size);
    else obj.script = buffer.Buffer.from([]);
    return new Output(obj);
};
Output.prototype.toBufferWriter = function(writer) {
    if (!writer) writer = new BufferWriter();
    writer.writeUInt64LEBN(this._satoshisBN);
    var script = this._scriptBuffer;
    writer.writeVarintNum(script.length);
    writer.write(script);
    return writer;
};
// 8    value
// ???  script size (VARINT)
// ???  script
Output.prototype.getSize = function() {
    var scriptSize = this.script.toBuffer().length;
    var varintSize = Varint(scriptSize).toBuffer().length;
    return 8 + varintSize + scriptSize;
};
module.exports = Output;

},{"buffer":"fCgem","../util/_":"f1m1Z","../crypto/bn":"35huv","../util/js":"it7yM","../encoding/bufferwriter":"a0ZPc","../encoding/varint":"dhZFE","../script":"FcGOz","../util/preconditions":"c91dJ","../errors":"9UULR"}],"b9rFw":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var BN = require("./bn");
var Point = require("./point");
var Signature = require("./signature");
var PublicKey = require("../publickey");
var Random = require("./random");
var Hash = require("./hash");
var _ = require("../util/_");
var $ = require("../util/preconditions");
var ECDSA = function ECDSA(obj) {
    if (!(this instanceof ECDSA)) return new ECDSA(obj);
    if (obj) this.set(obj);
};
ECDSA.prototype.set = function(obj) {
    this.hashbuf = obj.hashbuf || this.hashbuf;
    this.endian = obj.endian || this.endian // the endianness of hashbuf
    ;
    this.privkey = obj.privkey || this.privkey;
    this.pubkey = obj.pubkey || (this.privkey ? this.privkey.publicKey : this.pubkey);
    this.sig = obj.sig || this.sig;
    this.k = obj.k || this.k;
    this.verified = obj.verified || this.verified;
    return this;
};
ECDSA.prototype.privkey2pubkey = function() {
    this.pubkey = this.privkey.toPublicKey();
};
ECDSA.prototype.calci = function() {
    for(var i = 0; i < 4; i++){
        this.sig.i = i;
        var Qprime;
        try {
            Qprime = this.toPublicKey();
        } catch (e) {
            console.error(e);
            continue;
        }
        if (Qprime.point.eq(this.pubkey.point)) {
            this.sig.compressed = this.pubkey.compressed;
            return this;
        }
    }
    this.sig.i = undefined;
    throw new Error("Unable to find valid recovery factor");
};
ECDSA.fromString = function(str) {
    var obj = JSON.parse(str);
    return new ECDSA(obj);
};
ECDSA.prototype.randomK = function() {
    var N = Point.getN();
    var k;
    do k = BN.fromBuffer(Random.getRandomBuffer(32));
    while (!(k.lt(N) && k.gt(BN.Zero)));
    this.k = k;
    return this;
};
// https://tools.ietf.org/html/rfc6979#section-3.2
ECDSA.prototype.deterministicK = function(badrs) {
    // if r or s were invalid when this function was used in signing,
    // we do not want to actually compute r, s here for efficiency, so,
    // we can increment badrs. explained at end of RFC 6979 section 3.2
    if (_.isUndefined(badrs)) badrs = 0;
    var v = Buffer.alloc(32);
    v.fill(0x01);
    var k = Buffer.alloc(32);
    k.fill(0x00);
    var x = this.privkey.bn.toBuffer({
        size: 32
    });
    var hashbuf = this.endian === "little" ? Buffer.from(this.hashbuf).reverse() : this.hashbuf;
    k = Hash.sha256hmac(Buffer.concat([
        v,
        Buffer.from([
            0x00
        ]),
        x,
        hashbuf
    ]), k);
    v = Hash.sha256hmac(v, k);
    k = Hash.sha256hmac(Buffer.concat([
        v,
        Buffer.from([
            0x01
        ]),
        x,
        hashbuf
    ]), k);
    v = Hash.sha256hmac(v, k);
    v = Hash.sha256hmac(v, k);
    var T = BN.fromBuffer(v);
    var N = Point.getN();
    // also explained in 3.2, we must ensure T is in the proper range (0, N)
    for(var i = 0; i < badrs || !(T.lt(N) && T.gt(BN.Zero)); i++){
        k = Hash.sha256hmac(Buffer.concat([
            v,
            Buffer.from([
                0x00
            ])
        ]), k);
        v = Hash.sha256hmac(v, k);
        v = Hash.sha256hmac(v, k);
        T = BN.fromBuffer(v);
    }
    this.k = T;
    return this;
};
// Information about public key recovery:
// https://bitcointalk.org/index.php?topic=6430.0
// http://stackoverflow.com/questions/19665491/how-do-i-get-an-ecdsa-public-key-from-just-a-bitcoin-signature-sec1-4-1-6-k
ECDSA.prototype.toPublicKey = function() {
    var i = this.sig.i;
    $.checkArgument(i === 0 || i === 1 || i === 2 || i === 3, new Error("i must be equal to 0, 1, 2, or 3"));
    var e = BN.fromBuffer(this.hashbuf);
    var r = this.sig.r;
    var s = this.sig.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = i & 1;
    // The more significant bit specifies whether we should use the
    // first or second candidate key.
    var isSecondKey = i >> 1;
    var n = Point.getN();
    var G = Point.getG();
    // 1.1 Let x = r + jn
    var x = isSecondKey ? r.add(n) : r;
    var R = Point.fromX(isYOdd, x);
    // 1.4 Check that nR is at infinity
    var nR = R.mul(n);
    if (!nR.isInfinity()) throw new Error("nR is not a valid curve point");
    // Compute -e from e
    var eNeg = e.neg().umod(n);
    // 1.6.1 Compute Q = r^-1 (sR - eG)
    // Q = r^-1 (sR + -eG)
    var rInv = r.invm(n);
    // var Q = R.multiplyTwo(s, G, eNeg).mul(rInv);
    var Q = R.mul(s).add(G.mul(eNeg)).mul(rInv);
    var pubkey = PublicKey.fromPoint(Q, this.sig.compressed);
    return pubkey;
};
ECDSA.prototype.sigError = function() {
    if (!Buffer.isBuffer(this.hashbuf) || this.hashbuf.length !== 32) return "hashbuf must be a 32 byte buffer";
    var r = this.sig.r;
    var s = this.sig.s;
    if (!(r.gt(BN.Zero) && r.lt(Point.getN())) || !(s.gt(BN.Zero) && s.lt(Point.getN()))) return "r and s not in range";
    var e = BN.fromBuffer(this.hashbuf, this.endian ? {
        endian: this.endian
    } : undefined);
    var n = Point.getN();
    var sinv = s.invm(n);
    var u1 = sinv.mul(e).umod(n);
    var u2 = sinv.mul(r).umod(n);
    var p = Point.getG().mulAdd(u1, this.pubkey.point, u2);
    if (p.isInfinity()) return "p is infinity";
    if (p.getX().umod(n).cmp(r) !== 0) return "Invalid signature";
    else return false;
};
ECDSA.toLowS = function(s) {
    // enforce low s
    // see BIP 62, "low S values in signatures"
    if (s.gt(BN.fromBuffer(Buffer.from("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0", "hex")))) s = Point.getN().sub(s);
    return s;
};
ECDSA.prototype._findSignature = function(d, e) {
    var N = Point.getN();
    var G = Point.getG();
    // try different values of k until r, s are valid
    var badrs = 0;
    var k, Q, r, s;
    do {
        if (!this.k || badrs > 0) this.deterministicK(badrs);
        badrs++;
        k = this.k;
        Q = G.mul(k);
        r = Q.x.umod(N);
        s = k.invm(N).mul(e.add(d.mul(r))).umod(N);
    }while (r.cmp(BN.Zero) <= 0 || s.cmp(BN.Zero) <= 0);
    s = ECDSA.toLowS(s);
    return {
        s: s,
        r: r
    };
};
ECDSA.prototype.sign = function() {
    var hashbuf = this.hashbuf;
    var privkey = this.privkey;
    var d = privkey.bn;
    $.checkState(hashbuf && privkey && d, new Error("invalid parameters"));
    $.checkState(Buffer.isBuffer(hashbuf) && hashbuf.length === 32, new Error("hashbuf must be a 32 byte buffer"));
    var e = BN.fromBuffer(hashbuf, this.endian ? {
        endian: this.endian
    } : undefined);
    var obj = this._findSignature(d, e);
    obj.compressed = this.pubkey.compressed;
    this.sig = new Signature(obj);
    return this;
};
ECDSA.prototype.signRandomK = function() {
    this.randomK();
    return this.sign();
};
ECDSA.prototype.toString = function() {
    var obj = {};
    if (this.hashbuf) obj.hashbuf = this.hashbuf.toString("hex");
    if (this.privkey) obj.privkey = this.privkey.toString();
    if (this.pubkey) obj.pubkey = this.pubkey.toString();
    if (this.sig) obj.sig = this.sig.toString();
    if (this.k) obj.k = this.k.toString();
    return JSON.stringify(obj);
};
ECDSA.prototype.verify = function() {
    if (!this.sigError()) this.verified = true;
    else this.verified = false;
    return this;
};
ECDSA.sign = function(hashbuf, privkey, endian) {
    return ECDSA().set({
        hashbuf: hashbuf,
        endian: endian,
        privkey: privkey
    }).sign().sig;
};
ECDSA.signWithCalcI = function(hashbuf, privkey, endian) {
    return ECDSA().set({
        hashbuf: hashbuf,
        endian: endian,
        privkey: privkey
    }).sign().calci().sig;
};
ECDSA.signRandomK = function(hashbuf, privkey, endian) {
    return ECDSA().set({
        hashbuf: hashbuf,
        endian: endian,
        privkey: privkey
    }).signRandomK().sig;
};
ECDSA.verify = function(hashbuf, sig, pubkey, endian) {
    return ECDSA().set({
        hashbuf: hashbuf,
        endian: endian,
        sig: sig,
        pubkey: pubkey
    }).verify().verified;
};
module.exports = ECDSA;

},{"buffer":"fCgem","./bn":"35huv","./point":"2XxZb","./signature":"axUut","../publickey":"cwKNK","./random":"0GrP8","./hash":"jgMGE","../util/_":"f1m1Z","../util/preconditions":"c91dJ"}],"cwgR2":[function(require,module,exports) {
module.exports = require("./input");
module.exports.PublicKey = require("./publickey");
module.exports.PublicKeyHash = require("./publickeyhash");
module.exports.MultiSig = require("./multisig.js");
module.exports.MultiSigScriptHash = require("./multisigscripthash.js");

},{"./input":"eJ7eQ","./publickey":"aikXO","./publickeyhash":"gR0l5","./multisig.js":"g91Op","./multisigscripthash.js":"kKgwi"}],"eJ7eQ":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../../util/_");
var $ = require("../../util/preconditions");
var errors = require("../../errors");
var BufferWriter = require("../../encoding/bufferwriter");
var buffer = require("buffer");
var JSUtil = require("../../util/js");
var Script = require("../../script");
var Sighash = require("../sighash");
var Output = require("../output");
var MAXINT = 0xffffffff // Math.pow(2, 32) - 1;
;
var DEFAULT_RBF_SEQNUMBER = MAXINT - 2;
var DEFAULT_SEQNUMBER = MAXINT;
var DEFAULT_LOCKTIME_SEQNUMBER = MAXINT - 1;
function Input(params) {
    if (!(this instanceof Input)) return new Input(params);
    if (params) return this._fromObject(params);
}
Input.MAXINT = MAXINT;
Input.DEFAULT_SEQNUMBER = DEFAULT_SEQNUMBER;
Input.DEFAULT_LOCKTIME_SEQNUMBER = DEFAULT_LOCKTIME_SEQNUMBER;
Input.DEFAULT_RBF_SEQNUMBER = DEFAULT_RBF_SEQNUMBER;
// txid + output index + sequence number
Input.BASE_SIZE = 40;
Object.defineProperty(Input.prototype, "script", {
    configurable: false,
    enumerable: true,
    get: function() {
        if (this.isNull()) return null;
        if (!this._script) {
            this._script = new Script(this._scriptBuffer);
            this._script._isInput = true;
        }
        return this._script;
    }
});
Input.fromObject = function(obj) {
    $.checkArgument(_.isObject(obj));
    var input = new Input();
    return input._fromObject(obj);
};
Input.prototype._fromObject = function(params) {
    var prevTxId;
    if (_.isString(params.prevTxId) && JSUtil.isHexa(params.prevTxId)) prevTxId = buffer.Buffer.from(params.prevTxId, "hex");
    else prevTxId = params.prevTxId;
    this.output = params.output ? params.output instanceof Output ? params.output : new Output(params.output) : undefined;
    this.prevTxId = prevTxId || params.txidbuf;
    this.outputIndex = _.isUndefined(params.outputIndex) ? params.txoutnum : params.outputIndex;
    this.sequenceNumber = _.isUndefined(params.sequenceNumber) ? _.isUndefined(params.seqnum) ? DEFAULT_SEQNUMBER : params.seqnum : params.sequenceNumber;
    if (_.isUndefined(params.script) && _.isUndefined(params.scriptBuffer)) throw new errors.Transaction.Input.MissingScript();
    this.setScript(params.scriptBuffer || params.script);
    return this;
};
Input.prototype.toObject = Input.prototype.toJSON = function toObject() {
    var obj = {
        prevTxId: this.prevTxId.toString("hex"),
        outputIndex: this.outputIndex,
        sequenceNumber: this.sequenceNumber,
        script: this._scriptBuffer.toString("hex")
    };
    // add human readable form if input contains valid script
    if (this.script) obj.scriptString = this.script.toString();
    if (this.output) obj.output = this.output.toObject();
    return obj;
};
Input.fromBufferReader = function(br) {
    var input = new Input();
    input.prevTxId = br.readReverse(32);
    input.outputIndex = br.readUInt32LE();
    input._scriptBuffer = br.readVarLengthBuffer();
    input.sequenceNumber = br.readUInt32LE();
    // TODO: return different classes according to which input it is
    // e.g: CoinbaseInput, PublicKeyHashInput, MultiSigScriptHashInput, etc.
    return input;
};
Input.prototype.toBufferWriter = function(writer) {
    if (!writer) writer = new BufferWriter();
    writer.writeReverse(this.prevTxId);
    writer.writeUInt32LE(this.outputIndex);
    var script = this._scriptBuffer;
    writer.writeVarintNum(script.length);
    writer.write(script);
    writer.writeUInt32LE(this.sequenceNumber);
    return writer;
};
Input.prototype.setScript = function(script) {
    this._script = null;
    if (script instanceof Script) {
        this._script = script;
        this._script._isInput = true;
        this._scriptBuffer = script.toBuffer();
    } else if (script === null) {
        this._script = Script.empty();
        this._script._isInput = true;
        this._scriptBuffer = this._script.toBuffer();
    } else if (JSUtil.isHexa(script)) // hex string script
    this._scriptBuffer = buffer.Buffer.from(script, "hex");
    else if (_.isString(script)) {
        // human readable string script
        this._script = new Script(script);
        this._script._isInput = true;
        this._scriptBuffer = this._script.toBuffer();
    } else if (Buffer.isBuffer(script)) // buffer script
    this._scriptBuffer = buffer.Buffer.from(script);
    else throw new TypeError("Invalid argument type: script");
    return this;
};
/**
 * Retrieve signatures for the provided PrivateKey.
 *
 * @param {Transaction} transaction - the transaction to be signed
 * @param {PrivateKey} privateKey - the private key to use when signing
 * @param {number} inputIndex - the index of this input in the provided transaction
 * @param {number} sigType - defaults to Signature.SIGHASH_ALL
 * @param {Buffer} addressHash - if provided, don't calculate the hash of the
 *     public key associated with the private key provided
 * @abstract
 */ Input.prototype.getSignatures = function() {
    throw new errors.AbstractMethodInvoked("Trying to sign unsupported output type (only P2PKH and P2SH multisig inputs are supported) for input: " + JSON.stringify(this));
};
Input.prototype.isFullySigned = function() {
    throw new errors.AbstractMethodInvoked("Input#isFullySigned");
};
Input.prototype.isFinal = function() {
    return this.sequenceNumber === Input.MAXINT;
};
Input.prototype.addSignature = function() {
    throw new errors.AbstractMethodInvoked("Input#addSignature");
};
Input.prototype.clearSignatures = function() {
    throw new errors.AbstractMethodInvoked("Input#clearSignatures");
};
Input.prototype.isValidSignature = function(transaction, signature) {
    // FIXME: Refactor signature so this is not necessary
    signature.signature.nhashtype = signature.sigtype;
    return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.output.script, this.output.satoshisBN);
};
/**
 * @returns true if this is a coinbase input (represents no input)
 */ Input.prototype.isNull = function() {
    return this.prevTxId.toString("hex") === "0000000000000000000000000000000000000000000000000000000000000000" && this.outputIndex === 0xffffffff;
};
Input.prototype._estimateSize = function() {
    return this.toBufferWriter().toBuffer().length;
};
module.exports = Input;

},{"buffer":"fCgem","../../util/_":"f1m1Z","../../util/preconditions":"c91dJ","../../errors":"9UULR","../../encoding/bufferwriter":"a0ZPc","../../util/js":"it7yM","../../script":"FcGOz","../sighash":"hsca5","../output":"hePxj"}],"aikXO":[function(require,module,exports) {
"use strict";
var inherits = require("inherits");
var $ = require("../../util/preconditions");
var Input = require("./input");
var Output = require("../output");
var Sighash = require("../sighash");
var Script = require("../../script");
var Signature = require("../../crypto/signature");
var TransactionSignature = require("../signature");
/**
 * Represents a special kind of input of PayToPublicKey kind.
 * @constructor
 */ function PublicKeyInput() {
    Input.apply(this, arguments);
}
inherits(PublicKeyInput, Input);
/**
 * @param {Transaction} transaction - the transaction to be signed
 * @param {PrivateKey} privateKey - the private key with which to sign the transaction
 * @param {number} index - the index of the input in the transaction input vector
 * @param {number=} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL
 * @return {Array} of objects that can be
 */ PublicKeyInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype) {
    $.checkState(this.output instanceof Output);
    sigtype = sigtype || Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;
    var publicKey = privateKey.toPublicKey();
    if (publicKey.toString() === this.output.script.getPublicKey().toString("hex")) return [
        new TransactionSignature({
            publicKey: publicKey,
            prevTxId: this.prevTxId,
            outputIndex: this.outputIndex,
            inputIndex: index,
            signature: Sighash.sign(transaction, privateKey, sigtype, index, this.output.script, this.output.satoshisBN),
            sigtype: sigtype
        })
    ];
    return [];
};
/**
 * Add the provided signature
 *
 * @param {Object} signature
 * @param {PublicKey} signature.publicKey
 * @param {Signature} signature.signature
 * @param {number=} signature.sigtype
 * @return {PublicKeyInput} this, for chaining
 */ PublicKeyInput.prototype.addSignature = function(transaction, signature) {
    $.checkState(this.isValidSignature(transaction, signature), "Signature is invalid");
    this.setScript(Script.buildPublicKeyIn(signature.signature.toDER(), signature.sigtype));
    return this;
};
/**
 * Clear the input's signature
 * @return {PublicKeyHashInput} this, for chaining
 */ PublicKeyInput.prototype.clearSignatures = function() {
    this.setScript(Script.empty());
    return this;
};
/**
 * Query whether the input is signed
 * @return {boolean}
 */ PublicKeyInput.prototype.isFullySigned = function() {
    return this.script.isPublicKeyIn();
};
// 32   txid
// 4    output index
// ---
// 1    script size (VARINT)
// 1    signature size (OP_PUSHDATA)
// <=72 signature (DER + SIGHASH type)
// ---
// 4    sequence number
PublicKeyInput.SCRIPT_MAX_SIZE = 74;
PublicKeyInput.prototype._estimateSize = function() {
    return Input.BASE_SIZE + PublicKeyInput.SCRIPT_MAX_SIZE;
};
module.exports = PublicKeyInput;

},{"inherits":"bRL3M","../../util/preconditions":"c91dJ","./input":"eJ7eQ","../output":"hePxj","../sighash":"hsca5","../../script":"FcGOz","../../crypto/signature":"axUut","../signature":"iQYQL"}],"iQYQL":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var $ = require("../util/preconditions");
var inherits = require("inherits");
var JSUtil = require("../util/js");
var PublicKey = require("../publickey");
var errors = require("../errors");
var Signature = require("../crypto/signature");
/**
 * @desc
 * Wrapper around Signature with fields related to signing a transaction specifically
 *
 * @param {Object|string|TransactionSignature} arg
 * @constructor
 */ function TransactionSignature(arg) {
    if (!(this instanceof TransactionSignature)) return new TransactionSignature(arg);
    if (arg instanceof TransactionSignature) return arg;
    if (_.isObject(arg)) return this._fromObject(arg);
    throw new errors.InvalidArgument("TransactionSignatures must be instantiated from an object");
}
inherits(TransactionSignature, Signature);
TransactionSignature.prototype._fromObject = function(arg) {
    this._checkObjectArgs(arg);
    this.publicKey = new PublicKey(arg.publicKey);
    this.prevTxId = Buffer.isBuffer(arg.prevTxId) ? arg.prevTxId : Buffer.from(arg.prevTxId, "hex");
    this.outputIndex = arg.outputIndex;
    this.inputIndex = arg.inputIndex;
    this.signature = arg.signature instanceof Signature ? arg.signature : Buffer.isBuffer(arg.signature) ? Signature.fromBuffer(arg.signature) : Signature.fromString(arg.signature);
    this.sigtype = arg.sigtype;
    return this;
};
TransactionSignature.prototype._checkObjectArgs = function(arg) {
    $.checkArgument(PublicKey(arg.publicKey), "publicKey");
    $.checkArgument(!_.isUndefined(arg.inputIndex), "inputIndex");
    $.checkArgument(!_.isUndefined(arg.outputIndex), "outputIndex");
    $.checkState(_.isNumber(arg.inputIndex), "inputIndex must be a number");
    $.checkState(_.isNumber(arg.outputIndex), "outputIndex must be a number");
    $.checkArgument(arg.signature, "signature");
    $.checkArgument(arg.prevTxId, "prevTxId");
    $.checkState(arg.signature instanceof Signature || Buffer.isBuffer(arg.signature) || JSUtil.isHexa(arg.signature), "signature must be a buffer or hexa value");
    $.checkState(Buffer.isBuffer(arg.prevTxId) || JSUtil.isHexa(arg.prevTxId), "prevTxId must be a buffer or hexa value");
    $.checkArgument(arg.sigtype, "sigtype");
    $.checkState(_.isNumber(arg.sigtype), "sigtype must be a number");
};
/**
 * Serializes a transaction to a plain JS object
 * @return {Object}
 */ TransactionSignature.prototype.toObject = TransactionSignature.prototype.toJSON = function toObject() {
    return {
        publicKey: this.publicKey.toString(),
        prevTxId: this.prevTxId.toString("hex"),
        outputIndex: this.outputIndex,
        inputIndex: this.inputIndex,
        signature: this.signature.toString(),
        sigtype: this.sigtype
    };
};
/**
 * Builds a TransactionSignature from an object
 * @param {Object} object
 * @return {TransactionSignature}
 */ TransactionSignature.fromObject = function(object) {
    $.checkArgument(object);
    return new TransactionSignature(object);
};
module.exports = TransactionSignature;

},{"buffer":"fCgem","../util/_":"f1m1Z","../util/preconditions":"c91dJ","inherits":"bRL3M","../util/js":"it7yM","../publickey":"cwKNK","../errors":"9UULR","../crypto/signature":"axUut"}],"gR0l5":[function(require,module,exports) {
"use strict";
var inherits = require("inherits");
var $ = require("../../util/preconditions");
var Hash = require("../../crypto/hash");
var Input = require("./input");
var Output = require("../output");
var Sighash = require("../sighash");
var Script = require("../../script");
var Signature = require("../../crypto/signature");
var TransactionSignature = require("../signature");
/**
 * Represents a special kind of input of PayToPublicKeyHash kind.
 * @constructor
 */ function PublicKeyHashInput() {
    Input.apply(this, arguments);
}
inherits(PublicKeyHashInput, Input);
/**
 * @param {Transaction} transaction - the transaction to be signed
 * @param {PrivateKey} privateKey - the private key with which to sign the transaction
 * @param {number} index - the index of the input in the transaction input vector
 * @param {number=} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL
 * @param {Buffer=} hashData - the precalculated hash of the public key associated with the privateKey provided
 * @return {Array} of objects that can be
 */ PublicKeyHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData) {
    $.checkState(this.output instanceof Output);
    hashData = hashData || Hash.sha256ripemd160(privateKey.publicKey.toBuffer());
    sigtype = sigtype || Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;
    if (hashData.equals(this.output.script.getPublicKeyHash())) return [
        new TransactionSignature({
            publicKey: privateKey.publicKey,
            prevTxId: this.prevTxId,
            outputIndex: this.outputIndex,
            inputIndex: index,
            signature: Sighash.sign(transaction, privateKey, sigtype, index, this.output.script, this.output.satoshisBN),
            sigtype: sigtype
        })
    ];
    return [];
};
/**
 * Add the provided signature
 *
 * @param {Object} signature
 * @param {PublicKey} signature.publicKey
 * @param {Signature} signature.signature
 * @param {number=} signature.sigtype
 * @return {PublicKeyHashInput} this, for chaining
 */ PublicKeyHashInput.prototype.addSignature = function(transaction, signature) {
    $.checkState(this.isValidSignature(transaction, signature), "Signature is invalid");
    this.setScript(Script.buildPublicKeyHashIn(signature.publicKey, signature.signature.toDER(), signature.sigtype));
    return this;
};
/**
 * Clear the input's signature
 * @return {PublicKeyHashInput} this, for chaining
 */ PublicKeyHashInput.prototype.clearSignatures = function() {
    this.setScript(Script.empty());
    return this;
};
/**
 * Query whether the input is signed
 * @return {boolean}
 */ PublicKeyHashInput.prototype.isFullySigned = function() {
    return this.script.isPublicKeyHashIn();
};
// 32   txid
// 4    output index
// --- script ---
// 1    script size (VARINT)
// 1    signature size (OP_PUSHDATA)
// <=72 signature (DER + SIGHASH type)
// 1    public key size (OP_PUSHDATA)
// 33   compressed public key
//
// 4    sequence number
PublicKeyHashInput.SCRIPT_MAX_SIZE = 108;
PublicKeyHashInput.prototype._estimateSize = function() {
    return Input.BASE_SIZE + PublicKeyHashInput.SCRIPT_MAX_SIZE;
};
module.exports = PublicKeyHashInput;

},{"inherits":"bRL3M","../../util/preconditions":"c91dJ","../../crypto/hash":"jgMGE","./input":"eJ7eQ","../output":"hePxj","../sighash":"hsca5","../../script":"FcGOz","../../crypto/signature":"axUut","../signature":"iQYQL"}],"g91Op":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../../util/_");
var inherits = require("inherits");
var Input = require("./input");
var Output = require("../output");
var $ = require("../../util/preconditions");
var Script = require("../../script");
var Signature = require("../../crypto/signature");
var Sighash = require("../sighash");
var TransactionSignature = require("../signature");
var PublicKey = require("../../publickey");
var Varint = require("../../encoding/varint");
/**
 * @constructor
 */ function MultiSigInput(input, pubkeys, threshold, signatures) {
    Input.apply(this, arguments);
    var self = this;
    pubkeys = pubkeys || input.publicKeys;
    threshold = threshold || input.threshold;
    signatures = signatures || input.signatures;
    this.publicKeys = pubkeys.map((k)=>k.toString("hex")).sort().map((k)=>new PublicKey(k));
    $.checkState(Script.buildMultisigOut(this.publicKeys, threshold).equals(this.output.script), "Provided public keys don't match to the provided output script");
    this.publicKeyIndex = {};
    _.each(this.publicKeys, function(publicKey, index) {
        self.publicKeyIndex[publicKey.toString()] = index;
    });
    this.threshold = threshold;
    // Empty array of signatures
    this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);
}
inherits(MultiSigInput, Input);
MultiSigInput.prototype.toObject = function() {
    var obj = Input.prototype.toObject.apply(this, arguments);
    obj.threshold = this.threshold;
    obj.publicKeys = _.map(this.publicKeys, function(publicKey) {
        return publicKey.toString();
    });
    obj.signatures = this._serializeSignatures();
    return obj;
};
MultiSigInput.prototype._deserializeSignatures = function(signatures) {
    return _.map(signatures, function(signature) {
        if (!signature) return undefined;
        return new TransactionSignature(signature);
    });
};
MultiSigInput.prototype._serializeSignatures = function() {
    return _.map(this.signatures, function(signature) {
        if (!signature) return undefined;
        return signature.toObject();
    });
};
MultiSigInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype) {
    $.checkState(this.output instanceof Output);
    sigtype = sigtype || Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;
    var self = this;
    var results = [];
    _.each(this.publicKeys, function(publicKey) {
        if (publicKey.toString() === privateKey.publicKey.toString()) results.push(new TransactionSignature({
            publicKey: privateKey.publicKey,
            prevTxId: self.prevTxId,
            outputIndex: self.outputIndex,
            inputIndex: index,
            signature: Sighash.sign(transaction, privateKey, sigtype, index, self.output.script, self.output.satoshisBN),
            sigtype: sigtype
        }));
    });
    return results;
};
MultiSigInput.prototype.addSignature = function(transaction, signature) {
    $.checkState(!this.isFullySigned(), "All needed signatures have already been added");
    $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]), "Signature has no matching public key");
    $.checkState(this.isValidSignature(transaction, signature));
    this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;
    this._updateScript();
    return this;
};
MultiSigInput.prototype._updateScript = function() {
    this.setScript(Script.buildMultisigIn(this.publicKeys, this.threshold, this._createSignatures()));
    return this;
};
MultiSigInput.prototype._createSignatures = function() {
    return _.map(_.filter(this.signatures, function(signature) {
        return !_.isUndefined(signature);
    }), function(signature) {
        return Buffer.concat([
            signature.signature.toDER(),
            Buffer.from([
                signature.sigtype & 0xff
            ])
        ]);
    });
};
MultiSigInput.prototype.clearSignatures = function() {
    this.signatures = new Array(this.publicKeys.length);
    this._updateScript();
};
MultiSigInput.prototype.isFullySigned = function() {
    return this.countSignatures() === this.threshold;
};
MultiSigInput.prototype.countMissingSignatures = function() {
    return this.threshold - this.countSignatures();
};
MultiSigInput.prototype.countSignatures = function() {
    return _.reduce(this.signatures, function(sum, signature) {
        return sum + !!signature;
    }, 0);
};
MultiSigInput.prototype.publicKeysWithoutSignature = function() {
    var self = this;
    return _.filter(this.publicKeys, function(publicKey) {
        return !self.signatures[self.publicKeyIndex[publicKey.toString()]];
    });
};
MultiSigInput.prototype.isValidSignature = function(transaction, signature) {
    // FIXME: Refactor signature so this is not necessary
    signature.signature.nhashtype = signature.sigtype;
    return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.output.script, this.output.satoshisBN);
};
/**
 *
 * @param {Buffer[]} signatures
 * @param {PublicKey[]} publicKeys
 * @param {Transaction} transaction
 * @param {Integer} inputIndex
 * @param {Input} input
 * @returns {TransactionSignature[]}
 */ MultiSigInput.normalizeSignatures = function(transaction, input, inputIndex, signatures, publicKeys) {
    return publicKeys.map(function(pubKey) {
        var signatureMatch = null;
        signatures = signatures.filter(function(signatureBuffer) {
            if (signatureMatch) return true;
            var signature = new TransactionSignature({
                signature: Signature.fromTxFormat(signatureBuffer),
                publicKey: pubKey,
                prevTxId: input.prevTxId,
                outputIndex: input.outputIndex,
                inputIndex: inputIndex,
                sigtype: Signature.SIGHASH_ALL
            });
            signature.signature.nhashtype = signature.sigtype;
            var isMatch = Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, input.output.script);
            if (isMatch) {
                signatureMatch = signature;
                return false;
            }
            return true;
        });
        return signatureMatch || null;
    });
};
// 32   txid
// 4    output index
// --- script ---
// ??? script size (VARINT)
// 1    OP_0
// --- signature list ---
//      1       signature size (OP_PUSHDATA)
//      <=72    signature (DER + SIGHASH type)
//
// 4    sequence number
MultiSigInput.SIGNATURE_SIZE = 73;
MultiSigInput.prototype._estimateSize = function() {
    var scriptSize = 1 + this.threshold * MultiSigInput.SIGNATURE_SIZE;
    return Input.BASE_SIZE + Varint(scriptSize).toBuffer().length + scriptSize;
};
module.exports = MultiSigInput;

},{"buffer":"fCgem","../../util/_":"f1m1Z","inherits":"bRL3M","./input":"eJ7eQ","../output":"hePxj","../../util/preconditions":"c91dJ","../../script":"FcGOz","../../crypto/signature":"axUut","../sighash":"hsca5","../signature":"iQYQL","../../publickey":"cwKNK","../../encoding/varint":"dhZFE"}],"kKgwi":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../../util/_");
var inherits = require("inherits");
var Input = require("./input");
var Output = require("../output");
var $ = require("../../util/preconditions");
var Script = require("../../script");
var Signature = require("../../crypto/signature");
var Sighash = require("../sighash");
var TransactionSignature = require("../signature");
var PublicKey = require("../../publickey");
var Varint = require("../../encoding/varint");
/**
 * @constructor
 */ function MultiSigScriptHashInput(input, pubkeys, threshold, signatures) {
    Input.apply(this, arguments);
    var self = this;
    pubkeys = pubkeys || input.publicKeys;
    threshold = threshold || input.threshold;
    signatures = signatures || input.signatures;
    this.publicKeys = pubkeys.map((k)=>k.toString("hex")).sort().map((k)=>new PublicKey(k));
    this.redeemScript = Script.buildMultisigOut(this.publicKeys, threshold);
    $.checkState(Script.buildScriptHashOut(this.redeemScript).equals(this.output.script), "Provided public keys don't hash to the provided output");
    this.publicKeyIndex = {};
    _.each(this.publicKeys, function(publicKey, index) {
        self.publicKeyIndex[publicKey.toString()] = index;
    });
    this.threshold = threshold;
    // Empty array of signatures
    this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);
}
inherits(MultiSigScriptHashInput, Input);
MultiSigScriptHashInput.prototype.toObject = function() {
    var obj = Input.prototype.toObject.apply(this, arguments);
    obj.threshold = this.threshold;
    obj.publicKeys = _.map(this.publicKeys, function(publicKey) {
        return publicKey.toString();
    });
    obj.signatures = this._serializeSignatures();
    return obj;
};
MultiSigScriptHashInput.prototype._deserializeSignatures = function(signatures) {
    return _.map(signatures, function(signature) {
        if (!signature) return undefined;
        return new TransactionSignature(signature);
    });
};
MultiSigScriptHashInput.prototype._serializeSignatures = function() {
    return _.map(this.signatures, function(signature) {
        if (!signature) return undefined;
        return signature.toObject();
    });
};
MultiSigScriptHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype) {
    $.checkState(this.output instanceof Output);
    sigtype = sigtype || Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;
    var self = this;
    var results = [];
    _.each(this.publicKeys, function(publicKey) {
        if (publicKey.toString() === privateKey.publicKey.toString()) results.push(new TransactionSignature({
            publicKey: privateKey.publicKey,
            prevTxId: self.prevTxId,
            outputIndex: self.outputIndex,
            inputIndex: index,
            signature: Sighash.sign(transaction, privateKey, sigtype, index, self.redeemScript, self.output.satoshisBN),
            sigtype: sigtype
        }));
    });
    return results;
};
MultiSigScriptHashInput.prototype.addSignature = function(transaction, signature) {
    $.checkState(!this.isFullySigned(), "All needed signatures have already been added");
    $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]), "Signature has no matching public key");
    $.checkState(this.isValidSignature(transaction, signature));
    this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;
    this._updateScript();
    return this;
};
MultiSigScriptHashInput.prototype._updateScript = function() {
    this.setScript(Script.buildP2SHMultisigIn(this.publicKeys, this.threshold, this._createSignatures(), {
        cachedMultisig: this.redeemScript
    }));
    return this;
};
MultiSigScriptHashInput.prototype._createSignatures = function() {
    return _.map(_.filter(this.signatures, function(signature) {
        return !_.isUndefined(signature);
    }), function(signature) {
        return Buffer.concat([
            signature.signature.toDER(),
            Buffer.from([
                signature.sigtype & 0xff
            ])
        ]);
    });
};
MultiSigScriptHashInput.prototype.clearSignatures = function() {
    this.signatures = new Array(this.publicKeys.length);
    this._updateScript();
};
MultiSigScriptHashInput.prototype.isFullySigned = function() {
    return this.countSignatures() === this.threshold;
};
MultiSigScriptHashInput.prototype.countMissingSignatures = function() {
    return this.threshold - this.countSignatures();
};
MultiSigScriptHashInput.prototype.countSignatures = function() {
    return _.reduce(this.signatures, function(sum, signature) {
        return sum + !!signature;
    }, 0);
};
MultiSigScriptHashInput.prototype.publicKeysWithoutSignature = function() {
    var self = this;
    return _.filter(this.publicKeys, function(publicKey) {
        return !self.signatures[self.publicKeyIndex[publicKey.toString()]];
    });
};
MultiSigScriptHashInput.prototype.isValidSignature = function(transaction, signature) {
    // FIXME: Refactor signature so this is not necessary
    signature.signature.nhashtype = signature.sigtype;
    return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.redeemScript, this.output.satoshisBN);
};
// 32   txid
// 4    output index
// --- script ---
// ???  script size (VARINT)
// 1    OP_0
// --- signature list ---
//      1       signature size (OP_PUSHDATA)
//      <=72    signature (DER + SIGHASH type)
//
// ???  redeem script size (OP_PUSHDATA)
// --- redeem script ---
//      1       OP_2
//      --- public key list ---
//      1       public key size (OP_PUSHDATA)
//      33      compressed public key
//
//      1       OP_3
//      1       OP_CHECKMULTISIG
//
// 4    sequence number
MultiSigScriptHashInput.SIGNATURE_SIZE = 73;
MultiSigScriptHashInput.PUBKEY_SIZE = 34;
MultiSigScriptHashInput.prototype._estimateSize = function() {
    var pubKeysSize = this.publicKeys.length * MultiSigScriptHashInput.PUBKEY_SIZE;
    var sigsSize = this.threshold * MultiSigScriptHashInput.SIGNATURE_SIZE;
    var redeemScriptSize = 3 + pubKeysSize;
    var redeemScriptPushdataSize = redeemScriptSize <= 75 ? 1 : redeemScriptSize <= 255 ? 2 : 3;
    var scriptLength = sigsSize + 1 + redeemScriptPushdataSize + redeemScriptSize;
    return Input.BASE_SIZE + Varint(scriptLength).toBuffer().length + scriptLength;
};
module.exports = MultiSigScriptHashInput;

},{"buffer":"fCgem","../../util/_":"f1m1Z","inherits":"bRL3M","./input":"eJ7eQ","../output":"hePxj","../../util/preconditions":"c91dJ","../../script":"FcGOz","../../crypto/signature":"axUut","../sighash":"hsca5","../signature":"iQYQL","../../publickey":"cwKNK","../../encoding/varint":"dhZFE"}],"7PXRj":[function(require,module,exports) {
"use strict";
var _ = require("../util/_");
var $ = require("../util/preconditions");
var JSUtil = require("../util/js");
var Script = require("../script");
var Address = require("../address");
/**
 * Represents an unspent output information: its script, associated amount and address,
 * transaction id and output index.
 *
 * @constructor
 * @param {object} data
 * @param {string} data.txid the previous transaction id
 * @param {string=} data.txId alias for `txid`
 * @param {number} data.vout the index in the transaction
 * @param {number=} data.outputIndex alias for `vout`
 * @param {string|Script} data.scriptPubKey the script that must be resolved to release the funds
 * @param {string|Script=} data.script alias for `scriptPubKey`
 * @param {number} data.amount amount of bitcoins associated
 * @param {number=} data.satoshis alias for `amount`, but expressed in satoshis (1 BSV = 1e8 satoshis)
 * @param {string|Address=} data.address the associated address to the script, if provided
 */ function UnspentOutput(data) {
    if (!(this instanceof UnspentOutput)) return new UnspentOutput(data);
    $.checkArgument(_.isObject(data), "Must provide an object from where to extract data");
    var address = data.address ? new Address(data.address) : undefined;
    var txId = data.txid ? data.txid : data.txId;
    if (!txId || !JSUtil.isHexaString(txId) || txId.length > 64) // TODO: Use the errors library
    throw new Error("Invalid TXID in object", data);
    var outputIndex = _.isUndefined(data.vout) ? data.outputIndex : data.vout;
    if (!_.isNumber(outputIndex)) throw new Error("Invalid outputIndex, received " + outputIndex);
    $.checkArgument(!_.isUndefined(data.scriptPubKey) || !_.isUndefined(data.script), "Must provide the scriptPubKey for that output!");
    var script = new Script(data.scriptPubKey || data.script);
    $.checkArgument(!_.isUndefined(data.amount) || !_.isUndefined(data.satoshis), "Must provide an amount for the output");
    var amount = !_.isUndefined(data.amount) ? Math.round(data.amount * 1e8) : data.satoshis;
    $.checkArgument(_.isNumber(amount), "Amount must be a number");
    JSUtil.defineImmutable(this, {
        address: address,
        txId: txId,
        outputIndex: outputIndex,
        script: script,
        satoshis: amount
    });
}
/**
 * Provide an informative output when displaying this object in the console
 * @returns string
 */ UnspentOutput.prototype.inspect = function() {
    return "<UnspentOutput: " + this.txId + ":" + this.outputIndex + ", satoshis: " + this.satoshis + ", address: " + this.address + ">";
};
/**
 * String representation: just "txid:index"
 * @returns string
 */ UnspentOutput.prototype.toString = function() {
    return this.txId + ":" + this.outputIndex;
};
/**
 * Deserialize an UnspentOutput from an object
 * @param {object|string} data
 * @return UnspentOutput
 */ UnspentOutput.fromObject = function(data) {
    return new UnspentOutput(data);
};
/**
 * Returns a plain object (no prototype or methods) with the associated info for this output
 * @return {object}
 */ UnspentOutput.prototype.toObject = UnspentOutput.prototype.toJSON = function toObject() {
    return {
        address: this.address ? this.address.toString() : undefined,
        txid: this.txId,
        vout: this.outputIndex,
        scriptPubKey: this.script.toBuffer().toString("hex"),
        amount: Number.parseFloat((this.satoshis / 1e8).toFixed(8))
    };
};
module.exports = UnspentOutput;

},{"../util/_":"f1m1Z","../util/preconditions":"c91dJ","../util/js":"it7yM","../script":"FcGOz","../address":"lDqbu"}],"eAQrC":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var assert = require("assert");
var buffer = require("buffer");
var _ = require("./util/_");
var $ = require("./util/preconditions");
var BN = require("./crypto/bn");
var Base58 = require("./encoding/base58");
var Base58Check = require("./encoding/base58check");
var Hash = require("./crypto/hash");
var Network = require("./networks");
var Point = require("./crypto/point");
var PrivateKey = require("./privatekey");
var Random = require("./crypto/random");
var errors = require("./errors");
var hdErrors = errors.HDPrivateKey;
var JSUtil = require("./util/js");
var MINIMUM_ENTROPY_BITS = 128;
var BITS_TO_BYTES = 0.125;
var MAXIMUM_ENTROPY_BITS = 512;
/**
 * Represents an instance of an hierarchically derived private key.
 *
 * More info on https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
 *
 * @constructor
 * @param {string|Buffer|Object} arg
 */ function HDPrivateKey(arg) {
    if (arg instanceof HDPrivateKey) return arg;
    if (!(this instanceof HDPrivateKey)) return new HDPrivateKey(arg);
    if (!arg) return this._generateRandomly();
    if (Network.get(arg)) return this._generateRandomly(arg);
    else if (_.isString(arg) || Buffer.isBuffer(arg)) {
        if (HDPrivateKey.isValidSerialized(arg)) this._buildFromSerialized(arg);
        else if (JSUtil.isValidJSON(arg)) this._buildFromJSON(arg);
        else if (Buffer.isBuffer(arg) && HDPrivateKey.isValidSerialized(arg.toString())) this._buildFromSerialized(arg.toString());
        else throw HDPrivateKey.getSerializedError(arg);
    } else if (_.isObject(arg)) this._buildFromObject(arg);
    else throw new hdErrors.UnrecognizedArgument(arg);
}
HDPrivateKey.fromRandom = function() {
    return new HDPrivateKey();
};
/**
 * Verifies that a given path is valid.
 *
 * @param {string|number} arg
 * @param {boolean?} hardened
 * @return {boolean}
 */ HDPrivateKey.isValidPath = function(arg, hardened) {
    if (_.isString(arg)) {
        var indexes = HDPrivateKey._getDerivationIndexes(arg);
        return indexes !== null && _.every(indexes, HDPrivateKey.isValidPath);
    }
    if (_.isNumber(arg)) {
        if (arg < HDPrivateKey.Hardened && hardened === true) arg += HDPrivateKey.Hardened;
        return arg >= 0 && arg < HDPrivateKey.MaxIndex;
    }
    return false;
};
/**
 * Internal function that splits a string path into a derivation index array.
 * It will return null if the string path is malformed.
 * It does not validate if indexes are in bounds.
 *
 * @param {string} path
 * @return {Array}
 */ HDPrivateKey._getDerivationIndexes = function(path) {
    var steps = path.split("/");
    // Special cases:
    if (_.includes(HDPrivateKey.RootElementAlias, path)) return [];
    if (!_.includes(HDPrivateKey.RootElementAlias, steps[0])) return null;
    var indexes = steps.slice(1).map(function(step) {
        var isHardened = step.slice(-1) === "'";
        if (isHardened) step = step.slice(0, -1);
        if (!step || step[0] === "-") return NaN;
        var index = +step // cast to number
        ;
        if (isHardened) index += HDPrivateKey.Hardened;
        return index;
    });
    return _.some(indexes, isNaN) ? null : indexes;
};
/**
 * WARNING: This method is deprecated. Use deriveChild or deriveNonCompliantChild instead. This is not BIP32 compliant
 *
 *
 * Get a derived child based on a string or number.
 *
 * If the first argument is a string, it's parsed as the full path of
 * derivation. Valid values for this argument include "m" (which returns the
 * same private key), "m/0/1/40/2'/1000", where the ' quote means a hardened
 * derivation.
 *
 * If the first argument is a number, the child with that index will be
 * derived. If the second argument is truthy, the hardened version will be
 * derived. See the example usage for clarification.
 *
 * @example
 * ```javascript
 * var parent = new HDPrivateKey('xprv...');
 * var child_0_1_2h = parent.derive(0).derive(1).derive(2, true);
 * var copy_of_child_0_1_2h = parent.derive("m/0/1/2'");
 * assert(child_0_1_2h.xprivkey === copy_of_child_0_1_2h);
 * ```
 *
 * @param {string|number} arg
 * @param {boolean?} hardened
 */ HDPrivateKey.prototype.derive = function() {
    throw new Error("derive has been deprecated. use deriveChild or, for the old way, deriveNonCompliantChild.");
};
/**
 * WARNING: This method will not be officially supported until v1.0.0.
 *
 *
 * Get a derived child based on a string or number.
 *
 * If the first argument is a string, it's parsed as the full path of
 * derivation. Valid values for this argument include "m" (which returns the
 * same private key), "m/0/1/40/2'/1000", where the ' quote means a hardened
 * derivation.
 *
 * If the first argument is a number, the child with that index will be
 * derived. If the second argument is truthy, the hardened version will be
 * derived. See the example usage for clarification.
 *
 * WARNING: The `nonCompliant` option should NOT be used, except for older implementation
 * that used a derivation strategy that used a non-zero padded private key.
 *
 * @example
 * ```javascript
 * var parent = new HDPrivateKey('xprv...');
 * var child_0_1_2h = parent.deriveChild(0).deriveChild(1).deriveChild(2, true);
 * var copy_of_child_0_1_2h = parent.deriveChild("m/0/1/2'");
 * assert(child_0_1_2h.xprivkey === copy_of_child_0_1_2h);
 * ```
 *
 * @param {string|number} arg
 * @param {boolean?} hardened
 */ HDPrivateKey.prototype.deriveChild = function(arg, hardened) {
    if (_.isNumber(arg)) return this._deriveWithNumber(arg, hardened);
    else if (_.isString(arg)) return this._deriveFromString(arg);
    else throw new hdErrors.InvalidDerivationArgument(arg);
};
/**
 * WARNING: This method will not be officially supported until v1.0.0
 *
 *
 * WARNING: If this is a new implementation you should NOT use this method, you should be using
 * `derive` instead.
 *
 * This method is explicitly for use and compatibility with an implementation that
 * was not compliant with BIP32 regarding the derivation algorithm. The private key
 * must be 32 bytes hashing, and this implementation will use the non-zero padded
 * serialization of a private key, such that it's still possible to derive the privateKey
 * to recover those funds.
 *
 * @param {string|number} arg
 * @param {boolean?} hardened
 */ HDPrivateKey.prototype.deriveNonCompliantChild = function(arg, hardened) {
    if (_.isNumber(arg)) return this._deriveWithNumber(arg, hardened, true);
    else if (_.isString(arg)) return this._deriveFromString(arg, true);
    else throw new hdErrors.InvalidDerivationArgument(arg);
};
HDPrivateKey.prototype._deriveWithNumber = function(index, hardened, nonCompliant) {
    if (!HDPrivateKey.isValidPath(index, hardened)) throw new hdErrors.InvalidPath(index);
    hardened = index >= HDPrivateKey.Hardened ? true : hardened;
    if (index < HDPrivateKey.Hardened && hardened === true) index += HDPrivateKey.Hardened;
    var indexBuffer = JSUtil.integerAsBuffer(index);
    var data;
    if (hardened && nonCompliant) {
        // The private key serialization in this case will not be exactly 32 bytes and can be
        // any value less, and the value is not zero-padded.
        var nonZeroPadded = this.privateKey.bn.toBuffer();
        data = Buffer.concat([
            buffer.Buffer.from([
                0
            ]),
            nonZeroPadded,
            indexBuffer
        ]);
    } else if (hardened) {
        // This will use a 32 byte zero padded serialization of the private key
        var privateKeyBuffer = this.privateKey.bn.toBuffer({
            size: 32
        });
        assert(privateKeyBuffer.length === 32, "length of private key buffer is expected to be 32 bytes");
        data = Buffer.concat([
            buffer.Buffer.from([
                0
            ]),
            privateKeyBuffer,
            indexBuffer
        ]);
    } else data = Buffer.concat([
        this.publicKey.toBuffer(),
        indexBuffer
    ]);
    var hash = Hash.sha512hmac(data, this._buffers.chainCode);
    var leftPart = BN.fromBuffer(hash.slice(0, 32), {
        size: 32
    });
    var chainCode = hash.slice(32, 64);
    var privateKey = leftPart.add(this.privateKey.toBigNumber()).umod(Point.getN()).toBuffer({
        size: 32
    });
    if (!PrivateKey.isValid(privateKey)) // Index at this point is already hardened, we can pass null as the hardened arg
    return this._deriveWithNumber(index + 1, null, nonCompliant);
    var derived = new HDPrivateKey({
        network: this.network,
        depth: this.depth + 1,
        parentFingerPrint: this.fingerPrint,
        childIndex: index,
        chainCode: chainCode,
        privateKey: privateKey
    });
    return derived;
};
HDPrivateKey.prototype._deriveFromString = function(path, nonCompliant) {
    if (!HDPrivateKey.isValidPath(path)) throw new hdErrors.InvalidPath(path);
    var indexes = HDPrivateKey._getDerivationIndexes(path);
    var derived = indexes.reduce(function(prev, index) {
        return prev._deriveWithNumber(index, null, nonCompliant);
    }, this);
    return derived;
};
/**
 * Verifies that a given serialized private key in base58 with checksum format
 * is valid.
 *
 * @param {string|Buffer} data - the serialized private key
 * @param {string|Network=} network - optional, if present, checks that the
 *     network provided matches the network serialized.
 * @return {boolean}
 */ HDPrivateKey.isValidSerialized = function(data, network) {
    return !HDPrivateKey.getSerializedError(data, network);
};
/**
 * Checks what's the error that causes the validation of a serialized private key
 * in base58 with checksum to fail.
 *
 * @param {string|Buffer} data - the serialized private key
 * @param {string|Network=} network - optional, if present, checks that the
 *     network provided matches the network serialized.
 * @return {errors.InvalidArgument|null}
 */ HDPrivateKey.getSerializedError = function(data, network) {
    if (!(_.isString(data) || Buffer.isBuffer(data))) return new hdErrors.UnrecognizedArgument("Expected string or buffer");
    if (!Base58.validCharacters(data)) return new errors.InvalidB58Char("(unknown)", data);
    try {
        data = Base58Check.decode(data);
    } catch (e) {
        return new errors.InvalidB58Checksum(data);
    }
    if (data.length !== HDPrivateKey.DataLength) return new hdErrors.InvalidLength(data);
    if (!_.isUndefined(network)) {
        var error = HDPrivateKey._validateNetwork(data, network);
        if (error) return error;
    }
    return null;
};
HDPrivateKey._validateNetwork = function(data, networkArg) {
    var network = Network.get(networkArg);
    if (!network) return new errors.InvalidNetworkArgument(networkArg);
    var version = data.slice(0, 4);
    if (version.readUInt32BE(0) !== network.xprivkey) return new errors.InvalidNetwork(version);
    return null;
};
HDPrivateKey.fromString = function(arg) {
    $.checkArgument(_.isString(arg), "No valid string was provided");
    return new HDPrivateKey(arg);
};
HDPrivateKey.fromObject = function(arg) {
    $.checkArgument(_.isObject(arg), "No valid argument was provided");
    return new HDPrivateKey(arg);
};
HDPrivateKey.prototype._buildFromJSON = function(arg) {
    return this._buildFromObject(JSON.parse(arg));
};
HDPrivateKey.prototype._buildFromObject = function(arg) {
    // TODO: Type validation
    var buffers = {
        version: arg.network ? JSUtil.integerAsBuffer(Network.get(arg.network).xprivkey) : arg.version,
        depth: _.isNumber(arg.depth) ? Buffer.from([
            arg.depth & 0xff
        ]) : arg.depth,
        parentFingerPrint: _.isNumber(arg.parentFingerPrint) ? JSUtil.integerAsBuffer(arg.parentFingerPrint) : arg.parentFingerPrint,
        childIndex: _.isNumber(arg.childIndex) ? JSUtil.integerAsBuffer(arg.childIndex) : arg.childIndex,
        chainCode: _.isString(arg.chainCode) ? Buffer.from(arg.chainCode, "hex") : arg.chainCode,
        privateKey: _.isString(arg.privateKey) && JSUtil.isHexa(arg.privateKey) ? Buffer.from(arg.privateKey, "hex") : arg.privateKey,
        checksum: arg.checksum ? arg.checksum.length ? arg.checksum : JSUtil.integerAsBuffer(arg.checksum) : undefined
    };
    return this._buildFromBuffers(buffers);
};
HDPrivateKey.prototype._buildFromSerialized = function(arg) {
    var decoded = Base58Check.decode(arg);
    var buffers = {
        version: decoded.slice(HDPrivateKey.VersionStart, HDPrivateKey.VersionEnd),
        depth: decoded.slice(HDPrivateKey.DepthStart, HDPrivateKey.DepthEnd),
        parentFingerPrint: decoded.slice(HDPrivateKey.ParentFingerPrintStart, HDPrivateKey.ParentFingerPrintEnd),
        childIndex: decoded.slice(HDPrivateKey.ChildIndexStart, HDPrivateKey.ChildIndexEnd),
        chainCode: decoded.slice(HDPrivateKey.ChainCodeStart, HDPrivateKey.ChainCodeEnd),
        privateKey: decoded.slice(HDPrivateKey.PrivateKeyStart, HDPrivateKey.PrivateKeyEnd),
        checksum: decoded.slice(HDPrivateKey.ChecksumStart, HDPrivateKey.ChecksumEnd),
        xprivkey: arg
    };
    return this._buildFromBuffers(buffers);
};
HDPrivateKey.prototype._generateRandomly = function(network) {
    return HDPrivateKey.fromSeed(Random.getRandomBuffer(64), network);
};
/**
 * Generate a private key from a seed, as described in BIP32
 *
 * @param {string|Buffer} hexa
 * @param {*} network
 * @return HDPrivateKey
 */ HDPrivateKey.fromSeed = function(hexa, network) {
    if (JSUtil.isHexaString(hexa)) hexa = Buffer.from(hexa, "hex");
    if (!Buffer.isBuffer(hexa)) throw new hdErrors.InvalidEntropyArgument(hexa);
    if (hexa.length < MINIMUM_ENTROPY_BITS * BITS_TO_BYTES) throw new hdErrors.InvalidEntropyArgument.NotEnoughEntropy(hexa);
    if (hexa.length > MAXIMUM_ENTROPY_BITS * BITS_TO_BYTES) throw new hdErrors.InvalidEntropyArgument.TooMuchEntropy(hexa);
    var hash = Hash.sha512hmac(hexa, buffer.Buffer.from("Bitcoin seed"));
    return new HDPrivateKey({
        network: Network.get(network) || Network.defaultNetwork,
        depth: 0,
        parentFingerPrint: 0,
        childIndex: 0,
        privateKey: hash.slice(0, 32),
        chainCode: hash.slice(32, 64)
    });
};
HDPrivateKey.prototype._calcHDPublicKey = function() {
    if (!this._hdPublicKey) {
        var HDPublicKey = require("./hdpublickey");
        this._hdPublicKey = new HDPublicKey(this);
    }
};
/**
 * Receives a object with buffers in all the properties and populates the
 * internal structure
 *
 * @param {Object} arg
 * @param {buffer.Buffer} arg.version
 * @param {buffer.Buffer} arg.depth
 * @param {buffer.Buffer} arg.parentFingerPrint
 * @param {buffer.Buffer} arg.childIndex
 * @param {buffer.Buffer} arg.chainCode
 * @param {buffer.Buffer} arg.privateKey
 * @param {buffer.Buffer} arg.checksum
 * @param {string=} arg.xprivkey - if set, don't recalculate the base58
 *      representation
 * @return {HDPrivateKey} this
 */ HDPrivateKey.prototype._buildFromBuffers = function(arg) {
    HDPrivateKey._validateBufferArguments(arg);
    JSUtil.defineImmutable(this, {
        _buffers: arg
    });
    var sequence = [
        arg.version,
        arg.depth,
        arg.parentFingerPrint,
        arg.childIndex,
        arg.chainCode,
        Buffer.alloc(1),
        arg.privateKey
    ];
    var concat = buffer.Buffer.concat(sequence);
    if (!arg.checksum || !arg.checksum.length) arg.checksum = Base58Check.checksum(concat);
    else {
        if (arg.checksum.toString() !== Base58Check.checksum(concat).toString()) throw new errors.InvalidB58Checksum(concat);
    }
    var network = Network.get(arg.version.readUInt32BE(0));
    var xprivkey;
    xprivkey = Base58Check.encode(buffer.Buffer.concat(sequence));
    arg.xprivkey = Buffer.from(xprivkey);
    var privateKey = new PrivateKey(BN.fromBuffer(arg.privateKey), network);
    var publicKey = privateKey.toPublicKey();
    var size = HDPrivateKey.ParentFingerPrintSize;
    var fingerPrint = Hash.sha256ripemd160(publicKey.toBuffer()).slice(0, size);
    JSUtil.defineImmutable(this, {
        xprivkey: xprivkey,
        network: network,
        depth: arg.depth[0],
        privateKey: privateKey,
        publicKey: publicKey,
        fingerPrint: fingerPrint
    });
    this._hdPublicKey = null;
    Object.defineProperty(this, "hdPublicKey", {
        configurable: false,
        enumerable: true,
        get: function() {
            this._calcHDPublicKey();
            return this._hdPublicKey;
        }
    });
    Object.defineProperty(this, "xpubkey", {
        configurable: false,
        enumerable: true,
        get: function() {
            this._calcHDPublicKey();
            return this._hdPublicKey.xpubkey;
        }
    });
    return this;
};
HDPrivateKey._validateBufferArguments = function(arg) {
    var checkBuffer = function(name, size) {
        var buff = arg[name];
        assert(Buffer.isBuffer(buff), name + " argument is not a buffer");
        assert(buff.length === size, name + " has not the expected size: found " + buff.length + ", expected " + size);
    };
    checkBuffer("version", HDPrivateKey.VersionSize);
    checkBuffer("depth", HDPrivateKey.DepthSize);
    checkBuffer("parentFingerPrint", HDPrivateKey.ParentFingerPrintSize);
    checkBuffer("childIndex", HDPrivateKey.ChildIndexSize);
    checkBuffer("chainCode", HDPrivateKey.ChainCodeSize);
    checkBuffer("privateKey", HDPrivateKey.PrivateKeySize);
    if (arg.checksum && arg.checksum.length) checkBuffer("checksum", HDPrivateKey.CheckSumSize);
};
/**
 * Returns the string representation of this private key (a string starting
 * with "xprv..."
 *
 * @return string
 */ HDPrivateKey.prototype.toString = function() {
    return this.xprivkey;
};
/**
 * Returns the console representation of this extended private key.
 * @return string
 */ HDPrivateKey.prototype.inspect = function() {
    return "<HDPrivateKey: " + this.xprivkey + ">";
};
/**
 * Returns a plain object with a representation of this private key.
 *
 * Fields include:<ul>
 * <li> network: either 'livenet' or 'testnet'
 * <li> depth: a number ranging from 0 to 255
 * <li> fingerPrint: a number ranging from 0 to 2^32-1, taken from the hash of the
 * <li>     associated public key
 * <li> parentFingerPrint: a number ranging from 0 to 2^32-1, taken from the hash
 * <li>     of this parent's associated public key or zero.
 * <li> childIndex: the index from which this child was derived (or zero)
 * <li> chainCode: an hexa string representing a number used in the derivation
 * <li> privateKey: the private key associated, in hexa representation
 * <li> xprivkey: the representation of this extended private key in checksum
 * <li>     base58 format
 * <li> checksum: the base58 checksum of xprivkey
 * </ul>
 *  @return {Object}
 */ HDPrivateKey.prototype.toObject = HDPrivateKey.prototype.toJSON = function toObject() {
    return {
        network: Network.get(this._buffers.version.readUInt32BE(0), "xprivkey").name,
        depth: this._buffers.depth[0],
        fingerPrint: this.fingerPrint.readUInt32BE(0),
        parentFingerPrint: this._buffers.parentFingerPrint.readUInt32BE(0),
        childIndex: this._buffers.childIndex.readUInt32BE(0),
        chainCode: this._buffers.chainCode.toString("hex"),
        privateKey: this.privateKey.toBuffer().toString("hex"),
        checksum: this._buffers.checksum.readUInt32BE(0),
        xprivkey: this.xprivkey
    };
};
/**
 * Build a HDPrivateKey from a buffer
 *
 * @param {Buffer} arg
 * @return {HDPrivateKey}
 */ HDPrivateKey.fromBuffer = function(buf) {
    return new HDPrivateKey(buf.toString());
};
/**
 * Build a HDPrivateKey from a hex string
 *
 * @param {string} hex
 * @return {HDPrivateKey}
 */ HDPrivateKey.fromHex = function(hex) {
    return HDPrivateKey.fromBuffer(Buffer.from(hex, "hex"));
};
/**
 * Returns a buffer representation of the HDPrivateKey
 *
 * @return {string}
 */ HDPrivateKey.prototype.toBuffer = function() {
    return Buffer.from(this.toString());
};
/**
 * Returns a hex string representation of the HDPrivateKey
 *
 * @return {string}
 */ HDPrivateKey.prototype.toHex = function() {
    return this.toBuffer().toString("hex");
};
HDPrivateKey.DefaultDepth = 0;
HDPrivateKey.DefaultFingerprint = 0;
HDPrivateKey.DefaultChildIndex = 0;
HDPrivateKey.Hardened = 0x80000000;
HDPrivateKey.MaxIndex = 2 * HDPrivateKey.Hardened;
HDPrivateKey.RootElementAlias = [
    "m",
    "M",
    "m'",
    "M'"
];
HDPrivateKey.VersionSize = 4;
HDPrivateKey.DepthSize = 1;
HDPrivateKey.ParentFingerPrintSize = 4;
HDPrivateKey.ChildIndexSize = 4;
HDPrivateKey.ChainCodeSize = 32;
HDPrivateKey.PrivateKeySize = 32;
HDPrivateKey.CheckSumSize = 4;
HDPrivateKey.DataLength = 78;
HDPrivateKey.SerializedByteSize = 82;
HDPrivateKey.VersionStart = 0;
HDPrivateKey.VersionEnd = HDPrivateKey.VersionStart + HDPrivateKey.VersionSize;
HDPrivateKey.DepthStart = HDPrivateKey.VersionEnd;
HDPrivateKey.DepthEnd = HDPrivateKey.DepthStart + HDPrivateKey.DepthSize;
HDPrivateKey.ParentFingerPrintStart = HDPrivateKey.DepthEnd;
HDPrivateKey.ParentFingerPrintEnd = HDPrivateKey.ParentFingerPrintStart + HDPrivateKey.ParentFingerPrintSize;
HDPrivateKey.ChildIndexStart = HDPrivateKey.ParentFingerPrintEnd;
HDPrivateKey.ChildIndexEnd = HDPrivateKey.ChildIndexStart + HDPrivateKey.ChildIndexSize;
HDPrivateKey.ChainCodeStart = HDPrivateKey.ChildIndexEnd;
HDPrivateKey.ChainCodeEnd = HDPrivateKey.ChainCodeStart + HDPrivateKey.ChainCodeSize;
HDPrivateKey.PrivateKeyStart = HDPrivateKey.ChainCodeEnd + 1;
HDPrivateKey.PrivateKeyEnd = HDPrivateKey.PrivateKeyStart + HDPrivateKey.PrivateKeySize;
HDPrivateKey.ChecksumStart = HDPrivateKey.PrivateKeyEnd;
HDPrivateKey.ChecksumEnd = HDPrivateKey.ChecksumStart + HDPrivateKey.CheckSumSize;
assert(HDPrivateKey.ChecksumEnd === HDPrivateKey.SerializedByteSize);
module.exports = HDPrivateKey;

},{"buffer":"fCgem","assert":"f3tT4","./util/_":"f1m1Z","./util/preconditions":"c91dJ","./crypto/bn":"35huv","./encoding/base58":"6zLJ7","./encoding/base58check":"kLrpR","./crypto/hash":"jgMGE","./networks":"ai5AV","./crypto/point":"2XxZb","./privatekey":"7qwA7","./crypto/random":"0GrP8","./errors":"9UULR","./util/js":"it7yM","./hdpublickey":"hxQwd"}],"hxQwd":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("./util/_");
var $ = require("./util/preconditions");
var BN = require("./crypto/bn");
var Base58 = require("./encoding/base58");
var Base58Check = require("./encoding/base58check");
var Hash = require("./crypto/hash");
var HDPrivateKey = require("./hdprivatekey");
var Network = require("./networks");
var Point = require("./crypto/point");
var PublicKey = require("./publickey");
var bsvErrors = require("./errors");
var errors = bsvErrors;
var hdErrors = bsvErrors.HDPublicKey;
var assert = require("assert");
var JSUtil = require("./util/js");
/**
 * The representation of an hierarchically derived public key.
 *
 * See https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
 *
 * @constructor
 * @param {Object|string|Buffer} arg
 */ function HDPublicKey(arg) {
    if (arg instanceof HDPublicKey) return arg;
    if (!(this instanceof HDPublicKey)) return new HDPublicKey(arg);
    if (arg) {
        if (_.isString(arg) || Buffer.isBuffer(arg)) {
            var error = HDPublicKey.getSerializedError(arg);
            if (!error) return this._buildFromSerialized(arg);
            else if (Buffer.isBuffer(arg) && !HDPublicKey.getSerializedError(arg.toString())) return this._buildFromSerialized(arg.toString());
            else {
                if (error instanceof hdErrors.ArgumentIsPrivateExtended) return new HDPrivateKey(arg).hdPublicKey;
                throw error;
            }
        } else {
            if (_.isObject(arg)) {
                if (arg instanceof HDPrivateKey) return this._buildFromPrivate(arg);
                else return this._buildFromObject(arg);
            } else throw new hdErrors.UnrecognizedArgument(arg);
        }
    } else throw new hdErrors.MustSupplyArgument();
}
HDPublicKey.fromHDPrivateKey = function(hdPrivateKey) {
    return new HDPublicKey(hdPrivateKey);
};
/**
 * Verifies that a given path is valid.
 *
 * @param {string|number} arg
 * @return {boolean}
 */ HDPublicKey.isValidPath = function(arg) {
    if (_.isString(arg)) {
        var indexes = HDPrivateKey._getDerivationIndexes(arg);
        return indexes !== null && _.every(indexes, HDPublicKey.isValidPath);
    }
    if (_.isNumber(arg)) return arg >= 0 && arg < HDPublicKey.Hardened;
    return false;
};
/**
 * WARNING: This method is deprecated. Use deriveChild instead.
 *
 *
 * Get a derivated child based on a string or number.
 *
 * If the first argument is a string, it's parsed as the full path of
 * derivation. Valid values for this argument include "m" (which returns the
 * same public key), "m/0/1/40/2/1000".
 *
 * Note that hardened keys can't be derived from a public extended key.
 *
 * If the first argument is a number, the child with that index will be
 * derived. See the example usage for clarification.
 *
 * @example
 * ```javascript
 * var parent = new HDPublicKey('xpub...');
 * var child_0_1_2 = parent.derive(0).derive(1).derive(2);
 * var copy_of_child_0_1_2 = parent.derive("m/0/1/2");
 * assert(child_0_1_2.xprivkey === copy_of_child_0_1_2);
 * ```
 *
 * @param {string|number} arg
 */ HDPublicKey.prototype.derive = function() {
    throw new Error("derive has been deprecated. use deriveChild or, for the old way, deriveNonCompliantChild.");
};
/**
 * WARNING: This method will not be officially supported until v1.0.0.
 *
 *
 * Get a derivated child based on a string or number.
 *
 * If the first argument is a string, it's parsed as the full path of
 * derivation. Valid values for this argument include "m" (which returns the
 * same public key), "m/0/1/40/2/1000".
 *
 * Note that hardened keys can't be derived from a public extended key.
 *
 * If the first argument is a number, the child with that index will be
 * derived. See the example usage for clarification.
 *
 * @example
 * ```javascript
 * var parent = new HDPublicKey('xpub...');
 * var child_0_1_2 = parent.deriveChild(0).deriveChild(1).deriveChild(2);
 * var copy_of_child_0_1_2 = parent.deriveChild("m/0/1/2");
 * assert(child_0_1_2.xprivkey === copy_of_child_0_1_2);
 * ```
 *
 * @param {string|number} arg
 */ HDPublicKey.prototype.deriveChild = function(arg, hardened) {
    if (_.isNumber(arg)) return this._deriveWithNumber(arg, hardened);
    else if (_.isString(arg)) return this._deriveFromString(arg);
    else throw new hdErrors.InvalidDerivationArgument(arg);
};
HDPublicKey.prototype._deriveWithNumber = function(index, hardened) {
    if (index >= HDPublicKey.Hardened || hardened) throw new hdErrors.InvalidIndexCantDeriveHardened();
    if (index < 0) throw new hdErrors.InvalidPath(index);
    var indexBuffer = JSUtil.integerAsBuffer(index);
    var data = Buffer.concat([
        this.publicKey.toBuffer(),
        indexBuffer
    ]);
    var hash = Hash.sha512hmac(data, this._buffers.chainCode);
    var leftPart = BN.fromBuffer(hash.slice(0, 32), {
        size: 32
    });
    var chainCode = hash.slice(32, 64);
    var publicKey;
    try {
        publicKey = PublicKey.fromPoint(Point.getG().mul(leftPart).add(this.publicKey.point));
    } catch (e) {
        return this._deriveWithNumber(index + 1);
    }
    var derived = new HDPublicKey({
        network: this.network,
        depth: this.depth + 1,
        parentFingerPrint: this.fingerPrint,
        childIndex: index,
        chainCode: chainCode,
        publicKey: publicKey
    });
    return derived;
};
HDPublicKey.prototype._deriveFromString = function(path) {
    if (_.includes(path, "'")) throw new hdErrors.InvalidIndexCantDeriveHardened();
    else if (!HDPublicKey.isValidPath(path)) throw new hdErrors.InvalidPath(path);
    var indexes = HDPrivateKey._getDerivationIndexes(path);
    var derived = indexes.reduce(function(prev, index) {
        return prev._deriveWithNumber(index);
    }, this);
    return derived;
};
/**
 * Verifies that a given serialized public key in base58 with checksum format
 * is valid.
 *
 * @param {string|Buffer} data - the serialized public key
 * @param {string|Network=} network - optional, if present, checks that the
 *     network provided matches the network serialized.
 * @return {boolean}
 */ HDPublicKey.isValidSerialized = function(data, network) {
    return _.isNull(HDPublicKey.getSerializedError(data, network));
};
/**
 * Checks what's the error that causes the validation of a serialized public key
 * in base58 with checksum to fail.
 *
 * @param {string|Buffer} data - the serialized public key
 * @param {string|Network=} network - optional, if present, checks that the
 *     network provided matches the network serialized.
 * @return {errors|null}
 */ HDPublicKey.getSerializedError = function(data, network) {
    if (!(_.isString(data) || Buffer.isBuffer(data))) return new hdErrors.UnrecognizedArgument("expected buffer or string");
    if (!Base58.validCharacters(data)) return new errors.InvalidB58Char("(unknown)", data);
    try {
        data = Base58Check.decode(data);
    } catch (e) {
        return new errors.InvalidB58Checksum(data);
    }
    if (data.length !== HDPublicKey.DataSize) return new hdErrors.InvalidLength(data);
    if (!_.isUndefined(network)) {
        var error = HDPublicKey._validateNetwork(data, network);
        if (error) return error;
    }
    var version = data.readUInt32BE(0);
    if (version === Network.livenet.xprivkey || version === Network.testnet.xprivkey) return new hdErrors.ArgumentIsPrivateExtended();
    return null;
};
HDPublicKey._validateNetwork = function(data, networkArg) {
    var network = Network.get(networkArg);
    if (!network) return new errors.InvalidNetworkArgument(networkArg);
    var version = data.slice(HDPublicKey.VersionStart, HDPublicKey.VersionEnd);
    if (version.readUInt32BE(0) !== network.xpubkey) return new errors.InvalidNetwork(version);
    return null;
};
HDPublicKey.prototype._buildFromPrivate = function(arg) {
    var args = _.clone(arg._buffers);
    var point = Point.getG().mul(BN.fromBuffer(args.privateKey));
    args.publicKey = Point.pointToCompressed(point);
    args.version = JSUtil.integerAsBuffer(Network.get(args.version.readUInt32BE(0)).xpubkey);
    args.privateKey = undefined;
    args.checksum = undefined;
    args.xprivkey = undefined;
    return this._buildFromBuffers(args);
};
HDPublicKey.prototype._buildFromObject = function(arg) {
    // TODO: Type validation
    var buffers = {
        version: arg.network ? JSUtil.integerAsBuffer(Network.get(arg.network).xpubkey) : arg.version,
        depth: _.isNumber(arg.depth) ? Buffer.from([
            arg.depth & 0xff
        ]) : arg.depth,
        parentFingerPrint: _.isNumber(arg.parentFingerPrint) ? JSUtil.integerAsBuffer(arg.parentFingerPrint) : arg.parentFingerPrint,
        childIndex: _.isNumber(arg.childIndex) ? JSUtil.integerAsBuffer(arg.childIndex) : arg.childIndex,
        chainCode: _.isString(arg.chainCode) ? Buffer.from(arg.chainCode, "hex") : arg.chainCode,
        publicKey: _.isString(arg.publicKey) ? Buffer.from(arg.publicKey, "hex") : Buffer.isBuffer(arg.publicKey) ? arg.publicKey : arg.publicKey.toBuffer(),
        checksum: _.isNumber(arg.checksum) ? JSUtil.integerAsBuffer(arg.checksum) : arg.checksum
    };
    return this._buildFromBuffers(buffers);
};
HDPublicKey.prototype._buildFromSerialized = function(arg) {
    var decoded = Base58Check.decode(arg);
    var buffers = {
        version: decoded.slice(HDPublicKey.VersionStart, HDPublicKey.VersionEnd),
        depth: decoded.slice(HDPublicKey.DepthStart, HDPublicKey.DepthEnd),
        parentFingerPrint: decoded.slice(HDPublicKey.ParentFingerPrintStart, HDPublicKey.ParentFingerPrintEnd),
        childIndex: decoded.slice(HDPublicKey.ChildIndexStart, HDPublicKey.ChildIndexEnd),
        chainCode: decoded.slice(HDPublicKey.ChainCodeStart, HDPublicKey.ChainCodeEnd),
        publicKey: decoded.slice(HDPublicKey.PublicKeyStart, HDPublicKey.PublicKeyEnd),
        checksum: decoded.slice(HDPublicKey.ChecksumStart, HDPublicKey.ChecksumEnd),
        xpubkey: arg
    };
    return this._buildFromBuffers(buffers);
};
/**
 * Receives a object with buffers in all the properties and populates the
 * internal structure
 *
 * @param {Object} arg
 * @param {buffer.Buffer} arg.version
 * @param {buffer.Buffer} arg.depth
 * @param {buffer.Buffer} arg.parentFingerPrint
 * @param {buffer.Buffer} arg.childIndex
 * @param {buffer.Buffer} arg.chainCode
 * @param {buffer.Buffer} arg.publicKey
 * @param {buffer.Buffer} arg.checksum
 * @param {string=} arg.xpubkey - if set, don't recalculate the base58
 *      representation
 * @return {HDPublicKey} this
 */ HDPublicKey.prototype._buildFromBuffers = function(arg) {
    HDPublicKey._validateBufferArguments(arg);
    JSUtil.defineImmutable(this, {
        _buffers: arg
    });
    var sequence = [
        arg.version,
        arg.depth,
        arg.parentFingerPrint,
        arg.childIndex,
        arg.chainCode,
        arg.publicKey
    ];
    var concat = Buffer.concat(sequence);
    var checksum = Base58Check.checksum(concat);
    if (!arg.checksum || !arg.checksum.length) arg.checksum = checksum;
    else {
        if (arg.checksum.toString("hex") !== checksum.toString("hex")) throw new errors.InvalidB58Checksum(concat, checksum);
    }
    var network = Network.get(arg.version.readUInt32BE(0));
    var xpubkey;
    xpubkey = Base58Check.encode(Buffer.concat(sequence));
    arg.xpubkey = Buffer.from(xpubkey);
    var publicKey = new PublicKey(arg.publicKey, {
        network: network
    });
    var size = HDPublicKey.ParentFingerPrintSize;
    var fingerPrint = Hash.sha256ripemd160(publicKey.toBuffer()).slice(0, size);
    JSUtil.defineImmutable(this, {
        xpubkey: xpubkey,
        network: network,
        depth: arg.depth[0],
        publicKey: publicKey,
        fingerPrint: fingerPrint
    });
    return this;
};
HDPublicKey._validateBufferArguments = function(arg) {
    var checkBuffer = function(name, size) {
        var buff = arg[name];
        assert(Buffer.isBuffer(buff), name + " argument is not a buffer, it's " + typeof buff);
        assert(buff.length === size, name + " has not the expected size: found " + buff.length + ", expected " + size);
    };
    checkBuffer("version", HDPublicKey.VersionSize);
    checkBuffer("depth", HDPublicKey.DepthSize);
    checkBuffer("parentFingerPrint", HDPublicKey.ParentFingerPrintSize);
    checkBuffer("childIndex", HDPublicKey.ChildIndexSize);
    checkBuffer("chainCode", HDPublicKey.ChainCodeSize);
    checkBuffer("publicKey", HDPublicKey.PublicKeySize);
    if (arg.checksum && arg.checksum.length) checkBuffer("checksum", HDPublicKey.CheckSumSize);
};
HDPublicKey.fromString = function(arg) {
    $.checkArgument(_.isString(arg), "No valid string was provided");
    return new HDPublicKey(arg);
};
HDPublicKey.fromObject = function(arg) {
    $.checkArgument(_.isObject(arg), "No valid argument was provided");
    return new HDPublicKey(arg);
};
/**
 * Returns the base58 checked representation of the public key
 * @return {string} a string starting with "xpub..." in livenet
 */ HDPublicKey.prototype.toString = function() {
    return this.xpubkey;
};
/**
 * Returns the console representation of this extended public key.
 * @return string
 */ HDPublicKey.prototype.inspect = function() {
    return "<HDPublicKey: " + this.xpubkey + ">";
};
/**
 * Returns a plain JavaScript object with information to reconstruct a key.
 *
 * Fields are: <ul>
 *  <li> network: 'livenet' or 'testnet'
 *  <li> depth: a number from 0 to 255, the depth to the master extended key
 *  <li> fingerPrint: a number of 32 bits taken from the hash of the public key
 *  <li> fingerPrint: a number of 32 bits taken from the hash of this key's
 *  <li>     parent's public key
 *  <li> childIndex: index with which this key was derived
 *  <li> chainCode: string in hexa encoding used for derivation
 *  <li> publicKey: string, hexa encoded, in compressed key format
 *  <li> checksum: this._buffers.checksum.readUInt32BE(0),
 *  <li> xpubkey: the string with the base58 representation of this extended key
 *  <li> checksum: the base58 checksum of xpubkey
 * </ul>
 */ HDPublicKey.prototype.toObject = HDPublicKey.prototype.toJSON = function toObject() {
    return {
        network: Network.get(this._buffers.version.readUInt32BE(0)).name,
        depth: this._buffers.depth[0],
        fingerPrint: this.fingerPrint.readUInt32BE(0),
        parentFingerPrint: this._buffers.parentFingerPrint.readUInt32BE(0),
        childIndex: this._buffers.childIndex.readUInt32BE(0),
        chainCode: this._buffers.chainCode.toString("hex"),
        publicKey: this.publicKey.toString(),
        checksum: this._buffers.checksum.readUInt32BE(0),
        xpubkey: this.xpubkey
    };
};
/**
 * Create a HDPublicKey from a buffer argument
 *
 * @param {Buffer} arg
 * @return {HDPublicKey}
 */ HDPublicKey.fromBuffer = function(arg) {
    return new HDPublicKey(arg);
};
/**
 * Create a HDPublicKey from a hex string argument
 *
 * @param {Buffer} arg
 * @return {HDPublicKey}
 */ HDPublicKey.fromHex = function(hex) {
    return HDPublicKey.fromBuffer(Buffer.from(hex, "hex"));
};
/**
 * Return a buffer representation of the xpubkey
 *
 * @return {Buffer}
 */ HDPublicKey.prototype.toBuffer = function() {
    return Buffer.from(this._buffers.xpubkey);
};
/**
 * Return a hex string representation of the xpubkey
 *
 * @return {Buffer}
 */ HDPublicKey.prototype.toHex = function() {
    return this.toBuffer().toString("hex");
};
HDPublicKey.Hardened = 0x80000000;
HDPublicKey.RootElementAlias = [
    "m",
    "M"
];
HDPublicKey.VersionSize = 4;
HDPublicKey.DepthSize = 1;
HDPublicKey.ParentFingerPrintSize = 4;
HDPublicKey.ChildIndexSize = 4;
HDPublicKey.ChainCodeSize = 32;
HDPublicKey.PublicKeySize = 33;
HDPublicKey.CheckSumSize = 4;
HDPublicKey.DataSize = 78;
HDPublicKey.SerializedByteSize = 82;
HDPublicKey.VersionStart = 0;
HDPublicKey.VersionEnd = HDPublicKey.VersionStart + HDPublicKey.VersionSize;
HDPublicKey.DepthStart = HDPublicKey.VersionEnd;
HDPublicKey.DepthEnd = HDPublicKey.DepthStart + HDPublicKey.DepthSize;
HDPublicKey.ParentFingerPrintStart = HDPublicKey.DepthEnd;
HDPublicKey.ParentFingerPrintEnd = HDPublicKey.ParentFingerPrintStart + HDPublicKey.ParentFingerPrintSize;
HDPublicKey.ChildIndexStart = HDPublicKey.ParentFingerPrintEnd;
HDPublicKey.ChildIndexEnd = HDPublicKey.ChildIndexStart + HDPublicKey.ChildIndexSize;
HDPublicKey.ChainCodeStart = HDPublicKey.ChildIndexEnd;
HDPublicKey.ChainCodeEnd = HDPublicKey.ChainCodeStart + HDPublicKey.ChainCodeSize;
HDPublicKey.PublicKeyStart = HDPublicKey.ChainCodeEnd;
HDPublicKey.PublicKeyEnd = HDPublicKey.PublicKeyStart + HDPublicKey.PublicKeySize;
HDPublicKey.ChecksumStart = HDPublicKey.PublicKeyEnd;
HDPublicKey.ChecksumEnd = HDPublicKey.ChecksumStart + HDPublicKey.CheckSumSize;
assert(HDPublicKey.PublicKeyEnd === HDPublicKey.DataSize);
assert(HDPublicKey.ChecksumEnd === HDPublicKey.SerializedByteSize);
module.exports = HDPublicKey;

},{"buffer":"fCgem","./util/_":"f1m1Z","./util/preconditions":"c91dJ","./crypto/bn":"35huv","./encoding/base58":"6zLJ7","./encoding/base58check":"kLrpR","./crypto/hash":"jgMGE","./hdprivatekey":"eAQrC","./networks":"ai5AV","./crypto/point":"2XxZb","./publickey":"cwKNK","./errors":"9UULR","assert":"f3tT4","./util/js":"it7yM"}],"jWuWU":[function(require,module,exports) {
module.exports = {
    "CHINESE": require("./chinese"),
    "ENGLISH": require("./english"),
    "FRENCH": require("./french"),
    "ITALIAN": require("./italian"),
    "JAPANESE": require("./japanese"),
    "SPANISH": require("./spanish")
};

},{"./chinese":"4X752","./english":"6V3i4","./french":"22rNm","./italian":"lyApt","./japanese":"hivIv","./spanish":"3IEai"}],"4X752":[function(require,module,exports) {
"use strict";
var chinese = [
    "的",
    "一",
    "是",
    "在",
    "不",
    "了",
    "有",
    "和",
    "人",
    "这",
    "中",
    "大",
    "为",
    "上",
    "个",
    "国",
    "我",
    "以",
    "要",
    "他",
    "时",
    "来",
    "用",
    "们",
    "生",
    "到",
    "作",
    "地",
    "于",
    "出",
    "就",
    "分",
    "对",
    "成",
    "会",
    "可",
    "主",
    "发",
    "年",
    "动",
    "同",
    "工",
    "也",
    "能",
    "下",
    "过",
    "子",
    "说",
    "产",
    "种",
    "面",
    "而",
    "方",
    "后",
    "多",
    "定",
    "行",
    "学",
    "法",
    "所",
    "民",
    "得",
    "经",
    "十",
    "三",
    "之",
    "进",
    "着",
    "等",
    "部",
    "度",
    "家",
    "电",
    "力",
    "里",
    "如",
    "水",
    "化",
    "高",
    "自",
    "二",
    "理",
    "起",
    "小",
    "物",
    "现",
    "实",
    "加",
    "量",
    "都",
    "两",
    "体",
    "制",
    "机",
    "当",
    "使",
    "点",
    "从",
    "业",
    "本",
    "去",
    "把",
    "性",
    "好",
    "应",
    "开",
    "它",
    "合",
    "还",
    "因",
    "由",
    "其",
    "些",
    "然",
    "前",
    "外",
    "天",
    "政",
    "四",
    "日",
    "那",
    "社",
    "义",
    "事",
    "平",
    "形",
    "相",
    "全",
    "表",
    "间",
    "样",
    "与",
    "关",
    "各",
    "重",
    "新",
    "线",
    "内",
    "数",
    "正",
    "心",
    "反",
    "你",
    "明",
    "看",
    "原",
    "又",
    "么",
    "利",
    "比",
    "或",
    "但",
    "质",
    "气",
    "第",
    "向",
    "道",
    "命",
    "此",
    "变",
    "条",
    "只",
    "没",
    "结",
    "解",
    "问",
    "意",
    "建",
    "月",
    "公",
    "无",
    "系",
    "军",
    "很",
    "情",
    "者",
    "最",
    "立",
    "代",
    "想",
    "已",
    "通",
    "并",
    "提",
    "直",
    "题",
    "党",
    "程",
    "展",
    "五",
    "果",
    "料",
    "象",
    "员",
    "革",
    "位",
    "入",
    "常",
    "文",
    "总",
    "次",
    "品",
    "式",
    "活",
    "设",
    "及",
    "管",
    "特",
    "件",
    "长",
    "求",
    "老",
    "头",
    "基",
    "资",
    "边",
    "流",
    "路",
    "级",
    "少",
    "图",
    "山",
    "统",
    "接",
    "知",
    "较",
    "将",
    "组",
    "见",
    "计",
    "别",
    "她",
    "手",
    "角",
    "期",
    "根",
    "论",
    "运",
    "农",
    "指",
    "几",
    "九",
    "区",
    "强",
    "放",
    "决",
    "西",
    "被",
    "干",
    "做",
    "必",
    "战",
    "先",
    "回",
    "则",
    "任",
    "取",
    "据",
    "处",
    "队",
    "南",
    "给",
    "色",
    "光",
    "门",
    "即",
    "保",
    "治",
    "北",
    "造",
    "百",
    "规",
    "热",
    "领",
    "七",
    "海",
    "口",
    "东",
    "导",
    "器",
    "压",
    "志",
    "世",
    "金",
    "增",
    "争",
    "济",
    "阶",
    "油",
    "思",
    "术",
    "极",
    "交",
    "受",
    "联",
    "什",
    "认",
    "六",
    "共",
    "权",
    "收",
    "证",
    "改",
    "清",
    "美",
    "再",
    "采",
    "转",
    "更",
    "单",
    "风",
    "切",
    "打",
    "白",
    "教",
    "速",
    "花",
    "带",
    "安",
    "场",
    "身",
    "车",
    "例",
    "真",
    "务",
    "具",
    "万",
    "每",
    "目",
    "至",
    "达",
    "走",
    "积",
    "示",
    "议",
    "声",
    "报",
    "斗",
    "完",
    "类",
    "八",
    "离",
    "华",
    "名",
    "确",
    "才",
    "科",
    "张",
    "信",
    "马",
    "节",
    "话",
    "米",
    "整",
    "空",
    "元",
    "况",
    "今",
    "集",
    "温",
    "传",
    "土",
    "许",
    "步",
    "群",
    "广",
    "石",
    "记",
    "需",
    "段",
    "研",
    "界",
    "拉",
    "林",
    "律",
    "叫",
    "且",
    "究",
    "观",
    "越",
    "织",
    "装",
    "影",
    "算",
    "低",
    "持",
    "音",
    "众",
    "书",
    "布",
    "复",
    "容",
    "儿",
    "须",
    "际",
    "商",
    "非",
    "验",
    "连",
    "断",
    "深",
    "难",
    "近",
    "矿",
    "千",
    "周",
    "委",
    "素",
    "技",
    "备",
    "半",
    "办",
    "青",
    "省",
    "列",
    "习",
    "响",
    "约",
    "支",
    "般",
    "史",
    "感",
    "劳",
    "便",
    "团",
    "往",
    "酸",
    "历",
    "市",
    "克",
    "何",
    "除",
    "消",
    "构",
    "府",
    "称",
    "太",
    "准",
    "精",
    "值",
    "号",
    "率",
    "族",
    "维",
    "划",
    "选",
    "标",
    "写",
    "存",
    "候",
    "毛",
    "亲",
    "快",
    "效",
    "斯",
    "院",
    "查",
    "江",
    "型",
    "眼",
    "王",
    "按",
    "格",
    "养",
    "易",
    "置",
    "派",
    "层",
    "片",
    "始",
    "却",
    "专",
    "状",
    "育",
    "厂",
    "京",
    "识",
    "适",
    "属",
    "圆",
    "包",
    "火",
    "住",
    "调",
    "满",
    "县",
    "局",
    "照",
    "参",
    "红",
    "细",
    "引",
    "听",
    "该",
    "铁",
    "价",
    "严",
    "首",
    "底",
    "液",
    "官",
    "德",
    "随",
    "病",
    "苏",
    "失",
    "尔",
    "死",
    "讲",
    "配",
    "女",
    "黄",
    "推",
    "显",
    "谈",
    "罪",
    "神",
    "艺",
    "呢",
    "席",
    "含",
    "企",
    "望",
    "密",
    "批",
    "营",
    "项",
    "防",
    "举",
    "球",
    "英",
    "氧",
    "势",
    "告",
    "李",
    "台",
    "落",
    "木",
    "帮",
    "轮",
    "破",
    "亚",
    "师",
    "围",
    "注",
    "远",
    "字",
    "材",
    "排",
    "供",
    "河",
    "态",
    "封",
    "另",
    "施",
    "减",
    "树",
    "溶",
    "怎",
    "止",
    "案",
    "言",
    "士",
    "均",
    "武",
    "固",
    "叶",
    "鱼",
    "波",
    "视",
    "仅",
    "费",
    "紧",
    "爱",
    "左",
    "章",
    "早",
    "朝",
    "害",
    "续",
    "轻",
    "服",
    "试",
    "食",
    "充",
    "兵",
    "源",
    "判",
    "护",
    "司",
    "足",
    "某",
    "练",
    "差",
    "致",
    "板",
    "田",
    "降",
    "黑",
    "犯",
    "负",
    "击",
    "范",
    "继",
    "兴",
    "似",
    "余",
    "坚",
    "曲",
    "输",
    "修",
    "故",
    "城",
    "夫",
    "够",
    "送",
    "笔",
    "船",
    "占",
    "右",
    "财",
    "吃",
    "富",
    "春",
    "职",
    "觉",
    "汉",
    "画",
    "功",
    "巴",
    "跟",
    "虽",
    "杂",
    "飞",
    "检",
    "吸",
    "助",
    "升",
    "阳",
    "互",
    "初",
    "创",
    "抗",
    "考",
    "投",
    "坏",
    "策",
    "古",
    "径",
    "换",
    "未",
    "跑",
    "留",
    "钢",
    "曾",
    "端",
    "责",
    "站",
    "简",
    "述",
    "钱",
    "副",
    "尽",
    "帝",
    "射",
    "草",
    "冲",
    "承",
    "独",
    "令",
    "限",
    "阿",
    "宣",
    "环",
    "双",
    "请",
    "超",
    "微",
    "让",
    "控",
    "州",
    "良",
    "轴",
    "找",
    "否",
    "纪",
    "益",
    "依",
    "优",
    "顶",
    "础",
    "载",
    "倒",
    "房",
    "突",
    "坐",
    "粉",
    "敌",
    "略",
    "客",
    "袁",
    "冷",
    "胜",
    "绝",
    "析",
    "块",
    "剂",
    "测",
    "丝",
    "协",
    "诉",
    "念",
    "陈",
    "仍",
    "罗",
    "盐",
    "友",
    "洋",
    "错",
    "苦",
    "夜",
    "刑",
    "移",
    "频",
    "逐",
    "靠",
    "混",
    "母",
    "短",
    "皮",
    "终",
    "聚",
    "汽",
    "村",
    "云",
    "哪",
    "既",
    "距",
    "卫",
    "停",
    "烈",
    "央",
    "察",
    "烧",
    "迅",
    "境",
    "若",
    "印",
    "洲",
    "刻",
    "括",
    "激",
    "孔",
    "搞",
    "甚",
    "室",
    "待",
    "核",
    "校",
    "散",
    "侵",
    "吧",
    "甲",
    "游",
    "久",
    "菜",
    "味",
    "旧",
    "模",
    "湖",
    "货",
    "损",
    "预",
    "阻",
    "毫",
    "普",
    "稳",
    "乙",
    "妈",
    "植",
    "息",
    "扩",
    "银",
    "语",
    "挥",
    "酒",
    "守",
    "拿",
    "序",
    "纸",
    "医",
    "缺",
    "雨",
    "吗",
    "针",
    "刘",
    "啊",
    "急",
    "唱",
    "误",
    "训",
    "愿",
    "审",
    "附",
    "获",
    "茶",
    "鲜",
    "粮",
    "斤",
    "孩",
    "脱",
    "硫",
    "肥",
    "善",
    "龙",
    "演",
    "父",
    "渐",
    "血",
    "欢",
    "械",
    "掌",
    "歌",
    "沙",
    "刚",
    "攻",
    "谓",
    "盾",
    "讨",
    "晚",
    "粒",
    "乱",
    "燃",
    "矛",
    "乎",
    "杀",
    "药",
    "宁",
    "鲁",
    "贵",
    "钟",
    "煤",
    "读",
    "班",
    "伯",
    "香",
    "介",
    "迫",
    "句",
    "丰",
    "培",
    "握",
    "兰",
    "担",
    "弦",
    "蛋",
    "沉",
    "假",
    "穿",
    "执",
    "答",
    "乐",
    "谁",
    "顺",
    "烟",
    "缩",
    "征",
    "脸",
    "喜",
    "松",
    "脚",
    "困",
    "异",
    "免",
    "背",
    "星",
    "福",
    "买",
    "染",
    "井",
    "概",
    "慢",
    "怕",
    "磁",
    "倍",
    "祖",
    "皇",
    "促",
    "静",
    "补",
    "评",
    "翻",
    "肉",
    "践",
    "尼",
    "衣",
    "宽",
    "扬",
    "棉",
    "希",
    "伤",
    "操",
    "垂",
    "秋",
    "宜",
    "氢",
    "套",
    "督",
    "振",
    "架",
    "亮",
    "末",
    "宪",
    "庆",
    "编",
    "牛",
    "触",
    "映",
    "雷",
    "销",
    "诗",
    "座",
    "居",
    "抓",
    "裂",
    "胞",
    "呼",
    "娘",
    "景",
    "威",
    "绿",
    "晶",
    "厚",
    "盟",
    "衡",
    "鸡",
    "孙",
    "延",
    "危",
    "胶",
    "屋",
    "乡",
    "临",
    "陆",
    "顾",
    "掉",
    "呀",
    "灯",
    "岁",
    "措",
    "束",
    "耐",
    "剧",
    "玉",
    "赵",
    "跳",
    "哥",
    "季",
    "课",
    "凯",
    "胡",
    "额",
    "款",
    "绍",
    "卷",
    "齐",
    "伟",
    "蒸",
    "殖",
    "永",
    "宗",
    "苗",
    "川",
    "炉",
    "岩",
    "弱",
    "零",
    "杨",
    "奏",
    "沿",
    "露",
    "杆",
    "探",
    "滑",
    "镇",
    "饭",
    "浓",
    "航",
    "怀",
    "赶",
    "库",
    "夺",
    "伊",
    "灵",
    "税",
    "途",
    "灭",
    "赛",
    "归",
    "召",
    "鼓",
    "播",
    "盘",
    "裁",
    "险",
    "康",
    "唯",
    "录",
    "菌",
    "纯",
    "借",
    "糖",
    "盖",
    "横",
    "符",
    "私",
    "努",
    "堂",
    "域",
    "枪",
    "润",
    "幅",
    "哈",
    "竟",
    "熟",
    "虫",
    "泽",
    "脑",
    "壤",
    "碳",
    "欧",
    "遍",
    "侧",
    "寨",
    "敢",
    "彻",
    "虑",
    "斜",
    "薄",
    "庭",
    "纳",
    "弹",
    "饲",
    "伸",
    "折",
    "麦",
    "湿",
    "暗",
    "荷",
    "瓦",
    "塞",
    "床",
    "筑",
    "恶",
    "户",
    "访",
    "塔",
    "奇",
    "透",
    "梁",
    "刀",
    "旋",
    "迹",
    "卡",
    "氯",
    "遇",
    "份",
    "毒",
    "泥",
    "退",
    "洗",
    "摆",
    "灰",
    "彩",
    "卖",
    "耗",
    "夏",
    "择",
    "忙",
    "铜",
    "献",
    "硬",
    "予",
    "繁",
    "圈",
    "雪",
    "函",
    "亦",
    "抽",
    "篇",
    "阵",
    "阴",
    "丁",
    "尺",
    "追",
    "堆",
    "雄",
    "迎",
    "泛",
    "爸",
    "楼",
    "避",
    "谋",
    "吨",
    "野",
    "猪",
    "旗",
    "累",
    "偏",
    "典",
    "馆",
    "索",
    "秦",
    "脂",
    "潮",
    "爷",
    "豆",
    "忽",
    "托",
    "惊",
    "塑",
    "遗",
    "愈",
    "朱",
    "替",
    "纤",
    "粗",
    "倾",
    "尚",
    "痛",
    "楚",
    "谢",
    "奋",
    "购",
    "磨",
    "君",
    "池",
    "旁",
    "碎",
    "骨",
    "监",
    "捕",
    "弟",
    "暴",
    "割",
    "贯",
    "殊",
    "释",
    "词",
    "亡",
    "壁",
    "顿",
    "宝",
    "午",
    "尘",
    "闻",
    "揭",
    "炮",
    "残",
    "冬",
    "桥",
    "妇",
    "警",
    "综",
    "招",
    "吴",
    "付",
    "浮",
    "遭",
    "徐",
    "您",
    "摇",
    "谷",
    "赞",
    "箱",
    "隔",
    "订",
    "男",
    "吹",
    "园",
    "纷",
    "唐",
    "败",
    "宋",
    "玻",
    "巨",
    "耕",
    "坦",
    "荣",
    "闭",
    "湾",
    "键",
    "凡",
    "驻",
    "锅",
    "救",
    "恩",
    "剥",
    "凝",
    "碱",
    "齿",
    "截",
    "炼",
    "麻",
    "纺",
    "禁",
    "废",
    "盛",
    "版",
    "缓",
    "净",
    "睛",
    "昌",
    "婚",
    "涉",
    "筒",
    "嘴",
    "插",
    "岸",
    "朗",
    "庄",
    "街",
    "藏",
    "姑",
    "贸",
    "腐",
    "奴",
    "啦",
    "惯",
    "乘",
    "伙",
    "恢",
    "匀",
    "纱",
    "扎",
    "辩",
    "耳",
    "彪",
    "臣",
    "亿",
    "璃",
    "抵",
    "脉",
    "秀",
    "萨",
    "俄",
    "网",
    "舞",
    "店",
    "喷",
    "纵",
    "寸",
    "汗",
    "挂",
    "洪",
    "贺",
    "闪",
    "柬",
    "爆",
    "烯",
    "津",
    "稻",
    "墙",
    "软",
    "勇",
    "像",
    "滚",
    "厘",
    "蒙",
    "芳",
    "肯",
    "坡",
    "柱",
    "荡",
    "腿",
    "仪",
    "旅",
    "尾",
    "轧",
    "冰",
    "贡",
    "登",
    "黎",
    "削",
    "钻",
    "勒",
    "逃",
    "障",
    "氨",
    "郭",
    "峰",
    "币",
    "港",
    "伏",
    "轨",
    "亩",
    "毕",
    "擦",
    "莫",
    "刺",
    "浪",
    "秘",
    "援",
    "株",
    "健",
    "售",
    "股",
    "岛",
    "甘",
    "泡",
    "睡",
    "童",
    "铸",
    "汤",
    "阀",
    "休",
    "汇",
    "舍",
    "牧",
    "绕",
    "炸",
    "哲",
    "磷",
    "绩",
    "朋",
    "淡",
    "尖",
    "启",
    "陷",
    "柴",
    "呈",
    "徒",
    "颜",
    "泪",
    "稍",
    "忘",
    "泵",
    "蓝",
    "拖",
    "洞",
    "授",
    "镜",
    "辛",
    "壮",
    "锋",
    "贫",
    "虚",
    "弯",
    "摩",
    "泰",
    "幼",
    "廷",
    "尊",
    "窗",
    "纲",
    "弄",
    "隶",
    "疑",
    "氏",
    "宫",
    "姐",
    "震",
    "瑞",
    "怪",
    "尤",
    "琴",
    "循",
    "描",
    "膜",
    "违",
    "夹",
    "腰",
    "缘",
    "珠",
    "穷",
    "森",
    "枝",
    "竹",
    "沟",
    "催",
    "绳",
    "忆",
    "邦",
    "剩",
    "幸",
    "浆",
    "栏",
    "拥",
    "牙",
    "贮",
    "礼",
    "滤",
    "钠",
    "纹",
    "罢",
    "拍",
    "咱",
    "喊",
    "袖",
    "埃",
    "勤",
    "罚",
    "焦",
    "潜",
    "伍",
    "墨",
    "欲",
    "缝",
    "姓",
    "刊",
    "饱",
    "仿",
    "奖",
    "铝",
    "鬼",
    "丽",
    "跨",
    "默",
    "挖",
    "链",
    "扫",
    "喝",
    "袋",
    "炭",
    "污",
    "幕",
    "诸",
    "弧",
    "励",
    "梅",
    "奶",
    "洁",
    "灾",
    "舟",
    "鉴",
    "苯",
    "讼",
    "抱",
    "毁",
    "懂",
    "寒",
    "智",
    "埔",
    "寄",
    "届",
    "跃",
    "渡",
    "挑",
    "丹",
    "艰",
    "贝",
    "碰",
    "拔",
    "爹",
    "戴",
    "码",
    "梦",
    "芽",
    "熔",
    "赤",
    "渔",
    "哭",
    "敬",
    "颗",
    "奔",
    "铅",
    "仲",
    "虎",
    "稀",
    "妹",
    "乏",
    "珍",
    "申",
    "桌",
    "遵",
    "允",
    "隆",
    "螺",
    "仓",
    "魏",
    "锐",
    "晓",
    "氮",
    "兼",
    "隐",
    "碍",
    "赫",
    "拨",
    "忠",
    "肃",
    "缸",
    "牵",
    "抢",
    "博",
    "巧",
    "壳",
    "兄",
    "杜",
    "讯",
    "诚",
    "碧",
    "祥",
    "柯",
    "页",
    "巡",
    "矩",
    "悲",
    "灌",
    "龄",
    "伦",
    "票",
    "寻",
    "桂",
    "铺",
    "圣",
    "恐",
    "恰",
    "郑",
    "趣",
    "抬",
    "荒",
    "腾",
    "贴",
    "柔",
    "滴",
    "猛",
    "阔",
    "辆",
    "妻",
    "填",
    "撤",
    "储",
    "签",
    "闹",
    "扰",
    "紫",
    "砂",
    "递",
    "戏",
    "吊",
    "陶",
    "伐",
    "喂",
    "疗",
    "瓶",
    "婆",
    "抚",
    "臂",
    "摸",
    "忍",
    "虾",
    "蜡",
    "邻",
    "胸",
    "巩",
    "挤",
    "偶",
    "弃",
    "槽",
    "劲",
    "乳",
    "邓",
    "吉",
    "仁",
    "烂",
    "砖",
    "租",
    "乌",
    "舰",
    "伴",
    "瓜",
    "浅",
    "丙",
    "暂",
    "燥",
    "橡",
    "柳",
    "迷",
    "暖",
    "牌",
    "秧",
    "胆",
    "详",
    "簧",
    "踏",
    "瓷",
    "谱",
    "呆",
    "宾",
    "糊",
    "洛",
    "辉",
    "愤",
    "竞",
    "隙",
    "怒",
    "粘",
    "乃",
    "绪",
    "肩",
    "籍",
    "敏",
    "涂",
    "熙",
    "皆",
    "侦",
    "悬",
    "掘",
    "享",
    "纠",
    "醒",
    "狂",
    "锁",
    "淀",
    "恨",
    "牲",
    "霸",
    "爬",
    "赏",
    "逆",
    "玩",
    "陵",
    "祝",
    "秒",
    "浙",
    "貌",
    "役",
    "彼",
    "悉",
    "鸭",
    "趋",
    "凤",
    "晨",
    "畜",
    "辈",
    "秩",
    "卵",
    "署",
    "梯",
    "炎",
    "滩",
    "棋",
    "驱",
    "筛",
    "峡",
    "冒",
    "啥",
    "寿",
    "译",
    "浸",
    "泉",
    "帽",
    "迟",
    "硅",
    "疆",
    "贷",
    "漏",
    "稿",
    "冠",
    "嫩",
    "胁",
    "芯",
    "牢",
    "叛",
    "蚀",
    "奥",
    "鸣",
    "岭",
    "羊",
    "凭",
    "串",
    "塘",
    "绘",
    "酵",
    "融",
    "盆",
    "锡",
    "庙",
    "筹",
    "冻",
    "辅",
    "摄",
    "袭",
    "筋",
    "拒",
    "僚",
    "旱",
    "钾",
    "鸟",
    "漆",
    "沈",
    "眉",
    "疏",
    "添",
    "棒",
    "穗",
    "硝",
    "韩",
    "逼",
    "扭",
    "侨",
    "凉",
    "挺",
    "碗",
    "栽",
    "炒",
    "杯",
    "患",
    "馏",
    "劝",
    "豪",
    "辽",
    "勃",
    "鸿",
    "旦",
    "吏",
    "拜",
    "狗",
    "埋",
    "辊",
    "掩",
    "饮",
    "搬",
    "骂",
    "辞",
    "勾",
    "扣",
    "估",
    "蒋",
    "绒",
    "雾",
    "丈",
    "朵",
    "姆",
    "拟",
    "宇",
    "辑",
    "陕",
    "雕",
    "偿",
    "蓄",
    "崇",
    "剪",
    "倡",
    "厅",
    "咬",
    "驶",
    "薯",
    "刷",
    "斥",
    "番",
    "赋",
    "奉",
    "佛",
    "浇",
    "漫",
    "曼",
    "扇",
    "钙",
    "桃",
    "扶",
    "仔",
    "返",
    "俗",
    "亏",
    "腔",
    "鞋",
    "棱",
    "覆",
    "框",
    "悄",
    "叔",
    "撞",
    "骗",
    "勘",
    "旺",
    "沸",
    "孤",
    "吐",
    "孟",
    "渠",
    "屈",
    "疾",
    "妙",
    "惜",
    "仰",
    "狠",
    "胀",
    "谐",
    "抛",
    "霉",
    "桑",
    "岗",
    "嘛",
    "衰",
    "盗",
    "渗",
    "脏",
    "赖",
    "涌",
    "甜",
    "曹",
    "阅",
    "肌",
    "哩",
    "厉",
    "烃",
    "纬",
    "毅",
    "昨",
    "伪",
    "症",
    "煮",
    "叹",
    "钉",
    "搭",
    "茎",
    "笼",
    "酷",
    "偷",
    "弓",
    "锥",
    "恒",
    "杰",
    "坑",
    "鼻",
    "翼",
    "纶",
    "叙",
    "狱",
    "逮",
    "罐",
    "络",
    "棚",
    "抑",
    "膨",
    "蔬",
    "寺",
    "骤",
    "穆",
    "冶",
    "枯",
    "册",
    "尸",
    "凸",
    "绅",
    "坯",
    "牺",
    "焰",
    "轰",
    "欣",
    "晋",
    "瘦",
    "御",
    "锭",
    "锦",
    "丧",
    "旬",
    "锻",
    "垄",
    "搜",
    "扑",
    "邀",
    "亭",
    "酯",
    "迈",
    "舒",
    "脆",
    "酶",
    "闲",
    "忧",
    "酚",
    "顽",
    "羽",
    "涨",
    "卸",
    "仗",
    "陪",
    "辟",
    "惩",
    "杭",
    "姚",
    "肚",
    "捉",
    "飘",
    "漂",
    "昆",
    "欺",
    "吾",
    "郎",
    "烷",
    "汁",
    "呵",
    "饰",
    "萧",
    "雅",
    "邮",
    "迁",
    "燕",
    "撒",
    "姻",
    "赴",
    "宴",
    "烦",
    "债",
    "帐",
    "斑",
    "铃",
    "旨",
    "醇",
    "董",
    "饼",
    "雏",
    "姿",
    "拌",
    "傅",
    "腹",
    "妥",
    "揉",
    "贤",
    "拆",
    "歪",
    "葡",
    "胺",
    "丢",
    "浩",
    "徽",
    "昂",
    "垫",
    "挡",
    "览",
    "贪",
    "慰",
    "缴",
    "汪",
    "慌",
    "冯",
    "诺",
    "姜",
    "谊",
    "凶",
    "劣",
    "诬",
    "耀",
    "昏",
    "躺",
    "盈",
    "骑",
    "乔",
    "溪",
    "丛",
    "卢",
    "抹",
    "闷",
    "咨",
    "刮",
    "驾",
    "缆",
    "悟",
    "摘",
    "铒",
    "掷",
    "颇",
    "幻",
    "柄",
    "惠",
    "惨",
    "佳",
    "仇",
    "腊",
    "窝",
    "涤",
    "剑",
    "瞧",
    "堡",
    "泼",
    "葱",
    "罩",
    "霍",
    "捞",
    "胎",
    "苍",
    "滨",
    "俩",
    "捅",
    "湘",
    "砍",
    "霞",
    "邵",
    "萄",
    "疯",
    "淮",
    "遂",
    "熊",
    "粪",
    "烘",
    "宿",
    "档",
    "戈",
    "驳",
    "嫂",
    "裕",
    "徙",
    "箭",
    "捐",
    "肠",
    "撑",
    "晒",
    "辨",
    "殿",
    "莲",
    "摊",
    "搅",
    "酱",
    "屏",
    "疫",
    "哀",
    "蔡",
    "堵",
    "沫",
    "皱",
    "畅",
    "叠",
    "阁",
    "莱",
    "敲",
    "辖",
    "钩",
    "痕",
    "坝",
    "巷",
    "饿",
    "祸",
    "丘",
    "玄",
    "溜",
    "曰",
    "逻",
    "彭",
    "尝",
    "卿",
    "妨",
    "艇",
    "吞",
    "韦",
    "怨",
    "矮",
    "歇"
];
module.exports = chinese;

},{}],"6V3i4":[function(require,module,exports) {
"use strict";
var english = [
    "abandon",
    "ability",
    "able",
    "about",
    "above",
    "absent",
    "absorb",
    "abstract",
    "absurd",
    "abuse",
    "access",
    "accident",
    "account",
    "accuse",
    "achieve",
    "acid",
    "acoustic",
    "acquire",
    "across",
    "act",
    "action",
    "actor",
    "actress",
    "actual",
    "adapt",
    "add",
    "addict",
    "address",
    "adjust",
    "admit",
    "adult",
    "advance",
    "advice",
    "aerobic",
    "affair",
    "afford",
    "afraid",
    "again",
    "age",
    "agent",
    "agree",
    "ahead",
    "aim",
    "air",
    "airport",
    "aisle",
    "alarm",
    "album",
    "alcohol",
    "alert",
    "alien",
    "all",
    "alley",
    "allow",
    "almost",
    "alone",
    "alpha",
    "already",
    "also",
    "alter",
    "always",
    "amateur",
    "amazing",
    "among",
    "amount",
    "amused",
    "analyst",
    "anchor",
    "ancient",
    "anger",
    "angle",
    "angry",
    "animal",
    "ankle",
    "announce",
    "annual",
    "another",
    "answer",
    "antenna",
    "antique",
    "anxiety",
    "any",
    "apart",
    "apology",
    "appear",
    "apple",
    "approve",
    "april",
    "arch",
    "arctic",
    "area",
    "arena",
    "argue",
    "arm",
    "armed",
    "armor",
    "army",
    "around",
    "arrange",
    "arrest",
    "arrive",
    "arrow",
    "art",
    "artefact",
    "artist",
    "artwork",
    "ask",
    "aspect",
    "assault",
    "asset",
    "assist",
    "assume",
    "asthma",
    "athlete",
    "atom",
    "attack",
    "attend",
    "attitude",
    "attract",
    "auction",
    "audit",
    "august",
    "aunt",
    "author",
    "auto",
    "autumn",
    "average",
    "avocado",
    "avoid",
    "awake",
    "aware",
    "away",
    "awesome",
    "awful",
    "awkward",
    "axis",
    "baby",
    "bachelor",
    "bacon",
    "badge",
    "bag",
    "balance",
    "balcony",
    "ball",
    "bamboo",
    "banana",
    "banner",
    "bar",
    "barely",
    "bargain",
    "barrel",
    "base",
    "basic",
    "basket",
    "battle",
    "beach",
    "bean",
    "beauty",
    "because",
    "become",
    "beef",
    "before",
    "begin",
    "behave",
    "behind",
    "believe",
    "below",
    "belt",
    "bench",
    "benefit",
    "best",
    "betray",
    "better",
    "between",
    "beyond",
    "bicycle",
    "bid",
    "bike",
    "bind",
    "biology",
    "bird",
    "birth",
    "bitter",
    "black",
    "blade",
    "blame",
    "blanket",
    "blast",
    "bleak",
    "bless",
    "blind",
    "blood",
    "blossom",
    "blouse",
    "blue",
    "blur",
    "blush",
    "board",
    "boat",
    "body",
    "boil",
    "bomb",
    "bone",
    "bonus",
    "book",
    "boost",
    "border",
    "boring",
    "borrow",
    "boss",
    "bottom",
    "bounce",
    "box",
    "boy",
    "bracket",
    "brain",
    "brand",
    "brass",
    "brave",
    "bread",
    "breeze",
    "brick",
    "bridge",
    "brief",
    "bright",
    "bring",
    "brisk",
    "broccoli",
    "broken",
    "bronze",
    "broom",
    "brother",
    "brown",
    "brush",
    "bubble",
    "buddy",
    "budget",
    "buffalo",
    "build",
    "bulb",
    "bulk",
    "bullet",
    "bundle",
    "bunker",
    "burden",
    "burger",
    "burst",
    "bus",
    "business",
    "busy",
    "butter",
    "buyer",
    "buzz",
    "cabbage",
    "cabin",
    "cable",
    "cactus",
    "cage",
    "cake",
    "call",
    "calm",
    "camera",
    "camp",
    "can",
    "canal",
    "cancel",
    "candy",
    "cannon",
    "canoe",
    "canvas",
    "canyon",
    "capable",
    "capital",
    "captain",
    "car",
    "carbon",
    "card",
    "cargo",
    "carpet",
    "carry",
    "cart",
    "case",
    "cash",
    "casino",
    "castle",
    "casual",
    "cat",
    "catalog",
    "catch",
    "category",
    "cattle",
    "caught",
    "cause",
    "caution",
    "cave",
    "ceiling",
    "celery",
    "cement",
    "census",
    "century",
    "cereal",
    "certain",
    "chair",
    "chalk",
    "champion",
    "change",
    "chaos",
    "chapter",
    "charge",
    "chase",
    "chat",
    "cheap",
    "check",
    "cheese",
    "chef",
    "cherry",
    "chest",
    "chicken",
    "chief",
    "child",
    "chimney",
    "choice",
    "choose",
    "chronic",
    "chuckle",
    "chunk",
    "churn",
    "cigar",
    "cinnamon",
    "circle",
    "citizen",
    "city",
    "civil",
    "claim",
    "clap",
    "clarify",
    "claw",
    "clay",
    "clean",
    "clerk",
    "clever",
    "click",
    "client",
    "cliff",
    "climb",
    "clinic",
    "clip",
    "clock",
    "clog",
    "close",
    "cloth",
    "cloud",
    "clown",
    "club",
    "clump",
    "cluster",
    "clutch",
    "coach",
    "coast",
    "coconut",
    "code",
    "coffee",
    "coil",
    "coin",
    "collect",
    "color",
    "column",
    "combine",
    "come",
    "comfort",
    "comic",
    "common",
    "company",
    "concert",
    "conduct",
    "confirm",
    "congress",
    "connect",
    "consider",
    "control",
    "convince",
    "cook",
    "cool",
    "copper",
    "copy",
    "coral",
    "core",
    "corn",
    "correct",
    "cost",
    "cotton",
    "couch",
    "country",
    "couple",
    "course",
    "cousin",
    "cover",
    "coyote",
    "crack",
    "cradle",
    "craft",
    "cram",
    "crane",
    "crash",
    "crater",
    "crawl",
    "crazy",
    "cream",
    "credit",
    "creek",
    "crew",
    "cricket",
    "crime",
    "crisp",
    "critic",
    "crop",
    "cross",
    "crouch",
    "crowd",
    "crucial",
    "cruel",
    "cruise",
    "crumble",
    "crunch",
    "crush",
    "cry",
    "crystal",
    "cube",
    "culture",
    "cup",
    "cupboard",
    "curious",
    "current",
    "curtain",
    "curve",
    "cushion",
    "custom",
    "cute",
    "cycle",
    "dad",
    "damage",
    "damp",
    "dance",
    "danger",
    "daring",
    "dash",
    "daughter",
    "dawn",
    "day",
    "deal",
    "debate",
    "debris",
    "decade",
    "december",
    "decide",
    "decline",
    "decorate",
    "decrease",
    "deer",
    "defense",
    "define",
    "defy",
    "degree",
    "delay",
    "deliver",
    "demand",
    "demise",
    "denial",
    "dentist",
    "deny",
    "depart",
    "depend",
    "deposit",
    "depth",
    "deputy",
    "derive",
    "describe",
    "desert",
    "design",
    "desk",
    "despair",
    "destroy",
    "detail",
    "detect",
    "develop",
    "device",
    "devote",
    "diagram",
    "dial",
    "diamond",
    "diary",
    "dice",
    "diesel",
    "diet",
    "differ",
    "digital",
    "dignity",
    "dilemma",
    "dinner",
    "dinosaur",
    "direct",
    "dirt",
    "disagree",
    "discover",
    "disease",
    "dish",
    "dismiss",
    "disorder",
    "display",
    "distance",
    "divert",
    "divide",
    "divorce",
    "dizzy",
    "doctor",
    "document",
    "dog",
    "doll",
    "dolphin",
    "domain",
    "donate",
    "donkey",
    "donor",
    "door",
    "dose",
    "double",
    "dove",
    "draft",
    "dragon",
    "drama",
    "drastic",
    "draw",
    "dream",
    "dress",
    "drift",
    "drill",
    "drink",
    "drip",
    "drive",
    "drop",
    "drum",
    "dry",
    "duck",
    "dumb",
    "dune",
    "during",
    "dust",
    "dutch",
    "duty",
    "dwarf",
    "dynamic",
    "eager",
    "eagle",
    "early",
    "earn",
    "earth",
    "easily",
    "east",
    "easy",
    "echo",
    "ecology",
    "economy",
    "edge",
    "edit",
    "educate",
    "effort",
    "egg",
    "eight",
    "either",
    "elbow",
    "elder",
    "electric",
    "elegant",
    "element",
    "elephant",
    "elevator",
    "elite",
    "else",
    "embark",
    "embody",
    "embrace",
    "emerge",
    "emotion",
    "employ",
    "empower",
    "empty",
    "enable",
    "enact",
    "end",
    "endless",
    "endorse",
    "enemy",
    "energy",
    "enforce",
    "engage",
    "engine",
    "enhance",
    "enjoy",
    "enlist",
    "enough",
    "enrich",
    "enroll",
    "ensure",
    "enter",
    "entire",
    "entry",
    "envelope",
    "episode",
    "equal",
    "equip",
    "era",
    "erase",
    "erode",
    "erosion",
    "error",
    "erupt",
    "escape",
    "essay",
    "essence",
    "estate",
    "eternal",
    "ethics",
    "evidence",
    "evil",
    "evoke",
    "evolve",
    "exact",
    "example",
    "excess",
    "exchange",
    "excite",
    "exclude",
    "excuse",
    "execute",
    "exercise",
    "exhaust",
    "exhibit",
    "exile",
    "exist",
    "exit",
    "exotic",
    "expand",
    "expect",
    "expire",
    "explain",
    "expose",
    "express",
    "extend",
    "extra",
    "eye",
    "eyebrow",
    "fabric",
    "face",
    "faculty",
    "fade",
    "faint",
    "faith",
    "fall",
    "false",
    "fame",
    "family",
    "famous",
    "fan",
    "fancy",
    "fantasy",
    "farm",
    "fashion",
    "fat",
    "fatal",
    "father",
    "fatigue",
    "fault",
    "favorite",
    "feature",
    "february",
    "federal",
    "fee",
    "feed",
    "feel",
    "female",
    "fence",
    "festival",
    "fetch",
    "fever",
    "few",
    "fiber",
    "fiction",
    "field",
    "figure",
    "file",
    "film",
    "filter",
    "final",
    "find",
    "fine",
    "finger",
    "finish",
    "fire",
    "firm",
    "first",
    "fiscal",
    "fish",
    "fit",
    "fitness",
    "fix",
    "flag",
    "flame",
    "flash",
    "flat",
    "flavor",
    "flee",
    "flight",
    "flip",
    "float",
    "flock",
    "floor",
    "flower",
    "fluid",
    "flush",
    "fly",
    "foam",
    "focus",
    "fog",
    "foil",
    "fold",
    "follow",
    "food",
    "foot",
    "force",
    "forest",
    "forget",
    "fork",
    "fortune",
    "forum",
    "forward",
    "fossil",
    "foster",
    "found",
    "fox",
    "fragile",
    "frame",
    "frequent",
    "fresh",
    "friend",
    "fringe",
    "frog",
    "front",
    "frost",
    "frown",
    "frozen",
    "fruit",
    "fuel",
    "fun",
    "funny",
    "furnace",
    "fury",
    "future",
    "gadget",
    "gain",
    "galaxy",
    "gallery",
    "game",
    "gap",
    "garage",
    "garbage",
    "garden",
    "garlic",
    "garment",
    "gas",
    "gasp",
    "gate",
    "gather",
    "gauge",
    "gaze",
    "general",
    "genius",
    "genre",
    "gentle",
    "genuine",
    "gesture",
    "ghost",
    "giant",
    "gift",
    "giggle",
    "ginger",
    "giraffe",
    "girl",
    "give",
    "glad",
    "glance",
    "glare",
    "glass",
    "glide",
    "glimpse",
    "globe",
    "gloom",
    "glory",
    "glove",
    "glow",
    "glue",
    "goat",
    "goddess",
    "gold",
    "good",
    "goose",
    "gorilla",
    "gospel",
    "gossip",
    "govern",
    "gown",
    "grab",
    "grace",
    "grain",
    "grant",
    "grape",
    "grass",
    "gravity",
    "great",
    "green",
    "grid",
    "grief",
    "grit",
    "grocery",
    "group",
    "grow",
    "grunt",
    "guard",
    "guess",
    "guide",
    "guilt",
    "guitar",
    "gun",
    "gym",
    "habit",
    "hair",
    "half",
    "hammer",
    "hamster",
    "hand",
    "happy",
    "harbor",
    "hard",
    "harsh",
    "harvest",
    "hat",
    "have",
    "hawk",
    "hazard",
    "head",
    "health",
    "heart",
    "heavy",
    "hedgehog",
    "height",
    "hello",
    "helmet",
    "help",
    "hen",
    "hero",
    "hidden",
    "high",
    "hill",
    "hint",
    "hip",
    "hire",
    "history",
    "hobby",
    "hockey",
    "hold",
    "hole",
    "holiday",
    "hollow",
    "home",
    "honey",
    "hood",
    "hope",
    "horn",
    "horror",
    "horse",
    "hospital",
    "host",
    "hotel",
    "hour",
    "hover",
    "hub",
    "huge",
    "human",
    "humble",
    "humor",
    "hundred",
    "hungry",
    "hunt",
    "hurdle",
    "hurry",
    "hurt",
    "husband",
    "hybrid",
    "ice",
    "icon",
    "idea",
    "identify",
    "idle",
    "ignore",
    "ill",
    "illegal",
    "illness",
    "image",
    "imitate",
    "immense",
    "immune",
    "impact",
    "impose",
    "improve",
    "impulse",
    "inch",
    "include",
    "income",
    "increase",
    "index",
    "indicate",
    "indoor",
    "industry",
    "infant",
    "inflict",
    "inform",
    "inhale",
    "inherit",
    "initial",
    "inject",
    "injury",
    "inmate",
    "inner",
    "innocent",
    "input",
    "inquiry",
    "insane",
    "insect",
    "inside",
    "inspire",
    "install",
    "intact",
    "interest",
    "into",
    "invest",
    "invite",
    "involve",
    "iron",
    "island",
    "isolate",
    "issue",
    "item",
    "ivory",
    "jacket",
    "jaguar",
    "jar",
    "jazz",
    "jealous",
    "jeans",
    "jelly",
    "jewel",
    "job",
    "join",
    "joke",
    "journey",
    "joy",
    "judge",
    "juice",
    "jump",
    "jungle",
    "junior",
    "junk",
    "just",
    "kangaroo",
    "keen",
    "keep",
    "ketchup",
    "key",
    "kick",
    "kid",
    "kidney",
    "kind",
    "kingdom",
    "kiss",
    "kit",
    "kitchen",
    "kite",
    "kitten",
    "kiwi",
    "knee",
    "knife",
    "knock",
    "know",
    "lab",
    "label",
    "labor",
    "ladder",
    "lady",
    "lake",
    "lamp",
    "language",
    "laptop",
    "large",
    "later",
    "latin",
    "laugh",
    "laundry",
    "lava",
    "law",
    "lawn",
    "lawsuit",
    "layer",
    "lazy",
    "leader",
    "leaf",
    "learn",
    "leave",
    "lecture",
    "left",
    "leg",
    "legal",
    "legend",
    "leisure",
    "lemon",
    "lend",
    "length",
    "lens",
    "leopard",
    "lesson",
    "letter",
    "level",
    "liar",
    "liberty",
    "library",
    "license",
    "life",
    "lift",
    "light",
    "like",
    "limb",
    "limit",
    "link",
    "lion",
    "liquid",
    "list",
    "little",
    "live",
    "lizard",
    "load",
    "loan",
    "lobster",
    "local",
    "lock",
    "logic",
    "lonely",
    "long",
    "loop",
    "lottery",
    "loud",
    "lounge",
    "love",
    "loyal",
    "lucky",
    "luggage",
    "lumber",
    "lunar",
    "lunch",
    "luxury",
    "lyrics",
    "machine",
    "mad",
    "magic",
    "magnet",
    "maid",
    "mail",
    "main",
    "major",
    "make",
    "mammal",
    "man",
    "manage",
    "mandate",
    "mango",
    "mansion",
    "manual",
    "maple",
    "marble",
    "march",
    "margin",
    "marine",
    "market",
    "marriage",
    "mask",
    "mass",
    "master",
    "match",
    "material",
    "math",
    "matrix",
    "matter",
    "maximum",
    "maze",
    "meadow",
    "mean",
    "measure",
    "meat",
    "mechanic",
    "medal",
    "media",
    "melody",
    "melt",
    "member",
    "memory",
    "mention",
    "menu",
    "mercy",
    "merge",
    "merit",
    "merry",
    "mesh",
    "message",
    "metal",
    "method",
    "middle",
    "midnight",
    "milk",
    "million",
    "mimic",
    "mind",
    "minimum",
    "minor",
    "minute",
    "miracle",
    "mirror",
    "misery",
    "miss",
    "mistake",
    "mix",
    "mixed",
    "mixture",
    "mobile",
    "model",
    "modify",
    "mom",
    "moment",
    "monitor",
    "monkey",
    "monster",
    "month",
    "moon",
    "moral",
    "more",
    "morning",
    "mosquito",
    "mother",
    "motion",
    "motor",
    "mountain",
    "mouse",
    "move",
    "movie",
    "much",
    "muffin",
    "mule",
    "multiply",
    "muscle",
    "museum",
    "mushroom",
    "music",
    "must",
    "mutual",
    "myself",
    "mystery",
    "myth",
    "naive",
    "name",
    "napkin",
    "narrow",
    "nasty",
    "nation",
    "nature",
    "near",
    "neck",
    "need",
    "negative",
    "neglect",
    "neither",
    "nephew",
    "nerve",
    "nest",
    "net",
    "network",
    "neutral",
    "never",
    "news",
    "next",
    "nice",
    "night",
    "noble",
    "noise",
    "nominee",
    "noodle",
    "normal",
    "north",
    "nose",
    "notable",
    "note",
    "nothing",
    "notice",
    "novel",
    "now",
    "nuclear",
    "number",
    "nurse",
    "nut",
    "oak",
    "obey",
    "object",
    "oblige",
    "obscure",
    "observe",
    "obtain",
    "obvious",
    "occur",
    "ocean",
    "october",
    "odor",
    "off",
    "offer",
    "office",
    "often",
    "oil",
    "okay",
    "old",
    "olive",
    "olympic",
    "omit",
    "once",
    "one",
    "onion",
    "online",
    "only",
    "open",
    "opera",
    "opinion",
    "oppose",
    "option",
    "orange",
    "orbit",
    "orchard",
    "order",
    "ordinary",
    "organ",
    "orient",
    "original",
    "orphan",
    "ostrich",
    "other",
    "outdoor",
    "outer",
    "output",
    "outside",
    "oval",
    "oven",
    "over",
    "own",
    "owner",
    "oxygen",
    "oyster",
    "ozone",
    "pact",
    "paddle",
    "page",
    "pair",
    "palace",
    "palm",
    "panda",
    "panel",
    "panic",
    "panther",
    "paper",
    "parade",
    "parent",
    "park",
    "parrot",
    "party",
    "pass",
    "patch",
    "path",
    "patient",
    "patrol",
    "pattern",
    "pause",
    "pave",
    "payment",
    "peace",
    "peanut",
    "pear",
    "peasant",
    "pelican",
    "pen",
    "penalty",
    "pencil",
    "people",
    "pepper",
    "perfect",
    "permit",
    "person",
    "pet",
    "phone",
    "photo",
    "phrase",
    "physical",
    "piano",
    "picnic",
    "picture",
    "piece",
    "pig",
    "pigeon",
    "pill",
    "pilot",
    "pink",
    "pioneer",
    "pipe",
    "pistol",
    "pitch",
    "pizza",
    "place",
    "planet",
    "plastic",
    "plate",
    "play",
    "please",
    "pledge",
    "pluck",
    "plug",
    "plunge",
    "poem",
    "poet",
    "point",
    "polar",
    "pole",
    "police",
    "pond",
    "pony",
    "pool",
    "popular",
    "portion",
    "position",
    "possible",
    "post",
    "potato",
    "pottery",
    "poverty",
    "powder",
    "power",
    "practice",
    "praise",
    "predict",
    "prefer",
    "prepare",
    "present",
    "pretty",
    "prevent",
    "price",
    "pride",
    "primary",
    "print",
    "priority",
    "prison",
    "private",
    "prize",
    "problem",
    "process",
    "produce",
    "profit",
    "program",
    "project",
    "promote",
    "proof",
    "property",
    "prosper",
    "protect",
    "proud",
    "provide",
    "public",
    "pudding",
    "pull",
    "pulp",
    "pulse",
    "pumpkin",
    "punch",
    "pupil",
    "puppy",
    "purchase",
    "purity",
    "purpose",
    "purse",
    "push",
    "put",
    "puzzle",
    "pyramid",
    "quality",
    "quantum",
    "quarter",
    "question",
    "quick",
    "quit",
    "quiz",
    "quote",
    "rabbit",
    "raccoon",
    "race",
    "rack",
    "radar",
    "radio",
    "rail",
    "rain",
    "raise",
    "rally",
    "ramp",
    "ranch",
    "random",
    "range",
    "rapid",
    "rare",
    "rate",
    "rather",
    "raven",
    "raw",
    "razor",
    "ready",
    "real",
    "reason",
    "rebel",
    "rebuild",
    "recall",
    "receive",
    "recipe",
    "record",
    "recycle",
    "reduce",
    "reflect",
    "reform",
    "refuse",
    "region",
    "regret",
    "regular",
    "reject",
    "relax",
    "release",
    "relief",
    "rely",
    "remain",
    "remember",
    "remind",
    "remove",
    "render",
    "renew",
    "rent",
    "reopen",
    "repair",
    "repeat",
    "replace",
    "report",
    "require",
    "rescue",
    "resemble",
    "resist",
    "resource",
    "response",
    "result",
    "retire",
    "retreat",
    "return",
    "reunion",
    "reveal",
    "review",
    "reward",
    "rhythm",
    "rib",
    "ribbon",
    "rice",
    "rich",
    "ride",
    "ridge",
    "rifle",
    "right",
    "rigid",
    "ring",
    "riot",
    "ripple",
    "risk",
    "ritual",
    "rival",
    "river",
    "road",
    "roast",
    "robot",
    "robust",
    "rocket",
    "romance",
    "roof",
    "rookie",
    "room",
    "rose",
    "rotate",
    "rough",
    "round",
    "route",
    "royal",
    "rubber",
    "rude",
    "rug",
    "rule",
    "run",
    "runway",
    "rural",
    "sad",
    "saddle",
    "sadness",
    "safe",
    "sail",
    "salad",
    "salmon",
    "salon",
    "salt",
    "salute",
    "same",
    "sample",
    "sand",
    "satisfy",
    "satoshi",
    "sauce",
    "sausage",
    "save",
    "say",
    "scale",
    "scan",
    "scare",
    "scatter",
    "scene",
    "scheme",
    "school",
    "science",
    "scissors",
    "scorpion",
    "scout",
    "scrap",
    "screen",
    "script",
    "scrub",
    "sea",
    "search",
    "season",
    "seat",
    "second",
    "secret",
    "section",
    "security",
    "seed",
    "seek",
    "segment",
    "select",
    "sell",
    "seminar",
    "senior",
    "sense",
    "sentence",
    "series",
    "service",
    "session",
    "settle",
    "setup",
    "seven",
    "shadow",
    "shaft",
    "shallow",
    "share",
    "shed",
    "shell",
    "sheriff",
    "shield",
    "shift",
    "shine",
    "ship",
    "shiver",
    "shock",
    "shoe",
    "shoot",
    "shop",
    "short",
    "shoulder",
    "shove",
    "shrimp",
    "shrug",
    "shuffle",
    "shy",
    "sibling",
    "sick",
    "side",
    "siege",
    "sight",
    "sign",
    "silent",
    "silk",
    "silly",
    "silver",
    "similar",
    "simple",
    "since",
    "sing",
    "siren",
    "sister",
    "situate",
    "six",
    "size",
    "skate",
    "sketch",
    "ski",
    "skill",
    "skin",
    "skirt",
    "skull",
    "slab",
    "slam",
    "sleep",
    "slender",
    "slice",
    "slide",
    "slight",
    "slim",
    "slogan",
    "slot",
    "slow",
    "slush",
    "small",
    "smart",
    "smile",
    "smoke",
    "smooth",
    "snack",
    "snake",
    "snap",
    "sniff",
    "snow",
    "soap",
    "soccer",
    "social",
    "sock",
    "soda",
    "soft",
    "solar",
    "soldier",
    "solid",
    "solution",
    "solve",
    "someone",
    "song",
    "soon",
    "sorry",
    "sort",
    "soul",
    "sound",
    "soup",
    "source",
    "south",
    "space",
    "spare",
    "spatial",
    "spawn",
    "speak",
    "special",
    "speed",
    "spell",
    "spend",
    "sphere",
    "spice",
    "spider",
    "spike",
    "spin",
    "spirit",
    "split",
    "spoil",
    "sponsor",
    "spoon",
    "sport",
    "spot",
    "spray",
    "spread",
    "spring",
    "spy",
    "square",
    "squeeze",
    "squirrel",
    "stable",
    "stadium",
    "staff",
    "stage",
    "stairs",
    "stamp",
    "stand",
    "start",
    "state",
    "stay",
    "steak",
    "steel",
    "stem",
    "step",
    "stereo",
    "stick",
    "still",
    "sting",
    "stock",
    "stomach",
    "stone",
    "stool",
    "story",
    "stove",
    "strategy",
    "street",
    "strike",
    "strong",
    "struggle",
    "student",
    "stuff",
    "stumble",
    "style",
    "subject",
    "submit",
    "subway",
    "success",
    "such",
    "sudden",
    "suffer",
    "sugar",
    "suggest",
    "suit",
    "summer",
    "sun",
    "sunny",
    "sunset",
    "super",
    "supply",
    "supreme",
    "sure",
    "surface",
    "surge",
    "surprise",
    "surround",
    "survey",
    "suspect",
    "sustain",
    "swallow",
    "swamp",
    "swap",
    "swarm",
    "swear",
    "sweet",
    "swift",
    "swim",
    "swing",
    "switch",
    "sword",
    "symbol",
    "symptom",
    "syrup",
    "system",
    "table",
    "tackle",
    "tag",
    "tail",
    "talent",
    "talk",
    "tank",
    "tape",
    "target",
    "task",
    "taste",
    "tattoo",
    "taxi",
    "teach",
    "team",
    "tell",
    "ten",
    "tenant",
    "tennis",
    "tent",
    "term",
    "test",
    "text",
    "thank",
    "that",
    "theme",
    "then",
    "theory",
    "there",
    "they",
    "thing",
    "this",
    "thought",
    "three",
    "thrive",
    "throw",
    "thumb",
    "thunder",
    "ticket",
    "tide",
    "tiger",
    "tilt",
    "timber",
    "time",
    "tiny",
    "tip",
    "tired",
    "tissue",
    "title",
    "toast",
    "tobacco",
    "today",
    "toddler",
    "toe",
    "together",
    "toilet",
    "token",
    "tomato",
    "tomorrow",
    "tone",
    "tongue",
    "tonight",
    "tool",
    "tooth",
    "top",
    "topic",
    "topple",
    "torch",
    "tornado",
    "tortoise",
    "toss",
    "total",
    "tourist",
    "toward",
    "tower",
    "town",
    "toy",
    "track",
    "trade",
    "traffic",
    "tragic",
    "train",
    "transfer",
    "trap",
    "trash",
    "travel",
    "tray",
    "treat",
    "tree",
    "trend",
    "trial",
    "tribe",
    "trick",
    "trigger",
    "trim",
    "trip",
    "trophy",
    "trouble",
    "truck",
    "true",
    "truly",
    "trumpet",
    "trust",
    "truth",
    "try",
    "tube",
    "tuition",
    "tumble",
    "tuna",
    "tunnel",
    "turkey",
    "turn",
    "turtle",
    "twelve",
    "twenty",
    "twice",
    "twin",
    "twist",
    "two",
    "type",
    "typical",
    "ugly",
    "umbrella",
    "unable",
    "unaware",
    "uncle",
    "uncover",
    "under",
    "undo",
    "unfair",
    "unfold",
    "unhappy",
    "uniform",
    "unique",
    "unit",
    "universe",
    "unknown",
    "unlock",
    "until",
    "unusual",
    "unveil",
    "update",
    "upgrade",
    "uphold",
    "upon",
    "upper",
    "upset",
    "urban",
    "urge",
    "usage",
    "use",
    "used",
    "useful",
    "useless",
    "usual",
    "utility",
    "vacant",
    "vacuum",
    "vague",
    "valid",
    "valley",
    "valve",
    "van",
    "vanish",
    "vapor",
    "various",
    "vast",
    "vault",
    "vehicle",
    "velvet",
    "vendor",
    "venture",
    "venue",
    "verb",
    "verify",
    "version",
    "very",
    "vessel",
    "veteran",
    "viable",
    "vibrant",
    "vicious",
    "victory",
    "video",
    "view",
    "village",
    "vintage",
    "violin",
    "virtual",
    "virus",
    "visa",
    "visit",
    "visual",
    "vital",
    "vivid",
    "vocal",
    "voice",
    "void",
    "volcano",
    "volume",
    "vote",
    "voyage",
    "wage",
    "wagon",
    "wait",
    "walk",
    "wall",
    "walnut",
    "want",
    "warfare",
    "warm",
    "warrior",
    "wash",
    "wasp",
    "waste",
    "water",
    "wave",
    "way",
    "wealth",
    "weapon",
    "wear",
    "weasel",
    "weather",
    "web",
    "wedding",
    "weekend",
    "weird",
    "welcome",
    "west",
    "wet",
    "whale",
    "what",
    "wheat",
    "wheel",
    "when",
    "where",
    "whip",
    "whisper",
    "wide",
    "width",
    "wife",
    "wild",
    "will",
    "win",
    "window",
    "wine",
    "wing",
    "wink",
    "winner",
    "winter",
    "wire",
    "wisdom",
    "wise",
    "wish",
    "witness",
    "wolf",
    "woman",
    "wonder",
    "wood",
    "wool",
    "word",
    "work",
    "world",
    "worry",
    "worth",
    "wrap",
    "wreck",
    "wrestle",
    "wrist",
    "write",
    "wrong",
    "yard",
    "year",
    "yellow",
    "you",
    "young",
    "youth",
    "zebra",
    "zero",
    "zone",
    "zoo"
];
module.exports = english;

},{}],"22rNm":[function(require,module,exports) {
"use string";
var french = [
    "abaisser",
    "abandon",
    "abdiquer",
    "abeille",
    "abolir",
    "aborder",
    "aboutir",
    "aboyer",
    "abrasif",
    "abreuver",
    "abriter",
    "abroger",
    "abrupt",
    "absence",
    "absolu",
    "absurde",
    "abusif",
    "abyssal",
    "académie",
    "acajou",
    "acarien",
    "accabler",
    "accepter",
    "acclamer",
    "accolade",
    "accroche",
    "accuser",
    "acerbe",
    "achat",
    "acheter",
    "aciduler",
    "acier",
    "acompte",
    "acquérir",
    "acronyme",
    "acteur",
    "actif",
    "actuel",
    "adepte",
    "adéquat",
    "adhésif",
    "adjectif",
    "adjuger",
    "admettre",
    "admirer",
    "adopter",
    "adorer",
    "adoucir",
    "adresse",
    "adroit",
    "adulte",
    "adverbe",
    "aérer",
    "aéronef",
    "affaire",
    "affecter",
    "affiche",
    "affreux",
    "affubler",
    "agacer",
    "agencer",
    "agile",
    "agiter",
    "agrafer",
    "agréable",
    "agrume",
    "aider",
    "aiguille",
    "ailier",
    "aimable",
    "aisance",
    "ajouter",
    "ajuster",
    "alarmer",
    "alchimie",
    "alerte",
    "algèbre",
    "algue",
    "aliéner",
    "aliment",
    "alléger",
    "alliage",
    "allouer",
    "allumer",
    "alourdir",
    "alpaga",
    "altesse",
    "alvéole",
    "amateur",
    "ambigu",
    "ambre",
    "aménager",
    "amertume",
    "amidon",
    "amiral",
    "amorcer",
    "amour",
    "amovible",
    "amphibie",
    "ampleur",
    "amusant",
    "analyse",
    "anaphore",
    "anarchie",
    "anatomie",
    "ancien",
    "anéantir",
    "angle",
    "angoisse",
    "anguleux",
    "animal",
    "annexer",
    "annonce",
    "annuel",
    "anodin",
    "anomalie",
    "anonyme",
    "anormal",
    "antenne",
    "antidote",
    "anxieux",
    "apaiser",
    "apéritif",
    "aplanir",
    "apologie",
    "appareil",
    "appeler",
    "apporter",
    "appuyer",
    "aquarium",
    "aqueduc",
    "arbitre",
    "arbuste",
    "ardeur",
    "ardoise",
    "argent",
    "arlequin",
    "armature",
    "armement",
    "armoire",
    "armure",
    "arpenter",
    "arracher",
    "arriver",
    "arroser",
    "arsenic",
    "artériel",
    "article",
    "aspect",
    "asphalte",
    "aspirer",
    "assaut",
    "asservir",
    "assiette",
    "associer",
    "assurer",
    "asticot",
    "astre",
    "astuce",
    "atelier",
    "atome",
    "atrium",
    "atroce",
    "attaque",
    "attentif",
    "attirer",
    "attraper",
    "aubaine",
    "auberge",
    "audace",
    "audible",
    "augurer",
    "aurore",
    "automne",
    "autruche",
    "avaler",
    "avancer",
    "avarice",
    "avenir",
    "averse",
    "aveugle",
    "aviateur",
    "avide",
    "avion",
    "aviser",
    "avoine",
    "avouer",
    "avril",
    "axial",
    "axiome",
    "badge",
    "bafouer",
    "bagage",
    "baguette",
    "baignade",
    "balancer",
    "balcon",
    "baleine",
    "balisage",
    "bambin",
    "bancaire",
    "bandage",
    "banlieue",
    "bannière",
    "banquier",
    "barbier",
    "baril",
    "baron",
    "barque",
    "barrage",
    "bassin",
    "bastion",
    "bataille",
    "bateau",
    "batterie",
    "baudrier",
    "bavarder",
    "belette",
    "bélier",
    "belote",
    "bénéfice",
    "berceau",
    "berger",
    "berline",
    "bermuda",
    "besace",
    "besogne",
    "bétail",
    "beurre",
    "biberon",
    "bicycle",
    "bidule",
    "bijou",
    "bilan",
    "bilingue",
    "billard",
    "binaire",
    "biologie",
    "biopsie",
    "biotype",
    "biscuit",
    "bison",
    "bistouri",
    "bitume",
    "bizarre",
    "blafard",
    "blague",
    "blanchir",
    "blessant",
    "blinder",
    "blond",
    "bloquer",
    "blouson",
    "bobard",
    "bobine",
    "boire",
    "boiser",
    "bolide",
    "bonbon",
    "bondir",
    "bonheur",
    "bonifier",
    "bonus",
    "bordure",
    "borne",
    "botte",
    "boucle",
    "boueux",
    "bougie",
    "boulon",
    "bouquin",
    "bourse",
    "boussole",
    "boutique",
    "boxeur",
    "branche",
    "brasier",
    "brave",
    "brebis",
    "brèche",
    "breuvage",
    "bricoler",
    "brigade",
    "brillant",
    "brioche",
    "brique",
    "brochure",
    "broder",
    "bronzer",
    "brousse",
    "broyeur",
    "brume",
    "brusque",
    "brutal",
    "bruyant",
    "buffle",
    "buisson",
    "bulletin",
    "bureau",
    "burin",
    "bustier",
    "butiner",
    "butoir",
    "buvable",
    "buvette",
    "cabanon",
    "cabine",
    "cachette",
    "cadeau",
    "cadre",
    "caféine",
    "caillou",
    "caisson",
    "calculer",
    "calepin",
    "calibre",
    "calmer",
    "calomnie",
    "calvaire",
    "camarade",
    "caméra",
    "camion",
    "campagne",
    "canal",
    "caneton",
    "canon",
    "cantine",
    "canular",
    "capable",
    "caporal",
    "caprice",
    "capsule",
    "capter",
    "capuche",
    "carabine",
    "carbone",
    "caresser",
    "caribou",
    "carnage",
    "carotte",
    "carreau",
    "carton",
    "cascade",
    "casier",
    "casque",
    "cassure",
    "causer",
    "caution",
    "cavalier",
    "caverne",
    "caviar",
    "cédille",
    "ceinture",
    "céleste",
    "cellule",
    "cendrier",
    "censurer",
    "central",
    "cercle",
    "cérébral",
    "cerise",
    "cerner",
    "cerveau",
    "cesser",
    "chagrin",
    "chaise",
    "chaleur",
    "chambre",
    "chance",
    "chapitre",
    "charbon",
    "chasseur",
    "chaton",
    "chausson",
    "chavirer",
    "chemise",
    "chenille",
    "chéquier",
    "chercher",
    "cheval",
    "chien",
    "chiffre",
    "chignon",
    "chimère",
    "chiot",
    "chlorure",
    "chocolat",
    "choisir",
    "chose",
    "chouette",
    "chrome",
    "chute",
    "cigare",
    "cigogne",
    "cimenter",
    "cinéma",
    "cintrer",
    "circuler",
    "cirer",
    "cirque",
    "citerne",
    "citoyen",
    "citron",
    "civil",
    "clairon",
    "clameur",
    "claquer",
    "classe",
    "clavier",
    "client",
    "cligner",
    "climat",
    "clivage",
    "cloche",
    "clonage",
    "cloporte",
    "cobalt",
    "cobra",
    "cocasse",
    "cocotier",
    "coder",
    "codifier",
    "coffre",
    "cogner",
    "cohésion",
    "coiffer",
    "coincer",
    "colère",
    "colibri",
    "colline",
    "colmater",
    "colonel",
    "combat",
    "comédie",
    "commande",
    "compact",
    "concert",
    "conduire",
    "confier",
    "congeler",
    "connoter",
    "consonne",
    "contact",
    "convexe",
    "copain",
    "copie",
    "corail",
    "corbeau",
    "cordage",
    "corniche",
    "corpus",
    "correct",
    "cortège",
    "cosmique",
    "costume",
    "coton",
    "coude",
    "coupure",
    "courage",
    "couteau",
    "couvrir",
    "coyote",
    "crabe",
    "crainte",
    "cravate",
    "crayon",
    "créature",
    "créditer",
    "crémeux",
    "creuser",
    "crevette",
    "cribler",
    "crier",
    "cristal",
    "critère",
    "croire",
    "croquer",
    "crotale",
    "crucial",
    "cruel",
    "crypter",
    "cubique",
    "cueillir",
    "cuillère",
    "cuisine",
    "cuivre",
    "culminer",
    "cultiver",
    "cumuler",
    "cupide",
    "curatif",
    "curseur",
    "cyanure",
    "cycle",
    "cylindre",
    "cynique",
    "daigner",
    "damier",
    "danger",
    "danseur",
    "dauphin",
    "débattre",
    "débiter",
    "déborder",
    "débrider",
    "débutant",
    "décaler",
    "décembre",
    "déchirer",
    "décider",
    "déclarer",
    "décorer",
    "décrire",
    "décupler",
    "dédale",
    "déductif",
    "déesse",
    "défensif",
    "défiler",
    "défrayer",
    "dégager",
    "dégivrer",
    "déglutir",
    "dégrafer",
    "déjeuner",
    "délice",
    "déloger",
    "demander",
    "demeurer",
    "démolir",
    "dénicher",
    "dénouer",
    "dentelle",
    "dénuder",
    "départ",
    "dépenser",
    "déphaser",
    "déplacer",
    "déposer",
    "déranger",
    "dérober",
    "désastre",
    "descente",
    "désert",
    "désigner",
    "désobéir",
    "dessiner",
    "destrier",
    "détacher",
    "détester",
    "détourer",
    "détresse",
    "devancer",
    "devenir",
    "deviner",
    "devoir",
    "diable",
    "dialogue",
    "diamant",
    "dicter",
    "différer",
    "digérer",
    "digital",
    "digne",
    "diluer",
    "dimanche",
    "diminuer",
    "dioxyde",
    "directif",
    "diriger",
    "discuter",
    "disposer",
    "dissiper",
    "distance",
    "divertir",
    "diviser",
    "docile",
    "docteur",
    "dogme",
    "doigt",
    "domaine",
    "domicile",
    "dompter",
    "donateur",
    "donjon",
    "donner",
    "dopamine",
    "dortoir",
    "dorure",
    "dosage",
    "doseur",
    "dossier",
    "dotation",
    "douanier",
    "double",
    "douceur",
    "douter",
    "doyen",
    "dragon",
    "draper",
    "dresser",
    "dribbler",
    "droiture",
    "duperie",
    "duplexe",
    "durable",
    "durcir",
    "dynastie",
    "éblouir",
    "écarter",
    "écharpe",
    "échelle",
    "éclairer",
    "éclipse",
    "éclore",
    "écluse",
    "école",
    "économie",
    "écorce",
    "écouter",
    "écraser",
    "écrémer",
    "écrivain",
    "écrou",
    "écume",
    "écureuil",
    "édifier",
    "éduquer",
    "effacer",
    "effectif",
    "effigie",
    "effort",
    "effrayer",
    "effusion",
    "égaliser",
    "égarer",
    "éjecter",
    "élaborer",
    "élargir",
    "électron",
    "élégant",
    "éléphant",
    "élève",
    "éligible",
    "élitisme",
    "éloge",
    "élucider",
    "éluder",
    "emballer",
    "embellir",
    "embryon",
    "émeraude",
    "émission",
    "emmener",
    "émotion",
    "émouvoir",
    "empereur",
    "employer",
    "emporter",
    "emprise",
    "émulsion",
    "encadrer",
    "enchère",
    "enclave",
    "encoche",
    "endiguer",
    "endosser",
    "endroit",
    "enduire",
    "énergie",
    "enfance",
    "enfermer",
    "enfouir",
    "engager",
    "engin",
    "englober",
    "énigme",
    "enjamber",
    "enjeu",
    "enlever",
    "ennemi",
    "ennuyeux",
    "enrichir",
    "enrobage",
    "enseigne",
    "entasser",
    "entendre",
    "entier",
    "entourer",
    "entraver",
    "énumérer",
    "envahir",
    "enviable",
    "envoyer",
    "enzyme",
    "éolien",
    "épaissir",
    "épargne",
    "épatant",
    "épaule",
    "épicerie",
    "épidémie",
    "épier",
    "épilogue",
    "épine",
    "épisode",
    "épitaphe",
    "époque",
    "épreuve",
    "éprouver",
    "épuisant",
    "équerre",
    "équipe",
    "ériger",
    "érosion",
    "erreur",
    "éruption",
    "escalier",
    "espadon",
    "espèce",
    "espiègle",
    "espoir",
    "esprit",
    "esquiver",
    "essayer",
    "essence",
    "essieu",
    "essorer",
    "estime",
    "estomac",
    "estrade",
    "étagère",
    "étaler",
    "étanche",
    "étatique",
    "éteindre",
    "étendoir",
    "éternel",
    "éthanol",
    "éthique",
    "ethnie",
    "étirer",
    "étoffer",
    "étoile",
    "étonnant",
    "étourdir",
    "étrange",
    "étroit",
    "étude",
    "euphorie",
    "évaluer",
    "évasion",
    "éventail",
    "évidence",
    "éviter",
    "évolutif",
    "évoquer",
    "exact",
    "exagérer",
    "exaucer",
    "exceller",
    "excitant",
    "exclusif",
    "excuse",
    "exécuter",
    "exemple",
    "exercer",
    "exhaler",
    "exhorter",
    "exigence",
    "exiler",
    "exister",
    "exotique",
    "expédier",
    "explorer",
    "exposer",
    "exprimer",
    "exquis",
    "extensif",
    "extraire",
    "exulter",
    "fable",
    "fabuleux",
    "facette",
    "facile",
    "facture",
    "faiblir",
    "falaise",
    "fameux",
    "famille",
    "farceur",
    "farfelu",
    "farine",
    "farouche",
    "fasciner",
    "fatal",
    "fatigue",
    "faucon",
    "fautif",
    "faveur",
    "favori",
    "fébrile",
    "féconder",
    "fédérer",
    "félin",
    "femme",
    "fémur",
    "fendoir",
    "féodal",
    "fermer",
    "féroce",
    "ferveur",
    "festival",
    "feuille",
    "feutre",
    "février",
    "fiasco",
    "ficeler",
    "fictif",
    "fidèle",
    "figure",
    "filature",
    "filetage",
    "filière",
    "filleul",
    "filmer",
    "filou",
    "filtrer",
    "financer",
    "finir",
    "fiole",
    "firme",
    "fissure",
    "fixer",
    "flairer",
    "flamme",
    "flasque",
    "flatteur",
    "fléau",
    "flèche",
    "fleur",
    "flexion",
    "flocon",
    "flore",
    "fluctuer",
    "fluide",
    "fluvial",
    "folie",
    "fonderie",
    "fongible",
    "fontaine",
    "forcer",
    "forgeron",
    "formuler",
    "fortune",
    "fossile",
    "foudre",
    "fougère",
    "fouiller",
    "foulure",
    "fourmi",
    "fragile",
    "fraise",
    "franchir",
    "frapper",
    "frayeur",
    "frégate",
    "freiner",
    "frelon",
    "frémir",
    "frénésie",
    "frère",
    "friable",
    "friction",
    "frisson",
    "frivole",
    "froid",
    "fromage",
    "frontal",
    "frotter",
    "fruit",
    "fugitif",
    "fuite",
    "fureur",
    "furieux",
    "furtif",
    "fusion",
    "futur",
    "gagner",
    "galaxie",
    "galerie",
    "gambader",
    "garantir",
    "gardien",
    "garnir",
    "garrigue",
    "gazelle",
    "gazon",
    "géant",
    "gélatine",
    "gélule",
    "gendarme",
    "général",
    "génie",
    "genou",
    "gentil",
    "géologie",
    "géomètre",
    "géranium",
    "germe",
    "gestuel",
    "geyser",
    "gibier",
    "gicler",
    "girafe",
    "givre",
    "glace",
    "glaive",
    "glisser",
    "globe",
    "gloire",
    "glorieux",
    "golfeur",
    "gomme",
    "gonfler",
    "gorge",
    "gorille",
    "goudron",
    "gouffre",
    "goulot",
    "goupille",
    "gourmand",
    "goutte",
    "graduel",
    "graffiti",
    "graine",
    "grand",
    "grappin",
    "gratuit",
    "gravir",
    "grenat",
    "griffure",
    "griller",
    "grimper",
    "grogner",
    "gronder",
    "grotte",
    "groupe",
    "gruger",
    "grutier",
    "gruyère",
    "guépard",
    "guerrier",
    "guide",
    "guimauve",
    "guitare",
    "gustatif",
    "gymnaste",
    "gyrostat",
    "habitude",
    "hachoir",
    "halte",
    "hameau",
    "hangar",
    "hanneton",
    "haricot",
    "harmonie",
    "harpon",
    "hasard",
    "hélium",
    "hématome",
    "herbe",
    "hérisson",
    "hermine",
    "héron",
    "hésiter",
    "heureux",
    "hiberner",
    "hibou",
    "hilarant",
    "histoire",
    "hiver",
    "homard",
    "hommage",
    "homogène",
    "honneur",
    "honorer",
    "honteux",
    "horde",
    "horizon",
    "horloge",
    "hormone",
    "horrible",
    "houleux",
    "housse",
    "hublot",
    "huileux",
    "humain",
    "humble",
    "humide",
    "humour",
    "hurler",
    "hydromel",
    "hygiène",
    "hymne",
    "hypnose",
    "idylle",
    "ignorer",
    "iguane",
    "illicite",
    "illusion",
    "image",
    "imbiber",
    "imiter",
    "immense",
    "immobile",
    "immuable",
    "impact",
    "impérial",
    "implorer",
    "imposer",
    "imprimer",
    "imputer",
    "incarner",
    "incendie",
    "incident",
    "incliner",
    "incolore",
    "indexer",
    "indice",
    "inductif",
    "inédit",
    "ineptie",
    "inexact",
    "infini",
    "infliger",
    "informer",
    "infusion",
    "ingérer",
    "inhaler",
    "inhiber",
    "injecter",
    "injure",
    "innocent",
    "inoculer",
    "inonder",
    "inscrire",
    "insecte",
    "insigne",
    "insolite",
    "inspirer",
    "instinct",
    "insulter",
    "intact",
    "intense",
    "intime",
    "intrigue",
    "intuitif",
    "inutile",
    "invasion",
    "inventer",
    "inviter",
    "invoquer",
    "ironique",
    "irradier",
    "irréel",
    "irriter",
    "isoler",
    "ivoire",
    "ivresse",
    "jaguar",
    "jaillir",
    "jambe",
    "janvier",
    "jardin",
    "jauger",
    "jaune",
    "javelot",
    "jetable",
    "jeton",
    "jeudi",
    "jeunesse",
    "joindre",
    "joncher",
    "jongler",
    "joueur",
    "jouissif",
    "journal",
    "jovial",
    "joyau",
    "joyeux",
    "jubiler",
    "jugement",
    "junior",
    "jupon",
    "juriste",
    "justice",
    "juteux",
    "juvénile",
    "kayak",
    "kimono",
    "kiosque",
    "label",
    "labial",
    "labourer",
    "lacérer",
    "lactose",
    "lagune",
    "laine",
    "laisser",
    "laitier",
    "lambeau",
    "lamelle",
    "lampe",
    "lanceur",
    "langage",
    "lanterne",
    "lapin",
    "largeur",
    "larme",
    "laurier",
    "lavabo",
    "lavoir",
    "lecture",
    "légal",
    "léger",
    "légume",
    "lessive",
    "lettre",
    "levier",
    "lexique",
    "lézard",
    "liasse",
    "libérer",
    "libre",
    "licence",
    "licorne",
    "liège",
    "lièvre",
    "ligature",
    "ligoter",
    "ligue",
    "limer",
    "limite",
    "limonade",
    "limpide",
    "linéaire",
    "lingot",
    "lionceau",
    "liquide",
    "lisière",
    "lister",
    "lithium",
    "litige",
    "littoral",
    "livreur",
    "logique",
    "lointain",
    "loisir",
    "lombric",
    "loterie",
    "louer",
    "lourd",
    "loutre",
    "louve",
    "loyal",
    "lubie",
    "lucide",
    "lucratif",
    "lueur",
    "lugubre",
    "luisant",
    "lumière",
    "lunaire",
    "lundi",
    "luron",
    "lutter",
    "luxueux",
    "machine",
    "magasin",
    "magenta",
    "magique",
    "maigre",
    "maillon",
    "maintien",
    "mairie",
    "maison",
    "majorer",
    "malaxer",
    "maléfice",
    "malheur",
    "malice",
    "mallette",
    "mammouth",
    "mandater",
    "maniable",
    "manquant",
    "manteau",
    "manuel",
    "marathon",
    "marbre",
    "marchand",
    "mardi",
    "maritime",
    "marqueur",
    "marron",
    "marteler",
    "mascotte",
    "massif",
    "matériel",
    "matière",
    "matraque",
    "maudire",
    "maussade",
    "mauve",
    "maximal",
    "méchant",
    "méconnu",
    "médaille",
    "médecin",
    "méditer",
    "méduse",
    "meilleur",
    "mélange",
    "mélodie",
    "membre",
    "mémoire",
    "menacer",
    "mener",
    "menhir",
    "mensonge",
    "mentor",
    "mercredi",
    "mérite",
    "merle",
    "messager",
    "mesure",
    "métal",
    "météore",
    "méthode",
    "métier",
    "meuble",
    "miauler",
    "microbe",
    "miette",
    "mignon",
    "migrer",
    "milieu",
    "million",
    "mimique",
    "mince",
    "minéral",
    "minimal",
    "minorer",
    "minute",
    "miracle",
    "miroiter",
    "missile",
    "mixte",
    "mobile",
    "moderne",
    "moelleux",
    "mondial",
    "moniteur",
    "monnaie",
    "monotone",
    "monstre",
    "montagne",
    "monument",
    "moqueur",
    "morceau",
    "morsure",
    "mortier",
    "moteur",
    "motif",
    "mouche",
    "moufle",
    "moulin",
    "mousson",
    "mouton",
    "mouvant",
    "multiple",
    "munition",
    "muraille",
    "murène",
    "murmure",
    "muscle",
    "muséum",
    "musicien",
    "mutation",
    "muter",
    "mutuel",
    "myriade",
    "myrtille",
    "mystère",
    "mythique",
    "nageur",
    "nappe",
    "narquois",
    "narrer",
    "natation",
    "nation",
    "nature",
    "naufrage",
    "nautique",
    "navire",
    "nébuleux",
    "nectar",
    "néfaste",
    "négation",
    "négliger",
    "négocier",
    "neige",
    "nerveux",
    "nettoyer",
    "neurone",
    "neutron",
    "neveu",
    "niche",
    "nickel",
    "nitrate",
    "niveau",
    "noble",
    "nocif",
    "nocturne",
    "noirceur",
    "noisette",
    "nomade",
    "nombreux",
    "nommer",
    "normatif",
    "notable",
    "notifier",
    "notoire",
    "nourrir",
    "nouveau",
    "novateur",
    "novembre",
    "novice",
    "nuage",
    "nuancer",
    "nuire",
    "nuisible",
    "numéro",
    "nuptial",
    "nuque",
    "nutritif",
    "obéir",
    "objectif",
    "obliger",
    "obscur",
    "observer",
    "obstacle",
    "obtenir",
    "obturer",
    "occasion",
    "occuper",
    "océan",
    "octobre",
    "octroyer",
    "octupler",
    "oculaire",
    "odeur",
    "odorant",
    "offenser",
    "officier",
    "offrir",
    "ogive",
    "oiseau",
    "oisillon",
    "olfactif",
    "olivier",
    "ombrage",
    "omettre",
    "onctueux",
    "onduler",
    "onéreux",
    "onirique",
    "opale",
    "opaque",
    "opérer",
    "opinion",
    "opportun",
    "opprimer",
    "opter",
    "optique",
    "orageux",
    "orange",
    "orbite",
    "ordonner",
    "oreille",
    "organe",
    "orgueil",
    "orifice",
    "ornement",
    "orque",
    "ortie",
    "osciller",
    "osmose",
    "ossature",
    "otarie",
    "ouragan",
    "ourson",
    "outil",
    "outrager",
    "ouvrage",
    "ovation",
    "oxyde",
    "oxygène",
    "ozone",
    "paisible",
    "palace",
    "palmarès",
    "palourde",
    "palper",
    "panache",
    "panda",
    "pangolin",
    "paniquer",
    "panneau",
    "panorama",
    "pantalon",
    "papaye",
    "papier",
    "papoter",
    "papyrus",
    "paradoxe",
    "parcelle",
    "paresse",
    "parfumer",
    "parler",
    "parole",
    "parrain",
    "parsemer",
    "partager",
    "parure",
    "parvenir",
    "passion",
    "pastèque",
    "paternel",
    "patience",
    "patron",
    "pavillon",
    "pavoiser",
    "payer",
    "paysage",
    "peigne",
    "peintre",
    "pelage",
    "pélican",
    "pelle",
    "pelouse",
    "peluche",
    "pendule",
    "pénétrer",
    "pénible",
    "pensif",
    "pénurie",
    "pépite",
    "péplum",
    "perdrix",
    "perforer",
    "période",
    "permuter",
    "perplexe",
    "persil",
    "perte",
    "peser",
    "pétale",
    "petit",
    "pétrir",
    "peuple",
    "pharaon",
    "phobie",
    "phoque",
    "photon",
    "phrase",
    "physique",
    "piano",
    "pictural",
    "pièce",
    "pierre",
    "pieuvre",
    "pilote",
    "pinceau",
    "pipette",
    "piquer",
    "pirogue",
    "piscine",
    "piston",
    "pivoter",
    "pixel",
    "pizza",
    "placard",
    "plafond",
    "plaisir",
    "planer",
    "plaque",
    "plastron",
    "plateau",
    "pleurer",
    "plexus",
    "pliage",
    "plomb",
    "plonger",
    "pluie",
    "plumage",
    "pochette",
    "poésie",
    "poète",
    "pointe",
    "poirier",
    "poisson",
    "poivre",
    "polaire",
    "policier",
    "pollen",
    "polygone",
    "pommade",
    "pompier",
    "ponctuel",
    "pondérer",
    "poney",
    "portique",
    "position",
    "posséder",
    "posture",
    "potager",
    "poteau",
    "potion",
    "pouce",
    "poulain",
    "poumon",
    "pourpre",
    "poussin",
    "pouvoir",
    "prairie",
    "pratique",
    "précieux",
    "prédire",
    "préfixe",
    "prélude",
    "prénom",
    "présence",
    "prétexte",
    "prévoir",
    "primitif",
    "prince",
    "prison",
    "priver",
    "problème",
    "procéder",
    "prodige",
    "profond",
    "progrès",
    "proie",
    "projeter",
    "prologue",
    "promener",
    "propre",
    "prospère",
    "protéger",
    "prouesse",
    "proverbe",
    "prudence",
    "pruneau",
    "psychose",
    "public",
    "puceron",
    "puiser",
    "pulpe",
    "pulsar",
    "punaise",
    "punitif",
    "pupitre",
    "purifier",
    "puzzle",
    "pyramide",
    "quasar",
    "querelle",
    "question",
    "quiétude",
    "quitter",
    "quotient",
    "racine",
    "raconter",
    "radieux",
    "ragondin",
    "raideur",
    "raisin",
    "ralentir",
    "rallonge",
    "ramasser",
    "rapide",
    "rasage",
    "ratisser",
    "ravager",
    "ravin",
    "rayonner",
    "réactif",
    "réagir",
    "réaliser",
    "réanimer",
    "recevoir",
    "réciter",
    "réclamer",
    "récolter",
    "recruter",
    "reculer",
    "recycler",
    "rédiger",
    "redouter",
    "refaire",
    "réflexe",
    "réformer",
    "refrain",
    "refuge",
    "régalien",
    "région",
    "réglage",
    "régulier",
    "réitérer",
    "rejeter",
    "rejouer",
    "relatif",
    "relever",
    "relief",
    "remarque",
    "remède",
    "remise",
    "remonter",
    "remplir",
    "remuer",
    "renard",
    "renfort",
    "renifler",
    "renoncer",
    "rentrer",
    "renvoi",
    "replier",
    "reporter",
    "reprise",
    "reptile",
    "requin",
    "réserve",
    "résineux",
    "résoudre",
    "respect",
    "rester",
    "résultat",
    "rétablir",
    "retenir",
    "réticule",
    "retomber",
    "retracer",
    "réunion",
    "réussir",
    "revanche",
    "revivre",
    "révolte",
    "révulsif",
    "richesse",
    "rideau",
    "rieur",
    "rigide",
    "rigoler",
    "rincer",
    "riposter",
    "risible",
    "risque",
    "rituel",
    "rival",
    "rivière",
    "rocheux",
    "romance",
    "rompre",
    "ronce",
    "rondin",
    "roseau",
    "rosier",
    "rotatif",
    "rotor",
    "rotule",
    "rouge",
    "rouille",
    "rouleau",
    "routine",
    "royaume",
    "ruban",
    "rubis",
    "ruche",
    "ruelle",
    "rugueux",
    "ruiner",
    "ruisseau",
    "ruser",
    "rustique",
    "rythme",
    "sabler",
    "saboter",
    "sabre",
    "sacoche",
    "safari",
    "sagesse",
    "saisir",
    "salade",
    "salive",
    "salon",
    "saluer",
    "samedi",
    "sanction",
    "sanglier",
    "sarcasme",
    "sardine",
    "saturer",
    "saugrenu",
    "saumon",
    "sauter",
    "sauvage",
    "savant",
    "savonner",
    "scalpel",
    "scandale",
    "scélérat",
    "scénario",
    "sceptre",
    "schéma",
    "science",
    "scinder",
    "score",
    "scrutin",
    "sculpter",
    "séance",
    "sécable",
    "sécher",
    "secouer",
    "sécréter",
    "sédatif",
    "séduire",
    "seigneur",
    "séjour",
    "sélectif",
    "semaine",
    "sembler",
    "semence",
    "séminal",
    "sénateur",
    "sensible",
    "sentence",
    "séparer",
    "séquence",
    "serein",
    "sergent",
    "sérieux",
    "serrure",
    "sérum",
    "service",
    "sésame",
    "sévir",
    "sevrage",
    "sextuple",
    "sidéral",
    "siècle",
    "siéger",
    "siffler",
    "sigle",
    "signal",
    "silence",
    "silicium",
    "simple",
    "sincère",
    "sinistre",
    "siphon",
    "sirop",
    "sismique",
    "situer",
    "skier",
    "social",
    "socle",
    "sodium",
    "soigneux",
    "soldat",
    "soleil",
    "solitude",
    "soluble",
    "sombre",
    "sommeil",
    "somnoler",
    "sonde",
    "songeur",
    "sonnette",
    "sonore",
    "sorcier",
    "sortir",
    "sosie",
    "sottise",
    "soucieux",
    "soudure",
    "souffle",
    "soulever",
    "soupape",
    "source",
    "soutirer",
    "souvenir",
    "spacieux",
    "spatial",
    "spécial",
    "sphère",
    "spiral",
    "stable",
    "station",
    "sternum",
    "stimulus",
    "stipuler",
    "strict",
    "studieux",
    "stupeur",
    "styliste",
    "sublime",
    "substrat",
    "subtil",
    "subvenir",
    "succès",
    "sucre",
    "suffixe",
    "suggérer",
    "suiveur",
    "sulfate",
    "superbe",
    "supplier",
    "surface",
    "suricate",
    "surmener",
    "surprise",
    "sursaut",
    "survie",
    "suspect",
    "syllabe",
    "symbole",
    "symétrie",
    "synapse",
    "syntaxe",
    "système",
    "tabac",
    "tablier",
    "tactile",
    "tailler",
    "talent",
    "talisman",
    "talonner",
    "tambour",
    "tamiser",
    "tangible",
    "tapis",
    "taquiner",
    "tarder",
    "tarif",
    "tartine",
    "tasse",
    "tatami",
    "tatouage",
    "taupe",
    "taureau",
    "taxer",
    "témoin",
    "temporel",
    "tenaille",
    "tendre",
    "teneur",
    "tenir",
    "tension",
    "terminer",
    "terne",
    "terrible",
    "tétine",
    "texte",
    "thème",
    "théorie",
    "thérapie",
    "thorax",
    "tibia",
    "tiède",
    "timide",
    "tirelire",
    "tiroir",
    "tissu",
    "titane",
    "titre",
    "tituber",
    "toboggan",
    "tolérant",
    "tomate",
    "tonique",
    "tonneau",
    "toponyme",
    "torche",
    "tordre",
    "tornade",
    "torpille",
    "torrent",
    "torse",
    "tortue",
    "totem",
    "toucher",
    "tournage",
    "tousser",
    "toxine",
    "traction",
    "trafic",
    "tragique",
    "trahir",
    "train",
    "trancher",
    "travail",
    "trèfle",
    "tremper",
    "trésor",
    "treuil",
    "triage",
    "tribunal",
    "tricoter",
    "trilogie",
    "triomphe",
    "tripler",
    "triturer",
    "trivial",
    "trombone",
    "tronc",
    "tropical",
    "troupeau",
    "tuile",
    "tulipe",
    "tumulte",
    "tunnel",
    "turbine",
    "tuteur",
    "tutoyer",
    "tuyau",
    "tympan",
    "typhon",
    "typique",
    "tyran",
    "ubuesque",
    "ultime",
    "ultrason",
    "unanime",
    "unifier",
    "union",
    "unique",
    "unitaire",
    "univers",
    "uranium",
    "urbain",
    "urticant",
    "usage",
    "usine",
    "usuel",
    "usure",
    "utile",
    "utopie",
    "vacarme",
    "vaccin",
    "vagabond",
    "vague",
    "vaillant",
    "vaincre",
    "vaisseau",
    "valable",
    "valise",
    "vallon",
    "valve",
    "vampire",
    "vanille",
    "vapeur",
    "varier",
    "vaseux",
    "vassal",
    "vaste",
    "vecteur",
    "vedette",
    "végétal",
    "véhicule",
    "veinard",
    "véloce",
    "vendredi",
    "vénérer",
    "venger",
    "venimeux",
    "ventouse",
    "verdure",
    "vérin",
    "vernir",
    "verrou",
    "verser",
    "vertu",
    "veston",
    "vétéran",
    "vétuste",
    "vexant",
    "vexer",
    "viaduc",
    "viande",
    "victoire",
    "vidange",
    "vidéo",
    "vignette",
    "vigueur",
    "vilain",
    "village",
    "vinaigre",
    "violon",
    "vipère",
    "virement",
    "virtuose",
    "virus",
    "visage",
    "viseur",
    "vision",
    "visqueux",
    "visuel",
    "vital",
    "vitesse",
    "viticole",
    "vitrine",
    "vivace",
    "vivipare",
    "vocation",
    "voguer",
    "voile",
    "voisin",
    "voiture",
    "volaille",
    "volcan",
    "voltiger",
    "volume",
    "vorace",
    "vortex",
    "voter",
    "vouloir",
    "voyage",
    "voyelle",
    "wagon",
    "xénon",
    "yacht",
    "zèbre",
    "zénith",
    "zeste",
    "zoologie"
];
module.exports = french;

},{}],"lyApt":[function(require,module,exports) {
"use strict";
var italian = [
    "abaco",
    "abbaglio",
    "abbinato",
    "abete",
    "abisso",
    "abolire",
    "abrasivo",
    "abrogato",
    "accadere",
    "accenno",
    "accusato",
    "acetone",
    "achille",
    "acido",
    "acqua",
    "acre",
    "acrilico",
    "acrobata",
    "acuto",
    "adagio",
    "addebito",
    "addome",
    "adeguato",
    "aderire",
    "adipe",
    "adottare",
    "adulare",
    "affabile",
    "affetto",
    "affisso",
    "affranto",
    "aforisma",
    "afoso",
    "africano",
    "agave",
    "agente",
    "agevole",
    "aggancio",
    "agire",
    "agitare",
    "agonismo",
    "agricolo",
    "agrumeto",
    "aguzzo",
    "alabarda",
    "alato",
    "albatro",
    "alberato",
    "albo",
    "albume",
    "alce",
    "alcolico",
    "alettone",
    "alfa",
    "algebra",
    "aliante",
    "alibi",
    "alimento",
    "allagato",
    "allegro",
    "allievo",
    "allodola",
    "allusivo",
    "almeno",
    "alogeno",
    "alpaca",
    "alpestre",
    "altalena",
    "alterno",
    "alticcio",
    "altrove",
    "alunno",
    "alveolo",
    "alzare",
    "amalgama",
    "amanita",
    "amarena",
    "ambito",
    "ambrato",
    "ameba",
    "america",
    "ametista",
    "amico",
    "ammasso",
    "ammenda",
    "ammirare",
    "ammonito",
    "amore",
    "ampio",
    "ampliare",
    "amuleto",
    "anacardo",
    "anagrafe",
    "analista",
    "anarchia",
    "anatra",
    "anca",
    "ancella",
    "ancora",
    "andare",
    "andrea",
    "anello",
    "angelo",
    "angolare",
    "angusto",
    "anima",
    "annegare",
    "annidato",
    "anno",
    "annuncio",
    "anonimo",
    "anticipo",
    "anzi",
    "apatico",
    "apertura",
    "apode",
    "apparire",
    "appetito",
    "appoggio",
    "approdo",
    "appunto",
    "aprile",
    "arabica",
    "arachide",
    "aragosta",
    "araldica",
    "arancio",
    "aratura",
    "arazzo",
    "arbitro",
    "archivio",
    "ardito",
    "arenile",
    "argento",
    "argine",
    "arguto",
    "aria",
    "armonia",
    "arnese",
    "arredato",
    "arringa",
    "arrosto",
    "arsenico",
    "arso",
    "artefice",
    "arzillo",
    "asciutto",
    "ascolto",
    "asepsi",
    "asettico",
    "asfalto",
    "asino",
    "asola",
    "aspirato",
    "aspro",
    "assaggio",
    "asse",
    "assoluto",
    "assurdo",
    "asta",
    "astenuto",
    "astice",
    "astratto",
    "atavico",
    "ateismo",
    "atomico",
    "atono",
    "attesa",
    "attivare",
    "attorno",
    "attrito",
    "attuale",
    "ausilio",
    "austria",
    "autista",
    "autonomo",
    "autunno",
    "avanzato",
    "avere",
    "avvenire",
    "avviso",
    "avvolgere",
    "azione",
    "azoto",
    "azzimo",
    "azzurro",
    "babele",
    "baccano",
    "bacino",
    "baco",
    "badessa",
    "badilata",
    "bagnato",
    "baita",
    "balcone",
    "baldo",
    "balena",
    "ballata",
    "balzano",
    "bambino",
    "bandire",
    "baraonda",
    "barbaro",
    "barca",
    "baritono",
    "barlume",
    "barocco",
    "basilico",
    "basso",
    "batosta",
    "battuto",
    "baule",
    "bava",
    "bavosa",
    "becco",
    "beffa",
    "belgio",
    "belva",
    "benda",
    "benevole",
    "benigno",
    "benzina",
    "bere",
    "berlina",
    "beta",
    "bibita",
    "bici",
    "bidone",
    "bifido",
    "biga",
    "bilancia",
    "bimbo",
    "binocolo",
    "biologo",
    "bipede",
    "bipolare",
    "birbante",
    "birra",
    "biscotto",
    "bisesto",
    "bisnonno",
    "bisonte",
    "bisturi",
    "bizzarro",
    "blando",
    "blatta",
    "bollito",
    "bonifico",
    "bordo",
    "bosco",
    "botanico",
    "bottino",
    "bozzolo",
    "braccio",
    "bradipo",
    "brama",
    "branca",
    "bravura",
    "bretella",
    "brevetto",
    "brezza",
    "briglia",
    "brillante",
    "brindare",
    "broccolo",
    "brodo",
    "bronzina",
    "brullo",
    "bruno",
    "bubbone",
    "buca",
    "budino",
    "buffone",
    "buio",
    "bulbo",
    "buono",
    "burlone",
    "burrasca",
    "bussola",
    "busta",
    "cadetto",
    "caduco",
    "calamaro",
    "calcolo",
    "calesse",
    "calibro",
    "calmo",
    "caloria",
    "cambusa",
    "camerata",
    "camicia",
    "cammino",
    "camola",
    "campale",
    "canapa",
    "candela",
    "cane",
    "canino",
    "canotto",
    "cantina",
    "capace",
    "capello",
    "capitolo",
    "capogiro",
    "cappero",
    "capra",
    "capsula",
    "carapace",
    "carcassa",
    "cardo",
    "carisma",
    "carovana",
    "carretto",
    "cartolina",
    "casaccio",
    "cascata",
    "caserma",
    "caso",
    "cassone",
    "castello",
    "casuale",
    "catasta",
    "catena",
    "catrame",
    "cauto",
    "cavillo",
    "cedibile",
    "cedrata",
    "cefalo",
    "celebre",
    "cellulare",
    "cena",
    "cenone",
    "centesimo",
    "ceramica",
    "cercare",
    "certo",
    "cerume",
    "cervello",
    "cesoia",
    "cespo",
    "ceto",
    "chela",
    "chiaro",
    "chicca",
    "chiedere",
    "chimera",
    "china",
    "chirurgo",
    "chitarra",
    "ciao",
    "ciclismo",
    "cifrare",
    "cigno",
    "cilindro",
    "ciottolo",
    "circa",
    "cirrosi",
    "citrico",
    "cittadino",
    "ciuffo",
    "civetta",
    "civile",
    "classico",
    "clinica",
    "cloro",
    "cocco",
    "codardo",
    "codice",
    "coerente",
    "cognome",
    "collare",
    "colmato",
    "colore",
    "colposo",
    "coltivato",
    "colza",
    "coma",
    "cometa",
    "commando",
    "comodo",
    "computer",
    "comune",
    "conciso",
    "condurre",
    "conferma",
    "congelare",
    "coniuge",
    "connesso",
    "conoscere",
    "consumo",
    "continuo",
    "convegno",
    "coperto",
    "copione",
    "coppia",
    "copricapo",
    "corazza",
    "cordata",
    "coricato",
    "cornice",
    "corolla",
    "corpo",
    "corredo",
    "corsia",
    "cortese",
    "cosmico",
    "costante",
    "cottura",
    "covato",
    "cratere",
    "cravatta",
    "creato",
    "credere",
    "cremoso",
    "crescita",
    "creta",
    "criceto",
    "crinale",
    "crisi",
    "critico",
    "croce",
    "cronaca",
    "crostata",
    "cruciale",
    "crusca",
    "cucire",
    "cuculo",
    "cugino",
    "cullato",
    "cupola",
    "curatore",
    "cursore",
    "curvo",
    "cuscino",
    "custode",
    "dado",
    "daino",
    "dalmata",
    "damerino",
    "daniela",
    "dannoso",
    "danzare",
    "datato",
    "davanti",
    "davvero",
    "debutto",
    "decennio",
    "deciso",
    "declino",
    "decollo",
    "decreto",
    "dedicato",
    "definito",
    "deforme",
    "degno",
    "delegare",
    "delfino",
    "delirio",
    "delta",
    "demenza",
    "denotato",
    "dentro",
    "deposito",
    "derapata",
    "derivare",
    "deroga",
    "descritto",
    "deserto",
    "desiderio",
    "desumere",
    "detersivo",
    "devoto",
    "diametro",
    "dicembre",
    "diedro",
    "difeso",
    "diffuso",
    "digerire",
    "digitale",
    "diluvio",
    "dinamico",
    "dinnanzi",
    "dipinto",
    "diploma",
    "dipolo",
    "diradare",
    "dire",
    "dirotto",
    "dirupo",
    "disagio",
    "discreto",
    "disfare",
    "disgelo",
    "disposto",
    "distanza",
    "disumano",
    "dito",
    "divano",
    "divelto",
    "dividere",
    "divorato",
    "doblone",
    "docente",
    "doganale",
    "dogma",
    "dolce",
    "domato",
    "domenica",
    "dominare",
    "dondolo",
    "dono",
    "dormire",
    "dote",
    "dottore",
    "dovuto",
    "dozzina",
    "drago",
    "druido",
    "dubbio",
    "dubitare",
    "ducale",
    "duna",
    "duomo",
    "duplice",
    "duraturo",
    "ebano",
    "eccesso",
    "ecco",
    "eclissi",
    "economia",
    "edera",
    "edicola",
    "edile",
    "editoria",
    "educare",
    "egemonia",
    "egli",
    "egoismo",
    "egregio",
    "elaborato",
    "elargire",
    "elegante",
    "elencato",
    "eletto",
    "elevare",
    "elfico",
    "elica",
    "elmo",
    "elsa",
    "eluso",
    "emanato",
    "emblema",
    "emesso",
    "emiro",
    "emotivo",
    "emozione",
    "empirico",
    "emulo",
    "endemico",
    "enduro",
    "energia",
    "enfasi",
    "enoteca",
    "entrare",
    "enzima",
    "epatite",
    "epilogo",
    "episodio",
    "epocale",
    "eppure",
    "equatore",
    "erario",
    "erba",
    "erboso",
    "erede",
    "eremita",
    "erigere",
    "ermetico",
    "eroe",
    "erosivo",
    "errante",
    "esagono",
    "esame",
    "esanime",
    "esaudire",
    "esca",
    "esempio",
    "esercito",
    "esibito",
    "esigente",
    "esistere",
    "esito",
    "esofago",
    "esortato",
    "esoso",
    "espanso",
    "espresso",
    "essenza",
    "esso",
    "esteso",
    "estimare",
    "estonia",
    "estroso",
    "esultare",
    "etilico",
    "etnico",
    "etrusco",
    "etto",
    "euclideo",
    "europa",
    "evaso",
    "evidenza",
    "evitato",
    "evoluto",
    "evviva",
    "fabbrica",
    "faccenda",
    "fachiro",
    "falco",
    "famiglia",
    "fanale",
    "fanfara",
    "fango",
    "fantasma",
    "fare",
    "farfalla",
    "farinoso",
    "farmaco",
    "fascia",
    "fastoso",
    "fasullo",
    "faticare",
    "fato",
    "favoloso",
    "febbre",
    "fecola",
    "fede",
    "fegato",
    "felpa",
    "feltro",
    "femmina",
    "fendere",
    "fenomeno",
    "fermento",
    "ferro",
    "fertile",
    "fessura",
    "festivo",
    "fetta",
    "feudo",
    "fiaba",
    "fiducia",
    "fifa",
    "figurato",
    "filo",
    "finanza",
    "finestra",
    "finire",
    "fiore",
    "fiscale",
    "fisico",
    "fiume",
    "flacone",
    "flamenco",
    "flebo",
    "flemma",
    "florido",
    "fluente",
    "fluoro",
    "fobico",
    "focaccia",
    "focoso",
    "foderato",
    "foglio",
    "folata",
    "folclore",
    "folgore",
    "fondente",
    "fonetico",
    "fonia",
    "fontana",
    "forbito",
    "forchetta",
    "foresta",
    "formica",
    "fornaio",
    "foro",
    "fortezza",
    "forzare",
    "fosfato",
    "fosso",
    "fracasso",
    "frana",
    "frassino",
    "fratello",
    "freccetta",
    "frenata",
    "fresco",
    "frigo",
    "frollino",
    "fronde",
    "frugale",
    "frutta",
    "fucilata",
    "fucsia",
    "fuggente",
    "fulmine",
    "fulvo",
    "fumante",
    "fumetto",
    "fumoso",
    "fune",
    "funzione",
    "fuoco",
    "furbo",
    "furgone",
    "furore",
    "fuso",
    "futile",
    "gabbiano",
    "gaffe",
    "galateo",
    "gallina",
    "galoppo",
    "gambero",
    "gamma",
    "garanzia",
    "garbo",
    "garofano",
    "garzone",
    "gasdotto",
    "gasolio",
    "gastrico",
    "gatto",
    "gaudio",
    "gazebo",
    "gazzella",
    "geco",
    "gelatina",
    "gelso",
    "gemello",
    "gemmato",
    "gene",
    "genitore",
    "gennaio",
    "genotipo",
    "gergo",
    "ghepardo",
    "ghiaccio",
    "ghisa",
    "giallo",
    "gilda",
    "ginepro",
    "giocare",
    "gioiello",
    "giorno",
    "giove",
    "girato",
    "girone",
    "gittata",
    "giudizio",
    "giurato",
    "giusto",
    "globulo",
    "glutine",
    "gnomo",
    "gobba",
    "golf",
    "gomito",
    "gommone",
    "gonfio",
    "gonna",
    "governo",
    "gracile",
    "grado",
    "grafico",
    "grammo",
    "grande",
    "grattare",
    "gravoso",
    "grazia",
    "greca",
    "gregge",
    "grifone",
    "grigio",
    "grinza",
    "grotta",
    "gruppo",
    "guadagno",
    "guaio",
    "guanto",
    "guardare",
    "gufo",
    "guidare",
    "ibernato",
    "icona",
    "identico",
    "idillio",
    "idolo",
    "idra",
    "idrico",
    "idrogeno",
    "igiene",
    "ignaro",
    "ignorato",
    "ilare",
    "illeso",
    "illogico",
    "illudere",
    "imballo",
    "imbevuto",
    "imbocco",
    "imbuto",
    "immane",
    "immerso",
    "immolato",
    "impacco",
    "impeto",
    "impiego",
    "importo",
    "impronta",
    "inalare",
    "inarcare",
    "inattivo",
    "incanto",
    "incendio",
    "inchino",
    "incisivo",
    "incluso",
    "incontro",
    "incrocio",
    "incubo",
    "indagine",
    "india",
    "indole",
    "inedito",
    "infatti",
    "infilare",
    "inflitto",
    "ingaggio",
    "ingegno",
    "inglese",
    "ingordo",
    "ingrosso",
    "innesco",
    "inodore",
    "inoltrare",
    "inondato",
    "insano",
    "insetto",
    "insieme",
    "insonnia",
    "insulina",
    "intasato",
    "intero",
    "intonaco",
    "intuito",
    "inumidire",
    "invalido",
    "invece",
    "invito",
    "iperbole",
    "ipnotico",
    "ipotesi",
    "ippica",
    "iride",
    "irlanda",
    "ironico",
    "irrigato",
    "irrorare",
    "isolato",
    "isotopo",
    "isterico",
    "istituto",
    "istrice",
    "italia",
    "iterare",
    "labbro",
    "labirinto",
    "lacca",
    "lacerato",
    "lacrima",
    "lacuna",
    "laddove",
    "lago",
    "lampo",
    "lancetta",
    "lanterna",
    "lardoso",
    "larga",
    "laringe",
    "lastra",
    "latenza",
    "latino",
    "lattuga",
    "lavagna",
    "lavoro",
    "legale",
    "leggero",
    "lembo",
    "lentezza",
    "lenza",
    "leone",
    "lepre",
    "lesivo",
    "lessato",
    "lesto",
    "letterale",
    "leva",
    "levigato",
    "libero",
    "lido",
    "lievito",
    "lilla",
    "limatura",
    "limitare",
    "limpido",
    "lineare",
    "lingua",
    "liquido",
    "lira",
    "lirica",
    "lisca",
    "lite",
    "litigio",
    "livrea",
    "locanda",
    "lode",
    "logica",
    "lombare",
    "londra",
    "longevo",
    "loquace",
    "lorenzo",
    "loto",
    "lotteria",
    "luce",
    "lucidato",
    "lumaca",
    "luminoso",
    "lungo",
    "lupo",
    "luppolo",
    "lusinga",
    "lusso",
    "lutto",
    "macabro",
    "macchina",
    "macero",
    "macinato",
    "madama",
    "magico",
    "maglia",
    "magnete",
    "magro",
    "maiolica",
    "malafede",
    "malgrado",
    "malinteso",
    "malsano",
    "malto",
    "malumore",
    "mana",
    "mancia",
    "mandorla",
    "mangiare",
    "manifesto",
    "mannaro",
    "manovra",
    "mansarda",
    "mantide",
    "manubrio",
    "mappa",
    "maratona",
    "marcire",
    "maretta",
    "marmo",
    "marsupio",
    "maschera",
    "massaia",
    "mastino",
    "materasso",
    "matricola",
    "mattone",
    "maturo",
    "mazurca",
    "meandro",
    "meccanico",
    "mecenate",
    "medesimo",
    "meditare",
    "mega",
    "melassa",
    "melis",
    "melodia",
    "meninge",
    "meno",
    "mensola",
    "mercurio",
    "merenda",
    "merlo",
    "meschino",
    "mese",
    "messere",
    "mestolo",
    "metallo",
    "metodo",
    "mettere",
    "miagolare",
    "mica",
    "micelio",
    "michele",
    "microbo",
    "midollo",
    "miele",
    "migliore",
    "milano",
    "milite",
    "mimosa",
    "minerale",
    "mini",
    "minore",
    "mirino",
    "mirtillo",
    "miscela",
    "missiva",
    "misto",
    "misurare",
    "mitezza",
    "mitigare",
    "mitra",
    "mittente",
    "mnemonico",
    "modello",
    "modifica",
    "modulo",
    "mogano",
    "mogio",
    "mole",
    "molosso",
    "monastero",
    "monco",
    "mondina",
    "monetario",
    "monile",
    "monotono",
    "monsone",
    "montato",
    "monviso",
    "mora",
    "mordere",
    "morsicato",
    "mostro",
    "motivato",
    "motosega",
    "motto",
    "movenza",
    "movimento",
    "mozzo",
    "mucca",
    "mucosa",
    "muffa",
    "mughetto",
    "mugnaio",
    "mulatto",
    "mulinello",
    "multiplo",
    "mummia",
    "munto",
    "muovere",
    "murale",
    "musa",
    "muscolo",
    "musica",
    "mutevole",
    "muto",
    "nababbo",
    "nafta",
    "nanometro",
    "narciso",
    "narice",
    "narrato",
    "nascere",
    "nastrare",
    "naturale",
    "nautica",
    "naviglio",
    "nebulosa",
    "necrosi",
    "negativo",
    "negozio",
    "nemmeno",
    "neofita",
    "neretto",
    "nervo",
    "nessuno",
    "nettuno",
    "neutrale",
    "neve",
    "nevrotico",
    "nicchia",
    "ninfa",
    "nitido",
    "nobile",
    "nocivo",
    "nodo",
    "nome",
    "nomina",
    "nordico",
    "normale",
    "norvegese",
    "nostrano",
    "notare",
    "notizia",
    "notturno",
    "novella",
    "nucleo",
    "nulla",
    "numero",
    "nuovo",
    "nutrire",
    "nuvola",
    "nuziale",
    "oasi",
    "obbedire",
    "obbligo",
    "obelisco",
    "oblio",
    "obolo",
    "obsoleto",
    "occasione",
    "occhio",
    "occidente",
    "occorrere",
    "occultare",
    "ocra",
    "oculato",
    "odierno",
    "odorare",
    "offerta",
    "offrire",
    "offuscato",
    "oggetto",
    "oggi",
    "ognuno",
    "olandese",
    "olfatto",
    "oliato",
    "oliva",
    "ologramma",
    "oltre",
    "omaggio",
    "ombelico",
    "ombra",
    "omega",
    "omissione",
    "ondoso",
    "onere",
    "onice",
    "onnivoro",
    "onorevole",
    "onta",
    "operato",
    "opinione",
    "opposto",
    "oracolo",
    "orafo",
    "ordine",
    "orecchino",
    "orefice",
    "orfano",
    "organico",
    "origine",
    "orizzonte",
    "orma",
    "ormeggio",
    "ornativo",
    "orologio",
    "orrendo",
    "orribile",
    "ortensia",
    "ortica",
    "orzata",
    "orzo",
    "osare",
    "oscurare",
    "osmosi",
    "ospedale",
    "ospite",
    "ossa",
    "ossidare",
    "ostacolo",
    "oste",
    "otite",
    "otre",
    "ottagono",
    "ottimo",
    "ottobre",
    "ovale",
    "ovest",
    "ovino",
    "oviparo",
    "ovocito",
    "ovunque",
    "ovviare",
    "ozio",
    "pacchetto",
    "pace",
    "pacifico",
    "padella",
    "padrone",
    "paese",
    "paga",
    "pagina",
    "palazzina",
    "palesare",
    "pallido",
    "palo",
    "palude",
    "pandoro",
    "pannello",
    "paolo",
    "paonazzo",
    "paprica",
    "parabola",
    "parcella",
    "parere",
    "pargolo",
    "pari",
    "parlato",
    "parola",
    "partire",
    "parvenza",
    "parziale",
    "passivo",
    "pasticca",
    "patacca",
    "patologia",
    "pattume",
    "pavone",
    "peccato",
    "pedalare",
    "pedonale",
    "peggio",
    "peloso",
    "penare",
    "pendice",
    "penisola",
    "pennuto",
    "penombra",
    "pensare",
    "pentola",
    "pepe",
    "pepita",
    "perbene",
    "percorso",
    "perdonato",
    "perforare",
    "pergamena",
    "periodo",
    "permesso",
    "perno",
    "perplesso",
    "persuaso",
    "pertugio",
    "pervaso",
    "pesatore",
    "pesista",
    "peso",
    "pestifero",
    "petalo",
    "pettine",
    "petulante",
    "pezzo",
    "piacere",
    "pianta",
    "piattino",
    "piccino",
    "picozza",
    "piega",
    "pietra",
    "piffero",
    "pigiama",
    "pigolio",
    "pigro",
    "pila",
    "pilifero",
    "pillola",
    "pilota",
    "pimpante",
    "pineta",
    "pinna",
    "pinolo",
    "pioggia",
    "piombo",
    "piramide",
    "piretico",
    "pirite",
    "pirolisi",
    "pitone",
    "pizzico",
    "placebo",
    "planare",
    "plasma",
    "platano",
    "plenario",
    "pochezza",
    "poderoso",
    "podismo",
    "poesia",
    "poggiare",
    "polenta",
    "poligono",
    "pollice",
    "polmonite",
    "polpetta",
    "polso",
    "poltrona",
    "polvere",
    "pomice",
    "pomodoro",
    "ponte",
    "popoloso",
    "porfido",
    "poroso",
    "porpora",
    "porre",
    "portata",
    "posa",
    "positivo",
    "possesso",
    "postulato",
    "potassio",
    "potere",
    "pranzo",
    "prassi",
    "pratica",
    "precluso",
    "predica",
    "prefisso",
    "pregiato",
    "prelievo",
    "premere",
    "prenotare",
    "preparato",
    "presenza",
    "pretesto",
    "prevalso",
    "prima",
    "principe",
    "privato",
    "problema",
    "procura",
    "produrre",
    "profumo",
    "progetto",
    "prolunga",
    "promessa",
    "pronome",
    "proposta",
    "proroga",
    "proteso",
    "prova",
    "prudente",
    "prugna",
    "prurito",
    "psiche",
    "pubblico",
    "pudica",
    "pugilato",
    "pugno",
    "pulce",
    "pulito",
    "pulsante",
    "puntare",
    "pupazzo",
    "pupilla",
    "puro",
    "quadro",
    "qualcosa",
    "quasi",
    "querela",
    "quota",
    "raccolto",
    "raddoppio",
    "radicale",
    "radunato",
    "raffica",
    "ragazzo",
    "ragione",
    "ragno",
    "ramarro",
    "ramingo",
    "ramo",
    "randagio",
    "rantolare",
    "rapato",
    "rapina",
    "rappreso",
    "rasatura",
    "raschiato",
    "rasente",
    "rassegna",
    "rastrello",
    "rata",
    "ravveduto",
    "reale",
    "recepire",
    "recinto",
    "recluta",
    "recondito",
    "recupero",
    "reddito",
    "redimere",
    "regalato",
    "registro",
    "regola",
    "regresso",
    "relazione",
    "remare",
    "remoto",
    "renna",
    "replica",
    "reprimere",
    "reputare",
    "resa",
    "residente",
    "responso",
    "restauro",
    "rete",
    "retina",
    "retorica",
    "rettifica",
    "revocato",
    "riassunto",
    "ribadire",
    "ribelle",
    "ribrezzo",
    "ricarica",
    "ricco",
    "ricevere",
    "riciclato",
    "ricordo",
    "ricreduto",
    "ridicolo",
    "ridurre",
    "rifasare",
    "riflesso",
    "riforma",
    "rifugio",
    "rigare",
    "rigettato",
    "righello",
    "rilassato",
    "rilevato",
    "rimanere",
    "rimbalzo",
    "rimedio",
    "rimorchio",
    "rinascita",
    "rincaro",
    "rinforzo",
    "rinnovo",
    "rinomato",
    "rinsavito",
    "rintocco",
    "rinuncia",
    "rinvenire",
    "riparato",
    "ripetuto",
    "ripieno",
    "riportare",
    "ripresa",
    "ripulire",
    "risata",
    "rischio",
    "riserva",
    "risibile",
    "riso",
    "rispetto",
    "ristoro",
    "risultato",
    "risvolto",
    "ritardo",
    "ritegno",
    "ritmico",
    "ritrovo",
    "riunione",
    "riva",
    "riverso",
    "rivincita",
    "rivolto",
    "rizoma",
    "roba",
    "robotico",
    "robusto",
    "roccia",
    "roco",
    "rodaggio",
    "rodere",
    "roditore",
    "rogito",
    "rollio",
    "romantico",
    "rompere",
    "ronzio",
    "rosolare",
    "rospo",
    "rotante",
    "rotondo",
    "rotula",
    "rovescio",
    "rubizzo",
    "rubrica",
    "ruga",
    "rullino",
    "rumine",
    "rumoroso",
    "ruolo",
    "rupe",
    "russare",
    "rustico",
    "sabato",
    "sabbiare",
    "sabotato",
    "sagoma",
    "salasso",
    "saldatura",
    "salgemma",
    "salivare",
    "salmone",
    "salone",
    "saltare",
    "saluto",
    "salvo",
    "sapere",
    "sapido",
    "saporito",
    "saraceno",
    "sarcasmo",
    "sarto",
    "sassoso",
    "satellite",
    "satira",
    "satollo",
    "saturno",
    "savana",
    "savio",
    "saziato",
    "sbadiglio",
    "sbalzo",
    "sbancato",
    "sbarra",
    "sbattere",
    "sbavare",
    "sbendare",
    "sbirciare",
    "sbloccato",
    "sbocciato",
    "sbrinare",
    "sbruffone",
    "sbuffare",
    "scabroso",
    "scadenza",
    "scala",
    "scambiare",
    "scandalo",
    "scapola",
    "scarso",
    "scatenare",
    "scavato",
    "scelto",
    "scenico",
    "scettro",
    "scheda",
    "schiena",
    "sciarpa",
    "scienza",
    "scindere",
    "scippo",
    "sciroppo",
    "scivolo",
    "sclerare",
    "scodella",
    "scolpito",
    "scomparto",
    "sconforto",
    "scoprire",
    "scorta",
    "scossone",
    "scozzese",
    "scriba",
    "scrollare",
    "scrutinio",
    "scuderia",
    "scultore",
    "scuola",
    "scuro",
    "scusare",
    "sdebitare",
    "sdoganare",
    "seccatura",
    "secondo",
    "sedano",
    "seggiola",
    "segnalato",
    "segregato",
    "seguito",
    "selciato",
    "selettivo",
    "sella",
    "selvaggio",
    "semaforo",
    "sembrare",
    "seme",
    "seminato",
    "sempre",
    "senso",
    "sentire",
    "sepolto",
    "sequenza",
    "serata",
    "serbato",
    "sereno",
    "serio",
    "serpente",
    "serraglio",
    "servire",
    "sestina",
    "setola",
    "settimana",
    "sfacelo",
    "sfaldare",
    "sfamato",
    "sfarzoso",
    "sfaticato",
    "sfera",
    "sfida",
    "sfilato",
    "sfinge",
    "sfocato",
    "sfoderare",
    "sfogo",
    "sfoltire",
    "sforzato",
    "sfratto",
    "sfruttato",
    "sfuggito",
    "sfumare",
    "sfuso",
    "sgabello",
    "sgarbato",
    "sgonfiare",
    "sgorbio",
    "sgrassato",
    "sguardo",
    "sibilo",
    "siccome",
    "sierra",
    "sigla",
    "signore",
    "silenzio",
    "sillaba",
    "simbolo",
    "simpatico",
    "simulato",
    "sinfonia",
    "singolo",
    "sinistro",
    "sino",
    "sintesi",
    "sinusoide",
    "sipario",
    "sisma",
    "sistole",
    "situato",
    "slitta",
    "slogatura",
    "sloveno",
    "smarrito",
    "smemorato",
    "smentito",
    "smeraldo",
    "smilzo",
    "smontare",
    "smottato",
    "smussato",
    "snellire",
    "snervato",
    "snodo",
    "sobbalzo",
    "sobrio",
    "soccorso",
    "sociale",
    "sodale",
    "soffitto",
    "sogno",
    "soldato",
    "solenne",
    "solido",
    "sollazzo",
    "solo",
    "solubile",
    "solvente",
    "somatico",
    "somma",
    "sonda",
    "sonetto",
    "sonnifero",
    "sopire",
    "soppeso",
    "sopra",
    "sorgere",
    "sorpasso",
    "sorriso",
    "sorso",
    "sorteggio",
    "sorvolato",
    "sospiro",
    "sosta",
    "sottile",
    "spada",
    "spalla",
    "spargere",
    "spatola",
    "spavento",
    "spazzola",
    "specie",
    "spedire",
    "spegnere",
    "spelatura",
    "speranza",
    "spessore",
    "spettrale",
    "spezzato",
    "spia",
    "spigoloso",
    "spillato",
    "spinoso",
    "spirale",
    "splendido",
    "sportivo",
    "sposo",
    "spranga",
    "sprecare",
    "spronato",
    "spruzzo",
    "spuntino",
    "squillo",
    "sradicare",
    "srotolato",
    "stabile",
    "stacco",
    "staffa",
    "stagnare",
    "stampato",
    "stantio",
    "starnuto",
    "stasera",
    "statuto",
    "stelo",
    "steppa",
    "sterzo",
    "stiletto",
    "stima",
    "stirpe",
    "stivale",
    "stizzoso",
    "stonato",
    "storico",
    "strappo",
    "stregato",
    "stridulo",
    "strozzare",
    "strutto",
    "stuccare",
    "stufo",
    "stupendo",
    "subentro",
    "succoso",
    "sudore",
    "suggerito",
    "sugo",
    "sultano",
    "suonare",
    "superbo",
    "supporto",
    "surgelato",
    "surrogato",
    "sussurro",
    "sutura",
    "svagare",
    "svedese",
    "sveglio",
    "svelare",
    "svenuto",
    "svezia",
    "sviluppo",
    "svista",
    "svizzera",
    "svolta",
    "svuotare",
    "tabacco",
    "tabulato",
    "tacciare",
    "taciturno",
    "tale",
    "talismano",
    "tampone",
    "tannino",
    "tara",
    "tardivo",
    "targato",
    "tariffa",
    "tarpare",
    "tartaruga",
    "tasto",
    "tattico",
    "taverna",
    "tavolata",
    "tazza",
    "teca",
    "tecnico",
    "telefono",
    "temerario",
    "tempo",
    "temuto",
    "tendone",
    "tenero",
    "tensione",
    "tentacolo",
    "teorema",
    "terme",
    "terrazzo",
    "terzetto",
    "tesi",
    "tesserato",
    "testato",
    "tetro",
    "tettoia",
    "tifare",
    "tigella",
    "timbro",
    "tinto",
    "tipico",
    "tipografo",
    "tiraggio",
    "tiro",
    "titanio",
    "titolo",
    "titubante",
    "tizio",
    "tizzone",
    "toccare",
    "tollerare",
    "tolto",
    "tombola",
    "tomo",
    "tonfo",
    "tonsilla",
    "topazio",
    "topologia",
    "toppa",
    "torba",
    "tornare",
    "torrone",
    "tortora",
    "toscano",
    "tossire",
    "tostatura",
    "totano",
    "trabocco",
    "trachea",
    "trafila",
    "tragedia",
    "tralcio",
    "tramonto",
    "transito",
    "trapano",
    "trarre",
    "trasloco",
    "trattato",
    "trave",
    "treccia",
    "tremolio",
    "trespolo",
    "tributo",
    "tricheco",
    "trifoglio",
    "trillo",
    "trincea",
    "trio",
    "tristezza",
    "triturato",
    "trivella",
    "tromba",
    "trono",
    "troppo",
    "trottola",
    "trovare",
    "truccato",
    "tubatura",
    "tuffato",
    "tulipano",
    "tumulto",
    "tunisia",
    "turbare",
    "turchino",
    "tuta",
    "tutela",
    "ubicato",
    "uccello",
    "uccisore",
    "udire",
    "uditivo",
    "uffa",
    "ufficio",
    "uguale",
    "ulisse",
    "ultimato",
    "umano",
    "umile",
    "umorismo",
    "uncinetto",
    "ungere",
    "ungherese",
    "unicorno",
    "unificato",
    "unisono",
    "unitario",
    "unte",
    "uovo",
    "upupa",
    "uragano",
    "urgenza",
    "urlo",
    "usanza",
    "usato",
    "uscito",
    "usignolo",
    "usuraio",
    "utensile",
    "utilizzo",
    "utopia",
    "vacante",
    "vaccinato",
    "vagabondo",
    "vagliato",
    "valanga",
    "valgo",
    "valico",
    "valletta",
    "valoroso",
    "valutare",
    "valvola",
    "vampata",
    "vangare",
    "vanitoso",
    "vano",
    "vantaggio",
    "vanvera",
    "vapore",
    "varano",
    "varcato",
    "variante",
    "vasca",
    "vedetta",
    "vedova",
    "veduto",
    "vegetale",
    "veicolo",
    "velcro",
    "velina",
    "velluto",
    "veloce",
    "venato",
    "vendemmia",
    "vento",
    "verace",
    "verbale",
    "vergogna",
    "verifica",
    "vero",
    "verruca",
    "verticale",
    "vescica",
    "vessillo",
    "vestale",
    "veterano",
    "vetrina",
    "vetusto",
    "viandante",
    "vibrante",
    "vicenda",
    "vichingo",
    "vicinanza",
    "vidimare",
    "vigilia",
    "vigneto",
    "vigore",
    "vile",
    "villano",
    "vimini",
    "vincitore",
    "viola",
    "vipera",
    "virgola",
    "virologo",
    "virulento",
    "viscoso",
    "visione",
    "vispo",
    "vissuto",
    "visura",
    "vita",
    "vitello",
    "vittima",
    "vivanda",
    "vivido",
    "viziare",
    "voce",
    "voga",
    "volatile",
    "volere",
    "volpe",
    "voragine",
    "vulcano",
    "zampogna",
    "zanna",
    "zappato",
    "zattera",
    "zavorra",
    "zefiro",
    "zelante",
    "zelo",
    "zenzero",
    "zerbino",
    "zibetto",
    "zinco",
    "zircone",
    "zitto",
    "zolla",
    "zotico",
    "zucchero",
    "zufolo",
    "zulu",
    "zuppa"
];
module.exports = italian;

},{}],"hivIv":[function(require,module,exports) {
"use strict";
var japanese = [
    "あいこくしん",
    "あいさつ",
    "あいだ",
    "あおぞら",
    "あかちゃん",
    "あきる",
    "あけがた",
    "あける",
    "あこがれる",
    "あさい",
    "あさひ",
    "あしあと",
    "あじわう",
    "あずかる",
    "あずき",
    "あそぶ",
    "あたえる",
    "あたためる",
    "あたりまえ",
    "あたる",
    "あつい",
    "あつかう",
    "あっしゅく",
    "あつまり",
    "あつめる",
    "あてな",
    "あてはまる",
    "あひる",
    "あぶら",
    "あぶる",
    "あふれる",
    "あまい",
    "あまど",
    "あまやかす",
    "あまり",
    "あみもの",
    "あめりか",
    "あやまる",
    "あゆむ",
    "あらいぐま",
    "あらし",
    "あらすじ",
    "あらためる",
    "あらゆる",
    "あらわす",
    "ありがとう",
    "あわせる",
    "あわてる",
    "あんい",
    "あんがい",
    "あんこ",
    "あんぜん",
    "あんてい",
    "あんない",
    "あんまり",
    "いいだす",
    "いおん",
    "いがい",
    "いがく",
    "いきおい",
    "いきなり",
    "いきもの",
    "いきる",
    "いくじ",
    "いくぶん",
    "いけばな",
    "いけん",
    "いこう",
    "いこく",
    "いこつ",
    "いさましい",
    "いさん",
    "いしき",
    "いじゅう",
    "いじょう",
    "いじわる",
    "いずみ",
    "いずれ",
    "いせい",
    "いせえび",
    "いせかい",
    "いせき",
    "いぜん",
    "いそうろう",
    "いそがしい",
    "いだい",
    "いだく",
    "いたずら",
    "いたみ",
    "いたりあ",
    "いちおう",
    "いちじ",
    "いちど",
    "いちば",
    "いちぶ",
    "いちりゅう",
    "いつか",
    "いっしゅん",
    "いっせい",
    "いっそう",
    "いったん",
    "いっち",
    "いってい",
    "いっぽう",
    "いてざ",
    "いてん",
    "いどう",
    "いとこ",
    "いない",
    "いなか",
    "いねむり",
    "いのち",
    "いのる",
    "いはつ",
    "いばる",
    "いはん",
    "いびき",
    "いひん",
    "いふく",
    "いへん",
    "いほう",
    "いみん",
    "いもうと",
    "いもたれ",
    "いもり",
    "いやがる",
    "いやす",
    "いよかん",
    "いよく",
    "いらい",
    "いらすと",
    "いりぐち",
    "いりょう",
    "いれい",
    "いれもの",
    "いれる",
    "いろえんぴつ",
    "いわい",
    "いわう",
    "いわかん",
    "いわば",
    "いわゆる",
    "いんげんまめ",
    "いんさつ",
    "いんしょう",
    "いんよう",
    "うえき",
    "うえる",
    "うおざ",
    "うがい",
    "うかぶ",
    "うかべる",
    "うきわ",
    "うくらいな",
    "うくれれ",
    "うけたまわる",
    "うけつけ",
    "うけとる",
    "うけもつ",
    "うける",
    "うごかす",
    "うごく",
    "うこん",
    "うさぎ",
    "うしなう",
    "うしろがみ",
    "うすい",
    "うすぎ",
    "うすぐらい",
    "うすめる",
    "うせつ",
    "うちあわせ",
    "うちがわ",
    "うちき",
    "うちゅう",
    "うっかり",
    "うつくしい",
    "うったえる",
    "うつる",
    "うどん",
    "うなぎ",
    "うなじ",
    "うなずく",
    "うなる",
    "うねる",
    "うのう",
    "うぶげ",
    "うぶごえ",
    "うまれる",
    "うめる",
    "うもう",
    "うやまう",
    "うよく",
    "うらがえす",
    "うらぐち",
    "うらない",
    "うりあげ",
    "うりきれ",
    "うるさい",
    "うれしい",
    "うれゆき",
    "うれる",
    "うろこ",
    "うわき",
    "うわさ",
    "うんこう",
    "うんちん",
    "うんてん",
    "うんどう",
    "えいえん",
    "えいが",
    "えいきょう",
    "えいご",
    "えいせい",
    "えいぶん",
    "えいよう",
    "えいわ",
    "えおり",
    "えがお",
    "えがく",
    "えきたい",
    "えくせる",
    "えしゃく",
    "えすて",
    "えつらん",
    "えのぐ",
    "えほうまき",
    "えほん",
    "えまき",
    "えもじ",
    "えもの",
    "えらい",
    "えらぶ",
    "えりあ",
    "えんえん",
    "えんかい",
    "えんぎ",
    "えんげき",
    "えんしゅう",
    "えんぜつ",
    "えんそく",
    "えんちょう",
    "えんとつ",
    "おいかける",
    "おいこす",
    "おいしい",
    "おいつく",
    "おうえん",
    "おうさま",
    "おうじ",
    "おうせつ",
    "おうたい",
    "おうふく",
    "おうべい",
    "おうよう",
    "おえる",
    "おおい",
    "おおう",
    "おおどおり",
    "おおや",
    "おおよそ",
    "おかえり",
    "おかず",
    "おがむ",
    "おかわり",
    "おぎなう",
    "おきる",
    "おくさま",
    "おくじょう",
    "おくりがな",
    "おくる",
    "おくれる",
    "おこす",
    "おこなう",
    "おこる",
    "おさえる",
    "おさない",
    "おさめる",
    "おしいれ",
    "おしえる",
    "おじぎ",
    "おじさん",
    "おしゃれ",
    "おそらく",
    "おそわる",
    "おたがい",
    "おたく",
    "おだやか",
    "おちつく",
    "おっと",
    "おつり",
    "おでかけ",
    "おとしもの",
    "おとなしい",
    "おどり",
    "おどろかす",
    "おばさん",
    "おまいり",
    "おめでとう",
    "おもいで",
    "おもう",
    "おもたい",
    "おもちゃ",
    "おやつ",
    "おやゆび",
    "およぼす",
    "おらんだ",
    "おろす",
    "おんがく",
    "おんけい",
    "おんしゃ",
    "おんせん",
    "おんだん",
    "おんちゅう",
    "おんどけい",
    "かあつ",
    "かいが",
    "がいき",
    "がいけん",
    "がいこう",
    "かいさつ",
    "かいしゃ",
    "かいすいよく",
    "かいぜん",
    "かいぞうど",
    "かいつう",
    "かいてん",
    "かいとう",
    "かいふく",
    "がいへき",
    "かいほう",
    "かいよう",
    "がいらい",
    "かいわ",
    "かえる",
    "かおり",
    "かかえる",
    "かがく",
    "かがし",
    "かがみ",
    "かくご",
    "かくとく",
    "かざる",
    "がぞう",
    "かたい",
    "かたち",
    "がちょう",
    "がっきゅう",
    "がっこう",
    "がっさん",
    "がっしょう",
    "かなざわし",
    "かのう",
    "がはく",
    "かぶか",
    "かほう",
    "かほご",
    "かまう",
    "かまぼこ",
    "かめれおん",
    "かゆい",
    "かようび",
    "からい",
    "かるい",
    "かろう",
    "かわく",
    "かわら",
    "がんか",
    "かんけい",
    "かんこう",
    "かんしゃ",
    "かんそう",
    "かんたん",
    "かんち",
    "がんばる",
    "きあい",
    "きあつ",
    "きいろ",
    "ぎいん",
    "きうい",
    "きうん",
    "きえる",
    "きおう",
    "きおく",
    "きおち",
    "きおん",
    "きかい",
    "きかく",
    "きかんしゃ",
    "ききて",
    "きくばり",
    "きくらげ",
    "きけんせい",
    "きこう",
    "きこえる",
    "きこく",
    "きさい",
    "きさく",
    "きさま",
    "きさらぎ",
    "ぎじかがく",
    "ぎしき",
    "ぎじたいけん",
    "ぎじにってい",
    "ぎじゅつしゃ",
    "きすう",
    "きせい",
    "きせき",
    "きせつ",
    "きそう",
    "きぞく",
    "きぞん",
    "きたえる",
    "きちょう",
    "きつえん",
    "ぎっちり",
    "きつつき",
    "きつね",
    "きてい",
    "きどう",
    "きどく",
    "きない",
    "きなが",
    "きなこ",
    "きぬごし",
    "きねん",
    "きのう",
    "きのした",
    "きはく",
    "きびしい",
    "きひん",
    "きふく",
    "きぶん",
    "きぼう",
    "きほん",
    "きまる",
    "きみつ",
    "きむずかしい",
    "きめる",
    "きもだめし",
    "きもち",
    "きもの",
    "きゃく",
    "きやく",
    "ぎゅうにく",
    "きよう",
    "きょうりゅう",
    "きらい",
    "きらく",
    "きりん",
    "きれい",
    "きれつ",
    "きろく",
    "ぎろん",
    "きわめる",
    "ぎんいろ",
    "きんかくじ",
    "きんじょ",
    "きんようび",
    "ぐあい",
    "くいず",
    "くうかん",
    "くうき",
    "くうぐん",
    "くうこう",
    "ぐうせい",
    "くうそう",
    "ぐうたら",
    "くうふく",
    "くうぼ",
    "くかん",
    "くきょう",
    "くげん",
    "ぐこう",
    "くさい",
    "くさき",
    "くさばな",
    "くさる",
    "くしゃみ",
    "くしょう",
    "くすのき",
    "くすりゆび",
    "くせげ",
    "くせん",
    "ぐたいてき",
    "くださる",
    "くたびれる",
    "くちこみ",
    "くちさき",
    "くつした",
    "ぐっすり",
    "くつろぐ",
    "くとうてん",
    "くどく",
    "くなん",
    "くねくね",
    "くのう",
    "くふう",
    "くみあわせ",
    "くみたてる",
    "くめる",
    "くやくしょ",
    "くらす",
    "くらべる",
    "くるま",
    "くれる",
    "くろう",
    "くわしい",
    "ぐんかん",
    "ぐんしょく",
    "ぐんたい",
    "ぐんて",
    "けあな",
    "けいかく",
    "けいけん",
    "けいこ",
    "けいさつ",
    "げいじゅつ",
    "けいたい",
    "げいのうじん",
    "けいれき",
    "けいろ",
    "けおとす",
    "けおりもの",
    "げきか",
    "げきげん",
    "げきだん",
    "げきちん",
    "げきとつ",
    "げきは",
    "げきやく",
    "げこう",
    "げこくじょう",
    "げざい",
    "けさき",
    "げざん",
    "けしき",
    "けしごむ",
    "けしょう",
    "げすと",
    "けたば",
    "けちゃっぷ",
    "けちらす",
    "けつあつ",
    "けつい",
    "けつえき",
    "けっこん",
    "けつじょ",
    "けっせき",
    "けってい",
    "けつまつ",
    "げつようび",
    "げつれい",
    "けつろん",
    "げどく",
    "けとばす",
    "けとる",
    "けなげ",
    "けなす",
    "けなみ",
    "けぬき",
    "げねつ",
    "けねん",
    "けはい",
    "げひん",
    "けぶかい",
    "げぼく",
    "けまり",
    "けみかる",
    "けむし",
    "けむり",
    "けもの",
    "けらい",
    "けろけろ",
    "けわしい",
    "けんい",
    "けんえつ",
    "けんお",
    "けんか",
    "げんき",
    "けんげん",
    "けんこう",
    "けんさく",
    "けんしゅう",
    "けんすう",
    "げんそう",
    "けんちく",
    "けんてい",
    "けんとう",
    "けんない",
    "けんにん",
    "げんぶつ",
    "けんま",
    "けんみん",
    "けんめい",
    "けんらん",
    "けんり",
    "こあくま",
    "こいぬ",
    "こいびと",
    "ごうい",
    "こうえん",
    "こうおん",
    "こうかん",
    "ごうきゅう",
    "ごうけい",
    "こうこう",
    "こうさい",
    "こうじ",
    "こうすい",
    "ごうせい",
    "こうそく",
    "こうたい",
    "こうちゃ",
    "こうつう",
    "こうてい",
    "こうどう",
    "こうない",
    "こうはい",
    "ごうほう",
    "ごうまん",
    "こうもく",
    "こうりつ",
    "こえる",
    "こおり",
    "ごかい",
    "ごがつ",
    "ごかん",
    "こくご",
    "こくさい",
    "こくとう",
    "こくない",
    "こくはく",
    "こぐま",
    "こけい",
    "こける",
    "ここのか",
    "こころ",
    "こさめ",
    "こしつ",
    "こすう",
    "こせい",
    "こせき",
    "こぜん",
    "こそだて",
    "こたい",
    "こたえる",
    "こたつ",
    "こちょう",
    "こっか",
    "こつこつ",
    "こつばん",
    "こつぶ",
    "こてい",
    "こてん",
    "ことがら",
    "ことし",
    "ことば",
    "ことり",
    "こなごな",
    "こねこね",
    "このまま",
    "このみ",
    "このよ",
    "ごはん",
    "こひつじ",
    "こふう",
    "こふん",
    "こぼれる",
    "ごまあぶら",
    "こまかい",
    "ごますり",
    "こまつな",
    "こまる",
    "こむぎこ",
    "こもじ",
    "こもち",
    "こもの",
    "こもん",
    "こやく",
    "こやま",
    "こゆう",
    "こゆび",
    "こよい",
    "こよう",
    "こりる",
    "これくしょん",
    "ころっけ",
    "こわもて",
    "こわれる",
    "こんいん",
    "こんかい",
    "こんき",
    "こんしゅう",
    "こんすい",
    "こんだて",
    "こんとん",
    "こんなん",
    "こんびに",
    "こんぽん",
    "こんまけ",
    "こんや",
    "こんれい",
    "こんわく",
    "ざいえき",
    "さいかい",
    "さいきん",
    "ざいげん",
    "ざいこ",
    "さいしょ",
    "さいせい",
    "ざいたく",
    "ざいちゅう",
    "さいてき",
    "ざいりょう",
    "さうな",
    "さかいし",
    "さがす",
    "さかな",
    "さかみち",
    "さがる",
    "さぎょう",
    "さくし",
    "さくひん",
    "さくら",
    "さこく",
    "さこつ",
    "さずかる",
    "ざせき",
    "さたん",
    "さつえい",
    "ざつおん",
    "ざっか",
    "ざつがく",
    "さっきょく",
    "ざっし",
    "さつじん",
    "ざっそう",
    "さつたば",
    "さつまいも",
    "さてい",
    "さといも",
    "さとう",
    "さとおや",
    "さとし",
    "さとる",
    "さのう",
    "さばく",
    "さびしい",
    "さべつ",
    "さほう",
    "さほど",
    "さます",
    "さみしい",
    "さみだれ",
    "さむけ",
    "さめる",
    "さやえんどう",
    "さゆう",
    "さよう",
    "さよく",
    "さらだ",
    "ざるそば",
    "さわやか",
    "さわる",
    "さんいん",
    "さんか",
    "さんきゃく",
    "さんこう",
    "さんさい",
    "ざんしょ",
    "さんすう",
    "さんせい",
    "さんそ",
    "さんち",
    "さんま",
    "さんみ",
    "さんらん",
    "しあい",
    "しあげ",
    "しあさって",
    "しあわせ",
    "しいく",
    "しいん",
    "しうち",
    "しえい",
    "しおけ",
    "しかい",
    "しかく",
    "じかん",
    "しごと",
    "しすう",
    "じだい",
    "したうけ",
    "したぎ",
    "したて",
    "したみ",
    "しちょう",
    "しちりん",
    "しっかり",
    "しつじ",
    "しつもん",
    "してい",
    "してき",
    "してつ",
    "じてん",
    "じどう",
    "しなぎれ",
    "しなもの",
    "しなん",
    "しねま",
    "しねん",
    "しのぐ",
    "しのぶ",
    "しはい",
    "しばかり",
    "しはつ",
    "しはらい",
    "しはん",
    "しひょう",
    "しふく",
    "じぶん",
    "しへい",
    "しほう",
    "しほん",
    "しまう",
    "しまる",
    "しみん",
    "しむける",
    "じむしょ",
    "しめい",
    "しめる",
    "しもん",
    "しゃいん",
    "しゃうん",
    "しゃおん",
    "じゃがいも",
    "しやくしょ",
    "しゃくほう",
    "しゃけん",
    "しゃこ",
    "しゃざい",
    "しゃしん",
    "しゃせん",
    "しゃそう",
    "しゃたい",
    "しゃちょう",
    "しゃっきん",
    "じゃま",
    "しゃりん",
    "しゃれい",
    "じゆう",
    "じゅうしょ",
    "しゅくはく",
    "じゅしん",
    "しゅっせき",
    "しゅみ",
    "しゅらば",
    "じゅんばん",
    "しょうかい",
    "しょくたく",
    "しょっけん",
    "しょどう",
    "しょもつ",
    "しらせる",
    "しらべる",
    "しんか",
    "しんこう",
    "じんじゃ",
    "しんせいじ",
    "しんちく",
    "しんりん",
    "すあげ",
    "すあし",
    "すあな",
    "ずあん",
    "すいえい",
    "すいか",
    "すいとう",
    "ずいぶん",
    "すいようび",
    "すうがく",
    "すうじつ",
    "すうせん",
    "すおどり",
    "すきま",
    "すくう",
    "すくない",
    "すける",
    "すごい",
    "すこし",
    "ずさん",
    "すずしい",
    "すすむ",
    "すすめる",
    "すっかり",
    "ずっしり",
    "ずっと",
    "すてき",
    "すてる",
    "すねる",
    "すのこ",
    "すはだ",
    "すばらしい",
    "ずひょう",
    "ずぶぬれ",
    "すぶり",
    "すふれ",
    "すべて",
    "すべる",
    "ずほう",
    "すぼん",
    "すまい",
    "すめし",
    "すもう",
    "すやき",
    "すらすら",
    "するめ",
    "すれちがう",
    "すろっと",
    "すわる",
    "すんぜん",
    "すんぽう",
    "せあぶら",
    "せいかつ",
    "せいげん",
    "せいじ",
    "せいよう",
    "せおう",
    "せかいかん",
    "せきにん",
    "せきむ",
    "せきゆ",
    "せきらんうん",
    "せけん",
    "せこう",
    "せすじ",
    "せたい",
    "せたけ",
    "せっかく",
    "せっきゃく",
    "ぜっく",
    "せっけん",
    "せっこつ",
    "せっさたくま",
    "せつぞく",
    "せつだん",
    "せつでん",
    "せっぱん",
    "せつび",
    "せつぶん",
    "せつめい",
    "せつりつ",
    "せなか",
    "せのび",
    "せはば",
    "せびろ",
    "せぼね",
    "せまい",
    "せまる",
    "せめる",
    "せもたれ",
    "せりふ",
    "ぜんあく",
    "せんい",
    "せんえい",
    "せんか",
    "せんきょ",
    "せんく",
    "せんげん",
    "ぜんご",
    "せんさい",
    "せんしゅ",
    "せんすい",
    "せんせい",
    "せんぞ",
    "せんたく",
    "せんちょう",
    "せんてい",
    "せんとう",
    "せんぬき",
    "せんねん",
    "せんぱい",
    "ぜんぶ",
    "ぜんぽう",
    "せんむ",
    "せんめんじょ",
    "せんもん",
    "せんやく",
    "せんゆう",
    "せんよう",
    "ぜんら",
    "ぜんりゃく",
    "せんれい",
    "せんろ",
    "そあく",
    "そいとげる",
    "そいね",
    "そうがんきょう",
    "そうき",
    "そうご",
    "そうしん",
    "そうだん",
    "そうなん",
    "そうび",
    "そうめん",
    "そうり",
    "そえもの",
    "そえん",
    "そがい",
    "そげき",
    "そこう",
    "そこそこ",
    "そざい",
    "そしな",
    "そせい",
    "そせん",
    "そそぐ",
    "そだてる",
    "そつう",
    "そつえん",
    "そっかん",
    "そつぎょう",
    "そっけつ",
    "そっこう",
    "そっせん",
    "そっと",
    "そとがわ",
    "そとづら",
    "そなえる",
    "そなた",
    "そふぼ",
    "そぼく",
    "そぼろ",
    "そまつ",
    "そまる",
    "そむく",
    "そむりえ",
    "そめる",
    "そもそも",
    "そよかぜ",
    "そらまめ",
    "そろう",
    "そんかい",
    "そんけい",
    "そんざい",
    "そんしつ",
    "そんぞく",
    "そんちょう",
    "ぞんび",
    "ぞんぶん",
    "そんみん",
    "たあい",
    "たいいん",
    "たいうん",
    "たいえき",
    "たいおう",
    "だいがく",
    "たいき",
    "たいぐう",
    "たいけん",
    "たいこ",
    "たいざい",
    "だいじょうぶ",
    "だいすき",
    "たいせつ",
    "たいそう",
    "だいたい",
    "たいちょう",
    "たいてい",
    "だいどころ",
    "たいない",
    "たいねつ",
    "たいのう",
    "たいはん",
    "だいひょう",
    "たいふう",
    "たいへん",
    "たいほ",
    "たいまつばな",
    "たいみんぐ",
    "たいむ",
    "たいめん",
    "たいやき",
    "たいよう",
    "たいら",
    "たいりょく",
    "たいる",
    "たいわん",
    "たうえ",
    "たえる",
    "たおす",
    "たおる",
    "たおれる",
    "たかい",
    "たかね",
    "たきび",
    "たくさん",
    "たこく",
    "たこやき",
    "たさい",
    "たしざん",
    "だじゃれ",
    "たすける",
    "たずさわる",
    "たそがれ",
    "たたかう",
    "たたく",
    "ただしい",
    "たたみ",
    "たちばな",
    "だっかい",
    "だっきゃく",
    "だっこ",
    "だっしゅつ",
    "だったい",
    "たてる",
    "たとえる",
    "たなばた",
    "たにん",
    "たぬき",
    "たのしみ",
    "たはつ",
    "たぶん",
    "たべる",
    "たぼう",
    "たまご",
    "たまる",
    "だむる",
    "ためいき",
    "ためす",
    "ためる",
    "たもつ",
    "たやすい",
    "たよる",
    "たらす",
    "たりきほんがん",
    "たりょう",
    "たりる",
    "たると",
    "たれる",
    "たれんと",
    "たろっと",
    "たわむれる",
    "だんあつ",
    "たんい",
    "たんおん",
    "たんか",
    "たんき",
    "たんけん",
    "たんご",
    "たんさん",
    "たんじょうび",
    "だんせい",
    "たんそく",
    "たんたい",
    "だんち",
    "たんてい",
    "たんとう",
    "だんな",
    "たんにん",
    "だんねつ",
    "たんのう",
    "たんぴん",
    "だんぼう",
    "たんまつ",
    "たんめい",
    "だんれつ",
    "だんろ",
    "だんわ",
    "ちあい",
    "ちあん",
    "ちいき",
    "ちいさい",
    "ちえん",
    "ちかい",
    "ちから",
    "ちきゅう",
    "ちきん",
    "ちけいず",
    "ちけん",
    "ちこく",
    "ちさい",
    "ちしき",
    "ちしりょう",
    "ちせい",
    "ちそう",
    "ちたい",
    "ちたん",
    "ちちおや",
    "ちつじょ",
    "ちてき",
    "ちてん",
    "ちぬき",
    "ちぬり",
    "ちのう",
    "ちひょう",
    "ちへいせん",
    "ちほう",
    "ちまた",
    "ちみつ",
    "ちみどろ",
    "ちめいど",
    "ちゃんこなべ",
    "ちゅうい",
    "ちゆりょく",
    "ちょうし",
    "ちょさくけん",
    "ちらし",
    "ちらみ",
    "ちりがみ",
    "ちりょう",
    "ちるど",
    "ちわわ",
    "ちんたい",
    "ちんもく",
    "ついか",
    "ついたち",
    "つうか",
    "つうじょう",
    "つうはん",
    "つうわ",
    "つかう",
    "つかれる",
    "つくね",
    "つくる",
    "つけね",
    "つける",
    "つごう",
    "つたえる",
    "つづく",
    "つつじ",
    "つつむ",
    "つとめる",
    "つながる",
    "つなみ",
    "つねづね",
    "つのる",
    "つぶす",
    "つまらない",
    "つまる",
    "つみき",
    "つめたい",
    "つもり",
    "つもる",
    "つよい",
    "つるぼ",
    "つるみく",
    "つわもの",
    "つわり",
    "てあし",
    "てあて",
    "てあみ",
    "ていおん",
    "ていか",
    "ていき",
    "ていけい",
    "ていこく",
    "ていさつ",
    "ていし",
    "ていせい",
    "ていたい",
    "ていど",
    "ていねい",
    "ていひょう",
    "ていへん",
    "ていぼう",
    "てうち",
    "ておくれ",
    "てきとう",
    "てくび",
    "でこぼこ",
    "てさぎょう",
    "てさげ",
    "てすり",
    "てそう",
    "てちがい",
    "てちょう",
    "てつがく",
    "てつづき",
    "でっぱ",
    "てつぼう",
    "てつや",
    "でぬかえ",
    "てぬき",
    "てぬぐい",
    "てのひら",
    "てはい",
    "てぶくろ",
    "てふだ",
    "てほどき",
    "てほん",
    "てまえ",
    "てまきずし",
    "てみじか",
    "てみやげ",
    "てらす",
    "てれび",
    "てわけ",
    "てわたし",
    "でんあつ",
    "てんいん",
    "てんかい",
    "てんき",
    "てんぐ",
    "てんけん",
    "てんごく",
    "てんさい",
    "てんし",
    "てんすう",
    "でんち",
    "てんてき",
    "てんとう",
    "てんない",
    "てんぷら",
    "てんぼうだい",
    "てんめつ",
    "てんらんかい",
    "でんりょく",
    "でんわ",
    "どあい",
    "といれ",
    "どうかん",
    "とうきゅう",
    "どうぐ",
    "とうし",
    "とうむぎ",
    "とおい",
    "とおか",
    "とおく",
    "とおす",
    "とおる",
    "とかい",
    "とかす",
    "ときおり",
    "ときどき",
    "とくい",
    "とくしゅう",
    "とくてん",
    "とくに",
    "とくべつ",
    "とけい",
    "とける",
    "とこや",
    "とさか",
    "としょかん",
    "とそう",
    "とたん",
    "とちゅう",
    "とっきゅう",
    "とっくん",
    "とつぜん",
    "とつにゅう",
    "とどける",
    "ととのえる",
    "とない",
    "となえる",
    "となり",
    "とのさま",
    "とばす",
    "どぶがわ",
    "とほう",
    "とまる",
    "とめる",
    "ともだち",
    "ともる",
    "どようび",
    "とらえる",
    "とんかつ",
    "どんぶり",
    "ないかく",
    "ないこう",
    "ないしょ",
    "ないす",
    "ないせん",
    "ないそう",
    "なおす",
    "ながい",
    "なくす",
    "なげる",
    "なこうど",
    "なさけ",
    "なたでここ",
    "なっとう",
    "なつやすみ",
    "ななおし",
    "なにごと",
    "なにもの",
    "なにわ",
    "なのか",
    "なふだ",
    "なまいき",
    "なまえ",
    "なまみ",
    "なみだ",
    "なめらか",
    "なめる",
    "なやむ",
    "ならう",
    "ならび",
    "ならぶ",
    "なれる",
    "なわとび",
    "なわばり",
    "にあう",
    "にいがた",
    "にうけ",
    "におい",
    "にかい",
    "にがて",
    "にきび",
    "にくしみ",
    "にくまん",
    "にげる",
    "にさんかたんそ",
    "にしき",
    "にせもの",
    "にちじょう",
    "にちようび",
    "にっか",
    "にっき",
    "にっけい",
    "にっこう",
    "にっさん",
    "にっしょく",
    "にっすう",
    "にっせき",
    "にってい",
    "になう",
    "にほん",
    "にまめ",
    "にもつ",
    "にやり",
    "にゅういん",
    "にりんしゃ",
    "にわとり",
    "にんい",
    "にんか",
    "にんき",
    "にんげん",
    "にんしき",
    "にんずう",
    "にんそう",
    "にんたい",
    "にんち",
    "にんてい",
    "にんにく",
    "にんぷ",
    "にんまり",
    "にんむ",
    "にんめい",
    "にんよう",
    "ぬいくぎ",
    "ぬかす",
    "ぬぐいとる",
    "ぬぐう",
    "ぬくもり",
    "ぬすむ",
    "ぬまえび",
    "ぬめり",
    "ぬらす",
    "ぬんちゃく",
    "ねあげ",
    "ねいき",
    "ねいる",
    "ねいろ",
    "ねぐせ",
    "ねくたい",
    "ねくら",
    "ねこぜ",
    "ねこむ",
    "ねさげ",
    "ねすごす",
    "ねそべる",
    "ねだん",
    "ねつい",
    "ねっしん",
    "ねつぞう",
    "ねったいぎょ",
    "ねぶそく",
    "ねふだ",
    "ねぼう",
    "ねほりはほり",
    "ねまき",
    "ねまわし",
    "ねみみ",
    "ねむい",
    "ねむたい",
    "ねもと",
    "ねらう",
    "ねわざ",
    "ねんいり",
    "ねんおし",
    "ねんかん",
    "ねんきん",
    "ねんぐ",
    "ねんざ",
    "ねんし",
    "ねんちゃく",
    "ねんど",
    "ねんぴ",
    "ねんぶつ",
    "ねんまつ",
    "ねんりょう",
    "ねんれい",
    "のいず",
    "のおづま",
    "のがす",
    "のきなみ",
    "のこぎり",
    "のこす",
    "のこる",
    "のせる",
    "のぞく",
    "のぞむ",
    "のたまう",
    "のちほど",
    "のっく",
    "のばす",
    "のはら",
    "のべる",
    "のぼる",
    "のみもの",
    "のやま",
    "のらいぬ",
    "のらねこ",
    "のりもの",
    "のりゆき",
    "のれん",
    "のんき",
    "ばあい",
    "はあく",
    "ばあさん",
    "ばいか",
    "ばいく",
    "はいけん",
    "はいご",
    "はいしん",
    "はいすい",
    "はいせん",
    "はいそう",
    "はいち",
    "ばいばい",
    "はいれつ",
    "はえる",
    "はおる",
    "はかい",
    "ばかり",
    "はかる",
    "はくしゅ",
    "はけん",
    "はこぶ",
    "はさみ",
    "はさん",
    "はしご",
    "ばしょ",
    "はしる",
    "はせる",
    "ぱそこん",
    "はそん",
    "はたん",
    "はちみつ",
    "はつおん",
    "はっかく",
    "はづき",
    "はっきり",
    "はっくつ",
    "はっけん",
    "はっこう",
    "はっさん",
    "はっしん",
    "はったつ",
    "はっちゅう",
    "はってん",
    "はっぴょう",
    "はっぽう",
    "はなす",
    "はなび",
    "はにかむ",
    "はぶらし",
    "はみがき",
    "はむかう",
    "はめつ",
    "はやい",
    "はやし",
    "はらう",
    "はろうぃん",
    "はわい",
    "はんい",
    "はんえい",
    "はんおん",
    "はんかく",
    "はんきょう",
    "ばんぐみ",
    "はんこ",
    "はんしゃ",
    "はんすう",
    "はんだん",
    "ぱんち",
    "ぱんつ",
    "はんてい",
    "はんとし",
    "はんのう",
    "はんぱ",
    "はんぶん",
    "はんぺん",
    "はんぼうき",
    "はんめい",
    "はんらん",
    "はんろん",
    "ひいき",
    "ひうん",
    "ひえる",
    "ひかく",
    "ひかり",
    "ひかる",
    "ひかん",
    "ひくい",
    "ひけつ",
    "ひこうき",
    "ひこく",
    "ひさい",
    "ひさしぶり",
    "ひさん",
    "びじゅつかん",
    "ひしょ",
    "ひそか",
    "ひそむ",
    "ひたむき",
    "ひだり",
    "ひたる",
    "ひつぎ",
    "ひっこし",
    "ひっし",
    "ひつじゅひん",
    "ひっす",
    "ひつぜん",
    "ぴったり",
    "ぴっちり",
    "ひつよう",
    "ひてい",
    "ひとごみ",
    "ひなまつり",
    "ひなん",
    "ひねる",
    "ひはん",
    "ひびく",
    "ひひょう",
    "ひほう",
    "ひまわり",
    "ひまん",
    "ひみつ",
    "ひめい",
    "ひめじし",
    "ひやけ",
    "ひやす",
    "ひよう",
    "びょうき",
    "ひらがな",
    "ひらく",
    "ひりつ",
    "ひりょう",
    "ひるま",
    "ひるやすみ",
    "ひれい",
    "ひろい",
    "ひろう",
    "ひろき",
    "ひろゆき",
    "ひんかく",
    "ひんけつ",
    "ひんこん",
    "ひんしゅ",
    "ひんそう",
    "ぴんち",
    "ひんぱん",
    "びんぼう",
    "ふあん",
    "ふいうち",
    "ふうけい",
    "ふうせん",
    "ぷうたろう",
    "ふうとう",
    "ふうふ",
    "ふえる",
    "ふおん",
    "ふかい",
    "ふきん",
    "ふくざつ",
    "ふくぶくろ",
    "ふこう",
    "ふさい",
    "ふしぎ",
    "ふじみ",
    "ふすま",
    "ふせい",
    "ふせぐ",
    "ふそく",
    "ぶたにく",
    "ふたん",
    "ふちょう",
    "ふつう",
    "ふつか",
    "ふっかつ",
    "ふっき",
    "ふっこく",
    "ぶどう",
    "ふとる",
    "ふとん",
    "ふのう",
    "ふはい",
    "ふひょう",
    "ふへん",
    "ふまん",
    "ふみん",
    "ふめつ",
    "ふめん",
    "ふよう",
    "ふりこ",
    "ふりる",
    "ふるい",
    "ふんいき",
    "ぶんがく",
    "ぶんぐ",
    "ふんしつ",
    "ぶんせき",
    "ふんそう",
    "ぶんぽう",
    "へいあん",
    "へいおん",
    "へいがい",
    "へいき",
    "へいげん",
    "へいこう",
    "へいさ",
    "へいしゃ",
    "へいせつ",
    "へいそ",
    "へいたく",
    "へいてん",
    "へいねつ",
    "へいわ",
    "へきが",
    "へこむ",
    "べにいろ",
    "べにしょうが",
    "へらす",
    "へんかん",
    "べんきょう",
    "べんごし",
    "へんさい",
    "へんたい",
    "べんり",
    "ほあん",
    "ほいく",
    "ぼうぎょ",
    "ほうこく",
    "ほうそう",
    "ほうほう",
    "ほうもん",
    "ほうりつ",
    "ほえる",
    "ほおん",
    "ほかん",
    "ほきょう",
    "ぼきん",
    "ほくろ",
    "ほけつ",
    "ほけん",
    "ほこう",
    "ほこる",
    "ほしい",
    "ほしつ",
    "ほしゅ",
    "ほしょう",
    "ほせい",
    "ほそい",
    "ほそく",
    "ほたて",
    "ほたる",
    "ぽちぶくろ",
    "ほっきょく",
    "ほっさ",
    "ほったん",
    "ほとんど",
    "ほめる",
    "ほんい",
    "ほんき",
    "ほんけ",
    "ほんしつ",
    "ほんやく",
    "まいにち",
    "まかい",
    "まかせる",
    "まがる",
    "まける",
    "まこと",
    "まさつ",
    "まじめ",
    "ますく",
    "まぜる",
    "まつり",
    "まとめ",
    "まなぶ",
    "まぬけ",
    "まねく",
    "まほう",
    "まもる",
    "まゆげ",
    "まよう",
    "まろやか",
    "まわす",
    "まわり",
    "まわる",
    "まんが",
    "まんきつ",
    "まんぞく",
    "まんなか",
    "みいら",
    "みうち",
    "みえる",
    "みがく",
    "みかた",
    "みかん",
    "みけん",
    "みこん",
    "みじかい",
    "みすい",
    "みすえる",
    "みせる",
    "みっか",
    "みつかる",
    "みつける",
    "みてい",
    "みとめる",
    "みなと",
    "みなみかさい",
    "みねらる",
    "みのう",
    "みのがす",
    "みほん",
    "みもと",
    "みやげ",
    "みらい",
    "みりょく",
    "みわく",
    "みんか",
    "みんぞく",
    "むいか",
    "むえき",
    "むえん",
    "むかい",
    "むかう",
    "むかえ",
    "むかし",
    "むぎちゃ",
    "むける",
    "むげん",
    "むさぼる",
    "むしあつい",
    "むしば",
    "むじゅん",
    "むしろ",
    "むすう",
    "むすこ",
    "むすぶ",
    "むすめ",
    "むせる",
    "むせん",
    "むちゅう",
    "むなしい",
    "むのう",
    "むやみ",
    "むよう",
    "むらさき",
    "むりょう",
    "むろん",
    "めいあん",
    "めいうん",
    "めいえん",
    "めいかく",
    "めいきょく",
    "めいさい",
    "めいし",
    "めいそう",
    "めいぶつ",
    "めいれい",
    "めいわく",
    "めぐまれる",
    "めざす",
    "めした",
    "めずらしい",
    "めだつ",
    "めまい",
    "めやす",
    "めんきょ",
    "めんせき",
    "めんどう",
    "もうしあげる",
    "もうどうけん",
    "もえる",
    "もくし",
    "もくてき",
    "もくようび",
    "もちろん",
    "もどる",
    "もらう",
    "もんく",
    "もんだい",
    "やおや",
    "やける",
    "やさい",
    "やさしい",
    "やすい",
    "やすたろう",
    "やすみ",
    "やせる",
    "やそう",
    "やたい",
    "やちん",
    "やっと",
    "やっぱり",
    "やぶる",
    "やめる",
    "ややこしい",
    "やよい",
    "やわらかい",
    "ゆうき",
    "ゆうびんきょく",
    "ゆうべ",
    "ゆうめい",
    "ゆけつ",
    "ゆしゅつ",
    "ゆせん",
    "ゆそう",
    "ゆたか",
    "ゆちゃく",
    "ゆでる",
    "ゆにゅう",
    "ゆびわ",
    "ゆらい",
    "ゆれる",
    "ようい",
    "ようか",
    "ようきゅう",
    "ようじ",
    "ようす",
    "ようちえん",
    "よかぜ",
    "よかん",
    "よきん",
    "よくせい",
    "よくぼう",
    "よけい",
    "よごれる",
    "よさん",
    "よしゅう",
    "よそう",
    "よそく",
    "よっか",
    "よてい",
    "よどがわく",
    "よねつ",
    "よやく",
    "よゆう",
    "よろこぶ",
    "よろしい",
    "らいう",
    "らくがき",
    "らくご",
    "らくさつ",
    "らくだ",
    "らしんばん",
    "らせん",
    "らぞく",
    "らたい",
    "らっか",
    "られつ",
    "りえき",
    "りかい",
    "りきさく",
    "りきせつ",
    "りくぐん",
    "りくつ",
    "りけん",
    "りこう",
    "りせい",
    "りそう",
    "りそく",
    "りてん",
    "りねん",
    "りゆう",
    "りゅうがく",
    "りよう",
    "りょうり",
    "りょかん",
    "りょくちゃ",
    "りょこう",
    "りりく",
    "りれき",
    "りろん",
    "りんご",
    "るいけい",
    "るいさい",
    "るいじ",
    "るいせき",
    "るすばん",
    "るりがわら",
    "れいかん",
    "れいぎ",
    "れいせい",
    "れいぞうこ",
    "れいとう",
    "れいぼう",
    "れきし",
    "れきだい",
    "れんあい",
    "れんけい",
    "れんこん",
    "れんさい",
    "れんしゅう",
    "れんぞく",
    "れんらく",
    "ろうか",
    "ろうご",
    "ろうじん",
    "ろうそく",
    "ろくが",
    "ろこつ",
    "ろじうら",
    "ろしゅつ",
    "ろせん",
    "ろてん",
    "ろめん",
    "ろれつ",
    "ろんぎ",
    "ろんぱ",
    "ろんぶん",
    "ろんり",
    "わかす",
    "わかめ",
    "わかやま",
    "わかれる",
    "わしつ",
    "わじまし",
    "わすれもの",
    "わらう",
    "われる"
];
module.exports = japanese;

},{}],"3IEai":[function(require,module,exports) {
"use strict";
var spanish = [
    "ábaco",
    "abdomen",
    "abeja",
    "abierto",
    "abogado",
    "abono",
    "aborto",
    "abrazo",
    "abrir",
    "abuelo",
    "abuso",
    "acabar",
    "academia",
    "acceso",
    "acción",
    "aceite",
    "acelga",
    "acento",
    "aceptar",
    "ácido",
    "aclarar",
    "acné",
    "acoger",
    "acoso",
    "activo",
    "acto",
    "actriz",
    "actuar",
    "acudir",
    "acuerdo",
    "acusar",
    "adicto",
    "admitir",
    "adoptar",
    "adorno",
    "aduana",
    "adulto",
    "aéreo",
    "afectar",
    "afición",
    "afinar",
    "afirmar",
    "ágil",
    "agitar",
    "agonía",
    "agosto",
    "agotar",
    "agregar",
    "agrio",
    "agua",
    "agudo",
    "águila",
    "aguja",
    "ahogo",
    "ahorro",
    "aire",
    "aislar",
    "ajedrez",
    "ajeno",
    "ajuste",
    "alacrán",
    "alambre",
    "alarma",
    "alba",
    "álbum",
    "alcalde",
    "aldea",
    "alegre",
    "alejar",
    "alerta",
    "aleta",
    "alfiler",
    "alga",
    "algodón",
    "aliado",
    "aliento",
    "alivio",
    "alma",
    "almeja",
    "almíbar",
    "altar",
    "alteza",
    "altivo",
    "alto",
    "altura",
    "alumno",
    "alzar",
    "amable",
    "amante",
    "amapola",
    "amargo",
    "amasar",
    "ámbar",
    "ámbito",
    "ameno",
    "amigo",
    "amistad",
    "amor",
    "amparo",
    "amplio",
    "ancho",
    "anciano",
    "ancla",
    "andar",
    "andén",
    "anemia",
    "ángulo",
    "anillo",
    "ánimo",
    "anís",
    "anotar",
    "antena",
    "antiguo",
    "antojo",
    "anual",
    "anular",
    "anuncio",
    "añadir",
    "añejo",
    "año",
    "apagar",
    "aparato",
    "apetito",
    "apio",
    "aplicar",
    "apodo",
    "aporte",
    "apoyo",
    "aprender",
    "aprobar",
    "apuesta",
    "apuro",
    "arado",
    "araña",
    "arar",
    "árbitro",
    "árbol",
    "arbusto",
    "archivo",
    "arco",
    "arder",
    "ardilla",
    "arduo",
    "área",
    "árido",
    "aries",
    "armonía",
    "arnés",
    "aroma",
    "arpa",
    "arpón",
    "arreglo",
    "arroz",
    "arruga",
    "arte",
    "artista",
    "asa",
    "asado",
    "asalto",
    "ascenso",
    "asegurar",
    "aseo",
    "asesor",
    "asiento",
    "asilo",
    "asistir",
    "asno",
    "asombro",
    "áspero",
    "astilla",
    "astro",
    "astuto",
    "asumir",
    "asunto",
    "atajo",
    "ataque",
    "atar",
    "atento",
    "ateo",
    "ático",
    "atleta",
    "átomo",
    "atraer",
    "atroz",
    "atún",
    "audaz",
    "audio",
    "auge",
    "aula",
    "aumento",
    "ausente",
    "autor",
    "aval",
    "avance",
    "avaro",
    "ave",
    "avellana",
    "avena",
    "avestruz",
    "avión",
    "aviso",
    "ayer",
    "ayuda",
    "ayuno",
    "azafrán",
    "azar",
    "azote",
    "azúcar",
    "azufre",
    "azul",
    "baba",
    "babor",
    "bache",
    "bahía",
    "baile",
    "bajar",
    "balanza",
    "balcón",
    "balde",
    "bambú",
    "banco",
    "banda",
    "baño",
    "barba",
    "barco",
    "barniz",
    "barro",
    "báscula",
    "bastón",
    "basura",
    "batalla",
    "batería",
    "batir",
    "batuta",
    "baúl",
    "bazar",
    "bebé",
    "bebida",
    "bello",
    "besar",
    "beso",
    "bestia",
    "bicho",
    "bien",
    "bingo",
    "blanco",
    "bloque",
    "blusa",
    "boa",
    "bobina",
    "bobo",
    "boca",
    "bocina",
    "boda",
    "bodega",
    "boina",
    "bola",
    "bolero",
    "bolsa",
    "bomba",
    "bondad",
    "bonito",
    "bono",
    "bonsái",
    "borde",
    "borrar",
    "bosque",
    "bote",
    "botín",
    "bóveda",
    "bozal",
    "bravo",
    "brazo",
    "brecha",
    "breve",
    "brillo",
    "brinco",
    "brisa",
    "broca",
    "broma",
    "bronce",
    "brote",
    "bruja",
    "brusco",
    "bruto",
    "buceo",
    "bucle",
    "bueno",
    "buey",
    "bufanda",
    "bufón",
    "búho",
    "buitre",
    "bulto",
    "burbuja",
    "burla",
    "burro",
    "buscar",
    "butaca",
    "buzón",
    "caballo",
    "cabeza",
    "cabina",
    "cabra",
    "cacao",
    "cadáver",
    "cadena",
    "caer",
    "café",
    "caída",
    "caimán",
    "caja",
    "cajón",
    "cal",
    "calamar",
    "calcio",
    "caldo",
    "calidad",
    "calle",
    "calma",
    "calor",
    "calvo",
    "cama",
    "cambio",
    "camello",
    "camino",
    "campo",
    "cáncer",
    "candil",
    "canela",
    "canguro",
    "canica",
    "canto",
    "caña",
    "cañón",
    "caoba",
    "caos",
    "capaz",
    "capitán",
    "capote",
    "captar",
    "capucha",
    "cara",
    "carbón",
    "cárcel",
    "careta",
    "carga",
    "cariño",
    "carne",
    "carpeta",
    "carro",
    "carta",
    "casa",
    "casco",
    "casero",
    "caspa",
    "castor",
    "catorce",
    "catre",
    "caudal",
    "causa",
    "cazo",
    "cebolla",
    "ceder",
    "cedro",
    "celda",
    "célebre",
    "celoso",
    "célula",
    "cemento",
    "ceniza",
    "centro",
    "cerca",
    "cerdo",
    "cereza",
    "cero",
    "cerrar",
    "certeza",
    "césped",
    "cetro",
    "chacal",
    "chaleco",
    "champú",
    "chancla",
    "chapa",
    "charla",
    "chico",
    "chiste",
    "chivo",
    "choque",
    "choza",
    "chuleta",
    "chupar",
    "ciclón",
    "ciego",
    "cielo",
    "cien",
    "cierto",
    "cifra",
    "cigarro",
    "cima",
    "cinco",
    "cine",
    "cinta",
    "ciprés",
    "circo",
    "ciruela",
    "cisne",
    "cita",
    "ciudad",
    "clamor",
    "clan",
    "claro",
    "clase",
    "clave",
    "cliente",
    "clima",
    "clínica",
    "cobre",
    "cocción",
    "cochino",
    "cocina",
    "coco",
    "código",
    "codo",
    "cofre",
    "coger",
    "cohete",
    "cojín",
    "cojo",
    "cola",
    "colcha",
    "colegio",
    "colgar",
    "colina",
    "collar",
    "colmo",
    "columna",
    "combate",
    "comer",
    "comida",
    "cómodo",
    "compra",
    "conde",
    "conejo",
    "conga",
    "conocer",
    "consejo",
    "contar",
    "copa",
    "copia",
    "corazón",
    "corbata",
    "corcho",
    "cordón",
    "corona",
    "correr",
    "coser",
    "cosmos",
    "costa",
    "cráneo",
    "cráter",
    "crear",
    "crecer",
    "creído",
    "crema",
    "cría",
    "crimen",
    "cripta",
    "crisis",
    "cromo",
    "crónica",
    "croqueta",
    "crudo",
    "cruz",
    "cuadro",
    "cuarto",
    "cuatro",
    "cubo",
    "cubrir",
    "cuchara",
    "cuello",
    "cuento",
    "cuerda",
    "cuesta",
    "cueva",
    "cuidar",
    "culebra",
    "culpa",
    "culto",
    "cumbre",
    "cumplir",
    "cuna",
    "cuneta",
    "cuota",
    "cupón",
    "cúpula",
    "curar",
    "curioso",
    "curso",
    "curva",
    "cutis",
    "dama",
    "danza",
    "dar",
    "dardo",
    "dátil",
    "deber",
    "débil",
    "década",
    "decir",
    "dedo",
    "defensa",
    "definir",
    "dejar",
    "delfín",
    "delgado",
    "delito",
    "demora",
    "denso",
    "dental",
    "deporte",
    "derecho",
    "derrota",
    "desayuno",
    "deseo",
    "desfile",
    "desnudo",
    "destino",
    "desvío",
    "detalle",
    "detener",
    "deuda",
    "día",
    "diablo",
    "diadema",
    "diamante",
    "diana",
    "diario",
    "dibujo",
    "dictar",
    "diente",
    "dieta",
    "diez",
    "difícil",
    "digno",
    "dilema",
    "diluir",
    "dinero",
    "directo",
    "dirigir",
    "disco",
    "diseño",
    "disfraz",
    "diva",
    "divino",
    "doble",
    "doce",
    "dolor",
    "domingo",
    "don",
    "donar",
    "dorado",
    "dormir",
    "dorso",
    "dos",
    "dosis",
    "dragón",
    "droga",
    "ducha",
    "duda",
    "duelo",
    "dueño",
    "dulce",
    "dúo",
    "duque",
    "durar",
    "dureza",
    "duro",
    "ébano",
    "ebrio",
    "echar",
    "eco",
    "ecuador",
    "edad",
    "edición",
    "edificio",
    "editor",
    "educar",
    "efecto",
    "eficaz",
    "eje",
    "ejemplo",
    "elefante",
    "elegir",
    "elemento",
    "elevar",
    "elipse",
    "élite",
    "elixir",
    "elogio",
    "eludir",
    "embudo",
    "emitir",
    "emoción",
    "empate",
    "empeño",
    "empleo",
    "empresa",
    "enano",
    "encargo",
    "enchufe",
    "encía",
    "enemigo",
    "enero",
    "enfado",
    "enfermo",
    "engaño",
    "enigma",
    "enlace",
    "enorme",
    "enredo",
    "ensayo",
    "enseñar",
    "entero",
    "entrar",
    "envase",
    "envío",
    "época",
    "equipo",
    "erizo",
    "escala",
    "escena",
    "escolar",
    "escribir",
    "escudo",
    "esencia",
    "esfera",
    "esfuerzo",
    "espada",
    "espejo",
    "espía",
    "esposa",
    "espuma",
    "esquí",
    "estar",
    "este",
    "estilo",
    "estufa",
    "etapa",
    "eterno",
    "ética",
    "etnia",
    "evadir",
    "evaluar",
    "evento",
    "evitar",
    "exacto",
    "examen",
    "exceso",
    "excusa",
    "exento",
    "exigir",
    "exilio",
    "existir",
    "éxito",
    "experto",
    "explicar",
    "exponer",
    "extremo",
    "fábrica",
    "fábula",
    "fachada",
    "fácil",
    "factor",
    "faena",
    "faja",
    "falda",
    "fallo",
    "falso",
    "faltar",
    "fama",
    "familia",
    "famoso",
    "faraón",
    "farmacia",
    "farol",
    "farsa",
    "fase",
    "fatiga",
    "fauna",
    "favor",
    "fax",
    "febrero",
    "fecha",
    "feliz",
    "feo",
    "feria",
    "feroz",
    "fértil",
    "fervor",
    "festín",
    "fiable",
    "fianza",
    "fiar",
    "fibra",
    "ficción",
    "ficha",
    "fideo",
    "fiebre",
    "fiel",
    "fiera",
    "fiesta",
    "figura",
    "fijar",
    "fijo",
    "fila",
    "filete",
    "filial",
    "filtro",
    "fin",
    "finca",
    "fingir",
    "finito",
    "firma",
    "flaco",
    "flauta",
    "flecha",
    "flor",
    "flota",
    "fluir",
    "flujo",
    "flúor",
    "fobia",
    "foca",
    "fogata",
    "fogón",
    "folio",
    "folleto",
    "fondo",
    "forma",
    "forro",
    "fortuna",
    "forzar",
    "fosa",
    "foto",
    "fracaso",
    "frágil",
    "franja",
    "frase",
    "fraude",
    "freír",
    "freno",
    "fresa",
    "frío",
    "frito",
    "fruta",
    "fuego",
    "fuente",
    "fuerza",
    "fuga",
    "fumar",
    "función",
    "funda",
    "furgón",
    "furia",
    "fusil",
    "fútbol",
    "futuro",
    "gacela",
    "gafas",
    "gaita",
    "gajo",
    "gala",
    "galería",
    "gallo",
    "gamba",
    "ganar",
    "gancho",
    "ganga",
    "ganso",
    "garaje",
    "garza",
    "gasolina",
    "gastar",
    "gato",
    "gavilán",
    "gemelo",
    "gemir",
    "gen",
    "género",
    "genio",
    "gente",
    "geranio",
    "gerente",
    "germen",
    "gesto",
    "gigante",
    "gimnasio",
    "girar",
    "giro",
    "glaciar",
    "globo",
    "gloria",
    "gol",
    "golfo",
    "goloso",
    "golpe",
    "goma",
    "gordo",
    "gorila",
    "gorra",
    "gota",
    "goteo",
    "gozar",
    "grada",
    "gráfico",
    "grano",
    "grasa",
    "gratis",
    "grave",
    "grieta",
    "grillo",
    "gripe",
    "gris",
    "grito",
    "grosor",
    "grúa",
    "grueso",
    "grumo",
    "grupo",
    "guante",
    "guapo",
    "guardia",
    "guerra",
    "guía",
    "guiño",
    "guion",
    "guiso",
    "guitarra",
    "gusano",
    "gustar",
    "haber",
    "hábil",
    "hablar",
    "hacer",
    "hacha",
    "hada",
    "hallar",
    "hamaca",
    "harina",
    "haz",
    "hazaña",
    "hebilla",
    "hebra",
    "hecho",
    "helado",
    "helio",
    "hembra",
    "herir",
    "hermano",
    "héroe",
    "hervir",
    "hielo",
    "hierro",
    "hígado",
    "higiene",
    "hijo",
    "himno",
    "historia",
    "hocico",
    "hogar",
    "hoguera",
    "hoja",
    "hombre",
    "hongo",
    "honor",
    "honra",
    "hora",
    "hormiga",
    "horno",
    "hostil",
    "hoyo",
    "hueco",
    "huelga",
    "huerta",
    "hueso",
    "huevo",
    "huida",
    "huir",
    "humano",
    "húmedo",
    "humilde",
    "humo",
    "hundir",
    "huracán",
    "hurto",
    "icono",
    "ideal",
    "idioma",
    "ídolo",
    "iglesia",
    "iglú",
    "igual",
    "ilegal",
    "ilusión",
    "imagen",
    "imán",
    "imitar",
    "impar",
    "imperio",
    "imponer",
    "impulso",
    "incapaz",
    "índice",
    "inerte",
    "infiel",
    "informe",
    "ingenio",
    "inicio",
    "inmenso",
    "inmune",
    "innato",
    "insecto",
    "instante",
    "interés",
    "íntimo",
    "intuir",
    "inútil",
    "invierno",
    "ira",
    "iris",
    "ironía",
    "isla",
    "islote",
    "jabalí",
    "jabón",
    "jamón",
    "jarabe",
    "jardín",
    "jarra",
    "jaula",
    "jazmín",
    "jefe",
    "jeringa",
    "jinete",
    "jornada",
    "joroba",
    "joven",
    "joya",
    "juerga",
    "jueves",
    "juez",
    "jugador",
    "jugo",
    "juguete",
    "juicio",
    "junco",
    "jungla",
    "junio",
    "juntar",
    "júpiter",
    "jurar",
    "justo",
    "juvenil",
    "juzgar",
    "kilo",
    "koala",
    "labio",
    "lacio",
    "lacra",
    "lado",
    "ladrón",
    "lagarto",
    "lágrima",
    "laguna",
    "laico",
    "lamer",
    "lámina",
    "lámpara",
    "lana",
    "lancha",
    "langosta",
    "lanza",
    "lápiz",
    "largo",
    "larva",
    "lástima",
    "lata",
    "látex",
    "latir",
    "laurel",
    "lavar",
    "lazo",
    "leal",
    "lección",
    "leche",
    "lector",
    "leer",
    "legión",
    "legumbre",
    "lejano",
    "lengua",
    "lento",
    "leña",
    "león",
    "leopardo",
    "lesión",
    "letal",
    "letra",
    "leve",
    "leyenda",
    "libertad",
    "libro",
    "licor",
    "líder",
    "lidiar",
    "lienzo",
    "liga",
    "ligero",
    "lima",
    "límite",
    "limón",
    "limpio",
    "lince",
    "lindo",
    "línea",
    "lingote",
    "lino",
    "linterna",
    "líquido",
    "liso",
    "lista",
    "litera",
    "litio",
    "litro",
    "llaga",
    "llama",
    "llanto",
    "llave",
    "llegar",
    "llenar",
    "llevar",
    "llorar",
    "llover",
    "lluvia",
    "lobo",
    "loción",
    "loco",
    "locura",
    "lógica",
    "logro",
    "lombriz",
    "lomo",
    "lonja",
    "lote",
    "lucha",
    "lucir",
    "lugar",
    "lujo",
    "luna",
    "lunes",
    "lupa",
    "lustro",
    "luto",
    "luz",
    "maceta",
    "macho",
    "madera",
    "madre",
    "maduro",
    "maestro",
    "mafia",
    "magia",
    "mago",
    "maíz",
    "maldad",
    "maleta",
    "malla",
    "malo",
    "mamá",
    "mambo",
    "mamut",
    "manco",
    "mando",
    "manejar",
    "manga",
    "maniquí",
    "manjar",
    "mano",
    "manso",
    "manta",
    "mañana",
    "mapa",
    "máquina",
    "mar",
    "marco",
    "marea",
    "marfil",
    "margen",
    "marido",
    "mármol",
    "marrón",
    "martes",
    "marzo",
    "masa",
    "máscara",
    "masivo",
    "matar",
    "materia",
    "matiz",
    "matriz",
    "máximo",
    "mayor",
    "mazorca",
    "mecha",
    "medalla",
    "medio",
    "médula",
    "mejilla",
    "mejor",
    "melena",
    "melón",
    "memoria",
    "menor",
    "mensaje",
    "mente",
    "menú",
    "mercado",
    "merengue",
    "mérito",
    "mes",
    "mesón",
    "meta",
    "meter",
    "método",
    "metro",
    "mezcla",
    "miedo",
    "miel",
    "miembro",
    "miga",
    "mil",
    "milagro",
    "militar",
    "millón",
    "mimo",
    "mina",
    "minero",
    "mínimo",
    "minuto",
    "miope",
    "mirar",
    "misa",
    "miseria",
    "misil",
    "mismo",
    "mitad",
    "mito",
    "mochila",
    "moción",
    "moda",
    "modelo",
    "moho",
    "mojar",
    "molde",
    "moler",
    "molino",
    "momento",
    "momia",
    "monarca",
    "moneda",
    "monja",
    "monto",
    "moño",
    "morada",
    "morder",
    "moreno",
    "morir",
    "morro",
    "morsa",
    "mortal",
    "mosca",
    "mostrar",
    "motivo",
    "mover",
    "móvil",
    "mozo",
    "mucho",
    "mudar",
    "mueble",
    "muela",
    "muerte",
    "muestra",
    "mugre",
    "mujer",
    "mula",
    "muleta",
    "multa",
    "mundo",
    "muñeca",
    "mural",
    "muro",
    "músculo",
    "museo",
    "musgo",
    "música",
    "muslo",
    "nácar",
    "nación",
    "nadar",
    "naipe",
    "naranja",
    "nariz",
    "narrar",
    "nasal",
    "natal",
    "nativo",
    "natural",
    "náusea",
    "naval",
    "nave",
    "navidad",
    "necio",
    "néctar",
    "negar",
    "negocio",
    "negro",
    "neón",
    "nervio",
    "neto",
    "neutro",
    "nevar",
    "nevera",
    "nicho",
    "nido",
    "niebla",
    "nieto",
    "niñez",
    "niño",
    "nítido",
    "nivel",
    "nobleza",
    "noche",
    "nómina",
    "noria",
    "norma",
    "norte",
    "nota",
    "noticia",
    "novato",
    "novela",
    "novio",
    "nube",
    "nuca",
    "núcleo",
    "nudillo",
    "nudo",
    "nuera",
    "nueve",
    "nuez",
    "nulo",
    "número",
    "nutria",
    "oasis",
    "obeso",
    "obispo",
    "objeto",
    "obra",
    "obrero",
    "observar",
    "obtener",
    "obvio",
    "oca",
    "ocaso",
    "océano",
    "ochenta",
    "ocho",
    "ocio",
    "ocre",
    "octavo",
    "octubre",
    "oculto",
    "ocupar",
    "ocurrir",
    "odiar",
    "odio",
    "odisea",
    "oeste",
    "ofensa",
    "oferta",
    "oficio",
    "ofrecer",
    "ogro",
    "oído",
    "oír",
    "ojo",
    "ola",
    "oleada",
    "olfato",
    "olivo",
    "olla",
    "olmo",
    "olor",
    "olvido",
    "ombligo",
    "onda",
    "onza",
    "opaco",
    "opción",
    "ópera",
    "opinar",
    "oponer",
    "optar",
    "óptica",
    "opuesto",
    "oración",
    "orador",
    "oral",
    "órbita",
    "orca",
    "orden",
    "oreja",
    "órgano",
    "orgía",
    "orgullo",
    "oriente",
    "origen",
    "orilla",
    "oro",
    "orquesta",
    "oruga",
    "osadía",
    "oscuro",
    "osezno",
    "oso",
    "ostra",
    "otoño",
    "otro",
    "oveja",
    "óvulo",
    "óxido",
    "oxígeno",
    "oyente",
    "ozono",
    "pacto",
    "padre",
    "paella",
    "página",
    "pago",
    "país",
    "pájaro",
    "palabra",
    "palco",
    "paleta",
    "pálido",
    "palma",
    "paloma",
    "palpar",
    "pan",
    "panal",
    "pánico",
    "pantera",
    "pañuelo",
    "papá",
    "papel",
    "papilla",
    "paquete",
    "parar",
    "parcela",
    "pared",
    "parir",
    "paro",
    "párpado",
    "parque",
    "párrafo",
    "parte",
    "pasar",
    "paseo",
    "pasión",
    "paso",
    "pasta",
    "pata",
    "patio",
    "patria",
    "pausa",
    "pauta",
    "pavo",
    "payaso",
    "peatón",
    "pecado",
    "pecera",
    "pecho",
    "pedal",
    "pedir",
    "pegar",
    "peine",
    "pelar",
    "peldaño",
    "pelea",
    "peligro",
    "pellejo",
    "pelo",
    "peluca",
    "pena",
    "pensar",
    "peñón",
    "peón",
    "peor",
    "pepino",
    "pequeño",
    "pera",
    "percha",
    "perder",
    "pereza",
    "perfil",
    "perico",
    "perla",
    "permiso",
    "perro",
    "persona",
    "pesa",
    "pesca",
    "pésimo",
    "pestaña",
    "pétalo",
    "petróleo",
    "pez",
    "pezuña",
    "picar",
    "pichón",
    "pie",
    "piedra",
    "pierna",
    "pieza",
    "pijama",
    "pilar",
    "piloto",
    "pimienta",
    "pino",
    "pintor",
    "pinza",
    "piña",
    "piojo",
    "pipa",
    "pirata",
    "pisar",
    "piscina",
    "piso",
    "pista",
    "pitón",
    "pizca",
    "placa",
    "plan",
    "plata",
    "playa",
    "plaza",
    "pleito",
    "pleno",
    "plomo",
    "pluma",
    "plural",
    "pobre",
    "poco",
    "poder",
    "podio",
    "poema",
    "poesía",
    "poeta",
    "polen",
    "policía",
    "pollo",
    "polvo",
    "pomada",
    "pomelo",
    "pomo",
    "pompa",
    "poner",
    "porción",
    "portal",
    "posada",
    "poseer",
    "posible",
    "poste",
    "potencia",
    "potro",
    "pozo",
    "prado",
    "precoz",
    "pregunta",
    "premio",
    "prensa",
    "preso",
    "previo",
    "primo",
    "príncipe",
    "prisión",
    "privar",
    "proa",
    "probar",
    "proceso",
    "producto",
    "proeza",
    "profesor",
    "programa",
    "prole",
    "promesa",
    "pronto",
    "propio",
    "próximo",
    "prueba",
    "público",
    "puchero",
    "pudor",
    "pueblo",
    "puerta",
    "puesto",
    "pulga",
    "pulir",
    "pulmón",
    "pulpo",
    "pulso",
    "puma",
    "punto",
    "puñal",
    "puño",
    "pupa",
    "pupila",
    "puré",
    "quedar",
    "queja",
    "quemar",
    "querer",
    "queso",
    "quieto",
    "química",
    "quince",
    "quitar",
    "rábano",
    "rabia",
    "rabo",
    "ración",
    "radical",
    "raíz",
    "rama",
    "rampa",
    "rancho",
    "rango",
    "rapaz",
    "rápido",
    "rapto",
    "rasgo",
    "raspa",
    "rato",
    "rayo",
    "raza",
    "razón",
    "reacción",
    "realidad",
    "rebaño",
    "rebote",
    "recaer",
    "receta",
    "rechazo",
    "recoger",
    "recreo",
    "recto",
    "recurso",
    "red",
    "redondo",
    "reducir",
    "reflejo",
    "reforma",
    "refrán",
    "refugio",
    "regalo",
    "regir",
    "regla",
    "regreso",
    "rehén",
    "reino",
    "reír",
    "reja",
    "relato",
    "relevo",
    "relieve",
    "relleno",
    "reloj",
    "remar",
    "remedio",
    "remo",
    "rencor",
    "rendir",
    "renta",
    "reparto",
    "repetir",
    "reposo",
    "reptil",
    "res",
    "rescate",
    "resina",
    "respeto",
    "resto",
    "resumen",
    "retiro",
    "retorno",
    "retrato",
    "reunir",
    "revés",
    "revista",
    "rey",
    "rezar",
    "rico",
    "riego",
    "rienda",
    "riesgo",
    "rifa",
    "rígido",
    "rigor",
    "rincón",
    "riñón",
    "río",
    "riqueza",
    "risa",
    "ritmo",
    "rito",
    "rizo",
    "roble",
    "roce",
    "rociar",
    "rodar",
    "rodeo",
    "rodilla",
    "roer",
    "rojizo",
    "rojo",
    "romero",
    "romper",
    "ron",
    "ronco",
    "ronda",
    "ropa",
    "ropero",
    "rosa",
    "rosca",
    "rostro",
    "rotar",
    "rubí",
    "rubor",
    "rudo",
    "rueda",
    "rugir",
    "ruido",
    "ruina",
    "ruleta",
    "rulo",
    "rumbo",
    "rumor",
    "ruptura",
    "ruta",
    "rutina",
    "sábado",
    "saber",
    "sabio",
    "sable",
    "sacar",
    "sagaz",
    "sagrado",
    "sala",
    "saldo",
    "salero",
    "salir",
    "salmón",
    "salón",
    "salsa",
    "salto",
    "salud",
    "salvar",
    "samba",
    "sanción",
    "sandía",
    "sanear",
    "sangre",
    "sanidad",
    "sano",
    "santo",
    "sapo",
    "saque",
    "sardina",
    "sartén",
    "sastre",
    "satán",
    "sauna",
    "saxofón",
    "sección",
    "seco",
    "secreto",
    "secta",
    "sed",
    "seguir",
    "seis",
    "sello",
    "selva",
    "semana",
    "semilla",
    "senda",
    "sensor",
    "señal",
    "señor",
    "separar",
    "sepia",
    "sequía",
    "ser",
    "serie",
    "sermón",
    "servir",
    "sesenta",
    "sesión",
    "seta",
    "setenta",
    "severo",
    "sexo",
    "sexto",
    "sidra",
    "siesta",
    "siete",
    "siglo",
    "signo",
    "sílaba",
    "silbar",
    "silencio",
    "silla",
    "símbolo",
    "simio",
    "sirena",
    "sistema",
    "sitio",
    "situar",
    "sobre",
    "socio",
    "sodio",
    "sol",
    "solapa",
    "soldado",
    "soledad",
    "sólido",
    "soltar",
    "solución",
    "sombra",
    "sondeo",
    "sonido",
    "sonoro",
    "sonrisa",
    "sopa",
    "soplar",
    "soporte",
    "sordo",
    "sorpresa",
    "sorteo",
    "sostén",
    "sótano",
    "suave",
    "subir",
    "suceso",
    "sudor",
    "suegra",
    "suelo",
    "sueño",
    "suerte",
    "sufrir",
    "sujeto",
    "sultán",
    "sumar",
    "superar",
    "suplir",
    "suponer",
    "supremo",
    "sur",
    "surco",
    "sureño",
    "surgir",
    "susto",
    "sutil",
    "tabaco",
    "tabique",
    "tabla",
    "tabú",
    "taco",
    "tacto",
    "tajo",
    "talar",
    "talco",
    "talento",
    "talla",
    "talón",
    "tamaño",
    "tambor",
    "tango",
    "tanque",
    "tapa",
    "tapete",
    "tapia",
    "tapón",
    "taquilla",
    "tarde",
    "tarea",
    "tarifa",
    "tarjeta",
    "tarot",
    "tarro",
    "tarta",
    "tatuaje",
    "tauro",
    "taza",
    "tazón",
    "teatro",
    "techo",
    "tecla",
    "técnica",
    "tejado",
    "tejer",
    "tejido",
    "tela",
    "teléfono",
    "tema",
    "temor",
    "templo",
    "tenaz",
    "tender",
    "tener",
    "tenis",
    "tenso",
    "teoría",
    "terapia",
    "terco",
    "término",
    "ternura",
    "terror",
    "tesis",
    "tesoro",
    "testigo",
    "tetera",
    "texto",
    "tez",
    "tibio",
    "tiburón",
    "tiempo",
    "tienda",
    "tierra",
    "tieso",
    "tigre",
    "tijera",
    "tilde",
    "timbre",
    "tímido",
    "timo",
    "tinta",
    "tío",
    "típico",
    "tipo",
    "tira",
    "tirón",
    "titán",
    "títere",
    "título",
    "tiza",
    "toalla",
    "tobillo",
    "tocar",
    "tocino",
    "todo",
    "toga",
    "toldo",
    "tomar",
    "tono",
    "tonto",
    "topar",
    "tope",
    "toque",
    "tórax",
    "torero",
    "tormenta",
    "torneo",
    "toro",
    "torpedo",
    "torre",
    "torso",
    "tortuga",
    "tos",
    "tosco",
    "toser",
    "tóxico",
    "trabajo",
    "tractor",
    "traer",
    "tráfico",
    "trago",
    "traje",
    "tramo",
    "trance",
    "trato",
    "trauma",
    "trazar",
    "trébol",
    "tregua",
    "treinta",
    "tren",
    "trepar",
    "tres",
    "tribu",
    "trigo",
    "tripa",
    "triste",
    "triunfo",
    "trofeo",
    "trompa",
    "tronco",
    "tropa",
    "trote",
    "trozo",
    "truco",
    "trueno",
    "trufa",
    "tubería",
    "tubo",
    "tuerto",
    "tumba",
    "tumor",
    "túnel",
    "túnica",
    "turbina",
    "turismo",
    "turno",
    "tutor",
    "ubicar",
    "úlcera",
    "umbral",
    "unidad",
    "unir",
    "universo",
    "uno",
    "untar",
    "uña",
    "urbano",
    "urbe",
    "urgente",
    "urna",
    "usar",
    "usuario",
    "útil",
    "utopía",
    "uva",
    "vaca",
    "vacío",
    "vacuna",
    "vagar",
    "vago",
    "vaina",
    "vajilla",
    "vale",
    "válido",
    "valle",
    "valor",
    "válvula",
    "vampiro",
    "vara",
    "variar",
    "varón",
    "vaso",
    "vecino",
    "vector",
    "vehículo",
    "veinte",
    "vejez",
    "vela",
    "velero",
    "veloz",
    "vena",
    "vencer",
    "venda",
    "veneno",
    "vengar",
    "venir",
    "venta",
    "venus",
    "ver",
    "verano",
    "verbo",
    "verde",
    "vereda",
    "verja",
    "verso",
    "verter",
    "vía",
    "viaje",
    "vibrar",
    "vicio",
    "víctima",
    "vida",
    "vídeo",
    "vidrio",
    "viejo",
    "viernes",
    "vigor",
    "vil",
    "villa",
    "vinagre",
    "vino",
    "viñedo",
    "violín",
    "viral",
    "virgo",
    "virtud",
    "visor",
    "víspera",
    "vista",
    "vitamina",
    "viudo",
    "vivaz",
    "vivero",
    "vivir",
    "vivo",
    "volcán",
    "volumen",
    "volver",
    "voraz",
    "votar",
    "voto",
    "voz",
    "vuelo",
    "vulgar",
    "yacer",
    "yate",
    "yegua",
    "yema",
    "yerno",
    "yeso",
    "yodo",
    "yoga",
    "yogur",
    "zafiro",
    "zanja",
    "zapato",
    "zarza",
    "zona",
    "zorro",
    "zumo",
    "zurdo"
];
module.exports = spanish;

},{}],"9fYHn":[function(require,module,exports) {
module.exports = require("../lib/mnemonic");

},{"../lib/mnemonic":"lhJSP"}],"lhJSP":[function(require,module,exports) {
var bsv = require("../../");
bsv.Mnemonic = require("./mnemonic");
module.exports = bsv.Mnemonic;

},{"../../":"hOFCS","./mnemonic":"fIi8E"}],"hOFCS":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var Buffer = require("buffer").Buffer;
var bsv = module.exports;
// module information
bsv.version = "v" + require("./package.json").version;
bsv.versionGuard = function(version) {
    if (version !== undefined) {
        var message = `
      More than one instance of bsv found.
      Please make sure to require bsv and check that submodules do
      not also include their own bsv dependency.`;
        console.warn(message);
    }
};
bsv.versionGuard(global._bsv);
global._bsv = bsv.version;
// crypto
bsv.crypto = {};
bsv.crypto.BN = require("./lib/crypto/bn");
bsv.crypto.ECDSA = require("./lib/crypto/ecdsa");
bsv.crypto.Hash = require("./lib/crypto/hash");
bsv.crypto.Random = require("./lib/crypto/random");
bsv.crypto.Point = require("./lib/crypto/point");
bsv.crypto.Signature = require("./lib/crypto/signature");
// encoding
bsv.encoding = {};
bsv.encoding.Base58 = require("./lib/encoding/base58");
bsv.encoding.Base58Check = require("./lib/encoding/base58check");
bsv.encoding.BufferReader = require("./lib/encoding/bufferreader");
bsv.encoding.BufferWriter = require("./lib/encoding/bufferwriter");
bsv.encoding.Varint = require("./lib/encoding/varint");
// utilities
bsv.util = {};
bsv.util.js = require("./lib/util/js");
bsv.util.preconditions = require("./lib/util/preconditions");
// errors thrown by the library
bsv.errors = require("./lib/errors");
// main bitcoin library
bsv.Address = require("./lib/address");
bsv.Block = require("./lib/block");
bsv.MerkleBlock = require("./lib/block/merkleblock");
bsv.BlockHeader = require("./lib/block/blockheader");
bsv.HDPrivateKey = require("./lib/hdprivatekey.js");
bsv.HDPublicKey = require("./lib/hdpublickey.js");
bsv.Networks = require("./lib/networks");
bsv.Opcode = require("./lib/opcode");
bsv.PrivateKey = require("./lib/privatekey");
bsv.PublicKey = require("./lib/publickey");
bsv.Script = require("./lib/script");
bsv.Transaction = require("./lib/transaction");
// dependencies, subject to change
bsv.deps = {};
bsv.deps.bnjs = require("bn.js");
bsv.deps.bs58 = require("bs58");
bsv.deps.Buffer = Buffer;
bsv.deps.elliptic = require("elliptic");
bsv.deps._ = require("./lib/util/_");
// Internal usage, exposed for testing/advanced tweaking
bsv.Transaction.sighash = require("./lib/transaction/sighash");

},{"buffer":"fCgem","./package.json":"c5iwU","./lib/crypto/bn":"35huv","./lib/crypto/ecdsa":"b9rFw","./lib/crypto/hash":"jgMGE","./lib/crypto/random":"0GrP8","./lib/crypto/point":"2XxZb","./lib/crypto/signature":"axUut","./lib/encoding/base58":"6zLJ7","./lib/encoding/base58check":"kLrpR","./lib/encoding/bufferreader":"icuYB","./lib/encoding/bufferwriter":"a0ZPc","./lib/encoding/varint":"dhZFE","./lib/util/js":"it7yM","./lib/util/preconditions":"c91dJ","./lib/errors":"9UULR","./lib/address":"lDqbu","./lib/block":"9DEmw","./lib/block/merkleblock":"qcJmp","./lib/block/blockheader":"aZDdC","./lib/hdprivatekey.js":"eAQrC","./lib/hdpublickey.js":"hxQwd","./lib/networks":"ai5AV","./lib/opcode":"1EJ2h","./lib/privatekey":"7qwA7","./lib/publickey":"cwKNK","./lib/script":"FcGOz","./lib/transaction":"ewby0","bn.js":"VopIn","bs58":"4ji3p","elliptic":"1NKsH","./lib/util/_":"f1m1Z","./lib/transaction/sighash":"hsca5"}],"c5iwU":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"bsv","version":"1.5.6","description":"A pure and powerful JavaScript Bitcoin SV (BSV) library.","author":"Ryan X. Charles <ryan@moneybutton.com>","main":"index.js","scripts":{"lint":"standard","test":"standard && mocha","coverage":"nyc --reporter=text npm run test","build-bsv":"webpack index.js --config webpack.config.js","build-ecies":"webpack ecies/index.js --config webpack.subproject.config.js --output-library bsvEcies -o bsv-ecies.min.js","build-message":"webpack message/index.js --config webpack.subproject.config.js --output-library bsvMessage -o bsv-message.min.js","build-mnemonic":"webpack mnemonic/index.js --config webpack.subproject.config.js --output-library bsvMnemonic -o bsv-mnemonic.min.js","build":"yarn build-bsv && yarn build-ecies && yarn build-message && yarn build-mnemonic","prepublishOnly":"yarn build"},"unpkg":"bsv.min.js","keywords":["bitcoin","transaction","address","p2p","ecies","cryptocurrency","blockchain","payment","bip21","bip32","bip37","bip69","bip70","multisig"],"repository":{"type":"git","url":"https://github.com/moneybutton/bsv"},"browser":{"request":"browser-request"},"dependencies":{"aes-js":"^3.1.2","bn.js":"=4.11.9","bs58":"=4.0.1","clone-deep":"^4.0.1","elliptic":"6.5.4","hash.js":"^1.1.7","inherits":"2.0.3","unorm":"1.4.1"},"devDependencies":{"brfs":"2.0.1","chai":"4.2.0","mocha":"^8.4.0","nyc":"^14.1.1","sinon":"7.2.3","standard":"12.0.1","webpack":"4.29.3","webpack-cli":"^3.3.12"},"license":"MIT","standard":{"globals":["afterEach","beforeEach","describe","it"],"ignore":["dist/**"]}}');

},{}],"9DEmw":[function(require,module,exports) {
module.exports = require("./block");
module.exports.BlockHeader = require("./blockheader");
module.exports.MerkleBlock = require("./merkleblock");

},{"./block":"2n7p5","./blockheader":"aZDdC","./merkleblock":"qcJmp"}],"2n7p5":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var BlockHeader = require("./blockheader");
var BN = require("../crypto/bn");
var BufferReader = require("../encoding/bufferreader");
var BufferWriter = require("../encoding/bufferwriter");
var Hash = require("../crypto/hash");
var Transaction = require("../transaction");
var $ = require("../util/preconditions");
/**
 * Instantiate a Block from a Buffer, JSON object, or Object with
 * the properties of the Block
 *
 * @param {*} - A Buffer, JSON string, or Object
 * @returns {Block}
 * @constructor
 */ function Block(arg) {
    if (!(this instanceof Block)) return new Block(arg);
    _.extend(this, Block._from(arg));
    return this;
}
Block.MAX_BLOCK_SIZE = 128000000;
/**
 * @param {*} - A Buffer, JSON string or Object
 * @returns {Object} - An object representing block data
 * @throws {TypeError} - If the argument was not recognized
 * @private
 */ Block._from = function _from(arg) {
    var info = {};
    if (Buffer.isBuffer(arg)) info = Block._fromBufferReader(BufferReader(arg));
    else if (_.isObject(arg)) info = Block._fromObject(arg);
    else throw new TypeError("Unrecognized argument for Block");
    return info;
};
/**
 * @param {Object} - A plain JavaScript object
 * @returns {Object} - An object representing block data
 * @private
 */ Block._fromObject = function _fromObject(data) {
    var transactions = [];
    data.transactions.forEach(function(tx) {
        if (tx instanceof Transaction) transactions.push(tx);
        else transactions.push(Transaction().fromObject(tx));
    });
    var info = {
        header: BlockHeader.fromObject(data.header),
        transactions: transactions
    };
    return info;
};
/**
 * @param {Object} - A plain JavaScript object
 * @returns {Block} - An instance of block
 */ Block.fromObject = function fromObject(obj) {
    var info = Block._fromObject(obj);
    return new Block(info);
};
/**
 * @param {BufferReader} - Block data
 * @returns {Object} - An object representing the block data
 * @private
 */ Block._fromBufferReader = function _fromBufferReader(br) {
    var info = {};
    $.checkState(!br.finished(), "No block data received");
    info.header = BlockHeader.fromBufferReader(br);
    var transactions = br.readVarintNum();
    info.transactions = [];
    for(var i = 0; i < transactions; i++)info.transactions.push(Transaction().fromBufferReader(br));
    return info;
};
/**
 * @param {BufferReader} - A buffer reader of the block
 * @returns {Block} - An instance of block
 */ Block.fromBufferReader = function fromBufferReader(br) {
    $.checkArgument(br, "br is required");
    var info = Block._fromBufferReader(br);
    return new Block(info);
};
/**
 * @param {Buffer} - A buffer of the block
 * @returns {Block} - An instance of block
 */ Block.fromBuffer = function fromBuffer(buf) {
    return Block.fromBufferReader(new BufferReader(buf));
};
/**
 * @param {string} - str - A hex encoded string of the block
 * @returns {Block} - A hex encoded string of the block
 */ Block.fromString = function fromString(str) {
    var buf = Buffer.from(str, "hex");
    return Block.fromBuffer(buf);
};
/**
 * @param {Binary} - Raw block binary data or buffer
 * @returns {Block} - An instance of block
 */ Block.fromRawBlock = function fromRawBlock(data) {
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, "binary");
    var br = BufferReader(data);
    br.pos = Block.Values.START_OF_BLOCK;
    var info = Block._fromBufferReader(br);
    return new Block(info);
};
/**
 * @returns {Object} - A plain object with the block properties
 */ Block.prototype.toObject = Block.prototype.toJSON = function toObject() {
    var transactions = [];
    this.transactions.forEach(function(tx) {
        transactions.push(tx.toObject());
    });
    return {
        header: this.header.toObject(),
        transactions: transactions
    };
};
/**
 * @returns {Buffer} - A buffer of the block
 */ Block.prototype.toBuffer = function toBuffer() {
    return this.toBufferWriter().concat();
};
/**
 * @returns {string} - A hex encoded string of the block
 */ Block.prototype.toString = function toString() {
    return this.toBuffer().toString("hex");
};
/**
 * @param {BufferWriter} - An existing instance of BufferWriter
 * @returns {BufferWriter} - An instance of BufferWriter representation of the Block
 */ Block.prototype.toBufferWriter = function toBufferWriter(bw) {
    if (!bw) bw = new BufferWriter();
    bw.write(this.header.toBuffer());
    bw.writeVarintNum(this.transactions.length);
    for(var i = 0; i < this.transactions.length; i++)this.transactions[i].toBufferWriter(bw);
    return bw;
};
/**
 * Will iterate through each transaction and return an array of hashes
 * @returns {Array} - An array with transaction hashes
 */ Block.prototype.getTransactionHashes = function getTransactionHashes() {
    var hashes = [];
    if (this.transactions.length === 0) return [
        Block.Values.NULL_HASH
    ];
    for(var t = 0; t < this.transactions.length; t++)hashes.push(this.transactions[t]._getHash());
    return hashes;
};
/**
 * Will build a merkle tree of all the transactions, ultimately arriving at
 * a single point, the merkle root.
 * @link https://en.bitcoin.it/wiki/Protocol_specification#Merkle_Trees
 * @returns {Array} - An array with each level of the tree after the other.
 */ Block.prototype.getMerkleTree = function getMerkleTree() {
    var tree = this.getTransactionHashes();
    var j = 0;
    for(var size = this.transactions.length; size > 1; size = Math.floor((size + 1) / 2)){
        for(var i = 0; i < size; i += 2){
            var i2 = Math.min(i + 1, size - 1);
            var buf = Buffer.concat([
                tree[j + i],
                tree[j + i2]
            ]);
            tree.push(Hash.sha256sha256(buf));
        }
        j += size;
    }
    return tree;
};
/**
 * Calculates the merkleRoot from the transactions.
 * @returns {Buffer} - A buffer of the merkle root hash
 */ Block.prototype.getMerkleRoot = function getMerkleRoot() {
    var tree = this.getMerkleTree();
    return tree[tree.length - 1];
};
/**
 * Verifies that the transactions in the block match the header merkle root
 * @returns {Boolean} - If the merkle roots match
 */ Block.prototype.validMerkleRoot = function validMerkleRoot() {
    var h = new BN(this.header.merkleRoot.toString("hex"), "hex");
    var c = new BN(this.getMerkleRoot().toString("hex"), "hex");
    if (h.cmp(c) !== 0) return false;
    return true;
};
/**
 * @returns {Buffer} - The little endian hash buffer of the header
 */ Block.prototype._getHash = function() {
    return this.header._getHash();
};
var idProperty = {
    configurable: false,
    enumerable: true,
    /**
   * @returns {string} - The big endian hash buffer of the header
   */ get: function() {
        if (!this._id) this._id = this.header.id;
        return this._id;
    },
    set: _.noop
};
Object.defineProperty(Block.prototype, "id", idProperty);
Object.defineProperty(Block.prototype, "hash", idProperty);
/**
 * @returns {string} - A string formatted for the console
 */ Block.prototype.inspect = function inspect() {
    return "<Block " + this.id + ">";
};
Block.Values = {
    START_OF_BLOCK: 8,
    NULL_HASH: Buffer.from("0000000000000000000000000000000000000000000000000000000000000000", "hex")
};
module.exports = Block;

},{"buffer":"fCgem","../util/_":"f1m1Z","./blockheader":"aZDdC","../crypto/bn":"35huv","../encoding/bufferreader":"icuYB","../encoding/bufferwriter":"a0ZPc","../crypto/hash":"jgMGE","../transaction":"ewby0","../util/preconditions":"c91dJ"}],"aZDdC":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var BN = require("../crypto/bn");
var BufferReader = require("../encoding/bufferreader");
var BufferWriter = require("../encoding/bufferwriter");
var Hash = require("../crypto/hash");
var $ = require("../util/preconditions");
var GENESIS_BITS = 0x1d00ffff;
/**
 * Instantiate a BlockHeader from a Buffer, JSON object, or Object with
 * the properties of the BlockHeader
 *
 * @param {*} - A Buffer, JSON string, or Object
 * @returns {BlockHeader} - An instance of block header
 * @constructor
 */ var BlockHeader = function BlockHeader(arg) {
    if (!(this instanceof BlockHeader)) return new BlockHeader(arg);
    var info = BlockHeader._from(arg);
    this.version = info.version;
    this.prevHash = info.prevHash;
    this.merkleRoot = info.merkleRoot;
    this.time = info.time;
    this.timestamp = info.time;
    this.bits = info.bits;
    this.nonce = info.nonce;
    if (info.hash) $.checkState(this.hash === info.hash, "Argument object hash property does not match block hash.");
    return this;
};
/**
 * @param {*} - A Buffer, JSON string or Object
 * @returns {Object} - An object representing block header data
 * @throws {TypeError} - If the argument was not recognized
 * @private
 */ BlockHeader._from = function _from(arg) {
    var info = {};
    if (Buffer.isBuffer(arg)) info = BlockHeader._fromBufferReader(BufferReader(arg));
    else if (_.isObject(arg)) info = BlockHeader._fromObject(arg);
    else throw new TypeError("Unrecognized argument for BlockHeader");
    return info;
};
/**
 * @param {Object} - A JSON string
 * @returns {Object} - An object representing block header data
 * @private
 */ BlockHeader._fromObject = function _fromObject(data) {
    $.checkArgument(data, "data is required");
    var prevHash = data.prevHash;
    var merkleRoot = data.merkleRoot;
    if (_.isString(data.prevHash)) prevHash = Buffer.from(data.prevHash, "hex").reverse();
    if (_.isString(data.merkleRoot)) merkleRoot = Buffer.from(data.merkleRoot, "hex").reverse();
    var info = {
        hash: data.hash,
        version: data.version,
        prevHash: prevHash,
        merkleRoot: merkleRoot,
        time: data.time,
        timestamp: data.time,
        bits: data.bits,
        nonce: data.nonce
    };
    return info;
};
/**
 * @param {Object} - A plain JavaScript object
 * @returns {BlockHeader} - An instance of block header
 */ BlockHeader.fromObject = function fromObject(obj) {
    var info = BlockHeader._fromObject(obj);
    return new BlockHeader(info);
};
/**
 * @param {Binary} - Raw block binary data or buffer
 * @returns {BlockHeader} - An instance of block header
 */ BlockHeader.fromRawBlock = function fromRawBlock(data) {
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, "binary");
    var br = BufferReader(data);
    br.pos = BlockHeader.Constants.START_OF_HEADER;
    var info = BlockHeader._fromBufferReader(br);
    return new BlockHeader(info);
};
/**
 * @param {Buffer} - A buffer of the block header
 * @returns {BlockHeader} - An instance of block header
 */ BlockHeader.fromBuffer = function fromBuffer(buf) {
    var info = BlockHeader._fromBufferReader(BufferReader(buf));
    return new BlockHeader(info);
};
/**
 * @param {string} - A hex encoded buffer of the block header
 * @returns {BlockHeader} - An instance of block header
 */ BlockHeader.fromString = function fromString(str) {
    var buf = Buffer.from(str, "hex");
    return BlockHeader.fromBuffer(buf);
};
/**
 * @param {BufferReader} - A BufferReader of the block header
 * @returns {Object} - An object representing block header data
 * @private
 */ BlockHeader._fromBufferReader = function _fromBufferReader(br) {
    var info = {};
    info.version = br.readInt32LE();
    info.prevHash = br.read(32);
    info.merkleRoot = br.read(32);
    info.time = br.readUInt32LE();
    info.bits = br.readUInt32LE();
    info.nonce = br.readUInt32LE();
    return info;
};
/**
 * @param {BufferReader} - A BufferReader of the block header
 * @returns {BlockHeader} - An instance of block header
 */ BlockHeader.fromBufferReader = function fromBufferReader(br) {
    var info = BlockHeader._fromBufferReader(br);
    return new BlockHeader(info);
};
/**
 * @returns {Object} - A plain object of the BlockHeader
 */ BlockHeader.prototype.toObject = BlockHeader.prototype.toJSON = function toObject() {
    return {
        hash: this.hash,
        version: this.version,
        prevHash: Buffer.from(this.prevHash).reverse().toString("hex"),
        merkleRoot: Buffer.from(this.merkleRoot).reverse().toString("hex"),
        time: this.time,
        bits: this.bits,
        nonce: this.nonce
    };
};
/**
 * @returns {Buffer} - A Buffer of the BlockHeader
 */ BlockHeader.prototype.toBuffer = function toBuffer() {
    return this.toBufferWriter().concat();
};
/**
 * @returns {string} - A hex encoded string of the BlockHeader
 */ BlockHeader.prototype.toString = function toString() {
    return this.toBuffer().toString("hex");
};
/**
 * @param {BufferWriter} - An existing instance BufferWriter
 * @returns {BufferWriter} - An instance of BufferWriter representation of the BlockHeader
 */ BlockHeader.prototype.toBufferWriter = function toBufferWriter(bw) {
    if (!bw) bw = new BufferWriter();
    bw.writeInt32LE(this.version);
    bw.write(this.prevHash);
    bw.write(this.merkleRoot);
    bw.writeUInt32LE(this.time);
    bw.writeUInt32LE(this.bits);
    bw.writeUInt32LE(this.nonce);
    return bw;
};
/**
 * Returns the target difficulty for this block
 * @param {Number} bits
 * @returns {BN} An instance of BN with the decoded difficulty bits
 */ BlockHeader.prototype.getTargetDifficulty = function getTargetDifficulty(bits) {
    bits = bits || this.bits;
    var target = new BN(bits & 0xffffff);
    var mov = 8 * ((bits >>> 24) - 3);
    while(mov-- > 0)target = target.mul(new BN(2));
    return target;
};
/**
 * @link https://en.bitcoin.it/wiki/Difficulty
 * @return {Number}
 */ BlockHeader.prototype.getDifficulty = function getDifficulty() {
    var difficulty1TargetBN = this.getTargetDifficulty(GENESIS_BITS).mul(new BN(Math.pow(10, 8)));
    var currentTargetBN = this.getTargetDifficulty();
    var difficultyString = difficulty1TargetBN.div(currentTargetBN).toString(10);
    var decimalPos = difficultyString.length - 8;
    difficultyString = difficultyString.slice(0, decimalPos) + "." + difficultyString.slice(decimalPos);
    return parseFloat(difficultyString);
};
/**
 * @returns {Buffer} - The little endian hash buffer of the header
 */ BlockHeader.prototype._getHash = function hash() {
    var buf = this.toBuffer();
    return Hash.sha256sha256(buf);
};
var idProperty = {
    configurable: false,
    enumerable: true,
    /**
   * @returns {string} - The big endian hash buffer of the header
   */ get: function() {
        if (!this._id) this._id = BufferReader(this._getHash()).readReverse().toString("hex");
        return this._id;
    },
    set: _.noop
};
Object.defineProperty(BlockHeader.prototype, "id", idProperty);
Object.defineProperty(BlockHeader.prototype, "hash", idProperty);
/**
 * @returns {Boolean} - If timestamp is not too far in the future
 */ BlockHeader.prototype.validTimestamp = function validTimestamp() {
    var currentTime = Math.round(new Date().getTime() / 1000);
    if (this.time > currentTime + BlockHeader.Constants.MAX_TIME_OFFSET) return false;
    return true;
};
/**
 * @returns {Boolean} - If the proof-of-work hash satisfies the target difficulty
 */ BlockHeader.prototype.validProofOfWork = function validProofOfWork() {
    var pow = new BN(this.id, "hex");
    var target = this.getTargetDifficulty();
    if (pow.cmp(target) > 0) return false;
    return true;
};
/**
 * @returns {string} - A string formatted for the console
 */ BlockHeader.prototype.inspect = function inspect() {
    return "<BlockHeader " + this.id + ">";
};
BlockHeader.Constants = {
    START_OF_HEADER: 8,
    MAX_TIME_OFFSET: 7200,
    LARGEST_HASH: new BN("10000000000000000000000000000000000000000000000000000000000000000", "hex")
};
module.exports = BlockHeader;

},{"buffer":"fCgem","../util/_":"f1m1Z","../crypto/bn":"35huv","../encoding/bufferreader":"icuYB","../encoding/bufferwriter":"a0ZPc","../crypto/hash":"jgMGE","../util/preconditions":"c91dJ"}],"qcJmp":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var _ = require("../util/_");
var BlockHeader = require("./blockheader");
var BufferReader = require("../encoding/bufferreader");
var BufferWriter = require("../encoding/bufferwriter");
var Hash = require("../crypto/hash");
var Transaction = require("../transaction");
var errors = require("../errors");
var $ = require("../util/preconditions");
/**
 * Instantiate a MerkleBlock from a Buffer, JSON object, or Object with
 * the properties of the Block
 *
 * @param {*} - A Buffer, JSON string, or Object representing a MerkleBlock
 * @returns {MerkleBlock}
 * @constructor
 */ function MerkleBlock(arg) {
    if (!(this instanceof MerkleBlock)) return new MerkleBlock(arg);
    var info = {};
    if (Buffer.isBuffer(arg)) info = MerkleBlock._fromBufferReader(BufferReader(arg));
    else if (_.isObject(arg)) {
        var header;
        if (arg.header instanceof BlockHeader) header = arg.header;
        else header = BlockHeader.fromObject(arg.header);
        info = {
            /**
       * @name MerkleBlock#header
       * @type {BlockHeader}
       */ header: header,
            /**
       * @name MerkleBlock#numTransactions
       * @type {Number}
       */ numTransactions: arg.numTransactions,
            /**
       * @name MerkleBlock#hashes
       * @type {String[]}
       */ hashes: arg.hashes,
            /**
       * @name MerkleBlock#flags
       * @type {Number[]}
       */ flags: arg.flags
        };
    } else throw new TypeError("Unrecognized argument for MerkleBlock");
    _.extend(this, info);
    this._flagBitsUsed = 0;
    this._hashesUsed = 0;
    return this;
}
/**
 * @param {Buffer} - MerkleBlock data in a Buffer object
 * @returns {MerkleBlock} - A MerkleBlock object
 */ MerkleBlock.fromBuffer = function fromBuffer(buf) {
    return MerkleBlock.fromBufferReader(BufferReader(buf));
};
/**
 * @param {BufferReader} - MerkleBlock data in a BufferReader object
 * @returns {MerkleBlock} - A MerkleBlock object
 */ MerkleBlock.fromBufferReader = function fromBufferReader(br) {
    return new MerkleBlock(MerkleBlock._fromBufferReader(br));
};
/**
 * @returns {Buffer} - A buffer of the block
 */ MerkleBlock.prototype.toBuffer = function toBuffer() {
    return this.toBufferWriter().concat();
};
/**
 * @param {BufferWriter} - An existing instance of BufferWriter
 * @returns {BufferWriter} - An instance of BufferWriter representation of the MerkleBlock
 */ MerkleBlock.prototype.toBufferWriter = function toBufferWriter(bw) {
    if (!bw) bw = new BufferWriter();
    bw.write(this.header.toBuffer());
    bw.writeUInt32LE(this.numTransactions);
    bw.writeVarintNum(this.hashes.length);
    for(var i = 0; i < this.hashes.length; i++)bw.write(Buffer.from(this.hashes[i], "hex"));
    bw.writeVarintNum(this.flags.length);
    for(i = 0; i < this.flags.length; i++)bw.writeUInt8(this.flags[i]);
    return bw;
};
/**
 * @returns {Object} - A plain object with the MerkleBlock properties
 */ MerkleBlock.prototype.toObject = MerkleBlock.prototype.toJSON = function toObject() {
    return {
        header: this.header.toObject(),
        numTransactions: this.numTransactions,
        hashes: this.hashes,
        flags: this.flags
    };
};
/**
 * Verify that the MerkleBlock is valid
 * @returns {Boolean} - True/False whether this MerkleBlock is Valid
 */ MerkleBlock.prototype.validMerkleTree = function validMerkleTree() {
    $.checkState(_.isArray(this.flags), "MerkleBlock flags is not an array");
    $.checkState(_.isArray(this.hashes), "MerkleBlock hashes is not an array");
    // Can't have more hashes than numTransactions
    if (this.hashes.length > this.numTransactions) return false;
    // Can't have more flag bits than num hashes
    if (this.flags.length * 8 < this.hashes.length) return false;
    var height = this._calcTreeHeight();
    var opts = {
        hashesUsed: 0,
        flagBitsUsed: 0
    };
    var root = this._traverseMerkleTree(height, 0, opts);
    if (opts.hashesUsed !== this.hashes.length) return false;
    return root.equals(this.header.merkleRoot);
};
/**
 * WARNING: This method is deprecated. Use filteredTxsHash instead.
 *
 * Return a list of all the txs hash that match the filter
 * @returns {Array} - txs hash that match the filter
 */ MerkleBlock.prototype.filterdTxsHash = function filterdTxsHash() {
    throw new Error("filterdTxsHash has been deprecated. use filteredTxsHash.");
};
/**
 * Return a list of all the txs hash that match the filter
 * @returns {Array} - txs hash that match the filter
 */ MerkleBlock.prototype.filteredTxsHash = function filteredTxsHash() {
    $.checkState(_.isArray(this.flags), "MerkleBlock flags is not an array");
    $.checkState(_.isArray(this.hashes), "MerkleBlock hashes is not an array");
    // Can't have more hashes than numTransactions
    if (this.hashes.length > this.numTransactions) throw new errors.MerkleBlock.InvalidMerkleTree();
    // Can't have more flag bits than num hashes
    if (this.flags.length * 8 < this.hashes.length) throw new errors.MerkleBlock.InvalidMerkleTree();
    // If there is only one hash the filter do not match any txs in the block
    if (this.hashes.length === 1) return [];
    var height = this._calcTreeHeight();
    var opts = {
        hashesUsed: 0,
        flagBitsUsed: 0
    };
    var txs = this._traverseMerkleTree(height, 0, opts, true);
    if (opts.hashesUsed !== this.hashes.length) throw new errors.MerkleBlock.InvalidMerkleTree();
    return txs;
};
/**
 * Traverse a the tree in this MerkleBlock, validating it along the way
 * Modeled after Bitcoin Core merkleblock.cpp TraverseAndExtract()
 * @param {Number} - depth - Current height
 * @param {Number} - pos - Current position in the tree
 * @param {Object} - opts - Object with values that need to be mutated throughout the traversal
 * @param {Boolean} - checkForTxs - if true return opts.txs else return the Merkle Hash
 * @param {Number} - opts.flagBitsUsed - Number of flag bits used, should start at 0
 * @param {Number} - opts.hashesUsed - Number of hashes used, should start at 0
 * @param {Array} - opts.txs - Will finish populated by transactions found during traversal that match the filter
 * @returns {Buffer|null} - Buffer containing the Merkle Hash for that height
 * @returns {Array} - transactions found during traversal that match the filter
 * @private
 */ MerkleBlock.prototype._traverseMerkleTree = function traverseMerkleTree(depth, pos, opts, checkForTxs) {
    opts = opts || {};
    opts.txs = opts.txs || [];
    opts.flagBitsUsed = opts.flagBitsUsed || 0;
    opts.hashesUsed = opts.hashesUsed || 0;
    checkForTxs = checkForTxs || false;
    if (opts.flagBitsUsed > this.flags.length * 8) return null;
    var isParentOfMatch = this.flags[opts.flagBitsUsed >> 3] >>> ((opts.flagBitsUsed++) & 7) & 1;
    if (depth === 0 || !isParentOfMatch) {
        if (opts.hashesUsed >= this.hashes.length) return null;
        var hash = this.hashes[opts.hashesUsed++];
        if (depth === 0 && isParentOfMatch) opts.txs.push(hash);
        return Buffer.from(hash, "hex");
    } else {
        var left = this._traverseMerkleTree(depth - 1, pos * 2, opts);
        var right = left;
        if (pos * 2 + 1 < this._calcTreeWidth(depth - 1)) right = this._traverseMerkleTree(depth - 1, pos * 2 + 1, opts);
        if (checkForTxs) return opts.txs;
        else return Hash.sha256sha256(Buffer.concat([
            left,
            right
        ]));
    }
};
/** Calculates the width of a merkle tree at a given height.
 *  Modeled after Bitcoin Core merkleblock.h CalcTreeWidth()
 * @param {Number} - Height at which we want the tree width
 * @returns {Number} - Width of the tree at a given height
 * @private
 */ MerkleBlock.prototype._calcTreeWidth = function calcTreeWidth(height) {
    return this.numTransactions + (1 << height) - 1 >> height;
};
/** Calculates the height of the merkle tree in this MerkleBlock
 * @param {Number} - Height at which we want the tree width
 * @returns {Number} - Height of the merkle tree in this MerkleBlock
 * @private
 */ MerkleBlock.prototype._calcTreeHeight = function calcTreeHeight() {
    var height = 0;
    while(this._calcTreeWidth(height) > 1)height++;
    return height;
};
/**
 * @param {Transaction|String} - Transaction or Transaction ID Hash
 * @returns {Boolean} - return true/false if this MerkleBlock has the TX or not
 * @private
 */ MerkleBlock.prototype.hasTransaction = function hasTransaction(tx) {
    $.checkArgument(!_.isUndefined(tx), "tx cannot be undefined");
    $.checkArgument(tx instanceof Transaction || typeof tx === "string", 'Invalid tx given, tx must be a "string" or "Transaction"');
    var hash = tx;
    if (tx instanceof Transaction) // We need to reverse the id hash for the lookup
    hash = Buffer.from(tx.id, "hex").reverse().toString("hex");
    var txs = [];
    var height = this._calcTreeHeight();
    this._traverseMerkleTree(height, 0, {
        txs: txs
    });
    return txs.indexOf(hash) !== -1;
};
/**
 * @param {Buffer} - MerkleBlock data
 * @returns {Object} - An Object representing merkleblock data
 * @private
 */ MerkleBlock._fromBufferReader = function _fromBufferReader(br) {
    $.checkState(!br.finished(), "No merkleblock data received");
    var info = {};
    info.header = BlockHeader.fromBufferReader(br);
    info.numTransactions = br.readUInt32LE();
    var numHashes = br.readVarintNum();
    info.hashes = [];
    for(var i = 0; i < numHashes; i++)info.hashes.push(br.read(32).toString("hex"));
    var numFlags = br.readVarintNum();
    info.flags = [];
    for(i = 0; i < numFlags; i++)info.flags.push(br.readUInt8());
    return info;
};
/**
 * @param {Object} - A plain JavaScript object
 * @returns {Block} - An instance of block
 */ MerkleBlock.fromObject = function fromObject(obj) {
    return new MerkleBlock(obj);
};
module.exports = MerkleBlock;

},{"buffer":"fCgem","../util/_":"f1m1Z","./blockheader":"aZDdC","../encoding/bufferreader":"icuYB","../encoding/bufferwriter":"a0ZPc","../crypto/hash":"jgMGE","../transaction":"ewby0","../errors":"9UULR","../util/preconditions":"c91dJ"}],"fIi8E":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var bsv = require("../../");
var BN = bsv.crypto.BN;
var unorm = require("unorm");
var _ = bsv.deps._;
var pbkdf2 = require("./pbkdf2");
var errors = require("./errors");
var Hash = bsv.crypto.Hash;
var Random = bsv.crypto.Random;
var $ = bsv.util.preconditions;
/**
 * This is an immutable class that represents a BIP39 Mnemonic code.
 * See BIP39 specification for more info: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
 * A Mnemonic code is a a group of easy to remember words used for the generation
 * of deterministic wallets. A Mnemonic can be used to generate a seed using
 * an optional passphrase, for later generate a HDPrivateKey.
 *
 * @example
 * // generate a random mnemonic
 * var mnemonic = new Mnemonic();
 * var phrase = mnemonic.phrase;
 *
 * // use a different language
 * var mnemonic = new Mnemonic(Mnemonic.Words.SPANISH);
 * var xprivkey = mnemonic.toHDPrivateKey();
 *
 * @param {*=} data - a seed, phrase, or entropy to initialize (can be skipped)
 * @param {Array=} wordlist - the wordlist to generate mnemonics from
 * @returns {Mnemonic} A new instance of Mnemonic
 * @constructor
 */ var Mnemonic = function(data, wordlist) {
    if (!(this instanceof Mnemonic)) return new Mnemonic(data, wordlist);
    if (_.isArray(data)) {
        wordlist = data;
        data = null;
    }
    // handle data overloading
    var ent, phrase, seed;
    if (Buffer.isBuffer(data)) seed = data;
    else if (_.isString(data)) phrase = unorm.nfkd(data);
    else if (_.isNumber(data)) ent = data;
    else if (data) throw new bsv.errors.InvalidArgument("data", "Must be a Buffer, a string or an integer");
    ent = ent || 128;
    // check and detect wordlist
    wordlist = wordlist || Mnemonic._getDictionary(phrase);
    if (phrase && !wordlist) throw new errors.UnknownWordlist(phrase);
    wordlist = wordlist || Mnemonic.Words.ENGLISH;
    if (seed) phrase = Mnemonic._entropy2mnemonic(seed, wordlist);
    // validate phrase and ent
    if (phrase && !Mnemonic.isValid(phrase, wordlist)) throw new errors.InvalidMnemonic(phrase);
    if (ent % 32 !== 0 || ent < 128) throw new bsv.errors.InvalidArgument("ENT", "Values must be ENT > 128 and ENT % 32 == 0");
    phrase = phrase || Mnemonic._mnemonic(ent, wordlist);
    Object.defineProperty(this, "wordlist", {
        configurable: false,
        value: wordlist
    });
    Object.defineProperty(this, "phrase", {
        configurable: false,
        value: phrase
    });
};
Mnemonic.fromRandom = function(wordlist = Mnemonic.Words.ENGLISH) {
    return new Mnemonic(wordlist);
};
Mnemonic.fromString = function(mnemonic, wordlist = Mnemonic.Words.ENGLISH) {
    return new Mnemonic(mnemonic, wordlist);
};
Mnemonic.Words = require("./words");
/**
 * Will return a boolean if the mnemonic is valid
 *
 * @example
 *
 * var valid = Mnemonic.isValid('lab rescue lunch elbow recall phrase perfect donkey biology guess moment husband');
 * // true
 *
 * @param {String} mnemonic - The mnemonic string
 * @param {String} [wordlist] - The wordlist used
 * @returns {boolean}
 */ Mnemonic.isValid = function(mnemonic, wordlist) {
    mnemonic = unorm.nfkd(mnemonic);
    wordlist = wordlist || Mnemonic._getDictionary(mnemonic);
    if (!wordlist) return false;
    var words = mnemonic.split(" ");
    var bin = "";
    for(var i = 0; i < words.length; i++){
        var ind = wordlist.indexOf(words[i]);
        if (ind < 0) return false;
        bin = bin + ("00000000000" + ind.toString(2)).slice(-11);
    }
    var cs = bin.length / 33;
    var hashBits = bin.slice(-cs);
    var nonhashBits = bin.slice(0, bin.length - cs);
    var buf = Buffer.alloc(nonhashBits.length / 8);
    for(i = 0; i < nonhashBits.length / 8; i++)buf.writeUInt8(parseInt(bin.slice(i * 8, (i + 1) * 8), 2), i);
    var expectedHashBits = Mnemonic._entropyChecksum(buf);
    return expectedHashBits === hashBits;
};
/**
 * Internal function to check if a mnemonic belongs to a wordlist.
 *
 * @param {String} mnemonic - The mnemonic string
 * @param {String} wordlist - The wordlist
 * @returns {boolean}
 */ Mnemonic._belongsToWordlist = function(mnemonic, wordlist) {
    var words = unorm.nfkd(mnemonic).split(" ");
    for(var i = 0; i < words.length; i++){
        var ind = wordlist.indexOf(words[i]);
        if (ind < 0) return false;
    }
    return true;
};
/**
 * Internal function to detect the wordlist used to generate the mnemonic.
 *
 * @param {String} mnemonic - The mnemonic string
 * @returns {Array} the wordlist or null
 */ Mnemonic._getDictionary = function(mnemonic) {
    if (!mnemonic) return null;
    var dicts = Object.keys(Mnemonic.Words);
    for(var i = 0; i < dicts.length; i++){
        var key = dicts[i];
        if (Mnemonic._belongsToWordlist(mnemonic, Mnemonic.Words[key])) return Mnemonic.Words[key];
    }
    return null;
};
/**
 * Will generate a seed based on the mnemonic and optional passphrase. Note that
 * this seed is absolutely NOT the seed that is output by .toSeed(). These are
 * two different seeds. The seed you want to put in here, if any, is just some
 * random byte string. Normally you should rely on the .fromRandom() method.
 *
 * @param {String} [passphrase]
 * @returns {Buffer}
 */ Mnemonic.prototype.toSeed = function(passphrase) {
    passphrase = passphrase || "";
    return pbkdf2(unorm.nfkd(this.phrase), unorm.nfkd("mnemonic" + passphrase), 2048, 64);
};
/**
 * Will generate a Mnemonic object based on a seed.
 *
 * @param {Buffer} [seed]
 * @param {string} [wordlist]
 * @returns {Mnemonic}
 */ Mnemonic.fromSeed = function(seed, wordlist) {
    $.checkArgument(Buffer.isBuffer(seed), "seed must be a Buffer.");
    $.checkArgument(_.isArray(wordlist) || _.isString(wordlist), "wordlist must be a string or an array.");
    return new Mnemonic(seed, wordlist);
};
/**
 *
 * Generates a HD Private Key from a Mnemonic.
 * Optionally receive a passphrase and bitcoin network.
 *
 * @param {String=} [passphrase]
 * @param {Network|String|number=} [network] - The network: 'livenet' or 'testnet'
 * @returns {HDPrivateKey}
 */ Mnemonic.prototype.toHDPrivateKey = function(passphrase, network) {
    var seed = this.toSeed(passphrase);
    return bsv.HDPrivateKey.fromSeed(seed, network);
};
/**
 * Will return a the string representation of the mnemonic
 *
 * @returns {String} Mnemonic
 */ Mnemonic.prototype.toString = function() {
    return this.phrase;
};
/**
 * Will return a string formatted for the console
 *
 * @returns {String} Mnemonic
 */ Mnemonic.prototype.inspect = function() {
    return "<Mnemonic: " + this.toString() + " >";
};
/**
 * Internal function to generate a random mnemonic
 *
 * @param {Number} ENT - Entropy size, defaults to 128
 * @param {Array} wordlist - Array of words to generate the mnemonic
 * @returns {String} Mnemonic string
 */ Mnemonic._mnemonic = function(ENT, wordlist) {
    var buf = Random.getRandomBuffer(ENT / 8);
    return Mnemonic._entropy2mnemonic(buf, wordlist);
};
/**
 * Internal function to generate mnemonic based on entropy
 *
 * @param {Number} entropy - Entropy buffer
 * @param {Array} wordlist - Array of words to generate the mnemonic
 * @returns {String} Mnemonic string
 */ Mnemonic._entropy2mnemonic = function(entropy, wordlist) {
    var bin = "";
    for(var i = 0; i < entropy.length; i++)bin = bin + ("00000000" + entropy[i].toString(2)).slice(-8);
    bin = bin + Mnemonic._entropyChecksum(entropy);
    if (bin.length % 11 !== 0) throw new errors.InvalidEntropy(bin);
    var mnemonic = [];
    for(i = 0; i < bin.length / 11; i++){
        var wi = parseInt(bin.slice(i * 11, (i + 1) * 11), 2);
        mnemonic.push(wordlist[wi]);
    }
    var ret;
    if (wordlist === Mnemonic.Words.JAPANESE) ret = mnemonic.join("　");
    else ret = mnemonic.join(" ");
    return ret;
};
/**
 * Internal function to create checksum of entropy
 *
 * @param entropy
 * @returns {string} Checksum of entropy length / 32
 * @private
 */ Mnemonic._entropyChecksum = function(entropy) {
    var hash = Hash.sha256(entropy);
    var bits = entropy.length * 8;
    var cs = bits / 32;
    var hashbits = new BN(hash.toString("hex"), 16).toString(2);
    // zero pad the hash bits
    while(hashbits.length % 256 !== 0)hashbits = "0" + hashbits;
    var checksum = hashbits.slice(0, cs);
    return checksum;
};
Mnemonic.bsv = bsv;
module.exports = Mnemonic;

},{"buffer":"fCgem","../../":"hOFCS","unorm":"ieyAY","./pbkdf2":"98UoV","./errors":"zt2gn","./words":"jWuWU"}],"ieyAY":[function(require,module,exports) {
(function(root) {
    "use strict";
    /***** unorm.js *****/ /*
 * UnicodeNormalizer 1.0.0
 * Copyright (c) 2008 Matsuza
 * Dual licensed under the MIT (MIT-LICENSE.txt) and GPL (GPL-LICENSE.txt) licenses.
 * $Date: 2008-06-05 16:44:17 +0200 (Thu, 05 Jun 2008) $
 * $Rev: 13309 $
 */ var DEFAULT_FEATURE = [
        null,
        0,
        {}
    ];
    var CACHE_THRESHOLD = 10;
    var SBase = 0xAC00, LBase = 0x1100, VBase = 0x1161, TBase = 0x11A7, LCount = 19, VCount = 21, TCount = 28;
    var NCount = VCount * TCount; // 588
    var SCount = LCount * NCount; // 11172
    var UChar = function(cp, feature) {
        this.codepoint = cp;
        this.feature = feature;
    };
    // Strategies
    var cache = {};
    var cacheCounter = [];
    for(var i = 0; i <= 0xFF; ++i)cacheCounter[i] = 0;
    function fromCache(next, cp, needFeature) {
        var ret = cache[cp];
        if (!ret) {
            ret = next(cp, needFeature);
            if (!!ret.feature && ++cacheCounter[cp >> 8 & 0xFF] > CACHE_THRESHOLD) cache[cp] = ret;
        }
        return ret;
    }
    function fromData(next, cp, needFeature) {
        var hash = cp & 0xFF00;
        var dunit = UChar.udata[hash] || {};
        var f = dunit[cp];
        return f ? new UChar(cp, f) : new UChar(cp, DEFAULT_FEATURE);
    }
    function fromCpOnly(next, cp, needFeature) {
        return !!needFeature ? next(cp, needFeature) : new UChar(cp, null);
    }
    function fromRuleBasedJamo(next, cp, needFeature) {
        var j;
        if (cp < LBase || LBase + LCount <= cp && cp < SBase || SBase + SCount < cp) return next(cp, needFeature);
        if (LBase <= cp && cp < LBase + LCount) {
            var c = {};
            var base = (cp - LBase) * VCount;
            for(j = 0; j < VCount; ++j)c[VBase + j] = SBase + TCount * (j + base);
            return new UChar(cp, [
                ,
                ,
                c
            ]);
        }
        var SIndex = cp - SBase;
        var TIndex = SIndex % TCount;
        var feature = [];
        if (TIndex !== 0) feature[0] = [
            SBase + SIndex - TIndex,
            TBase + TIndex
        ];
        else {
            feature[0] = [
                LBase + Math.floor(SIndex / NCount),
                VBase + Math.floor(SIndex % NCount / TCount)
            ];
            feature[2] = {};
            for(j = 1; j < TCount; ++j)feature[2][TBase + j] = cp + j;
        }
        return new UChar(cp, feature);
    }
    function fromCpFilter(next, cp, needFeature) {
        return cp < 60 || 13311 < cp && cp < 42607 ? new UChar(cp, DEFAULT_FEATURE) : next(cp, needFeature);
    }
    var strategies = [
        fromCpFilter,
        fromCache,
        fromCpOnly,
        fromRuleBasedJamo,
        fromData
    ];
    UChar.fromCharCode = strategies.reduceRight(function(next, strategy) {
        return function(cp, needFeature) {
            return strategy(next, cp, needFeature);
        };
    }, null);
    UChar.isHighSurrogate = function(cp) {
        return cp >= 0xD800 && cp <= 0xDBFF;
    };
    UChar.isLowSurrogate = function(cp) {
        return cp >= 0xDC00 && cp <= 0xDFFF;
    };
    UChar.prototype.prepFeature = function() {
        if (!this.feature) this.feature = UChar.fromCharCode(this.codepoint, true).feature;
    };
    UChar.prototype.toString = function() {
        if (this.codepoint < 0x10000) return String.fromCharCode(this.codepoint);
        else {
            var x = this.codepoint - 0x10000;
            return String.fromCharCode(Math.floor(x / 0x400) + 0xD800, x % 0x400 + 0xDC00);
        }
    };
    UChar.prototype.getDecomp = function() {
        this.prepFeature();
        return this.feature[0] || null;
    };
    UChar.prototype.isCompatibility = function() {
        this.prepFeature();
        return !!this.feature[1] && this.feature[1] & 256;
    };
    UChar.prototype.isExclude = function() {
        this.prepFeature();
        return !!this.feature[1] && this.feature[1] & 512;
    };
    UChar.prototype.getCanonicalClass = function() {
        this.prepFeature();
        return !!this.feature[1] ? this.feature[1] & 0xff : 0;
    };
    UChar.prototype.getComposite = function(following) {
        this.prepFeature();
        if (!this.feature[2]) return null;
        var cp = this.feature[2][following.codepoint];
        return cp ? UChar.fromCharCode(cp) : null;
    };
    var UCharIterator = function(str) {
        this.str = str;
        this.cursor = 0;
    };
    UCharIterator.prototype.next = function() {
        if (!!this.str && this.cursor < this.str.length) {
            var cp = this.str.charCodeAt(this.cursor++);
            var d;
            if (UChar.isHighSurrogate(cp) && this.cursor < this.str.length && UChar.isLowSurrogate(d = this.str.charCodeAt(this.cursor))) {
                cp = (cp - 0xD800) * 0x400 + (d - 0xDC00) + 0x10000;
                ++this.cursor;
            }
            return UChar.fromCharCode(cp);
        } else {
            this.str = null;
            return null;
        }
    };
    var RecursDecompIterator = function(it, cano) {
        this.it = it;
        this.canonical = cano;
        this.resBuf = [];
    };
    RecursDecompIterator.prototype.next = function() {
        function recursiveDecomp(cano, uchar) {
            var decomp = uchar.getDecomp();
            if (!!decomp && !(cano && uchar.isCompatibility())) {
                var ret = [];
                for(var i = 0; i < decomp.length; ++i){
                    var a = recursiveDecomp(cano, UChar.fromCharCode(decomp[i]));
                    ret = ret.concat(a);
                }
                return ret;
            } else return [
                uchar
            ];
        }
        if (this.resBuf.length === 0) {
            var uchar = this.it.next();
            if (!uchar) return null;
            this.resBuf = recursiveDecomp(this.canonical, uchar);
        }
        return this.resBuf.shift();
    };
    var DecompIterator = function(it) {
        this.it = it;
        this.resBuf = [];
    };
    DecompIterator.prototype.next = function() {
        var cc;
        if (this.resBuf.length === 0) do {
            var uchar = this.it.next();
            if (!uchar) break;
            cc = uchar.getCanonicalClass();
            var inspt = this.resBuf.length;
            if (cc !== 0) for(; inspt > 0; --inspt){
                var uchar2 = this.resBuf[inspt - 1];
                var cc2 = uchar2.getCanonicalClass();
                if (cc2 <= cc) break;
            }
            this.resBuf.splice(inspt, 0, uchar);
        }while (cc !== 0);
        return this.resBuf.shift();
    };
    var CompIterator = function(it) {
        this.it = it;
        this.procBuf = [];
        this.resBuf = [];
        this.lastClass = null;
    };
    CompIterator.prototype.next = function() {
        while(this.resBuf.length === 0){
            var uchar = this.it.next();
            if (!uchar) {
                this.resBuf = this.procBuf;
                this.procBuf = [];
                break;
            }
            if (this.procBuf.length === 0) {
                this.lastClass = uchar.getCanonicalClass();
                this.procBuf.push(uchar);
            } else {
                var starter = this.procBuf[0];
                var composite = starter.getComposite(uchar);
                var cc = uchar.getCanonicalClass();
                if (!!composite && (this.lastClass < cc || this.lastClass === 0)) this.procBuf[0] = composite;
                else {
                    if (cc === 0) {
                        this.resBuf = this.procBuf;
                        this.procBuf = [];
                    }
                    this.lastClass = cc;
                    this.procBuf.push(uchar);
                }
            }
        }
        return this.resBuf.shift();
    };
    var createIterator = function(mode, str) {
        switch(mode){
            case "NFD":
                return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true));
            case "NFKD":
                return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false));
            case "NFC":
                return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true)));
            case "NFKC":
                return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false)));
        }
        throw mode + " is invalid";
    };
    var normalize = function(mode, str) {
        var it = createIterator(mode, str);
        var ret = "";
        var uchar;
        while(!!(uchar = it.next()))ret += uchar.toString();
        return ret;
    };
    /* API functions */ function nfd(str) {
        return normalize("NFD", str);
    }
    function nfkd(str) {
        return normalize("NFKD", str);
    }
    function nfc(str) {
        return normalize("NFC", str);
    }
    function nfkc(str) {
        return normalize("NFKC", str);
    }
    /* Unicode data */ UChar.udata = {
        0: {
            60: [
                ,
                ,
                {
                    824: 8814
                }
            ],
            61: [
                ,
                ,
                {
                    824: 8800
                }
            ],
            62: [
                ,
                ,
                {
                    824: 8815
                }
            ],
            65: [
                ,
                ,
                {
                    768: 192,
                    769: 193,
                    770: 194,
                    771: 195,
                    772: 256,
                    774: 258,
                    775: 550,
                    776: 196,
                    777: 7842,
                    778: 197,
                    780: 461,
                    783: 512,
                    785: 514,
                    803: 7840,
                    805: 7680,
                    808: 260
                }
            ],
            66: [
                ,
                ,
                {
                    775: 7682,
                    803: 7684,
                    817: 7686
                }
            ],
            67: [
                ,
                ,
                {
                    769: 262,
                    770: 264,
                    775: 266,
                    780: 268,
                    807: 199
                }
            ],
            68: [
                ,
                ,
                {
                    775: 7690,
                    780: 270,
                    803: 7692,
                    807: 7696,
                    813: 7698,
                    817: 7694
                }
            ],
            69: [
                ,
                ,
                {
                    768: 200,
                    769: 201,
                    770: 202,
                    771: 7868,
                    772: 274,
                    774: 276,
                    775: 278,
                    776: 203,
                    777: 7866,
                    780: 282,
                    783: 516,
                    785: 518,
                    803: 7864,
                    807: 552,
                    808: 280,
                    813: 7704,
                    816: 7706
                }
            ],
            70: [
                ,
                ,
                {
                    775: 7710
                }
            ],
            71: [
                ,
                ,
                {
                    769: 500,
                    770: 284,
                    772: 7712,
                    774: 286,
                    775: 288,
                    780: 486,
                    807: 290
                }
            ],
            72: [
                ,
                ,
                {
                    770: 292,
                    775: 7714,
                    776: 7718,
                    780: 542,
                    803: 7716,
                    807: 7720,
                    814: 7722
                }
            ],
            73: [
                ,
                ,
                {
                    768: 204,
                    769: 205,
                    770: 206,
                    771: 296,
                    772: 298,
                    774: 300,
                    775: 304,
                    776: 207,
                    777: 7880,
                    780: 463,
                    783: 520,
                    785: 522,
                    803: 7882,
                    808: 302,
                    816: 7724
                }
            ],
            74: [
                ,
                ,
                {
                    770: 308
                }
            ],
            75: [
                ,
                ,
                {
                    769: 7728,
                    780: 488,
                    803: 7730,
                    807: 310,
                    817: 7732
                }
            ],
            76: [
                ,
                ,
                {
                    769: 313,
                    780: 317,
                    803: 7734,
                    807: 315,
                    813: 7740,
                    817: 7738
                }
            ],
            77: [
                ,
                ,
                {
                    769: 7742,
                    775: 7744,
                    803: 7746
                }
            ],
            78: [
                ,
                ,
                {
                    768: 504,
                    769: 323,
                    771: 209,
                    775: 7748,
                    780: 327,
                    803: 7750,
                    807: 325,
                    813: 7754,
                    817: 7752
                }
            ],
            79: [
                ,
                ,
                {
                    768: 210,
                    769: 211,
                    770: 212,
                    771: 213,
                    772: 332,
                    774: 334,
                    775: 558,
                    776: 214,
                    777: 7886,
                    779: 336,
                    780: 465,
                    783: 524,
                    785: 526,
                    795: 416,
                    803: 7884,
                    808: 490
                }
            ],
            80: [
                ,
                ,
                {
                    769: 7764,
                    775: 7766
                }
            ],
            82: [
                ,
                ,
                {
                    769: 340,
                    775: 7768,
                    780: 344,
                    783: 528,
                    785: 530,
                    803: 7770,
                    807: 342,
                    817: 7774
                }
            ],
            83: [
                ,
                ,
                {
                    769: 346,
                    770: 348,
                    775: 7776,
                    780: 352,
                    803: 7778,
                    806: 536,
                    807: 350
                }
            ],
            84: [
                ,
                ,
                {
                    775: 7786,
                    780: 356,
                    803: 7788,
                    806: 538,
                    807: 354,
                    813: 7792,
                    817: 7790
                }
            ],
            85: [
                ,
                ,
                {
                    768: 217,
                    769: 218,
                    770: 219,
                    771: 360,
                    772: 362,
                    774: 364,
                    776: 220,
                    777: 7910,
                    778: 366,
                    779: 368,
                    780: 467,
                    783: 532,
                    785: 534,
                    795: 431,
                    803: 7908,
                    804: 7794,
                    808: 370,
                    813: 7798,
                    816: 7796
                }
            ],
            86: [
                ,
                ,
                {
                    771: 7804,
                    803: 7806
                }
            ],
            87: [
                ,
                ,
                {
                    768: 7808,
                    769: 7810,
                    770: 372,
                    775: 7814,
                    776: 7812,
                    803: 7816
                }
            ],
            88: [
                ,
                ,
                {
                    775: 7818,
                    776: 7820
                }
            ],
            89: [
                ,
                ,
                {
                    768: 7922,
                    769: 221,
                    770: 374,
                    771: 7928,
                    772: 562,
                    775: 7822,
                    776: 376,
                    777: 7926,
                    803: 7924
                }
            ],
            90: [
                ,
                ,
                {
                    769: 377,
                    770: 7824,
                    775: 379,
                    780: 381,
                    803: 7826,
                    817: 7828
                }
            ],
            97: [
                ,
                ,
                {
                    768: 224,
                    769: 225,
                    770: 226,
                    771: 227,
                    772: 257,
                    774: 259,
                    775: 551,
                    776: 228,
                    777: 7843,
                    778: 229,
                    780: 462,
                    783: 513,
                    785: 515,
                    803: 7841,
                    805: 7681,
                    808: 261
                }
            ],
            98: [
                ,
                ,
                {
                    775: 7683,
                    803: 7685,
                    817: 7687
                }
            ],
            99: [
                ,
                ,
                {
                    769: 263,
                    770: 265,
                    775: 267,
                    780: 269,
                    807: 231
                }
            ],
            100: [
                ,
                ,
                {
                    775: 7691,
                    780: 271,
                    803: 7693,
                    807: 7697,
                    813: 7699,
                    817: 7695
                }
            ],
            101: [
                ,
                ,
                {
                    768: 232,
                    769: 233,
                    770: 234,
                    771: 7869,
                    772: 275,
                    774: 277,
                    775: 279,
                    776: 235,
                    777: 7867,
                    780: 283,
                    783: 517,
                    785: 519,
                    803: 7865,
                    807: 553,
                    808: 281,
                    813: 7705,
                    816: 7707
                }
            ],
            102: [
                ,
                ,
                {
                    775: 7711
                }
            ],
            103: [
                ,
                ,
                {
                    769: 501,
                    770: 285,
                    772: 7713,
                    774: 287,
                    775: 289,
                    780: 487,
                    807: 291
                }
            ],
            104: [
                ,
                ,
                {
                    770: 293,
                    775: 7715,
                    776: 7719,
                    780: 543,
                    803: 7717,
                    807: 7721,
                    814: 7723,
                    817: 7830
                }
            ],
            105: [
                ,
                ,
                {
                    768: 236,
                    769: 237,
                    770: 238,
                    771: 297,
                    772: 299,
                    774: 301,
                    776: 239,
                    777: 7881,
                    780: 464,
                    783: 521,
                    785: 523,
                    803: 7883,
                    808: 303,
                    816: 7725
                }
            ],
            106: [
                ,
                ,
                {
                    770: 309,
                    780: 496
                }
            ],
            107: [
                ,
                ,
                {
                    769: 7729,
                    780: 489,
                    803: 7731,
                    807: 311,
                    817: 7733
                }
            ],
            108: [
                ,
                ,
                {
                    769: 314,
                    780: 318,
                    803: 7735,
                    807: 316,
                    813: 7741,
                    817: 7739
                }
            ],
            109: [
                ,
                ,
                {
                    769: 7743,
                    775: 7745,
                    803: 7747
                }
            ],
            110: [
                ,
                ,
                {
                    768: 505,
                    769: 324,
                    771: 241,
                    775: 7749,
                    780: 328,
                    803: 7751,
                    807: 326,
                    813: 7755,
                    817: 7753
                }
            ],
            111: [
                ,
                ,
                {
                    768: 242,
                    769: 243,
                    770: 244,
                    771: 245,
                    772: 333,
                    774: 335,
                    775: 559,
                    776: 246,
                    777: 7887,
                    779: 337,
                    780: 466,
                    783: 525,
                    785: 527,
                    795: 417,
                    803: 7885,
                    808: 491
                }
            ],
            112: [
                ,
                ,
                {
                    769: 7765,
                    775: 7767
                }
            ],
            114: [
                ,
                ,
                {
                    769: 341,
                    775: 7769,
                    780: 345,
                    783: 529,
                    785: 531,
                    803: 7771,
                    807: 343,
                    817: 7775
                }
            ],
            115: [
                ,
                ,
                {
                    769: 347,
                    770: 349,
                    775: 7777,
                    780: 353,
                    803: 7779,
                    806: 537,
                    807: 351
                }
            ],
            116: [
                ,
                ,
                {
                    775: 7787,
                    776: 7831,
                    780: 357,
                    803: 7789,
                    806: 539,
                    807: 355,
                    813: 7793,
                    817: 7791
                }
            ],
            117: [
                ,
                ,
                {
                    768: 249,
                    769: 250,
                    770: 251,
                    771: 361,
                    772: 363,
                    774: 365,
                    776: 252,
                    777: 7911,
                    778: 367,
                    779: 369,
                    780: 468,
                    783: 533,
                    785: 535,
                    795: 432,
                    803: 7909,
                    804: 7795,
                    808: 371,
                    813: 7799,
                    816: 7797
                }
            ],
            118: [
                ,
                ,
                {
                    771: 7805,
                    803: 7807
                }
            ],
            119: [
                ,
                ,
                {
                    768: 7809,
                    769: 7811,
                    770: 373,
                    775: 7815,
                    776: 7813,
                    778: 7832,
                    803: 7817
                }
            ],
            120: [
                ,
                ,
                {
                    775: 7819,
                    776: 7821
                }
            ],
            121: [
                ,
                ,
                {
                    768: 7923,
                    769: 253,
                    770: 375,
                    771: 7929,
                    772: 563,
                    775: 7823,
                    776: 255,
                    777: 7927,
                    778: 7833,
                    803: 7925
                }
            ],
            122: [
                ,
                ,
                {
                    769: 378,
                    770: 7825,
                    775: 380,
                    780: 382,
                    803: 7827,
                    817: 7829
                }
            ],
            160: [
                [
                    32
                ],
                256
            ],
            168: [
                [
                    32,
                    776
                ],
                256,
                {
                    768: 8173,
                    769: 901,
                    834: 8129
                }
            ],
            170: [
                [
                    97
                ],
                256
            ],
            175: [
                [
                    32,
                    772
                ],
                256
            ],
            178: [
                [
                    50
                ],
                256
            ],
            179: [
                [
                    51
                ],
                256
            ],
            180: [
                [
                    32,
                    769
                ],
                256
            ],
            181: [
                [
                    956
                ],
                256
            ],
            184: [
                [
                    32,
                    807
                ],
                256
            ],
            185: [
                [
                    49
                ],
                256
            ],
            186: [
                [
                    111
                ],
                256
            ],
            188: [
                [
                    49,
                    8260,
                    52
                ],
                256
            ],
            189: [
                [
                    49,
                    8260,
                    50
                ],
                256
            ],
            190: [
                [
                    51,
                    8260,
                    52
                ],
                256
            ],
            192: [
                [
                    65,
                    768
                ]
            ],
            193: [
                [
                    65,
                    769
                ]
            ],
            194: [
                [
                    65,
                    770
                ],
                ,
                {
                    768: 7846,
                    769: 7844,
                    771: 7850,
                    777: 7848
                }
            ],
            195: [
                [
                    65,
                    771
                ]
            ],
            196: [
                [
                    65,
                    776
                ],
                ,
                {
                    772: 478
                }
            ],
            197: [
                [
                    65,
                    778
                ],
                ,
                {
                    769: 506
                }
            ],
            198: [
                ,
                ,
                {
                    769: 508,
                    772: 482
                }
            ],
            199: [
                [
                    67,
                    807
                ],
                ,
                {
                    769: 7688
                }
            ],
            200: [
                [
                    69,
                    768
                ]
            ],
            201: [
                [
                    69,
                    769
                ]
            ],
            202: [
                [
                    69,
                    770
                ],
                ,
                {
                    768: 7872,
                    769: 7870,
                    771: 7876,
                    777: 7874
                }
            ],
            203: [
                [
                    69,
                    776
                ]
            ],
            204: [
                [
                    73,
                    768
                ]
            ],
            205: [
                [
                    73,
                    769
                ]
            ],
            206: [
                [
                    73,
                    770
                ]
            ],
            207: [
                [
                    73,
                    776
                ],
                ,
                {
                    769: 7726
                }
            ],
            209: [
                [
                    78,
                    771
                ]
            ],
            210: [
                [
                    79,
                    768
                ]
            ],
            211: [
                [
                    79,
                    769
                ]
            ],
            212: [
                [
                    79,
                    770
                ],
                ,
                {
                    768: 7890,
                    769: 7888,
                    771: 7894,
                    777: 7892
                }
            ],
            213: [
                [
                    79,
                    771
                ],
                ,
                {
                    769: 7756,
                    772: 556,
                    776: 7758
                }
            ],
            214: [
                [
                    79,
                    776
                ],
                ,
                {
                    772: 554
                }
            ],
            216: [
                ,
                ,
                {
                    769: 510
                }
            ],
            217: [
                [
                    85,
                    768
                ]
            ],
            218: [
                [
                    85,
                    769
                ]
            ],
            219: [
                [
                    85,
                    770
                ]
            ],
            220: [
                [
                    85,
                    776
                ],
                ,
                {
                    768: 475,
                    769: 471,
                    772: 469,
                    780: 473
                }
            ],
            221: [
                [
                    89,
                    769
                ]
            ],
            224: [
                [
                    97,
                    768
                ]
            ],
            225: [
                [
                    97,
                    769
                ]
            ],
            226: [
                [
                    97,
                    770
                ],
                ,
                {
                    768: 7847,
                    769: 7845,
                    771: 7851,
                    777: 7849
                }
            ],
            227: [
                [
                    97,
                    771
                ]
            ],
            228: [
                [
                    97,
                    776
                ],
                ,
                {
                    772: 479
                }
            ],
            229: [
                [
                    97,
                    778
                ],
                ,
                {
                    769: 507
                }
            ],
            230: [
                ,
                ,
                {
                    769: 509,
                    772: 483
                }
            ],
            231: [
                [
                    99,
                    807
                ],
                ,
                {
                    769: 7689
                }
            ],
            232: [
                [
                    101,
                    768
                ]
            ],
            233: [
                [
                    101,
                    769
                ]
            ],
            234: [
                [
                    101,
                    770
                ],
                ,
                {
                    768: 7873,
                    769: 7871,
                    771: 7877,
                    777: 7875
                }
            ],
            235: [
                [
                    101,
                    776
                ]
            ],
            236: [
                [
                    105,
                    768
                ]
            ],
            237: [
                [
                    105,
                    769
                ]
            ],
            238: [
                [
                    105,
                    770
                ]
            ],
            239: [
                [
                    105,
                    776
                ],
                ,
                {
                    769: 7727
                }
            ],
            241: [
                [
                    110,
                    771
                ]
            ],
            242: [
                [
                    111,
                    768
                ]
            ],
            243: [
                [
                    111,
                    769
                ]
            ],
            244: [
                [
                    111,
                    770
                ],
                ,
                {
                    768: 7891,
                    769: 7889,
                    771: 7895,
                    777: 7893
                }
            ],
            245: [
                [
                    111,
                    771
                ],
                ,
                {
                    769: 7757,
                    772: 557,
                    776: 7759
                }
            ],
            246: [
                [
                    111,
                    776
                ],
                ,
                {
                    772: 555
                }
            ],
            248: [
                ,
                ,
                {
                    769: 511
                }
            ],
            249: [
                [
                    117,
                    768
                ]
            ],
            250: [
                [
                    117,
                    769
                ]
            ],
            251: [
                [
                    117,
                    770
                ]
            ],
            252: [
                [
                    117,
                    776
                ],
                ,
                {
                    768: 476,
                    769: 472,
                    772: 470,
                    780: 474
                }
            ],
            253: [
                [
                    121,
                    769
                ]
            ],
            255: [
                [
                    121,
                    776
                ]
            ]
        },
        256: {
            256: [
                [
                    65,
                    772
                ]
            ],
            257: [
                [
                    97,
                    772
                ]
            ],
            258: [
                [
                    65,
                    774
                ],
                ,
                {
                    768: 7856,
                    769: 7854,
                    771: 7860,
                    777: 7858
                }
            ],
            259: [
                [
                    97,
                    774
                ],
                ,
                {
                    768: 7857,
                    769: 7855,
                    771: 7861,
                    777: 7859
                }
            ],
            260: [
                [
                    65,
                    808
                ]
            ],
            261: [
                [
                    97,
                    808
                ]
            ],
            262: [
                [
                    67,
                    769
                ]
            ],
            263: [
                [
                    99,
                    769
                ]
            ],
            264: [
                [
                    67,
                    770
                ]
            ],
            265: [
                [
                    99,
                    770
                ]
            ],
            266: [
                [
                    67,
                    775
                ]
            ],
            267: [
                [
                    99,
                    775
                ]
            ],
            268: [
                [
                    67,
                    780
                ]
            ],
            269: [
                [
                    99,
                    780
                ]
            ],
            270: [
                [
                    68,
                    780
                ]
            ],
            271: [
                [
                    100,
                    780
                ]
            ],
            274: [
                [
                    69,
                    772
                ],
                ,
                {
                    768: 7700,
                    769: 7702
                }
            ],
            275: [
                [
                    101,
                    772
                ],
                ,
                {
                    768: 7701,
                    769: 7703
                }
            ],
            276: [
                [
                    69,
                    774
                ]
            ],
            277: [
                [
                    101,
                    774
                ]
            ],
            278: [
                [
                    69,
                    775
                ]
            ],
            279: [
                [
                    101,
                    775
                ]
            ],
            280: [
                [
                    69,
                    808
                ]
            ],
            281: [
                [
                    101,
                    808
                ]
            ],
            282: [
                [
                    69,
                    780
                ]
            ],
            283: [
                [
                    101,
                    780
                ]
            ],
            284: [
                [
                    71,
                    770
                ]
            ],
            285: [
                [
                    103,
                    770
                ]
            ],
            286: [
                [
                    71,
                    774
                ]
            ],
            287: [
                [
                    103,
                    774
                ]
            ],
            288: [
                [
                    71,
                    775
                ]
            ],
            289: [
                [
                    103,
                    775
                ]
            ],
            290: [
                [
                    71,
                    807
                ]
            ],
            291: [
                [
                    103,
                    807
                ]
            ],
            292: [
                [
                    72,
                    770
                ]
            ],
            293: [
                [
                    104,
                    770
                ]
            ],
            296: [
                [
                    73,
                    771
                ]
            ],
            297: [
                [
                    105,
                    771
                ]
            ],
            298: [
                [
                    73,
                    772
                ]
            ],
            299: [
                [
                    105,
                    772
                ]
            ],
            300: [
                [
                    73,
                    774
                ]
            ],
            301: [
                [
                    105,
                    774
                ]
            ],
            302: [
                [
                    73,
                    808
                ]
            ],
            303: [
                [
                    105,
                    808
                ]
            ],
            304: [
                [
                    73,
                    775
                ]
            ],
            306: [
                [
                    73,
                    74
                ],
                256
            ],
            307: [
                [
                    105,
                    106
                ],
                256
            ],
            308: [
                [
                    74,
                    770
                ]
            ],
            309: [
                [
                    106,
                    770
                ]
            ],
            310: [
                [
                    75,
                    807
                ]
            ],
            311: [
                [
                    107,
                    807
                ]
            ],
            313: [
                [
                    76,
                    769
                ]
            ],
            314: [
                [
                    108,
                    769
                ]
            ],
            315: [
                [
                    76,
                    807
                ]
            ],
            316: [
                [
                    108,
                    807
                ]
            ],
            317: [
                [
                    76,
                    780
                ]
            ],
            318: [
                [
                    108,
                    780
                ]
            ],
            319: [
                [
                    76,
                    183
                ],
                256
            ],
            320: [
                [
                    108,
                    183
                ],
                256
            ],
            323: [
                [
                    78,
                    769
                ]
            ],
            324: [
                [
                    110,
                    769
                ]
            ],
            325: [
                [
                    78,
                    807
                ]
            ],
            326: [
                [
                    110,
                    807
                ]
            ],
            327: [
                [
                    78,
                    780
                ]
            ],
            328: [
                [
                    110,
                    780
                ]
            ],
            329: [
                [
                    700,
                    110
                ],
                256
            ],
            332: [
                [
                    79,
                    772
                ],
                ,
                {
                    768: 7760,
                    769: 7762
                }
            ],
            333: [
                [
                    111,
                    772
                ],
                ,
                {
                    768: 7761,
                    769: 7763
                }
            ],
            334: [
                [
                    79,
                    774
                ]
            ],
            335: [
                [
                    111,
                    774
                ]
            ],
            336: [
                [
                    79,
                    779
                ]
            ],
            337: [
                [
                    111,
                    779
                ]
            ],
            340: [
                [
                    82,
                    769
                ]
            ],
            341: [
                [
                    114,
                    769
                ]
            ],
            342: [
                [
                    82,
                    807
                ]
            ],
            343: [
                [
                    114,
                    807
                ]
            ],
            344: [
                [
                    82,
                    780
                ]
            ],
            345: [
                [
                    114,
                    780
                ]
            ],
            346: [
                [
                    83,
                    769
                ],
                ,
                {
                    775: 7780
                }
            ],
            347: [
                [
                    115,
                    769
                ],
                ,
                {
                    775: 7781
                }
            ],
            348: [
                [
                    83,
                    770
                ]
            ],
            349: [
                [
                    115,
                    770
                ]
            ],
            350: [
                [
                    83,
                    807
                ]
            ],
            351: [
                [
                    115,
                    807
                ]
            ],
            352: [
                [
                    83,
                    780
                ],
                ,
                {
                    775: 7782
                }
            ],
            353: [
                [
                    115,
                    780
                ],
                ,
                {
                    775: 7783
                }
            ],
            354: [
                [
                    84,
                    807
                ]
            ],
            355: [
                [
                    116,
                    807
                ]
            ],
            356: [
                [
                    84,
                    780
                ]
            ],
            357: [
                [
                    116,
                    780
                ]
            ],
            360: [
                [
                    85,
                    771
                ],
                ,
                {
                    769: 7800
                }
            ],
            361: [
                [
                    117,
                    771
                ],
                ,
                {
                    769: 7801
                }
            ],
            362: [
                [
                    85,
                    772
                ],
                ,
                {
                    776: 7802
                }
            ],
            363: [
                [
                    117,
                    772
                ],
                ,
                {
                    776: 7803
                }
            ],
            364: [
                [
                    85,
                    774
                ]
            ],
            365: [
                [
                    117,
                    774
                ]
            ],
            366: [
                [
                    85,
                    778
                ]
            ],
            367: [
                [
                    117,
                    778
                ]
            ],
            368: [
                [
                    85,
                    779
                ]
            ],
            369: [
                [
                    117,
                    779
                ]
            ],
            370: [
                [
                    85,
                    808
                ]
            ],
            371: [
                [
                    117,
                    808
                ]
            ],
            372: [
                [
                    87,
                    770
                ]
            ],
            373: [
                [
                    119,
                    770
                ]
            ],
            374: [
                [
                    89,
                    770
                ]
            ],
            375: [
                [
                    121,
                    770
                ]
            ],
            376: [
                [
                    89,
                    776
                ]
            ],
            377: [
                [
                    90,
                    769
                ]
            ],
            378: [
                [
                    122,
                    769
                ]
            ],
            379: [
                [
                    90,
                    775
                ]
            ],
            380: [
                [
                    122,
                    775
                ]
            ],
            381: [
                [
                    90,
                    780
                ]
            ],
            382: [
                [
                    122,
                    780
                ]
            ],
            383: [
                [
                    115
                ],
                256,
                {
                    775: 7835
                }
            ],
            416: [
                [
                    79,
                    795
                ],
                ,
                {
                    768: 7900,
                    769: 7898,
                    771: 7904,
                    777: 7902,
                    803: 7906
                }
            ],
            417: [
                [
                    111,
                    795
                ],
                ,
                {
                    768: 7901,
                    769: 7899,
                    771: 7905,
                    777: 7903,
                    803: 7907
                }
            ],
            431: [
                [
                    85,
                    795
                ],
                ,
                {
                    768: 7914,
                    769: 7912,
                    771: 7918,
                    777: 7916,
                    803: 7920
                }
            ],
            432: [
                [
                    117,
                    795
                ],
                ,
                {
                    768: 7915,
                    769: 7913,
                    771: 7919,
                    777: 7917,
                    803: 7921
                }
            ],
            439: [
                ,
                ,
                {
                    780: 494
                }
            ],
            452: [
                [
                    68,
                    381
                ],
                256
            ],
            453: [
                [
                    68,
                    382
                ],
                256
            ],
            454: [
                [
                    100,
                    382
                ],
                256
            ],
            455: [
                [
                    76,
                    74
                ],
                256
            ],
            456: [
                [
                    76,
                    106
                ],
                256
            ],
            457: [
                [
                    108,
                    106
                ],
                256
            ],
            458: [
                [
                    78,
                    74
                ],
                256
            ],
            459: [
                [
                    78,
                    106
                ],
                256
            ],
            460: [
                [
                    110,
                    106
                ],
                256
            ],
            461: [
                [
                    65,
                    780
                ]
            ],
            462: [
                [
                    97,
                    780
                ]
            ],
            463: [
                [
                    73,
                    780
                ]
            ],
            464: [
                [
                    105,
                    780
                ]
            ],
            465: [
                [
                    79,
                    780
                ]
            ],
            466: [
                [
                    111,
                    780
                ]
            ],
            467: [
                [
                    85,
                    780
                ]
            ],
            468: [
                [
                    117,
                    780
                ]
            ],
            469: [
                [
                    220,
                    772
                ]
            ],
            470: [
                [
                    252,
                    772
                ]
            ],
            471: [
                [
                    220,
                    769
                ]
            ],
            472: [
                [
                    252,
                    769
                ]
            ],
            473: [
                [
                    220,
                    780
                ]
            ],
            474: [
                [
                    252,
                    780
                ]
            ],
            475: [
                [
                    220,
                    768
                ]
            ],
            476: [
                [
                    252,
                    768
                ]
            ],
            478: [
                [
                    196,
                    772
                ]
            ],
            479: [
                [
                    228,
                    772
                ]
            ],
            480: [
                [
                    550,
                    772
                ]
            ],
            481: [
                [
                    551,
                    772
                ]
            ],
            482: [
                [
                    198,
                    772
                ]
            ],
            483: [
                [
                    230,
                    772
                ]
            ],
            486: [
                [
                    71,
                    780
                ]
            ],
            487: [
                [
                    103,
                    780
                ]
            ],
            488: [
                [
                    75,
                    780
                ]
            ],
            489: [
                [
                    107,
                    780
                ]
            ],
            490: [
                [
                    79,
                    808
                ],
                ,
                {
                    772: 492
                }
            ],
            491: [
                [
                    111,
                    808
                ],
                ,
                {
                    772: 493
                }
            ],
            492: [
                [
                    490,
                    772
                ]
            ],
            493: [
                [
                    491,
                    772
                ]
            ],
            494: [
                [
                    439,
                    780
                ]
            ],
            495: [
                [
                    658,
                    780
                ]
            ],
            496: [
                [
                    106,
                    780
                ]
            ],
            497: [
                [
                    68,
                    90
                ],
                256
            ],
            498: [
                [
                    68,
                    122
                ],
                256
            ],
            499: [
                [
                    100,
                    122
                ],
                256
            ],
            500: [
                [
                    71,
                    769
                ]
            ],
            501: [
                [
                    103,
                    769
                ]
            ],
            504: [
                [
                    78,
                    768
                ]
            ],
            505: [
                [
                    110,
                    768
                ]
            ],
            506: [
                [
                    197,
                    769
                ]
            ],
            507: [
                [
                    229,
                    769
                ]
            ],
            508: [
                [
                    198,
                    769
                ]
            ],
            509: [
                [
                    230,
                    769
                ]
            ],
            510: [
                [
                    216,
                    769
                ]
            ],
            511: [
                [
                    248,
                    769
                ]
            ],
            66045: [
                ,
                220
            ]
        },
        512: {
            512: [
                [
                    65,
                    783
                ]
            ],
            513: [
                [
                    97,
                    783
                ]
            ],
            514: [
                [
                    65,
                    785
                ]
            ],
            515: [
                [
                    97,
                    785
                ]
            ],
            516: [
                [
                    69,
                    783
                ]
            ],
            517: [
                [
                    101,
                    783
                ]
            ],
            518: [
                [
                    69,
                    785
                ]
            ],
            519: [
                [
                    101,
                    785
                ]
            ],
            520: [
                [
                    73,
                    783
                ]
            ],
            521: [
                [
                    105,
                    783
                ]
            ],
            522: [
                [
                    73,
                    785
                ]
            ],
            523: [
                [
                    105,
                    785
                ]
            ],
            524: [
                [
                    79,
                    783
                ]
            ],
            525: [
                [
                    111,
                    783
                ]
            ],
            526: [
                [
                    79,
                    785
                ]
            ],
            527: [
                [
                    111,
                    785
                ]
            ],
            528: [
                [
                    82,
                    783
                ]
            ],
            529: [
                [
                    114,
                    783
                ]
            ],
            530: [
                [
                    82,
                    785
                ]
            ],
            531: [
                [
                    114,
                    785
                ]
            ],
            532: [
                [
                    85,
                    783
                ]
            ],
            533: [
                [
                    117,
                    783
                ]
            ],
            534: [
                [
                    85,
                    785
                ]
            ],
            535: [
                [
                    117,
                    785
                ]
            ],
            536: [
                [
                    83,
                    806
                ]
            ],
            537: [
                [
                    115,
                    806
                ]
            ],
            538: [
                [
                    84,
                    806
                ]
            ],
            539: [
                [
                    116,
                    806
                ]
            ],
            542: [
                [
                    72,
                    780
                ]
            ],
            543: [
                [
                    104,
                    780
                ]
            ],
            550: [
                [
                    65,
                    775
                ],
                ,
                {
                    772: 480
                }
            ],
            551: [
                [
                    97,
                    775
                ],
                ,
                {
                    772: 481
                }
            ],
            552: [
                [
                    69,
                    807
                ],
                ,
                {
                    774: 7708
                }
            ],
            553: [
                [
                    101,
                    807
                ],
                ,
                {
                    774: 7709
                }
            ],
            554: [
                [
                    214,
                    772
                ]
            ],
            555: [
                [
                    246,
                    772
                ]
            ],
            556: [
                [
                    213,
                    772
                ]
            ],
            557: [
                [
                    245,
                    772
                ]
            ],
            558: [
                [
                    79,
                    775
                ],
                ,
                {
                    772: 560
                }
            ],
            559: [
                [
                    111,
                    775
                ],
                ,
                {
                    772: 561
                }
            ],
            560: [
                [
                    558,
                    772
                ]
            ],
            561: [
                [
                    559,
                    772
                ]
            ],
            562: [
                [
                    89,
                    772
                ]
            ],
            563: [
                [
                    121,
                    772
                ]
            ],
            658: [
                ,
                ,
                {
                    780: 495
                }
            ],
            688: [
                [
                    104
                ],
                256
            ],
            689: [
                [
                    614
                ],
                256
            ],
            690: [
                [
                    106
                ],
                256
            ],
            691: [
                [
                    114
                ],
                256
            ],
            692: [
                [
                    633
                ],
                256
            ],
            693: [
                [
                    635
                ],
                256
            ],
            694: [
                [
                    641
                ],
                256
            ],
            695: [
                [
                    119
                ],
                256
            ],
            696: [
                [
                    121
                ],
                256
            ],
            728: [
                [
                    32,
                    774
                ],
                256
            ],
            729: [
                [
                    32,
                    775
                ],
                256
            ],
            730: [
                [
                    32,
                    778
                ],
                256
            ],
            731: [
                [
                    32,
                    808
                ],
                256
            ],
            732: [
                [
                    32,
                    771
                ],
                256
            ],
            733: [
                [
                    32,
                    779
                ],
                256
            ],
            736: [
                [
                    611
                ],
                256
            ],
            737: [
                [
                    108
                ],
                256
            ],
            738: [
                [
                    115
                ],
                256
            ],
            739: [
                [
                    120
                ],
                256
            ],
            740: [
                [
                    661
                ],
                256
            ],
            66272: [
                ,
                220
            ]
        },
        768: {
            768: [
                ,
                230
            ],
            769: [
                ,
                230
            ],
            770: [
                ,
                230
            ],
            771: [
                ,
                230
            ],
            772: [
                ,
                230
            ],
            773: [
                ,
                230
            ],
            774: [
                ,
                230
            ],
            775: [
                ,
                230
            ],
            776: [
                ,
                230,
                {
                    769: 836
                }
            ],
            777: [
                ,
                230
            ],
            778: [
                ,
                230
            ],
            779: [
                ,
                230
            ],
            780: [
                ,
                230
            ],
            781: [
                ,
                230
            ],
            782: [
                ,
                230
            ],
            783: [
                ,
                230
            ],
            784: [
                ,
                230
            ],
            785: [
                ,
                230
            ],
            786: [
                ,
                230
            ],
            787: [
                ,
                230
            ],
            788: [
                ,
                230
            ],
            789: [
                ,
                232
            ],
            790: [
                ,
                220
            ],
            791: [
                ,
                220
            ],
            792: [
                ,
                220
            ],
            793: [
                ,
                220
            ],
            794: [
                ,
                232
            ],
            795: [
                ,
                216
            ],
            796: [
                ,
                220
            ],
            797: [
                ,
                220
            ],
            798: [
                ,
                220
            ],
            799: [
                ,
                220
            ],
            800: [
                ,
                220
            ],
            801: [
                ,
                202
            ],
            802: [
                ,
                202
            ],
            803: [
                ,
                220
            ],
            804: [
                ,
                220
            ],
            805: [
                ,
                220
            ],
            806: [
                ,
                220
            ],
            807: [
                ,
                202
            ],
            808: [
                ,
                202
            ],
            809: [
                ,
                220
            ],
            810: [
                ,
                220
            ],
            811: [
                ,
                220
            ],
            812: [
                ,
                220
            ],
            813: [
                ,
                220
            ],
            814: [
                ,
                220
            ],
            815: [
                ,
                220
            ],
            816: [
                ,
                220
            ],
            817: [
                ,
                220
            ],
            818: [
                ,
                220
            ],
            819: [
                ,
                220
            ],
            820: [
                ,
                1
            ],
            821: [
                ,
                1
            ],
            822: [
                ,
                1
            ],
            823: [
                ,
                1
            ],
            824: [
                ,
                1
            ],
            825: [
                ,
                220
            ],
            826: [
                ,
                220
            ],
            827: [
                ,
                220
            ],
            828: [
                ,
                220
            ],
            829: [
                ,
                230
            ],
            830: [
                ,
                230
            ],
            831: [
                ,
                230
            ],
            832: [
                [
                    768
                ],
                230
            ],
            833: [
                [
                    769
                ],
                230
            ],
            834: [
                ,
                230
            ],
            835: [
                [
                    787
                ],
                230
            ],
            836: [
                [
                    776,
                    769
                ],
                230
            ],
            837: [
                ,
                240
            ],
            838: [
                ,
                230
            ],
            839: [
                ,
                220
            ],
            840: [
                ,
                220
            ],
            841: [
                ,
                220
            ],
            842: [
                ,
                230
            ],
            843: [
                ,
                230
            ],
            844: [
                ,
                230
            ],
            845: [
                ,
                220
            ],
            846: [
                ,
                220
            ],
            848: [
                ,
                230
            ],
            849: [
                ,
                230
            ],
            850: [
                ,
                230
            ],
            851: [
                ,
                220
            ],
            852: [
                ,
                220
            ],
            853: [
                ,
                220
            ],
            854: [
                ,
                220
            ],
            855: [
                ,
                230
            ],
            856: [
                ,
                232
            ],
            857: [
                ,
                220
            ],
            858: [
                ,
                220
            ],
            859: [
                ,
                230
            ],
            860: [
                ,
                233
            ],
            861: [
                ,
                234
            ],
            862: [
                ,
                234
            ],
            863: [
                ,
                233
            ],
            864: [
                ,
                234
            ],
            865: [
                ,
                234
            ],
            866: [
                ,
                233
            ],
            867: [
                ,
                230
            ],
            868: [
                ,
                230
            ],
            869: [
                ,
                230
            ],
            870: [
                ,
                230
            ],
            871: [
                ,
                230
            ],
            872: [
                ,
                230
            ],
            873: [
                ,
                230
            ],
            874: [
                ,
                230
            ],
            875: [
                ,
                230
            ],
            876: [
                ,
                230
            ],
            877: [
                ,
                230
            ],
            878: [
                ,
                230
            ],
            879: [
                ,
                230
            ],
            884: [
                [
                    697
                ]
            ],
            890: [
                [
                    32,
                    837
                ],
                256
            ],
            894: [
                [
                    59
                ]
            ],
            900: [
                [
                    32,
                    769
                ],
                256
            ],
            901: [
                [
                    168,
                    769
                ]
            ],
            902: [
                [
                    913,
                    769
                ]
            ],
            903: [
                [
                    183
                ]
            ],
            904: [
                [
                    917,
                    769
                ]
            ],
            905: [
                [
                    919,
                    769
                ]
            ],
            906: [
                [
                    921,
                    769
                ]
            ],
            908: [
                [
                    927,
                    769
                ]
            ],
            910: [
                [
                    933,
                    769
                ]
            ],
            911: [
                [
                    937,
                    769
                ]
            ],
            912: [
                [
                    970,
                    769
                ]
            ],
            913: [
                ,
                ,
                {
                    768: 8122,
                    769: 902,
                    772: 8121,
                    774: 8120,
                    787: 7944,
                    788: 7945,
                    837: 8124
                }
            ],
            917: [
                ,
                ,
                {
                    768: 8136,
                    769: 904,
                    787: 7960,
                    788: 7961
                }
            ],
            919: [
                ,
                ,
                {
                    768: 8138,
                    769: 905,
                    787: 7976,
                    788: 7977,
                    837: 8140
                }
            ],
            921: [
                ,
                ,
                {
                    768: 8154,
                    769: 906,
                    772: 8153,
                    774: 8152,
                    776: 938,
                    787: 7992,
                    788: 7993
                }
            ],
            927: [
                ,
                ,
                {
                    768: 8184,
                    769: 908,
                    787: 8008,
                    788: 8009
                }
            ],
            929: [
                ,
                ,
                {
                    788: 8172
                }
            ],
            933: [
                ,
                ,
                {
                    768: 8170,
                    769: 910,
                    772: 8169,
                    774: 8168,
                    776: 939,
                    788: 8025
                }
            ],
            937: [
                ,
                ,
                {
                    768: 8186,
                    769: 911,
                    787: 8040,
                    788: 8041,
                    837: 8188
                }
            ],
            938: [
                [
                    921,
                    776
                ]
            ],
            939: [
                [
                    933,
                    776
                ]
            ],
            940: [
                [
                    945,
                    769
                ],
                ,
                {
                    837: 8116
                }
            ],
            941: [
                [
                    949,
                    769
                ]
            ],
            942: [
                [
                    951,
                    769
                ],
                ,
                {
                    837: 8132
                }
            ],
            943: [
                [
                    953,
                    769
                ]
            ],
            944: [
                [
                    971,
                    769
                ]
            ],
            945: [
                ,
                ,
                {
                    768: 8048,
                    769: 940,
                    772: 8113,
                    774: 8112,
                    787: 7936,
                    788: 7937,
                    834: 8118,
                    837: 8115
                }
            ],
            949: [
                ,
                ,
                {
                    768: 8050,
                    769: 941,
                    787: 7952,
                    788: 7953
                }
            ],
            951: [
                ,
                ,
                {
                    768: 8052,
                    769: 942,
                    787: 7968,
                    788: 7969,
                    834: 8134,
                    837: 8131
                }
            ],
            953: [
                ,
                ,
                {
                    768: 8054,
                    769: 943,
                    772: 8145,
                    774: 8144,
                    776: 970,
                    787: 7984,
                    788: 7985,
                    834: 8150
                }
            ],
            959: [
                ,
                ,
                {
                    768: 8056,
                    769: 972,
                    787: 8000,
                    788: 8001
                }
            ],
            961: [
                ,
                ,
                {
                    787: 8164,
                    788: 8165
                }
            ],
            965: [
                ,
                ,
                {
                    768: 8058,
                    769: 973,
                    772: 8161,
                    774: 8160,
                    776: 971,
                    787: 8016,
                    788: 8017,
                    834: 8166
                }
            ],
            969: [
                ,
                ,
                {
                    768: 8060,
                    769: 974,
                    787: 8032,
                    788: 8033,
                    834: 8182,
                    837: 8179
                }
            ],
            970: [
                [
                    953,
                    776
                ],
                ,
                {
                    768: 8146,
                    769: 912,
                    834: 8151
                }
            ],
            971: [
                [
                    965,
                    776
                ],
                ,
                {
                    768: 8162,
                    769: 944,
                    834: 8167
                }
            ],
            972: [
                [
                    959,
                    769
                ]
            ],
            973: [
                [
                    965,
                    769
                ]
            ],
            974: [
                [
                    969,
                    769
                ],
                ,
                {
                    837: 8180
                }
            ],
            976: [
                [
                    946
                ],
                256
            ],
            977: [
                [
                    952
                ],
                256
            ],
            978: [
                [
                    933
                ],
                256,
                {
                    769: 979,
                    776: 980
                }
            ],
            979: [
                [
                    978,
                    769
                ]
            ],
            980: [
                [
                    978,
                    776
                ]
            ],
            981: [
                [
                    966
                ],
                256
            ],
            982: [
                [
                    960
                ],
                256
            ],
            1008: [
                [
                    954
                ],
                256
            ],
            1009: [
                [
                    961
                ],
                256
            ],
            1010: [
                [
                    962
                ],
                256
            ],
            1012: [
                [
                    920
                ],
                256
            ],
            1013: [
                [
                    949
                ],
                256
            ],
            1017: [
                [
                    931
                ],
                256
            ],
            66422: [
                ,
                230
            ],
            66423: [
                ,
                230
            ],
            66424: [
                ,
                230
            ],
            66425: [
                ,
                230
            ],
            66426: [
                ,
                230
            ]
        },
        1024: {
            1024: [
                [
                    1045,
                    768
                ]
            ],
            1025: [
                [
                    1045,
                    776
                ]
            ],
            1027: [
                [
                    1043,
                    769
                ]
            ],
            1030: [
                ,
                ,
                {
                    776: 1031
                }
            ],
            1031: [
                [
                    1030,
                    776
                ]
            ],
            1036: [
                [
                    1050,
                    769
                ]
            ],
            1037: [
                [
                    1048,
                    768
                ]
            ],
            1038: [
                [
                    1059,
                    774
                ]
            ],
            1040: [
                ,
                ,
                {
                    774: 1232,
                    776: 1234
                }
            ],
            1043: [
                ,
                ,
                {
                    769: 1027
                }
            ],
            1045: [
                ,
                ,
                {
                    768: 1024,
                    774: 1238,
                    776: 1025
                }
            ],
            1046: [
                ,
                ,
                {
                    774: 1217,
                    776: 1244
                }
            ],
            1047: [
                ,
                ,
                {
                    776: 1246
                }
            ],
            1048: [
                ,
                ,
                {
                    768: 1037,
                    772: 1250,
                    774: 1049,
                    776: 1252
                }
            ],
            1049: [
                [
                    1048,
                    774
                ]
            ],
            1050: [
                ,
                ,
                {
                    769: 1036
                }
            ],
            1054: [
                ,
                ,
                {
                    776: 1254
                }
            ],
            1059: [
                ,
                ,
                {
                    772: 1262,
                    774: 1038,
                    776: 1264,
                    779: 1266
                }
            ],
            1063: [
                ,
                ,
                {
                    776: 1268
                }
            ],
            1067: [
                ,
                ,
                {
                    776: 1272
                }
            ],
            1069: [
                ,
                ,
                {
                    776: 1260
                }
            ],
            1072: [
                ,
                ,
                {
                    774: 1233,
                    776: 1235
                }
            ],
            1075: [
                ,
                ,
                {
                    769: 1107
                }
            ],
            1077: [
                ,
                ,
                {
                    768: 1104,
                    774: 1239,
                    776: 1105
                }
            ],
            1078: [
                ,
                ,
                {
                    774: 1218,
                    776: 1245
                }
            ],
            1079: [
                ,
                ,
                {
                    776: 1247
                }
            ],
            1080: [
                ,
                ,
                {
                    768: 1117,
                    772: 1251,
                    774: 1081,
                    776: 1253
                }
            ],
            1081: [
                [
                    1080,
                    774
                ]
            ],
            1082: [
                ,
                ,
                {
                    769: 1116
                }
            ],
            1086: [
                ,
                ,
                {
                    776: 1255
                }
            ],
            1091: [
                ,
                ,
                {
                    772: 1263,
                    774: 1118,
                    776: 1265,
                    779: 1267
                }
            ],
            1095: [
                ,
                ,
                {
                    776: 1269
                }
            ],
            1099: [
                ,
                ,
                {
                    776: 1273
                }
            ],
            1101: [
                ,
                ,
                {
                    776: 1261
                }
            ],
            1104: [
                [
                    1077,
                    768
                ]
            ],
            1105: [
                [
                    1077,
                    776
                ]
            ],
            1107: [
                [
                    1075,
                    769
                ]
            ],
            1110: [
                ,
                ,
                {
                    776: 1111
                }
            ],
            1111: [
                [
                    1110,
                    776
                ]
            ],
            1116: [
                [
                    1082,
                    769
                ]
            ],
            1117: [
                [
                    1080,
                    768
                ]
            ],
            1118: [
                [
                    1091,
                    774
                ]
            ],
            1140: [
                ,
                ,
                {
                    783: 1142
                }
            ],
            1141: [
                ,
                ,
                {
                    783: 1143
                }
            ],
            1142: [
                [
                    1140,
                    783
                ]
            ],
            1143: [
                [
                    1141,
                    783
                ]
            ],
            1155: [
                ,
                230
            ],
            1156: [
                ,
                230
            ],
            1157: [
                ,
                230
            ],
            1158: [
                ,
                230
            ],
            1159: [
                ,
                230
            ],
            1217: [
                [
                    1046,
                    774
                ]
            ],
            1218: [
                [
                    1078,
                    774
                ]
            ],
            1232: [
                [
                    1040,
                    774
                ]
            ],
            1233: [
                [
                    1072,
                    774
                ]
            ],
            1234: [
                [
                    1040,
                    776
                ]
            ],
            1235: [
                [
                    1072,
                    776
                ]
            ],
            1238: [
                [
                    1045,
                    774
                ]
            ],
            1239: [
                [
                    1077,
                    774
                ]
            ],
            1240: [
                ,
                ,
                {
                    776: 1242
                }
            ],
            1241: [
                ,
                ,
                {
                    776: 1243
                }
            ],
            1242: [
                [
                    1240,
                    776
                ]
            ],
            1243: [
                [
                    1241,
                    776
                ]
            ],
            1244: [
                [
                    1046,
                    776
                ]
            ],
            1245: [
                [
                    1078,
                    776
                ]
            ],
            1246: [
                [
                    1047,
                    776
                ]
            ],
            1247: [
                [
                    1079,
                    776
                ]
            ],
            1250: [
                [
                    1048,
                    772
                ]
            ],
            1251: [
                [
                    1080,
                    772
                ]
            ],
            1252: [
                [
                    1048,
                    776
                ]
            ],
            1253: [
                [
                    1080,
                    776
                ]
            ],
            1254: [
                [
                    1054,
                    776
                ]
            ],
            1255: [
                [
                    1086,
                    776
                ]
            ],
            1256: [
                ,
                ,
                {
                    776: 1258
                }
            ],
            1257: [
                ,
                ,
                {
                    776: 1259
                }
            ],
            1258: [
                [
                    1256,
                    776
                ]
            ],
            1259: [
                [
                    1257,
                    776
                ]
            ],
            1260: [
                [
                    1069,
                    776
                ]
            ],
            1261: [
                [
                    1101,
                    776
                ]
            ],
            1262: [
                [
                    1059,
                    772
                ]
            ],
            1263: [
                [
                    1091,
                    772
                ]
            ],
            1264: [
                [
                    1059,
                    776
                ]
            ],
            1265: [
                [
                    1091,
                    776
                ]
            ],
            1266: [
                [
                    1059,
                    779
                ]
            ],
            1267: [
                [
                    1091,
                    779
                ]
            ],
            1268: [
                [
                    1063,
                    776
                ]
            ],
            1269: [
                [
                    1095,
                    776
                ]
            ],
            1272: [
                [
                    1067,
                    776
                ]
            ],
            1273: [
                [
                    1099,
                    776
                ]
            ]
        },
        1280: {
            1415: [
                [
                    1381,
                    1410
                ],
                256
            ],
            1425: [
                ,
                220
            ],
            1426: [
                ,
                230
            ],
            1427: [
                ,
                230
            ],
            1428: [
                ,
                230
            ],
            1429: [
                ,
                230
            ],
            1430: [
                ,
                220
            ],
            1431: [
                ,
                230
            ],
            1432: [
                ,
                230
            ],
            1433: [
                ,
                230
            ],
            1434: [
                ,
                222
            ],
            1435: [
                ,
                220
            ],
            1436: [
                ,
                230
            ],
            1437: [
                ,
                230
            ],
            1438: [
                ,
                230
            ],
            1439: [
                ,
                230
            ],
            1440: [
                ,
                230
            ],
            1441: [
                ,
                230
            ],
            1442: [
                ,
                220
            ],
            1443: [
                ,
                220
            ],
            1444: [
                ,
                220
            ],
            1445: [
                ,
                220
            ],
            1446: [
                ,
                220
            ],
            1447: [
                ,
                220
            ],
            1448: [
                ,
                230
            ],
            1449: [
                ,
                230
            ],
            1450: [
                ,
                220
            ],
            1451: [
                ,
                230
            ],
            1452: [
                ,
                230
            ],
            1453: [
                ,
                222
            ],
            1454: [
                ,
                228
            ],
            1455: [
                ,
                230
            ],
            1456: [
                ,
                10
            ],
            1457: [
                ,
                11
            ],
            1458: [
                ,
                12
            ],
            1459: [
                ,
                13
            ],
            1460: [
                ,
                14
            ],
            1461: [
                ,
                15
            ],
            1462: [
                ,
                16
            ],
            1463: [
                ,
                17
            ],
            1464: [
                ,
                18
            ],
            1465: [
                ,
                19
            ],
            1466: [
                ,
                19
            ],
            1467: [
                ,
                20
            ],
            1468: [
                ,
                21
            ],
            1469: [
                ,
                22
            ],
            1471: [
                ,
                23
            ],
            1473: [
                ,
                24
            ],
            1474: [
                ,
                25
            ],
            1476: [
                ,
                230
            ],
            1477: [
                ,
                220
            ],
            1479: [
                ,
                18
            ]
        },
        1536: {
            1552: [
                ,
                230
            ],
            1553: [
                ,
                230
            ],
            1554: [
                ,
                230
            ],
            1555: [
                ,
                230
            ],
            1556: [
                ,
                230
            ],
            1557: [
                ,
                230
            ],
            1558: [
                ,
                230
            ],
            1559: [
                ,
                230
            ],
            1560: [
                ,
                30
            ],
            1561: [
                ,
                31
            ],
            1562: [
                ,
                32
            ],
            1570: [
                [
                    1575,
                    1619
                ]
            ],
            1571: [
                [
                    1575,
                    1620
                ]
            ],
            1572: [
                [
                    1608,
                    1620
                ]
            ],
            1573: [
                [
                    1575,
                    1621
                ]
            ],
            1574: [
                [
                    1610,
                    1620
                ]
            ],
            1575: [
                ,
                ,
                {
                    1619: 1570,
                    1620: 1571,
                    1621: 1573
                }
            ],
            1608: [
                ,
                ,
                {
                    1620: 1572
                }
            ],
            1610: [
                ,
                ,
                {
                    1620: 1574
                }
            ],
            1611: [
                ,
                27
            ],
            1612: [
                ,
                28
            ],
            1613: [
                ,
                29
            ],
            1614: [
                ,
                30
            ],
            1615: [
                ,
                31
            ],
            1616: [
                ,
                32
            ],
            1617: [
                ,
                33
            ],
            1618: [
                ,
                34
            ],
            1619: [
                ,
                230
            ],
            1620: [
                ,
                230
            ],
            1621: [
                ,
                220
            ],
            1622: [
                ,
                220
            ],
            1623: [
                ,
                230
            ],
            1624: [
                ,
                230
            ],
            1625: [
                ,
                230
            ],
            1626: [
                ,
                230
            ],
            1627: [
                ,
                230
            ],
            1628: [
                ,
                220
            ],
            1629: [
                ,
                230
            ],
            1630: [
                ,
                230
            ],
            1631: [
                ,
                220
            ],
            1648: [
                ,
                35
            ],
            1653: [
                [
                    1575,
                    1652
                ],
                256
            ],
            1654: [
                [
                    1608,
                    1652
                ],
                256
            ],
            1655: [
                [
                    1735,
                    1652
                ],
                256
            ],
            1656: [
                [
                    1610,
                    1652
                ],
                256
            ],
            1728: [
                [
                    1749,
                    1620
                ]
            ],
            1729: [
                ,
                ,
                {
                    1620: 1730
                }
            ],
            1730: [
                [
                    1729,
                    1620
                ]
            ],
            1746: [
                ,
                ,
                {
                    1620: 1747
                }
            ],
            1747: [
                [
                    1746,
                    1620
                ]
            ],
            1749: [
                ,
                ,
                {
                    1620: 1728
                }
            ],
            1750: [
                ,
                230
            ],
            1751: [
                ,
                230
            ],
            1752: [
                ,
                230
            ],
            1753: [
                ,
                230
            ],
            1754: [
                ,
                230
            ],
            1755: [
                ,
                230
            ],
            1756: [
                ,
                230
            ],
            1759: [
                ,
                230
            ],
            1760: [
                ,
                230
            ],
            1761: [
                ,
                230
            ],
            1762: [
                ,
                230
            ],
            1763: [
                ,
                220
            ],
            1764: [
                ,
                230
            ],
            1767: [
                ,
                230
            ],
            1768: [
                ,
                230
            ],
            1770: [
                ,
                220
            ],
            1771: [
                ,
                230
            ],
            1772: [
                ,
                230
            ],
            1773: [
                ,
                220
            ]
        },
        1792: {
            1809: [
                ,
                36
            ],
            1840: [
                ,
                230
            ],
            1841: [
                ,
                220
            ],
            1842: [
                ,
                230
            ],
            1843: [
                ,
                230
            ],
            1844: [
                ,
                220
            ],
            1845: [
                ,
                230
            ],
            1846: [
                ,
                230
            ],
            1847: [
                ,
                220
            ],
            1848: [
                ,
                220
            ],
            1849: [
                ,
                220
            ],
            1850: [
                ,
                230
            ],
            1851: [
                ,
                220
            ],
            1852: [
                ,
                220
            ],
            1853: [
                ,
                230
            ],
            1854: [
                ,
                220
            ],
            1855: [
                ,
                230
            ],
            1856: [
                ,
                230
            ],
            1857: [
                ,
                230
            ],
            1858: [
                ,
                220
            ],
            1859: [
                ,
                230
            ],
            1860: [
                ,
                220
            ],
            1861: [
                ,
                230
            ],
            1862: [
                ,
                220
            ],
            1863: [
                ,
                230
            ],
            1864: [
                ,
                220
            ],
            1865: [
                ,
                230
            ],
            1866: [
                ,
                230
            ],
            2027: [
                ,
                230
            ],
            2028: [
                ,
                230
            ],
            2029: [
                ,
                230
            ],
            2030: [
                ,
                230
            ],
            2031: [
                ,
                230
            ],
            2032: [
                ,
                230
            ],
            2033: [
                ,
                230
            ],
            2034: [
                ,
                220
            ],
            2035: [
                ,
                230
            ]
        },
        2048: {
            2070: [
                ,
                230
            ],
            2071: [
                ,
                230
            ],
            2072: [
                ,
                230
            ],
            2073: [
                ,
                230
            ],
            2075: [
                ,
                230
            ],
            2076: [
                ,
                230
            ],
            2077: [
                ,
                230
            ],
            2078: [
                ,
                230
            ],
            2079: [
                ,
                230
            ],
            2080: [
                ,
                230
            ],
            2081: [
                ,
                230
            ],
            2082: [
                ,
                230
            ],
            2083: [
                ,
                230
            ],
            2085: [
                ,
                230
            ],
            2086: [
                ,
                230
            ],
            2087: [
                ,
                230
            ],
            2089: [
                ,
                230
            ],
            2090: [
                ,
                230
            ],
            2091: [
                ,
                230
            ],
            2092: [
                ,
                230
            ],
            2093: [
                ,
                230
            ],
            2137: [
                ,
                220
            ],
            2138: [
                ,
                220
            ],
            2139: [
                ,
                220
            ],
            2276: [
                ,
                230
            ],
            2277: [
                ,
                230
            ],
            2278: [
                ,
                220
            ],
            2279: [
                ,
                230
            ],
            2280: [
                ,
                230
            ],
            2281: [
                ,
                220
            ],
            2282: [
                ,
                230
            ],
            2283: [
                ,
                230
            ],
            2284: [
                ,
                230
            ],
            2285: [
                ,
                220
            ],
            2286: [
                ,
                220
            ],
            2287: [
                ,
                220
            ],
            2288: [
                ,
                27
            ],
            2289: [
                ,
                28
            ],
            2290: [
                ,
                29
            ],
            2291: [
                ,
                230
            ],
            2292: [
                ,
                230
            ],
            2293: [
                ,
                230
            ],
            2294: [
                ,
                220
            ],
            2295: [
                ,
                230
            ],
            2296: [
                ,
                230
            ],
            2297: [
                ,
                220
            ],
            2298: [
                ,
                220
            ],
            2299: [
                ,
                230
            ],
            2300: [
                ,
                230
            ],
            2301: [
                ,
                230
            ],
            2302: [
                ,
                230
            ],
            2303: [
                ,
                230
            ]
        },
        2304: {
            2344: [
                ,
                ,
                {
                    2364: 2345
                }
            ],
            2345: [
                [
                    2344,
                    2364
                ]
            ],
            2352: [
                ,
                ,
                {
                    2364: 2353
                }
            ],
            2353: [
                [
                    2352,
                    2364
                ]
            ],
            2355: [
                ,
                ,
                {
                    2364: 2356
                }
            ],
            2356: [
                [
                    2355,
                    2364
                ]
            ],
            2364: [
                ,
                7
            ],
            2381: [
                ,
                9
            ],
            2385: [
                ,
                230
            ],
            2386: [
                ,
                220
            ],
            2387: [
                ,
                230
            ],
            2388: [
                ,
                230
            ],
            2392: [
                [
                    2325,
                    2364
                ],
                512
            ],
            2393: [
                [
                    2326,
                    2364
                ],
                512
            ],
            2394: [
                [
                    2327,
                    2364
                ],
                512
            ],
            2395: [
                [
                    2332,
                    2364
                ],
                512
            ],
            2396: [
                [
                    2337,
                    2364
                ],
                512
            ],
            2397: [
                [
                    2338,
                    2364
                ],
                512
            ],
            2398: [
                [
                    2347,
                    2364
                ],
                512
            ],
            2399: [
                [
                    2351,
                    2364
                ],
                512
            ],
            2492: [
                ,
                7
            ],
            2503: [
                ,
                ,
                {
                    2494: 2507,
                    2519: 2508
                }
            ],
            2507: [
                [
                    2503,
                    2494
                ]
            ],
            2508: [
                [
                    2503,
                    2519
                ]
            ],
            2509: [
                ,
                9
            ],
            2524: [
                [
                    2465,
                    2492
                ],
                512
            ],
            2525: [
                [
                    2466,
                    2492
                ],
                512
            ],
            2527: [
                [
                    2479,
                    2492
                ],
                512
            ]
        },
        2560: {
            2611: [
                [
                    2610,
                    2620
                ],
                512
            ],
            2614: [
                [
                    2616,
                    2620
                ],
                512
            ],
            2620: [
                ,
                7
            ],
            2637: [
                ,
                9
            ],
            2649: [
                [
                    2582,
                    2620
                ],
                512
            ],
            2650: [
                [
                    2583,
                    2620
                ],
                512
            ],
            2651: [
                [
                    2588,
                    2620
                ],
                512
            ],
            2654: [
                [
                    2603,
                    2620
                ],
                512
            ],
            2748: [
                ,
                7
            ],
            2765: [
                ,
                9
            ],
            68109: [
                ,
                220
            ],
            68111: [
                ,
                230
            ],
            68152: [
                ,
                230
            ],
            68153: [
                ,
                1
            ],
            68154: [
                ,
                220
            ],
            68159: [
                ,
                9
            ],
            68325: [
                ,
                230
            ],
            68326: [
                ,
                220
            ]
        },
        2816: {
            2876: [
                ,
                7
            ],
            2887: [
                ,
                ,
                {
                    2878: 2891,
                    2902: 2888,
                    2903: 2892
                }
            ],
            2888: [
                [
                    2887,
                    2902
                ]
            ],
            2891: [
                [
                    2887,
                    2878
                ]
            ],
            2892: [
                [
                    2887,
                    2903
                ]
            ],
            2893: [
                ,
                9
            ],
            2908: [
                [
                    2849,
                    2876
                ],
                512
            ],
            2909: [
                [
                    2850,
                    2876
                ],
                512
            ],
            2962: [
                ,
                ,
                {
                    3031: 2964
                }
            ],
            2964: [
                [
                    2962,
                    3031
                ]
            ],
            3014: [
                ,
                ,
                {
                    3006: 3018,
                    3031: 3020
                }
            ],
            3015: [
                ,
                ,
                {
                    3006: 3019
                }
            ],
            3018: [
                [
                    3014,
                    3006
                ]
            ],
            3019: [
                [
                    3015,
                    3006
                ]
            ],
            3020: [
                [
                    3014,
                    3031
                ]
            ],
            3021: [
                ,
                9
            ]
        },
        3072: {
            3142: [
                ,
                ,
                {
                    3158: 3144
                }
            ],
            3144: [
                [
                    3142,
                    3158
                ]
            ],
            3149: [
                ,
                9
            ],
            3157: [
                ,
                84
            ],
            3158: [
                ,
                91
            ],
            3260: [
                ,
                7
            ],
            3263: [
                ,
                ,
                {
                    3285: 3264
                }
            ],
            3264: [
                [
                    3263,
                    3285
                ]
            ],
            3270: [
                ,
                ,
                {
                    3266: 3274,
                    3285: 3271,
                    3286: 3272
                }
            ],
            3271: [
                [
                    3270,
                    3285
                ]
            ],
            3272: [
                [
                    3270,
                    3286
                ]
            ],
            3274: [
                [
                    3270,
                    3266
                ],
                ,
                {
                    3285: 3275
                }
            ],
            3275: [
                [
                    3274,
                    3285
                ]
            ],
            3277: [
                ,
                9
            ]
        },
        3328: {
            3398: [
                ,
                ,
                {
                    3390: 3402,
                    3415: 3404
                }
            ],
            3399: [
                ,
                ,
                {
                    3390: 3403
                }
            ],
            3402: [
                [
                    3398,
                    3390
                ]
            ],
            3403: [
                [
                    3399,
                    3390
                ]
            ],
            3404: [
                [
                    3398,
                    3415
                ]
            ],
            3405: [
                ,
                9
            ],
            3530: [
                ,
                9
            ],
            3545: [
                ,
                ,
                {
                    3530: 3546,
                    3535: 3548,
                    3551: 3550
                }
            ],
            3546: [
                [
                    3545,
                    3530
                ]
            ],
            3548: [
                [
                    3545,
                    3535
                ],
                ,
                {
                    3530: 3549
                }
            ],
            3549: [
                [
                    3548,
                    3530
                ]
            ],
            3550: [
                [
                    3545,
                    3551
                ]
            ]
        },
        3584: {
            3635: [
                [
                    3661,
                    3634
                ],
                256
            ],
            3640: [
                ,
                103
            ],
            3641: [
                ,
                103
            ],
            3642: [
                ,
                9
            ],
            3656: [
                ,
                107
            ],
            3657: [
                ,
                107
            ],
            3658: [
                ,
                107
            ],
            3659: [
                ,
                107
            ],
            3763: [
                [
                    3789,
                    3762
                ],
                256
            ],
            3768: [
                ,
                118
            ],
            3769: [
                ,
                118
            ],
            3784: [
                ,
                122
            ],
            3785: [
                ,
                122
            ],
            3786: [
                ,
                122
            ],
            3787: [
                ,
                122
            ],
            3804: [
                [
                    3755,
                    3737
                ],
                256
            ],
            3805: [
                [
                    3755,
                    3745
                ],
                256
            ]
        },
        3840: {
            3852: [
                [
                    3851
                ],
                256
            ],
            3864: [
                ,
                220
            ],
            3865: [
                ,
                220
            ],
            3893: [
                ,
                220
            ],
            3895: [
                ,
                220
            ],
            3897: [
                ,
                216
            ],
            3907: [
                [
                    3906,
                    4023
                ],
                512
            ],
            3917: [
                [
                    3916,
                    4023
                ],
                512
            ],
            3922: [
                [
                    3921,
                    4023
                ],
                512
            ],
            3927: [
                [
                    3926,
                    4023
                ],
                512
            ],
            3932: [
                [
                    3931,
                    4023
                ],
                512
            ],
            3945: [
                [
                    3904,
                    4021
                ],
                512
            ],
            3953: [
                ,
                129
            ],
            3954: [
                ,
                130
            ],
            3955: [
                [
                    3953,
                    3954
                ],
                512
            ],
            3956: [
                ,
                132
            ],
            3957: [
                [
                    3953,
                    3956
                ],
                512
            ],
            3958: [
                [
                    4018,
                    3968
                ],
                512
            ],
            3959: [
                [
                    4018,
                    3969
                ],
                256
            ],
            3960: [
                [
                    4019,
                    3968
                ],
                512
            ],
            3961: [
                [
                    4019,
                    3969
                ],
                256
            ],
            3962: [
                ,
                130
            ],
            3963: [
                ,
                130
            ],
            3964: [
                ,
                130
            ],
            3965: [
                ,
                130
            ],
            3968: [
                ,
                130
            ],
            3969: [
                [
                    3953,
                    3968
                ],
                512
            ],
            3970: [
                ,
                230
            ],
            3971: [
                ,
                230
            ],
            3972: [
                ,
                9
            ],
            3974: [
                ,
                230
            ],
            3975: [
                ,
                230
            ],
            3987: [
                [
                    3986,
                    4023
                ],
                512
            ],
            3997: [
                [
                    3996,
                    4023
                ],
                512
            ],
            4002: [
                [
                    4001,
                    4023
                ],
                512
            ],
            4007: [
                [
                    4006,
                    4023
                ],
                512
            ],
            4012: [
                [
                    4011,
                    4023
                ],
                512
            ],
            4025: [
                [
                    3984,
                    4021
                ],
                512
            ],
            4038: [
                ,
                220
            ]
        },
        4096: {
            4133: [
                ,
                ,
                {
                    4142: 4134
                }
            ],
            4134: [
                [
                    4133,
                    4142
                ]
            ],
            4151: [
                ,
                7
            ],
            4153: [
                ,
                9
            ],
            4154: [
                ,
                9
            ],
            4237: [
                ,
                220
            ],
            4348: [
                [
                    4316
                ],
                256
            ],
            69702: [
                ,
                9
            ],
            69759: [
                ,
                9
            ],
            69785: [
                ,
                ,
                {
                    69818: 69786
                }
            ],
            69786: [
                [
                    69785,
                    69818
                ]
            ],
            69787: [
                ,
                ,
                {
                    69818: 69788
                }
            ],
            69788: [
                [
                    69787,
                    69818
                ]
            ],
            69797: [
                ,
                ,
                {
                    69818: 69803
                }
            ],
            69803: [
                [
                    69797,
                    69818
                ]
            ],
            69817: [
                ,
                9
            ],
            69818: [
                ,
                7
            ]
        },
        4352: {
            69888: [
                ,
                230
            ],
            69889: [
                ,
                230
            ],
            69890: [
                ,
                230
            ],
            69934: [
                [
                    69937,
                    69927
                ]
            ],
            69935: [
                [
                    69938,
                    69927
                ]
            ],
            69937: [
                ,
                ,
                {
                    69927: 69934
                }
            ],
            69938: [
                ,
                ,
                {
                    69927: 69935
                }
            ],
            69939: [
                ,
                9
            ],
            69940: [
                ,
                9
            ],
            70003: [
                ,
                7
            ],
            70080: [
                ,
                9
            ]
        },
        4608: {
            70197: [
                ,
                9
            ],
            70198: [
                ,
                7
            ],
            70377: [
                ,
                7
            ],
            70378: [
                ,
                9
            ]
        },
        4864: {
            4957: [
                ,
                230
            ],
            4958: [
                ,
                230
            ],
            4959: [
                ,
                230
            ],
            70460: [
                ,
                7
            ],
            70471: [
                ,
                ,
                {
                    70462: 70475,
                    70487: 70476
                }
            ],
            70475: [
                [
                    70471,
                    70462
                ]
            ],
            70476: [
                [
                    70471,
                    70487
                ]
            ],
            70477: [
                ,
                9
            ],
            70502: [
                ,
                230
            ],
            70503: [
                ,
                230
            ],
            70504: [
                ,
                230
            ],
            70505: [
                ,
                230
            ],
            70506: [
                ,
                230
            ],
            70507: [
                ,
                230
            ],
            70508: [
                ,
                230
            ],
            70512: [
                ,
                230
            ],
            70513: [
                ,
                230
            ],
            70514: [
                ,
                230
            ],
            70515: [
                ,
                230
            ],
            70516: [
                ,
                230
            ]
        },
        5120: {
            70841: [
                ,
                ,
                {
                    70832: 70844,
                    70842: 70843,
                    70845: 70846
                }
            ],
            70843: [
                [
                    70841,
                    70842
                ]
            ],
            70844: [
                [
                    70841,
                    70832
                ]
            ],
            70846: [
                [
                    70841,
                    70845
                ]
            ],
            70850: [
                ,
                9
            ],
            70851: [
                ,
                7
            ]
        },
        5376: {
            71096: [
                ,
                ,
                {
                    71087: 71098
                }
            ],
            71097: [
                ,
                ,
                {
                    71087: 71099
                }
            ],
            71098: [
                [
                    71096,
                    71087
                ]
            ],
            71099: [
                [
                    71097,
                    71087
                ]
            ],
            71103: [
                ,
                9
            ],
            71104: [
                ,
                7
            ]
        },
        5632: {
            71231: [
                ,
                9
            ],
            71350: [
                ,
                9
            ],
            71351: [
                ,
                7
            ]
        },
        5888: {
            5908: [
                ,
                9
            ],
            5940: [
                ,
                9
            ],
            6098: [
                ,
                9
            ],
            6109: [
                ,
                230
            ]
        },
        6144: {
            6313: [
                ,
                228
            ]
        },
        6400: {
            6457: [
                ,
                222
            ],
            6458: [
                ,
                230
            ],
            6459: [
                ,
                220
            ]
        },
        6656: {
            6679: [
                ,
                230
            ],
            6680: [
                ,
                220
            ],
            6752: [
                ,
                9
            ],
            6773: [
                ,
                230
            ],
            6774: [
                ,
                230
            ],
            6775: [
                ,
                230
            ],
            6776: [
                ,
                230
            ],
            6777: [
                ,
                230
            ],
            6778: [
                ,
                230
            ],
            6779: [
                ,
                230
            ],
            6780: [
                ,
                230
            ],
            6783: [
                ,
                220
            ],
            6832: [
                ,
                230
            ],
            6833: [
                ,
                230
            ],
            6834: [
                ,
                230
            ],
            6835: [
                ,
                230
            ],
            6836: [
                ,
                230
            ],
            6837: [
                ,
                220
            ],
            6838: [
                ,
                220
            ],
            6839: [
                ,
                220
            ],
            6840: [
                ,
                220
            ],
            6841: [
                ,
                220
            ],
            6842: [
                ,
                220
            ],
            6843: [
                ,
                230
            ],
            6844: [
                ,
                230
            ],
            6845: [
                ,
                220
            ]
        },
        6912: {
            6917: [
                ,
                ,
                {
                    6965: 6918
                }
            ],
            6918: [
                [
                    6917,
                    6965
                ]
            ],
            6919: [
                ,
                ,
                {
                    6965: 6920
                }
            ],
            6920: [
                [
                    6919,
                    6965
                ]
            ],
            6921: [
                ,
                ,
                {
                    6965: 6922
                }
            ],
            6922: [
                [
                    6921,
                    6965
                ]
            ],
            6923: [
                ,
                ,
                {
                    6965: 6924
                }
            ],
            6924: [
                [
                    6923,
                    6965
                ]
            ],
            6925: [
                ,
                ,
                {
                    6965: 6926
                }
            ],
            6926: [
                [
                    6925,
                    6965
                ]
            ],
            6929: [
                ,
                ,
                {
                    6965: 6930
                }
            ],
            6930: [
                [
                    6929,
                    6965
                ]
            ],
            6964: [
                ,
                7
            ],
            6970: [
                ,
                ,
                {
                    6965: 6971
                }
            ],
            6971: [
                [
                    6970,
                    6965
                ]
            ],
            6972: [
                ,
                ,
                {
                    6965: 6973
                }
            ],
            6973: [
                [
                    6972,
                    6965
                ]
            ],
            6974: [
                ,
                ,
                {
                    6965: 6976
                }
            ],
            6975: [
                ,
                ,
                {
                    6965: 6977
                }
            ],
            6976: [
                [
                    6974,
                    6965
                ]
            ],
            6977: [
                [
                    6975,
                    6965
                ]
            ],
            6978: [
                ,
                ,
                {
                    6965: 6979
                }
            ],
            6979: [
                [
                    6978,
                    6965
                ]
            ],
            6980: [
                ,
                9
            ],
            7019: [
                ,
                230
            ],
            7020: [
                ,
                220
            ],
            7021: [
                ,
                230
            ],
            7022: [
                ,
                230
            ],
            7023: [
                ,
                230
            ],
            7024: [
                ,
                230
            ],
            7025: [
                ,
                230
            ],
            7026: [
                ,
                230
            ],
            7027: [
                ,
                230
            ],
            7082: [
                ,
                9
            ],
            7083: [
                ,
                9
            ],
            7142: [
                ,
                7
            ],
            7154: [
                ,
                9
            ],
            7155: [
                ,
                9
            ]
        },
        7168: {
            7223: [
                ,
                7
            ],
            7376: [
                ,
                230
            ],
            7377: [
                ,
                230
            ],
            7378: [
                ,
                230
            ],
            7380: [
                ,
                1
            ],
            7381: [
                ,
                220
            ],
            7382: [
                ,
                220
            ],
            7383: [
                ,
                220
            ],
            7384: [
                ,
                220
            ],
            7385: [
                ,
                220
            ],
            7386: [
                ,
                230
            ],
            7387: [
                ,
                230
            ],
            7388: [
                ,
                220
            ],
            7389: [
                ,
                220
            ],
            7390: [
                ,
                220
            ],
            7391: [
                ,
                220
            ],
            7392: [
                ,
                230
            ],
            7394: [
                ,
                1
            ],
            7395: [
                ,
                1
            ],
            7396: [
                ,
                1
            ],
            7397: [
                ,
                1
            ],
            7398: [
                ,
                1
            ],
            7399: [
                ,
                1
            ],
            7400: [
                ,
                1
            ],
            7405: [
                ,
                220
            ],
            7412: [
                ,
                230
            ],
            7416: [
                ,
                230
            ],
            7417: [
                ,
                230
            ]
        },
        7424: {
            7468: [
                [
                    65
                ],
                256
            ],
            7469: [
                [
                    198
                ],
                256
            ],
            7470: [
                [
                    66
                ],
                256
            ],
            7472: [
                [
                    68
                ],
                256
            ],
            7473: [
                [
                    69
                ],
                256
            ],
            7474: [
                [
                    398
                ],
                256
            ],
            7475: [
                [
                    71
                ],
                256
            ],
            7476: [
                [
                    72
                ],
                256
            ],
            7477: [
                [
                    73
                ],
                256
            ],
            7478: [
                [
                    74
                ],
                256
            ],
            7479: [
                [
                    75
                ],
                256
            ],
            7480: [
                [
                    76
                ],
                256
            ],
            7481: [
                [
                    77
                ],
                256
            ],
            7482: [
                [
                    78
                ],
                256
            ],
            7484: [
                [
                    79
                ],
                256
            ],
            7485: [
                [
                    546
                ],
                256
            ],
            7486: [
                [
                    80
                ],
                256
            ],
            7487: [
                [
                    82
                ],
                256
            ],
            7488: [
                [
                    84
                ],
                256
            ],
            7489: [
                [
                    85
                ],
                256
            ],
            7490: [
                [
                    87
                ],
                256
            ],
            7491: [
                [
                    97
                ],
                256
            ],
            7492: [
                [
                    592
                ],
                256
            ],
            7493: [
                [
                    593
                ],
                256
            ],
            7494: [
                [
                    7426
                ],
                256
            ],
            7495: [
                [
                    98
                ],
                256
            ],
            7496: [
                [
                    100
                ],
                256
            ],
            7497: [
                [
                    101
                ],
                256
            ],
            7498: [
                [
                    601
                ],
                256
            ],
            7499: [
                [
                    603
                ],
                256
            ],
            7500: [
                [
                    604
                ],
                256
            ],
            7501: [
                [
                    103
                ],
                256
            ],
            7503: [
                [
                    107
                ],
                256
            ],
            7504: [
                [
                    109
                ],
                256
            ],
            7505: [
                [
                    331
                ],
                256
            ],
            7506: [
                [
                    111
                ],
                256
            ],
            7507: [
                [
                    596
                ],
                256
            ],
            7508: [
                [
                    7446
                ],
                256
            ],
            7509: [
                [
                    7447
                ],
                256
            ],
            7510: [
                [
                    112
                ],
                256
            ],
            7511: [
                [
                    116
                ],
                256
            ],
            7512: [
                [
                    117
                ],
                256
            ],
            7513: [
                [
                    7453
                ],
                256
            ],
            7514: [
                [
                    623
                ],
                256
            ],
            7515: [
                [
                    118
                ],
                256
            ],
            7516: [
                [
                    7461
                ],
                256
            ],
            7517: [
                [
                    946
                ],
                256
            ],
            7518: [
                [
                    947
                ],
                256
            ],
            7519: [
                [
                    948
                ],
                256
            ],
            7520: [
                [
                    966
                ],
                256
            ],
            7521: [
                [
                    967
                ],
                256
            ],
            7522: [
                [
                    105
                ],
                256
            ],
            7523: [
                [
                    114
                ],
                256
            ],
            7524: [
                [
                    117
                ],
                256
            ],
            7525: [
                [
                    118
                ],
                256
            ],
            7526: [
                [
                    946
                ],
                256
            ],
            7527: [
                [
                    947
                ],
                256
            ],
            7528: [
                [
                    961
                ],
                256
            ],
            7529: [
                [
                    966
                ],
                256
            ],
            7530: [
                [
                    967
                ],
                256
            ],
            7544: [
                [
                    1085
                ],
                256
            ],
            7579: [
                [
                    594
                ],
                256
            ],
            7580: [
                [
                    99
                ],
                256
            ],
            7581: [
                [
                    597
                ],
                256
            ],
            7582: [
                [
                    240
                ],
                256
            ],
            7583: [
                [
                    604
                ],
                256
            ],
            7584: [
                [
                    102
                ],
                256
            ],
            7585: [
                [
                    607
                ],
                256
            ],
            7586: [
                [
                    609
                ],
                256
            ],
            7587: [
                [
                    613
                ],
                256
            ],
            7588: [
                [
                    616
                ],
                256
            ],
            7589: [
                [
                    617
                ],
                256
            ],
            7590: [
                [
                    618
                ],
                256
            ],
            7591: [
                [
                    7547
                ],
                256
            ],
            7592: [
                [
                    669
                ],
                256
            ],
            7593: [
                [
                    621
                ],
                256
            ],
            7594: [
                [
                    7557
                ],
                256
            ],
            7595: [
                [
                    671
                ],
                256
            ],
            7596: [
                [
                    625
                ],
                256
            ],
            7597: [
                [
                    624
                ],
                256
            ],
            7598: [
                [
                    626
                ],
                256
            ],
            7599: [
                [
                    627
                ],
                256
            ],
            7600: [
                [
                    628
                ],
                256
            ],
            7601: [
                [
                    629
                ],
                256
            ],
            7602: [
                [
                    632
                ],
                256
            ],
            7603: [
                [
                    642
                ],
                256
            ],
            7604: [
                [
                    643
                ],
                256
            ],
            7605: [
                [
                    427
                ],
                256
            ],
            7606: [
                [
                    649
                ],
                256
            ],
            7607: [
                [
                    650
                ],
                256
            ],
            7608: [
                [
                    7452
                ],
                256
            ],
            7609: [
                [
                    651
                ],
                256
            ],
            7610: [
                [
                    652
                ],
                256
            ],
            7611: [
                [
                    122
                ],
                256
            ],
            7612: [
                [
                    656
                ],
                256
            ],
            7613: [
                [
                    657
                ],
                256
            ],
            7614: [
                [
                    658
                ],
                256
            ],
            7615: [
                [
                    952
                ],
                256
            ],
            7616: [
                ,
                230
            ],
            7617: [
                ,
                230
            ],
            7618: [
                ,
                220
            ],
            7619: [
                ,
                230
            ],
            7620: [
                ,
                230
            ],
            7621: [
                ,
                230
            ],
            7622: [
                ,
                230
            ],
            7623: [
                ,
                230
            ],
            7624: [
                ,
                230
            ],
            7625: [
                ,
                230
            ],
            7626: [
                ,
                220
            ],
            7627: [
                ,
                230
            ],
            7628: [
                ,
                230
            ],
            7629: [
                ,
                234
            ],
            7630: [
                ,
                214
            ],
            7631: [
                ,
                220
            ],
            7632: [
                ,
                202
            ],
            7633: [
                ,
                230
            ],
            7634: [
                ,
                230
            ],
            7635: [
                ,
                230
            ],
            7636: [
                ,
                230
            ],
            7637: [
                ,
                230
            ],
            7638: [
                ,
                230
            ],
            7639: [
                ,
                230
            ],
            7640: [
                ,
                230
            ],
            7641: [
                ,
                230
            ],
            7642: [
                ,
                230
            ],
            7643: [
                ,
                230
            ],
            7644: [
                ,
                230
            ],
            7645: [
                ,
                230
            ],
            7646: [
                ,
                230
            ],
            7647: [
                ,
                230
            ],
            7648: [
                ,
                230
            ],
            7649: [
                ,
                230
            ],
            7650: [
                ,
                230
            ],
            7651: [
                ,
                230
            ],
            7652: [
                ,
                230
            ],
            7653: [
                ,
                230
            ],
            7654: [
                ,
                230
            ],
            7655: [
                ,
                230
            ],
            7656: [
                ,
                230
            ],
            7657: [
                ,
                230
            ],
            7658: [
                ,
                230
            ],
            7659: [
                ,
                230
            ],
            7660: [
                ,
                230
            ],
            7661: [
                ,
                230
            ],
            7662: [
                ,
                230
            ],
            7663: [
                ,
                230
            ],
            7664: [
                ,
                230
            ],
            7665: [
                ,
                230
            ],
            7666: [
                ,
                230
            ],
            7667: [
                ,
                230
            ],
            7668: [
                ,
                230
            ],
            7669: [
                ,
                230
            ],
            7676: [
                ,
                233
            ],
            7677: [
                ,
                220
            ],
            7678: [
                ,
                230
            ],
            7679: [
                ,
                220
            ]
        },
        7680: {
            7680: [
                [
                    65,
                    805
                ]
            ],
            7681: [
                [
                    97,
                    805
                ]
            ],
            7682: [
                [
                    66,
                    775
                ]
            ],
            7683: [
                [
                    98,
                    775
                ]
            ],
            7684: [
                [
                    66,
                    803
                ]
            ],
            7685: [
                [
                    98,
                    803
                ]
            ],
            7686: [
                [
                    66,
                    817
                ]
            ],
            7687: [
                [
                    98,
                    817
                ]
            ],
            7688: [
                [
                    199,
                    769
                ]
            ],
            7689: [
                [
                    231,
                    769
                ]
            ],
            7690: [
                [
                    68,
                    775
                ]
            ],
            7691: [
                [
                    100,
                    775
                ]
            ],
            7692: [
                [
                    68,
                    803
                ]
            ],
            7693: [
                [
                    100,
                    803
                ]
            ],
            7694: [
                [
                    68,
                    817
                ]
            ],
            7695: [
                [
                    100,
                    817
                ]
            ],
            7696: [
                [
                    68,
                    807
                ]
            ],
            7697: [
                [
                    100,
                    807
                ]
            ],
            7698: [
                [
                    68,
                    813
                ]
            ],
            7699: [
                [
                    100,
                    813
                ]
            ],
            7700: [
                [
                    274,
                    768
                ]
            ],
            7701: [
                [
                    275,
                    768
                ]
            ],
            7702: [
                [
                    274,
                    769
                ]
            ],
            7703: [
                [
                    275,
                    769
                ]
            ],
            7704: [
                [
                    69,
                    813
                ]
            ],
            7705: [
                [
                    101,
                    813
                ]
            ],
            7706: [
                [
                    69,
                    816
                ]
            ],
            7707: [
                [
                    101,
                    816
                ]
            ],
            7708: [
                [
                    552,
                    774
                ]
            ],
            7709: [
                [
                    553,
                    774
                ]
            ],
            7710: [
                [
                    70,
                    775
                ]
            ],
            7711: [
                [
                    102,
                    775
                ]
            ],
            7712: [
                [
                    71,
                    772
                ]
            ],
            7713: [
                [
                    103,
                    772
                ]
            ],
            7714: [
                [
                    72,
                    775
                ]
            ],
            7715: [
                [
                    104,
                    775
                ]
            ],
            7716: [
                [
                    72,
                    803
                ]
            ],
            7717: [
                [
                    104,
                    803
                ]
            ],
            7718: [
                [
                    72,
                    776
                ]
            ],
            7719: [
                [
                    104,
                    776
                ]
            ],
            7720: [
                [
                    72,
                    807
                ]
            ],
            7721: [
                [
                    104,
                    807
                ]
            ],
            7722: [
                [
                    72,
                    814
                ]
            ],
            7723: [
                [
                    104,
                    814
                ]
            ],
            7724: [
                [
                    73,
                    816
                ]
            ],
            7725: [
                [
                    105,
                    816
                ]
            ],
            7726: [
                [
                    207,
                    769
                ]
            ],
            7727: [
                [
                    239,
                    769
                ]
            ],
            7728: [
                [
                    75,
                    769
                ]
            ],
            7729: [
                [
                    107,
                    769
                ]
            ],
            7730: [
                [
                    75,
                    803
                ]
            ],
            7731: [
                [
                    107,
                    803
                ]
            ],
            7732: [
                [
                    75,
                    817
                ]
            ],
            7733: [
                [
                    107,
                    817
                ]
            ],
            7734: [
                [
                    76,
                    803
                ],
                ,
                {
                    772: 7736
                }
            ],
            7735: [
                [
                    108,
                    803
                ],
                ,
                {
                    772: 7737
                }
            ],
            7736: [
                [
                    7734,
                    772
                ]
            ],
            7737: [
                [
                    7735,
                    772
                ]
            ],
            7738: [
                [
                    76,
                    817
                ]
            ],
            7739: [
                [
                    108,
                    817
                ]
            ],
            7740: [
                [
                    76,
                    813
                ]
            ],
            7741: [
                [
                    108,
                    813
                ]
            ],
            7742: [
                [
                    77,
                    769
                ]
            ],
            7743: [
                [
                    109,
                    769
                ]
            ],
            7744: [
                [
                    77,
                    775
                ]
            ],
            7745: [
                [
                    109,
                    775
                ]
            ],
            7746: [
                [
                    77,
                    803
                ]
            ],
            7747: [
                [
                    109,
                    803
                ]
            ],
            7748: [
                [
                    78,
                    775
                ]
            ],
            7749: [
                [
                    110,
                    775
                ]
            ],
            7750: [
                [
                    78,
                    803
                ]
            ],
            7751: [
                [
                    110,
                    803
                ]
            ],
            7752: [
                [
                    78,
                    817
                ]
            ],
            7753: [
                [
                    110,
                    817
                ]
            ],
            7754: [
                [
                    78,
                    813
                ]
            ],
            7755: [
                [
                    110,
                    813
                ]
            ],
            7756: [
                [
                    213,
                    769
                ]
            ],
            7757: [
                [
                    245,
                    769
                ]
            ],
            7758: [
                [
                    213,
                    776
                ]
            ],
            7759: [
                [
                    245,
                    776
                ]
            ],
            7760: [
                [
                    332,
                    768
                ]
            ],
            7761: [
                [
                    333,
                    768
                ]
            ],
            7762: [
                [
                    332,
                    769
                ]
            ],
            7763: [
                [
                    333,
                    769
                ]
            ],
            7764: [
                [
                    80,
                    769
                ]
            ],
            7765: [
                [
                    112,
                    769
                ]
            ],
            7766: [
                [
                    80,
                    775
                ]
            ],
            7767: [
                [
                    112,
                    775
                ]
            ],
            7768: [
                [
                    82,
                    775
                ]
            ],
            7769: [
                [
                    114,
                    775
                ]
            ],
            7770: [
                [
                    82,
                    803
                ],
                ,
                {
                    772: 7772
                }
            ],
            7771: [
                [
                    114,
                    803
                ],
                ,
                {
                    772: 7773
                }
            ],
            7772: [
                [
                    7770,
                    772
                ]
            ],
            7773: [
                [
                    7771,
                    772
                ]
            ],
            7774: [
                [
                    82,
                    817
                ]
            ],
            7775: [
                [
                    114,
                    817
                ]
            ],
            7776: [
                [
                    83,
                    775
                ]
            ],
            7777: [
                [
                    115,
                    775
                ]
            ],
            7778: [
                [
                    83,
                    803
                ],
                ,
                {
                    775: 7784
                }
            ],
            7779: [
                [
                    115,
                    803
                ],
                ,
                {
                    775: 7785
                }
            ],
            7780: [
                [
                    346,
                    775
                ]
            ],
            7781: [
                [
                    347,
                    775
                ]
            ],
            7782: [
                [
                    352,
                    775
                ]
            ],
            7783: [
                [
                    353,
                    775
                ]
            ],
            7784: [
                [
                    7778,
                    775
                ]
            ],
            7785: [
                [
                    7779,
                    775
                ]
            ],
            7786: [
                [
                    84,
                    775
                ]
            ],
            7787: [
                [
                    116,
                    775
                ]
            ],
            7788: [
                [
                    84,
                    803
                ]
            ],
            7789: [
                [
                    116,
                    803
                ]
            ],
            7790: [
                [
                    84,
                    817
                ]
            ],
            7791: [
                [
                    116,
                    817
                ]
            ],
            7792: [
                [
                    84,
                    813
                ]
            ],
            7793: [
                [
                    116,
                    813
                ]
            ],
            7794: [
                [
                    85,
                    804
                ]
            ],
            7795: [
                [
                    117,
                    804
                ]
            ],
            7796: [
                [
                    85,
                    816
                ]
            ],
            7797: [
                [
                    117,
                    816
                ]
            ],
            7798: [
                [
                    85,
                    813
                ]
            ],
            7799: [
                [
                    117,
                    813
                ]
            ],
            7800: [
                [
                    360,
                    769
                ]
            ],
            7801: [
                [
                    361,
                    769
                ]
            ],
            7802: [
                [
                    362,
                    776
                ]
            ],
            7803: [
                [
                    363,
                    776
                ]
            ],
            7804: [
                [
                    86,
                    771
                ]
            ],
            7805: [
                [
                    118,
                    771
                ]
            ],
            7806: [
                [
                    86,
                    803
                ]
            ],
            7807: [
                [
                    118,
                    803
                ]
            ],
            7808: [
                [
                    87,
                    768
                ]
            ],
            7809: [
                [
                    119,
                    768
                ]
            ],
            7810: [
                [
                    87,
                    769
                ]
            ],
            7811: [
                [
                    119,
                    769
                ]
            ],
            7812: [
                [
                    87,
                    776
                ]
            ],
            7813: [
                [
                    119,
                    776
                ]
            ],
            7814: [
                [
                    87,
                    775
                ]
            ],
            7815: [
                [
                    119,
                    775
                ]
            ],
            7816: [
                [
                    87,
                    803
                ]
            ],
            7817: [
                [
                    119,
                    803
                ]
            ],
            7818: [
                [
                    88,
                    775
                ]
            ],
            7819: [
                [
                    120,
                    775
                ]
            ],
            7820: [
                [
                    88,
                    776
                ]
            ],
            7821: [
                [
                    120,
                    776
                ]
            ],
            7822: [
                [
                    89,
                    775
                ]
            ],
            7823: [
                [
                    121,
                    775
                ]
            ],
            7824: [
                [
                    90,
                    770
                ]
            ],
            7825: [
                [
                    122,
                    770
                ]
            ],
            7826: [
                [
                    90,
                    803
                ]
            ],
            7827: [
                [
                    122,
                    803
                ]
            ],
            7828: [
                [
                    90,
                    817
                ]
            ],
            7829: [
                [
                    122,
                    817
                ]
            ],
            7830: [
                [
                    104,
                    817
                ]
            ],
            7831: [
                [
                    116,
                    776
                ]
            ],
            7832: [
                [
                    119,
                    778
                ]
            ],
            7833: [
                [
                    121,
                    778
                ]
            ],
            7834: [
                [
                    97,
                    702
                ],
                256
            ],
            7835: [
                [
                    383,
                    775
                ]
            ],
            7840: [
                [
                    65,
                    803
                ],
                ,
                {
                    770: 7852,
                    774: 7862
                }
            ],
            7841: [
                [
                    97,
                    803
                ],
                ,
                {
                    770: 7853,
                    774: 7863
                }
            ],
            7842: [
                [
                    65,
                    777
                ]
            ],
            7843: [
                [
                    97,
                    777
                ]
            ],
            7844: [
                [
                    194,
                    769
                ]
            ],
            7845: [
                [
                    226,
                    769
                ]
            ],
            7846: [
                [
                    194,
                    768
                ]
            ],
            7847: [
                [
                    226,
                    768
                ]
            ],
            7848: [
                [
                    194,
                    777
                ]
            ],
            7849: [
                [
                    226,
                    777
                ]
            ],
            7850: [
                [
                    194,
                    771
                ]
            ],
            7851: [
                [
                    226,
                    771
                ]
            ],
            7852: [
                [
                    7840,
                    770
                ]
            ],
            7853: [
                [
                    7841,
                    770
                ]
            ],
            7854: [
                [
                    258,
                    769
                ]
            ],
            7855: [
                [
                    259,
                    769
                ]
            ],
            7856: [
                [
                    258,
                    768
                ]
            ],
            7857: [
                [
                    259,
                    768
                ]
            ],
            7858: [
                [
                    258,
                    777
                ]
            ],
            7859: [
                [
                    259,
                    777
                ]
            ],
            7860: [
                [
                    258,
                    771
                ]
            ],
            7861: [
                [
                    259,
                    771
                ]
            ],
            7862: [
                [
                    7840,
                    774
                ]
            ],
            7863: [
                [
                    7841,
                    774
                ]
            ],
            7864: [
                [
                    69,
                    803
                ],
                ,
                {
                    770: 7878
                }
            ],
            7865: [
                [
                    101,
                    803
                ],
                ,
                {
                    770: 7879
                }
            ],
            7866: [
                [
                    69,
                    777
                ]
            ],
            7867: [
                [
                    101,
                    777
                ]
            ],
            7868: [
                [
                    69,
                    771
                ]
            ],
            7869: [
                [
                    101,
                    771
                ]
            ],
            7870: [
                [
                    202,
                    769
                ]
            ],
            7871: [
                [
                    234,
                    769
                ]
            ],
            7872: [
                [
                    202,
                    768
                ]
            ],
            7873: [
                [
                    234,
                    768
                ]
            ],
            7874: [
                [
                    202,
                    777
                ]
            ],
            7875: [
                [
                    234,
                    777
                ]
            ],
            7876: [
                [
                    202,
                    771
                ]
            ],
            7877: [
                [
                    234,
                    771
                ]
            ],
            7878: [
                [
                    7864,
                    770
                ]
            ],
            7879: [
                [
                    7865,
                    770
                ]
            ],
            7880: [
                [
                    73,
                    777
                ]
            ],
            7881: [
                [
                    105,
                    777
                ]
            ],
            7882: [
                [
                    73,
                    803
                ]
            ],
            7883: [
                [
                    105,
                    803
                ]
            ],
            7884: [
                [
                    79,
                    803
                ],
                ,
                {
                    770: 7896
                }
            ],
            7885: [
                [
                    111,
                    803
                ],
                ,
                {
                    770: 7897
                }
            ],
            7886: [
                [
                    79,
                    777
                ]
            ],
            7887: [
                [
                    111,
                    777
                ]
            ],
            7888: [
                [
                    212,
                    769
                ]
            ],
            7889: [
                [
                    244,
                    769
                ]
            ],
            7890: [
                [
                    212,
                    768
                ]
            ],
            7891: [
                [
                    244,
                    768
                ]
            ],
            7892: [
                [
                    212,
                    777
                ]
            ],
            7893: [
                [
                    244,
                    777
                ]
            ],
            7894: [
                [
                    212,
                    771
                ]
            ],
            7895: [
                [
                    244,
                    771
                ]
            ],
            7896: [
                [
                    7884,
                    770
                ]
            ],
            7897: [
                [
                    7885,
                    770
                ]
            ],
            7898: [
                [
                    416,
                    769
                ]
            ],
            7899: [
                [
                    417,
                    769
                ]
            ],
            7900: [
                [
                    416,
                    768
                ]
            ],
            7901: [
                [
                    417,
                    768
                ]
            ],
            7902: [
                [
                    416,
                    777
                ]
            ],
            7903: [
                [
                    417,
                    777
                ]
            ],
            7904: [
                [
                    416,
                    771
                ]
            ],
            7905: [
                [
                    417,
                    771
                ]
            ],
            7906: [
                [
                    416,
                    803
                ]
            ],
            7907: [
                [
                    417,
                    803
                ]
            ],
            7908: [
                [
                    85,
                    803
                ]
            ],
            7909: [
                [
                    117,
                    803
                ]
            ],
            7910: [
                [
                    85,
                    777
                ]
            ],
            7911: [
                [
                    117,
                    777
                ]
            ],
            7912: [
                [
                    431,
                    769
                ]
            ],
            7913: [
                [
                    432,
                    769
                ]
            ],
            7914: [
                [
                    431,
                    768
                ]
            ],
            7915: [
                [
                    432,
                    768
                ]
            ],
            7916: [
                [
                    431,
                    777
                ]
            ],
            7917: [
                [
                    432,
                    777
                ]
            ],
            7918: [
                [
                    431,
                    771
                ]
            ],
            7919: [
                [
                    432,
                    771
                ]
            ],
            7920: [
                [
                    431,
                    803
                ]
            ],
            7921: [
                [
                    432,
                    803
                ]
            ],
            7922: [
                [
                    89,
                    768
                ]
            ],
            7923: [
                [
                    121,
                    768
                ]
            ],
            7924: [
                [
                    89,
                    803
                ]
            ],
            7925: [
                [
                    121,
                    803
                ]
            ],
            7926: [
                [
                    89,
                    777
                ]
            ],
            7927: [
                [
                    121,
                    777
                ]
            ],
            7928: [
                [
                    89,
                    771
                ]
            ],
            7929: [
                [
                    121,
                    771
                ]
            ]
        },
        7936: {
            7936: [
                [
                    945,
                    787
                ],
                ,
                {
                    768: 7938,
                    769: 7940,
                    834: 7942,
                    837: 8064
                }
            ],
            7937: [
                [
                    945,
                    788
                ],
                ,
                {
                    768: 7939,
                    769: 7941,
                    834: 7943,
                    837: 8065
                }
            ],
            7938: [
                [
                    7936,
                    768
                ],
                ,
                {
                    837: 8066
                }
            ],
            7939: [
                [
                    7937,
                    768
                ],
                ,
                {
                    837: 8067
                }
            ],
            7940: [
                [
                    7936,
                    769
                ],
                ,
                {
                    837: 8068
                }
            ],
            7941: [
                [
                    7937,
                    769
                ],
                ,
                {
                    837: 8069
                }
            ],
            7942: [
                [
                    7936,
                    834
                ],
                ,
                {
                    837: 8070
                }
            ],
            7943: [
                [
                    7937,
                    834
                ],
                ,
                {
                    837: 8071
                }
            ],
            7944: [
                [
                    913,
                    787
                ],
                ,
                {
                    768: 7946,
                    769: 7948,
                    834: 7950,
                    837: 8072
                }
            ],
            7945: [
                [
                    913,
                    788
                ],
                ,
                {
                    768: 7947,
                    769: 7949,
                    834: 7951,
                    837: 8073
                }
            ],
            7946: [
                [
                    7944,
                    768
                ],
                ,
                {
                    837: 8074
                }
            ],
            7947: [
                [
                    7945,
                    768
                ],
                ,
                {
                    837: 8075
                }
            ],
            7948: [
                [
                    7944,
                    769
                ],
                ,
                {
                    837: 8076
                }
            ],
            7949: [
                [
                    7945,
                    769
                ],
                ,
                {
                    837: 8077
                }
            ],
            7950: [
                [
                    7944,
                    834
                ],
                ,
                {
                    837: 8078
                }
            ],
            7951: [
                [
                    7945,
                    834
                ],
                ,
                {
                    837: 8079
                }
            ],
            7952: [
                [
                    949,
                    787
                ],
                ,
                {
                    768: 7954,
                    769: 7956
                }
            ],
            7953: [
                [
                    949,
                    788
                ],
                ,
                {
                    768: 7955,
                    769: 7957
                }
            ],
            7954: [
                [
                    7952,
                    768
                ]
            ],
            7955: [
                [
                    7953,
                    768
                ]
            ],
            7956: [
                [
                    7952,
                    769
                ]
            ],
            7957: [
                [
                    7953,
                    769
                ]
            ],
            7960: [
                [
                    917,
                    787
                ],
                ,
                {
                    768: 7962,
                    769: 7964
                }
            ],
            7961: [
                [
                    917,
                    788
                ],
                ,
                {
                    768: 7963,
                    769: 7965
                }
            ],
            7962: [
                [
                    7960,
                    768
                ]
            ],
            7963: [
                [
                    7961,
                    768
                ]
            ],
            7964: [
                [
                    7960,
                    769
                ]
            ],
            7965: [
                [
                    7961,
                    769
                ]
            ],
            7968: [
                [
                    951,
                    787
                ],
                ,
                {
                    768: 7970,
                    769: 7972,
                    834: 7974,
                    837: 8080
                }
            ],
            7969: [
                [
                    951,
                    788
                ],
                ,
                {
                    768: 7971,
                    769: 7973,
                    834: 7975,
                    837: 8081
                }
            ],
            7970: [
                [
                    7968,
                    768
                ],
                ,
                {
                    837: 8082
                }
            ],
            7971: [
                [
                    7969,
                    768
                ],
                ,
                {
                    837: 8083
                }
            ],
            7972: [
                [
                    7968,
                    769
                ],
                ,
                {
                    837: 8084
                }
            ],
            7973: [
                [
                    7969,
                    769
                ],
                ,
                {
                    837: 8085
                }
            ],
            7974: [
                [
                    7968,
                    834
                ],
                ,
                {
                    837: 8086
                }
            ],
            7975: [
                [
                    7969,
                    834
                ],
                ,
                {
                    837: 8087
                }
            ],
            7976: [
                [
                    919,
                    787
                ],
                ,
                {
                    768: 7978,
                    769: 7980,
                    834: 7982,
                    837: 8088
                }
            ],
            7977: [
                [
                    919,
                    788
                ],
                ,
                {
                    768: 7979,
                    769: 7981,
                    834: 7983,
                    837: 8089
                }
            ],
            7978: [
                [
                    7976,
                    768
                ],
                ,
                {
                    837: 8090
                }
            ],
            7979: [
                [
                    7977,
                    768
                ],
                ,
                {
                    837: 8091
                }
            ],
            7980: [
                [
                    7976,
                    769
                ],
                ,
                {
                    837: 8092
                }
            ],
            7981: [
                [
                    7977,
                    769
                ],
                ,
                {
                    837: 8093
                }
            ],
            7982: [
                [
                    7976,
                    834
                ],
                ,
                {
                    837: 8094
                }
            ],
            7983: [
                [
                    7977,
                    834
                ],
                ,
                {
                    837: 8095
                }
            ],
            7984: [
                [
                    953,
                    787
                ],
                ,
                {
                    768: 7986,
                    769: 7988,
                    834: 7990
                }
            ],
            7985: [
                [
                    953,
                    788
                ],
                ,
                {
                    768: 7987,
                    769: 7989,
                    834: 7991
                }
            ],
            7986: [
                [
                    7984,
                    768
                ]
            ],
            7987: [
                [
                    7985,
                    768
                ]
            ],
            7988: [
                [
                    7984,
                    769
                ]
            ],
            7989: [
                [
                    7985,
                    769
                ]
            ],
            7990: [
                [
                    7984,
                    834
                ]
            ],
            7991: [
                [
                    7985,
                    834
                ]
            ],
            7992: [
                [
                    921,
                    787
                ],
                ,
                {
                    768: 7994,
                    769: 7996,
                    834: 7998
                }
            ],
            7993: [
                [
                    921,
                    788
                ],
                ,
                {
                    768: 7995,
                    769: 7997,
                    834: 7999
                }
            ],
            7994: [
                [
                    7992,
                    768
                ]
            ],
            7995: [
                [
                    7993,
                    768
                ]
            ],
            7996: [
                [
                    7992,
                    769
                ]
            ],
            7997: [
                [
                    7993,
                    769
                ]
            ],
            7998: [
                [
                    7992,
                    834
                ]
            ],
            7999: [
                [
                    7993,
                    834
                ]
            ],
            8000: [
                [
                    959,
                    787
                ],
                ,
                {
                    768: 8002,
                    769: 8004
                }
            ],
            8001: [
                [
                    959,
                    788
                ],
                ,
                {
                    768: 8003,
                    769: 8005
                }
            ],
            8002: [
                [
                    8000,
                    768
                ]
            ],
            8003: [
                [
                    8001,
                    768
                ]
            ],
            8004: [
                [
                    8000,
                    769
                ]
            ],
            8005: [
                [
                    8001,
                    769
                ]
            ],
            8008: [
                [
                    927,
                    787
                ],
                ,
                {
                    768: 8010,
                    769: 8012
                }
            ],
            8009: [
                [
                    927,
                    788
                ],
                ,
                {
                    768: 8011,
                    769: 8013
                }
            ],
            8010: [
                [
                    8008,
                    768
                ]
            ],
            8011: [
                [
                    8009,
                    768
                ]
            ],
            8012: [
                [
                    8008,
                    769
                ]
            ],
            8013: [
                [
                    8009,
                    769
                ]
            ],
            8016: [
                [
                    965,
                    787
                ],
                ,
                {
                    768: 8018,
                    769: 8020,
                    834: 8022
                }
            ],
            8017: [
                [
                    965,
                    788
                ],
                ,
                {
                    768: 8019,
                    769: 8021,
                    834: 8023
                }
            ],
            8018: [
                [
                    8016,
                    768
                ]
            ],
            8019: [
                [
                    8017,
                    768
                ]
            ],
            8020: [
                [
                    8016,
                    769
                ]
            ],
            8021: [
                [
                    8017,
                    769
                ]
            ],
            8022: [
                [
                    8016,
                    834
                ]
            ],
            8023: [
                [
                    8017,
                    834
                ]
            ],
            8025: [
                [
                    933,
                    788
                ],
                ,
                {
                    768: 8027,
                    769: 8029,
                    834: 8031
                }
            ],
            8027: [
                [
                    8025,
                    768
                ]
            ],
            8029: [
                [
                    8025,
                    769
                ]
            ],
            8031: [
                [
                    8025,
                    834
                ]
            ],
            8032: [
                [
                    969,
                    787
                ],
                ,
                {
                    768: 8034,
                    769: 8036,
                    834: 8038,
                    837: 8096
                }
            ],
            8033: [
                [
                    969,
                    788
                ],
                ,
                {
                    768: 8035,
                    769: 8037,
                    834: 8039,
                    837: 8097
                }
            ],
            8034: [
                [
                    8032,
                    768
                ],
                ,
                {
                    837: 8098
                }
            ],
            8035: [
                [
                    8033,
                    768
                ],
                ,
                {
                    837: 8099
                }
            ],
            8036: [
                [
                    8032,
                    769
                ],
                ,
                {
                    837: 8100
                }
            ],
            8037: [
                [
                    8033,
                    769
                ],
                ,
                {
                    837: 8101
                }
            ],
            8038: [
                [
                    8032,
                    834
                ],
                ,
                {
                    837: 8102
                }
            ],
            8039: [
                [
                    8033,
                    834
                ],
                ,
                {
                    837: 8103
                }
            ],
            8040: [
                [
                    937,
                    787
                ],
                ,
                {
                    768: 8042,
                    769: 8044,
                    834: 8046,
                    837: 8104
                }
            ],
            8041: [
                [
                    937,
                    788
                ],
                ,
                {
                    768: 8043,
                    769: 8045,
                    834: 8047,
                    837: 8105
                }
            ],
            8042: [
                [
                    8040,
                    768
                ],
                ,
                {
                    837: 8106
                }
            ],
            8043: [
                [
                    8041,
                    768
                ],
                ,
                {
                    837: 8107
                }
            ],
            8044: [
                [
                    8040,
                    769
                ],
                ,
                {
                    837: 8108
                }
            ],
            8045: [
                [
                    8041,
                    769
                ],
                ,
                {
                    837: 8109
                }
            ],
            8046: [
                [
                    8040,
                    834
                ],
                ,
                {
                    837: 8110
                }
            ],
            8047: [
                [
                    8041,
                    834
                ],
                ,
                {
                    837: 8111
                }
            ],
            8048: [
                [
                    945,
                    768
                ],
                ,
                {
                    837: 8114
                }
            ],
            8049: [
                [
                    940
                ]
            ],
            8050: [
                [
                    949,
                    768
                ]
            ],
            8051: [
                [
                    941
                ]
            ],
            8052: [
                [
                    951,
                    768
                ],
                ,
                {
                    837: 8130
                }
            ],
            8053: [
                [
                    942
                ]
            ],
            8054: [
                [
                    953,
                    768
                ]
            ],
            8055: [
                [
                    943
                ]
            ],
            8056: [
                [
                    959,
                    768
                ]
            ],
            8057: [
                [
                    972
                ]
            ],
            8058: [
                [
                    965,
                    768
                ]
            ],
            8059: [
                [
                    973
                ]
            ],
            8060: [
                [
                    969,
                    768
                ],
                ,
                {
                    837: 8178
                }
            ],
            8061: [
                [
                    974
                ]
            ],
            8064: [
                [
                    7936,
                    837
                ]
            ],
            8065: [
                [
                    7937,
                    837
                ]
            ],
            8066: [
                [
                    7938,
                    837
                ]
            ],
            8067: [
                [
                    7939,
                    837
                ]
            ],
            8068: [
                [
                    7940,
                    837
                ]
            ],
            8069: [
                [
                    7941,
                    837
                ]
            ],
            8070: [
                [
                    7942,
                    837
                ]
            ],
            8071: [
                [
                    7943,
                    837
                ]
            ],
            8072: [
                [
                    7944,
                    837
                ]
            ],
            8073: [
                [
                    7945,
                    837
                ]
            ],
            8074: [
                [
                    7946,
                    837
                ]
            ],
            8075: [
                [
                    7947,
                    837
                ]
            ],
            8076: [
                [
                    7948,
                    837
                ]
            ],
            8077: [
                [
                    7949,
                    837
                ]
            ],
            8078: [
                [
                    7950,
                    837
                ]
            ],
            8079: [
                [
                    7951,
                    837
                ]
            ],
            8080: [
                [
                    7968,
                    837
                ]
            ],
            8081: [
                [
                    7969,
                    837
                ]
            ],
            8082: [
                [
                    7970,
                    837
                ]
            ],
            8083: [
                [
                    7971,
                    837
                ]
            ],
            8084: [
                [
                    7972,
                    837
                ]
            ],
            8085: [
                [
                    7973,
                    837
                ]
            ],
            8086: [
                [
                    7974,
                    837
                ]
            ],
            8087: [
                [
                    7975,
                    837
                ]
            ],
            8088: [
                [
                    7976,
                    837
                ]
            ],
            8089: [
                [
                    7977,
                    837
                ]
            ],
            8090: [
                [
                    7978,
                    837
                ]
            ],
            8091: [
                [
                    7979,
                    837
                ]
            ],
            8092: [
                [
                    7980,
                    837
                ]
            ],
            8093: [
                [
                    7981,
                    837
                ]
            ],
            8094: [
                [
                    7982,
                    837
                ]
            ],
            8095: [
                [
                    7983,
                    837
                ]
            ],
            8096: [
                [
                    8032,
                    837
                ]
            ],
            8097: [
                [
                    8033,
                    837
                ]
            ],
            8098: [
                [
                    8034,
                    837
                ]
            ],
            8099: [
                [
                    8035,
                    837
                ]
            ],
            8100: [
                [
                    8036,
                    837
                ]
            ],
            8101: [
                [
                    8037,
                    837
                ]
            ],
            8102: [
                [
                    8038,
                    837
                ]
            ],
            8103: [
                [
                    8039,
                    837
                ]
            ],
            8104: [
                [
                    8040,
                    837
                ]
            ],
            8105: [
                [
                    8041,
                    837
                ]
            ],
            8106: [
                [
                    8042,
                    837
                ]
            ],
            8107: [
                [
                    8043,
                    837
                ]
            ],
            8108: [
                [
                    8044,
                    837
                ]
            ],
            8109: [
                [
                    8045,
                    837
                ]
            ],
            8110: [
                [
                    8046,
                    837
                ]
            ],
            8111: [
                [
                    8047,
                    837
                ]
            ],
            8112: [
                [
                    945,
                    774
                ]
            ],
            8113: [
                [
                    945,
                    772
                ]
            ],
            8114: [
                [
                    8048,
                    837
                ]
            ],
            8115: [
                [
                    945,
                    837
                ]
            ],
            8116: [
                [
                    940,
                    837
                ]
            ],
            8118: [
                [
                    945,
                    834
                ],
                ,
                {
                    837: 8119
                }
            ],
            8119: [
                [
                    8118,
                    837
                ]
            ],
            8120: [
                [
                    913,
                    774
                ]
            ],
            8121: [
                [
                    913,
                    772
                ]
            ],
            8122: [
                [
                    913,
                    768
                ]
            ],
            8123: [
                [
                    902
                ]
            ],
            8124: [
                [
                    913,
                    837
                ]
            ],
            8125: [
                [
                    32,
                    787
                ],
                256
            ],
            8126: [
                [
                    953
                ]
            ],
            8127: [
                [
                    32,
                    787
                ],
                256,
                {
                    768: 8141,
                    769: 8142,
                    834: 8143
                }
            ],
            8128: [
                [
                    32,
                    834
                ],
                256
            ],
            8129: [
                [
                    168,
                    834
                ]
            ],
            8130: [
                [
                    8052,
                    837
                ]
            ],
            8131: [
                [
                    951,
                    837
                ]
            ],
            8132: [
                [
                    942,
                    837
                ]
            ],
            8134: [
                [
                    951,
                    834
                ],
                ,
                {
                    837: 8135
                }
            ],
            8135: [
                [
                    8134,
                    837
                ]
            ],
            8136: [
                [
                    917,
                    768
                ]
            ],
            8137: [
                [
                    904
                ]
            ],
            8138: [
                [
                    919,
                    768
                ]
            ],
            8139: [
                [
                    905
                ]
            ],
            8140: [
                [
                    919,
                    837
                ]
            ],
            8141: [
                [
                    8127,
                    768
                ]
            ],
            8142: [
                [
                    8127,
                    769
                ]
            ],
            8143: [
                [
                    8127,
                    834
                ]
            ],
            8144: [
                [
                    953,
                    774
                ]
            ],
            8145: [
                [
                    953,
                    772
                ]
            ],
            8146: [
                [
                    970,
                    768
                ]
            ],
            8147: [
                [
                    912
                ]
            ],
            8150: [
                [
                    953,
                    834
                ]
            ],
            8151: [
                [
                    970,
                    834
                ]
            ],
            8152: [
                [
                    921,
                    774
                ]
            ],
            8153: [
                [
                    921,
                    772
                ]
            ],
            8154: [
                [
                    921,
                    768
                ]
            ],
            8155: [
                [
                    906
                ]
            ],
            8157: [
                [
                    8190,
                    768
                ]
            ],
            8158: [
                [
                    8190,
                    769
                ]
            ],
            8159: [
                [
                    8190,
                    834
                ]
            ],
            8160: [
                [
                    965,
                    774
                ]
            ],
            8161: [
                [
                    965,
                    772
                ]
            ],
            8162: [
                [
                    971,
                    768
                ]
            ],
            8163: [
                [
                    944
                ]
            ],
            8164: [
                [
                    961,
                    787
                ]
            ],
            8165: [
                [
                    961,
                    788
                ]
            ],
            8166: [
                [
                    965,
                    834
                ]
            ],
            8167: [
                [
                    971,
                    834
                ]
            ],
            8168: [
                [
                    933,
                    774
                ]
            ],
            8169: [
                [
                    933,
                    772
                ]
            ],
            8170: [
                [
                    933,
                    768
                ]
            ],
            8171: [
                [
                    910
                ]
            ],
            8172: [
                [
                    929,
                    788
                ]
            ],
            8173: [
                [
                    168,
                    768
                ]
            ],
            8174: [
                [
                    901
                ]
            ],
            8175: [
                [
                    96
                ]
            ],
            8178: [
                [
                    8060,
                    837
                ]
            ],
            8179: [
                [
                    969,
                    837
                ]
            ],
            8180: [
                [
                    974,
                    837
                ]
            ],
            8182: [
                [
                    969,
                    834
                ],
                ,
                {
                    837: 8183
                }
            ],
            8183: [
                [
                    8182,
                    837
                ]
            ],
            8184: [
                [
                    927,
                    768
                ]
            ],
            8185: [
                [
                    908
                ]
            ],
            8186: [
                [
                    937,
                    768
                ]
            ],
            8187: [
                [
                    911
                ]
            ],
            8188: [
                [
                    937,
                    837
                ]
            ],
            8189: [
                [
                    180
                ]
            ],
            8190: [
                [
                    32,
                    788
                ],
                256,
                {
                    768: 8157,
                    769: 8158,
                    834: 8159
                }
            ]
        },
        8192: {
            8192: [
                [
                    8194
                ]
            ],
            8193: [
                [
                    8195
                ]
            ],
            8194: [
                [
                    32
                ],
                256
            ],
            8195: [
                [
                    32
                ],
                256
            ],
            8196: [
                [
                    32
                ],
                256
            ],
            8197: [
                [
                    32
                ],
                256
            ],
            8198: [
                [
                    32
                ],
                256
            ],
            8199: [
                [
                    32
                ],
                256
            ],
            8200: [
                [
                    32
                ],
                256
            ],
            8201: [
                [
                    32
                ],
                256
            ],
            8202: [
                [
                    32
                ],
                256
            ],
            8209: [
                [
                    8208
                ],
                256
            ],
            8215: [
                [
                    32,
                    819
                ],
                256
            ],
            8228: [
                [
                    46
                ],
                256
            ],
            8229: [
                [
                    46,
                    46
                ],
                256
            ],
            8230: [
                [
                    46,
                    46,
                    46
                ],
                256
            ],
            8239: [
                [
                    32
                ],
                256
            ],
            8243: [
                [
                    8242,
                    8242
                ],
                256
            ],
            8244: [
                [
                    8242,
                    8242,
                    8242
                ],
                256
            ],
            8246: [
                [
                    8245,
                    8245
                ],
                256
            ],
            8247: [
                [
                    8245,
                    8245,
                    8245
                ],
                256
            ],
            8252: [
                [
                    33,
                    33
                ],
                256
            ],
            8254: [
                [
                    32,
                    773
                ],
                256
            ],
            8263: [
                [
                    63,
                    63
                ],
                256
            ],
            8264: [
                [
                    63,
                    33
                ],
                256
            ],
            8265: [
                [
                    33,
                    63
                ],
                256
            ],
            8279: [
                [
                    8242,
                    8242,
                    8242,
                    8242
                ],
                256
            ],
            8287: [
                [
                    32
                ],
                256
            ],
            8304: [
                [
                    48
                ],
                256
            ],
            8305: [
                [
                    105
                ],
                256
            ],
            8308: [
                [
                    52
                ],
                256
            ],
            8309: [
                [
                    53
                ],
                256
            ],
            8310: [
                [
                    54
                ],
                256
            ],
            8311: [
                [
                    55
                ],
                256
            ],
            8312: [
                [
                    56
                ],
                256
            ],
            8313: [
                [
                    57
                ],
                256
            ],
            8314: [
                [
                    43
                ],
                256
            ],
            8315: [
                [
                    8722
                ],
                256
            ],
            8316: [
                [
                    61
                ],
                256
            ],
            8317: [
                [
                    40
                ],
                256
            ],
            8318: [
                [
                    41
                ],
                256
            ],
            8319: [
                [
                    110
                ],
                256
            ],
            8320: [
                [
                    48
                ],
                256
            ],
            8321: [
                [
                    49
                ],
                256
            ],
            8322: [
                [
                    50
                ],
                256
            ],
            8323: [
                [
                    51
                ],
                256
            ],
            8324: [
                [
                    52
                ],
                256
            ],
            8325: [
                [
                    53
                ],
                256
            ],
            8326: [
                [
                    54
                ],
                256
            ],
            8327: [
                [
                    55
                ],
                256
            ],
            8328: [
                [
                    56
                ],
                256
            ],
            8329: [
                [
                    57
                ],
                256
            ],
            8330: [
                [
                    43
                ],
                256
            ],
            8331: [
                [
                    8722
                ],
                256
            ],
            8332: [
                [
                    61
                ],
                256
            ],
            8333: [
                [
                    40
                ],
                256
            ],
            8334: [
                [
                    41
                ],
                256
            ],
            8336: [
                [
                    97
                ],
                256
            ],
            8337: [
                [
                    101
                ],
                256
            ],
            8338: [
                [
                    111
                ],
                256
            ],
            8339: [
                [
                    120
                ],
                256
            ],
            8340: [
                [
                    601
                ],
                256
            ],
            8341: [
                [
                    104
                ],
                256
            ],
            8342: [
                [
                    107
                ],
                256
            ],
            8343: [
                [
                    108
                ],
                256
            ],
            8344: [
                [
                    109
                ],
                256
            ],
            8345: [
                [
                    110
                ],
                256
            ],
            8346: [
                [
                    112
                ],
                256
            ],
            8347: [
                [
                    115
                ],
                256
            ],
            8348: [
                [
                    116
                ],
                256
            ],
            8360: [
                [
                    82,
                    115
                ],
                256
            ],
            8400: [
                ,
                230
            ],
            8401: [
                ,
                230
            ],
            8402: [
                ,
                1
            ],
            8403: [
                ,
                1
            ],
            8404: [
                ,
                230
            ],
            8405: [
                ,
                230
            ],
            8406: [
                ,
                230
            ],
            8407: [
                ,
                230
            ],
            8408: [
                ,
                1
            ],
            8409: [
                ,
                1
            ],
            8410: [
                ,
                1
            ],
            8411: [
                ,
                230
            ],
            8412: [
                ,
                230
            ],
            8417: [
                ,
                230
            ],
            8421: [
                ,
                1
            ],
            8422: [
                ,
                1
            ],
            8423: [
                ,
                230
            ],
            8424: [
                ,
                220
            ],
            8425: [
                ,
                230
            ],
            8426: [
                ,
                1
            ],
            8427: [
                ,
                1
            ],
            8428: [
                ,
                220
            ],
            8429: [
                ,
                220
            ],
            8430: [
                ,
                220
            ],
            8431: [
                ,
                220
            ],
            8432: [
                ,
                230
            ]
        },
        8448: {
            8448: [
                [
                    97,
                    47,
                    99
                ],
                256
            ],
            8449: [
                [
                    97,
                    47,
                    115
                ],
                256
            ],
            8450: [
                [
                    67
                ],
                256
            ],
            8451: [
                [
                    176,
                    67
                ],
                256
            ],
            8453: [
                [
                    99,
                    47,
                    111
                ],
                256
            ],
            8454: [
                [
                    99,
                    47,
                    117
                ],
                256
            ],
            8455: [
                [
                    400
                ],
                256
            ],
            8457: [
                [
                    176,
                    70
                ],
                256
            ],
            8458: [
                [
                    103
                ],
                256
            ],
            8459: [
                [
                    72
                ],
                256
            ],
            8460: [
                [
                    72
                ],
                256
            ],
            8461: [
                [
                    72
                ],
                256
            ],
            8462: [
                [
                    104
                ],
                256
            ],
            8463: [
                [
                    295
                ],
                256
            ],
            8464: [
                [
                    73
                ],
                256
            ],
            8465: [
                [
                    73
                ],
                256
            ],
            8466: [
                [
                    76
                ],
                256
            ],
            8467: [
                [
                    108
                ],
                256
            ],
            8469: [
                [
                    78
                ],
                256
            ],
            8470: [
                [
                    78,
                    111
                ],
                256
            ],
            8473: [
                [
                    80
                ],
                256
            ],
            8474: [
                [
                    81
                ],
                256
            ],
            8475: [
                [
                    82
                ],
                256
            ],
            8476: [
                [
                    82
                ],
                256
            ],
            8477: [
                [
                    82
                ],
                256
            ],
            8480: [
                [
                    83,
                    77
                ],
                256
            ],
            8481: [
                [
                    84,
                    69,
                    76
                ],
                256
            ],
            8482: [
                [
                    84,
                    77
                ],
                256
            ],
            8484: [
                [
                    90
                ],
                256
            ],
            8486: [
                [
                    937
                ]
            ],
            8488: [
                [
                    90
                ],
                256
            ],
            8490: [
                [
                    75
                ]
            ],
            8491: [
                [
                    197
                ]
            ],
            8492: [
                [
                    66
                ],
                256
            ],
            8493: [
                [
                    67
                ],
                256
            ],
            8495: [
                [
                    101
                ],
                256
            ],
            8496: [
                [
                    69
                ],
                256
            ],
            8497: [
                [
                    70
                ],
                256
            ],
            8499: [
                [
                    77
                ],
                256
            ],
            8500: [
                [
                    111
                ],
                256
            ],
            8501: [
                [
                    1488
                ],
                256
            ],
            8502: [
                [
                    1489
                ],
                256
            ],
            8503: [
                [
                    1490
                ],
                256
            ],
            8504: [
                [
                    1491
                ],
                256
            ],
            8505: [
                [
                    105
                ],
                256
            ],
            8507: [
                [
                    70,
                    65,
                    88
                ],
                256
            ],
            8508: [
                [
                    960
                ],
                256
            ],
            8509: [
                [
                    947
                ],
                256
            ],
            8510: [
                [
                    915
                ],
                256
            ],
            8511: [
                [
                    928
                ],
                256
            ],
            8512: [
                [
                    8721
                ],
                256
            ],
            8517: [
                [
                    68
                ],
                256
            ],
            8518: [
                [
                    100
                ],
                256
            ],
            8519: [
                [
                    101
                ],
                256
            ],
            8520: [
                [
                    105
                ],
                256
            ],
            8521: [
                [
                    106
                ],
                256
            ],
            8528: [
                [
                    49,
                    8260,
                    55
                ],
                256
            ],
            8529: [
                [
                    49,
                    8260,
                    57
                ],
                256
            ],
            8530: [
                [
                    49,
                    8260,
                    49,
                    48
                ],
                256
            ],
            8531: [
                [
                    49,
                    8260,
                    51
                ],
                256
            ],
            8532: [
                [
                    50,
                    8260,
                    51
                ],
                256
            ],
            8533: [
                [
                    49,
                    8260,
                    53
                ],
                256
            ],
            8534: [
                [
                    50,
                    8260,
                    53
                ],
                256
            ],
            8535: [
                [
                    51,
                    8260,
                    53
                ],
                256
            ],
            8536: [
                [
                    52,
                    8260,
                    53
                ],
                256
            ],
            8537: [
                [
                    49,
                    8260,
                    54
                ],
                256
            ],
            8538: [
                [
                    53,
                    8260,
                    54
                ],
                256
            ],
            8539: [
                [
                    49,
                    8260,
                    56
                ],
                256
            ],
            8540: [
                [
                    51,
                    8260,
                    56
                ],
                256
            ],
            8541: [
                [
                    53,
                    8260,
                    56
                ],
                256
            ],
            8542: [
                [
                    55,
                    8260,
                    56
                ],
                256
            ],
            8543: [
                [
                    49,
                    8260
                ],
                256
            ],
            8544: [
                [
                    73
                ],
                256
            ],
            8545: [
                [
                    73,
                    73
                ],
                256
            ],
            8546: [
                [
                    73,
                    73,
                    73
                ],
                256
            ],
            8547: [
                [
                    73,
                    86
                ],
                256
            ],
            8548: [
                [
                    86
                ],
                256
            ],
            8549: [
                [
                    86,
                    73
                ],
                256
            ],
            8550: [
                [
                    86,
                    73,
                    73
                ],
                256
            ],
            8551: [
                [
                    86,
                    73,
                    73,
                    73
                ],
                256
            ],
            8552: [
                [
                    73,
                    88
                ],
                256
            ],
            8553: [
                [
                    88
                ],
                256
            ],
            8554: [
                [
                    88,
                    73
                ],
                256
            ],
            8555: [
                [
                    88,
                    73,
                    73
                ],
                256
            ],
            8556: [
                [
                    76
                ],
                256
            ],
            8557: [
                [
                    67
                ],
                256
            ],
            8558: [
                [
                    68
                ],
                256
            ],
            8559: [
                [
                    77
                ],
                256
            ],
            8560: [
                [
                    105
                ],
                256
            ],
            8561: [
                [
                    105,
                    105
                ],
                256
            ],
            8562: [
                [
                    105,
                    105,
                    105
                ],
                256
            ],
            8563: [
                [
                    105,
                    118
                ],
                256
            ],
            8564: [
                [
                    118
                ],
                256
            ],
            8565: [
                [
                    118,
                    105
                ],
                256
            ],
            8566: [
                [
                    118,
                    105,
                    105
                ],
                256
            ],
            8567: [
                [
                    118,
                    105,
                    105,
                    105
                ],
                256
            ],
            8568: [
                [
                    105,
                    120
                ],
                256
            ],
            8569: [
                [
                    120
                ],
                256
            ],
            8570: [
                [
                    120,
                    105
                ],
                256
            ],
            8571: [
                [
                    120,
                    105,
                    105
                ],
                256
            ],
            8572: [
                [
                    108
                ],
                256
            ],
            8573: [
                [
                    99
                ],
                256
            ],
            8574: [
                [
                    100
                ],
                256
            ],
            8575: [
                [
                    109
                ],
                256
            ],
            8585: [
                [
                    48,
                    8260,
                    51
                ],
                256
            ],
            8592: [
                ,
                ,
                {
                    824: 8602
                }
            ],
            8594: [
                ,
                ,
                {
                    824: 8603
                }
            ],
            8596: [
                ,
                ,
                {
                    824: 8622
                }
            ],
            8602: [
                [
                    8592,
                    824
                ]
            ],
            8603: [
                [
                    8594,
                    824
                ]
            ],
            8622: [
                [
                    8596,
                    824
                ]
            ],
            8653: [
                [
                    8656,
                    824
                ]
            ],
            8654: [
                [
                    8660,
                    824
                ]
            ],
            8655: [
                [
                    8658,
                    824
                ]
            ],
            8656: [
                ,
                ,
                {
                    824: 8653
                }
            ],
            8658: [
                ,
                ,
                {
                    824: 8655
                }
            ],
            8660: [
                ,
                ,
                {
                    824: 8654
                }
            ]
        },
        8704: {
            8707: [
                ,
                ,
                {
                    824: 8708
                }
            ],
            8708: [
                [
                    8707,
                    824
                ]
            ],
            8712: [
                ,
                ,
                {
                    824: 8713
                }
            ],
            8713: [
                [
                    8712,
                    824
                ]
            ],
            8715: [
                ,
                ,
                {
                    824: 8716
                }
            ],
            8716: [
                [
                    8715,
                    824
                ]
            ],
            8739: [
                ,
                ,
                {
                    824: 8740
                }
            ],
            8740: [
                [
                    8739,
                    824
                ]
            ],
            8741: [
                ,
                ,
                {
                    824: 8742
                }
            ],
            8742: [
                [
                    8741,
                    824
                ]
            ],
            8748: [
                [
                    8747,
                    8747
                ],
                256
            ],
            8749: [
                [
                    8747,
                    8747,
                    8747
                ],
                256
            ],
            8751: [
                [
                    8750,
                    8750
                ],
                256
            ],
            8752: [
                [
                    8750,
                    8750,
                    8750
                ],
                256
            ],
            8764: [
                ,
                ,
                {
                    824: 8769
                }
            ],
            8769: [
                [
                    8764,
                    824
                ]
            ],
            8771: [
                ,
                ,
                {
                    824: 8772
                }
            ],
            8772: [
                [
                    8771,
                    824
                ]
            ],
            8773: [
                ,
                ,
                {
                    824: 8775
                }
            ],
            8775: [
                [
                    8773,
                    824
                ]
            ],
            8776: [
                ,
                ,
                {
                    824: 8777
                }
            ],
            8777: [
                [
                    8776,
                    824
                ]
            ],
            8781: [
                ,
                ,
                {
                    824: 8813
                }
            ],
            8800: [
                [
                    61,
                    824
                ]
            ],
            8801: [
                ,
                ,
                {
                    824: 8802
                }
            ],
            8802: [
                [
                    8801,
                    824
                ]
            ],
            8804: [
                ,
                ,
                {
                    824: 8816
                }
            ],
            8805: [
                ,
                ,
                {
                    824: 8817
                }
            ],
            8813: [
                [
                    8781,
                    824
                ]
            ],
            8814: [
                [
                    60,
                    824
                ]
            ],
            8815: [
                [
                    62,
                    824
                ]
            ],
            8816: [
                [
                    8804,
                    824
                ]
            ],
            8817: [
                [
                    8805,
                    824
                ]
            ],
            8818: [
                ,
                ,
                {
                    824: 8820
                }
            ],
            8819: [
                ,
                ,
                {
                    824: 8821
                }
            ],
            8820: [
                [
                    8818,
                    824
                ]
            ],
            8821: [
                [
                    8819,
                    824
                ]
            ],
            8822: [
                ,
                ,
                {
                    824: 8824
                }
            ],
            8823: [
                ,
                ,
                {
                    824: 8825
                }
            ],
            8824: [
                [
                    8822,
                    824
                ]
            ],
            8825: [
                [
                    8823,
                    824
                ]
            ],
            8826: [
                ,
                ,
                {
                    824: 8832
                }
            ],
            8827: [
                ,
                ,
                {
                    824: 8833
                }
            ],
            8828: [
                ,
                ,
                {
                    824: 8928
                }
            ],
            8829: [
                ,
                ,
                {
                    824: 8929
                }
            ],
            8832: [
                [
                    8826,
                    824
                ]
            ],
            8833: [
                [
                    8827,
                    824
                ]
            ],
            8834: [
                ,
                ,
                {
                    824: 8836
                }
            ],
            8835: [
                ,
                ,
                {
                    824: 8837
                }
            ],
            8836: [
                [
                    8834,
                    824
                ]
            ],
            8837: [
                [
                    8835,
                    824
                ]
            ],
            8838: [
                ,
                ,
                {
                    824: 8840
                }
            ],
            8839: [
                ,
                ,
                {
                    824: 8841
                }
            ],
            8840: [
                [
                    8838,
                    824
                ]
            ],
            8841: [
                [
                    8839,
                    824
                ]
            ],
            8849: [
                ,
                ,
                {
                    824: 8930
                }
            ],
            8850: [
                ,
                ,
                {
                    824: 8931
                }
            ],
            8866: [
                ,
                ,
                {
                    824: 8876
                }
            ],
            8872: [
                ,
                ,
                {
                    824: 8877
                }
            ],
            8873: [
                ,
                ,
                {
                    824: 8878
                }
            ],
            8875: [
                ,
                ,
                {
                    824: 8879
                }
            ],
            8876: [
                [
                    8866,
                    824
                ]
            ],
            8877: [
                [
                    8872,
                    824
                ]
            ],
            8878: [
                [
                    8873,
                    824
                ]
            ],
            8879: [
                [
                    8875,
                    824
                ]
            ],
            8882: [
                ,
                ,
                {
                    824: 8938
                }
            ],
            8883: [
                ,
                ,
                {
                    824: 8939
                }
            ],
            8884: [
                ,
                ,
                {
                    824: 8940
                }
            ],
            8885: [
                ,
                ,
                {
                    824: 8941
                }
            ],
            8928: [
                [
                    8828,
                    824
                ]
            ],
            8929: [
                [
                    8829,
                    824
                ]
            ],
            8930: [
                [
                    8849,
                    824
                ]
            ],
            8931: [
                [
                    8850,
                    824
                ]
            ],
            8938: [
                [
                    8882,
                    824
                ]
            ],
            8939: [
                [
                    8883,
                    824
                ]
            ],
            8940: [
                [
                    8884,
                    824
                ]
            ],
            8941: [
                [
                    8885,
                    824
                ]
            ]
        },
        8960: {
            9001: [
                [
                    12296
                ]
            ],
            9002: [
                [
                    12297
                ]
            ]
        },
        9216: {
            9312: [
                [
                    49
                ],
                256
            ],
            9313: [
                [
                    50
                ],
                256
            ],
            9314: [
                [
                    51
                ],
                256
            ],
            9315: [
                [
                    52
                ],
                256
            ],
            9316: [
                [
                    53
                ],
                256
            ],
            9317: [
                [
                    54
                ],
                256
            ],
            9318: [
                [
                    55
                ],
                256
            ],
            9319: [
                [
                    56
                ],
                256
            ],
            9320: [
                [
                    57
                ],
                256
            ],
            9321: [
                [
                    49,
                    48
                ],
                256
            ],
            9322: [
                [
                    49,
                    49
                ],
                256
            ],
            9323: [
                [
                    49,
                    50
                ],
                256
            ],
            9324: [
                [
                    49,
                    51
                ],
                256
            ],
            9325: [
                [
                    49,
                    52
                ],
                256
            ],
            9326: [
                [
                    49,
                    53
                ],
                256
            ],
            9327: [
                [
                    49,
                    54
                ],
                256
            ],
            9328: [
                [
                    49,
                    55
                ],
                256
            ],
            9329: [
                [
                    49,
                    56
                ],
                256
            ],
            9330: [
                [
                    49,
                    57
                ],
                256
            ],
            9331: [
                [
                    50,
                    48
                ],
                256
            ],
            9332: [
                [
                    40,
                    49,
                    41
                ],
                256
            ],
            9333: [
                [
                    40,
                    50,
                    41
                ],
                256
            ],
            9334: [
                [
                    40,
                    51,
                    41
                ],
                256
            ],
            9335: [
                [
                    40,
                    52,
                    41
                ],
                256
            ],
            9336: [
                [
                    40,
                    53,
                    41
                ],
                256
            ],
            9337: [
                [
                    40,
                    54,
                    41
                ],
                256
            ],
            9338: [
                [
                    40,
                    55,
                    41
                ],
                256
            ],
            9339: [
                [
                    40,
                    56,
                    41
                ],
                256
            ],
            9340: [
                [
                    40,
                    57,
                    41
                ],
                256
            ],
            9341: [
                [
                    40,
                    49,
                    48,
                    41
                ],
                256
            ],
            9342: [
                [
                    40,
                    49,
                    49,
                    41
                ],
                256
            ],
            9343: [
                [
                    40,
                    49,
                    50,
                    41
                ],
                256
            ],
            9344: [
                [
                    40,
                    49,
                    51,
                    41
                ],
                256
            ],
            9345: [
                [
                    40,
                    49,
                    52,
                    41
                ],
                256
            ],
            9346: [
                [
                    40,
                    49,
                    53,
                    41
                ],
                256
            ],
            9347: [
                [
                    40,
                    49,
                    54,
                    41
                ],
                256
            ],
            9348: [
                [
                    40,
                    49,
                    55,
                    41
                ],
                256
            ],
            9349: [
                [
                    40,
                    49,
                    56,
                    41
                ],
                256
            ],
            9350: [
                [
                    40,
                    49,
                    57,
                    41
                ],
                256
            ],
            9351: [
                [
                    40,
                    50,
                    48,
                    41
                ],
                256
            ],
            9352: [
                [
                    49,
                    46
                ],
                256
            ],
            9353: [
                [
                    50,
                    46
                ],
                256
            ],
            9354: [
                [
                    51,
                    46
                ],
                256
            ],
            9355: [
                [
                    52,
                    46
                ],
                256
            ],
            9356: [
                [
                    53,
                    46
                ],
                256
            ],
            9357: [
                [
                    54,
                    46
                ],
                256
            ],
            9358: [
                [
                    55,
                    46
                ],
                256
            ],
            9359: [
                [
                    56,
                    46
                ],
                256
            ],
            9360: [
                [
                    57,
                    46
                ],
                256
            ],
            9361: [
                [
                    49,
                    48,
                    46
                ],
                256
            ],
            9362: [
                [
                    49,
                    49,
                    46
                ],
                256
            ],
            9363: [
                [
                    49,
                    50,
                    46
                ],
                256
            ],
            9364: [
                [
                    49,
                    51,
                    46
                ],
                256
            ],
            9365: [
                [
                    49,
                    52,
                    46
                ],
                256
            ],
            9366: [
                [
                    49,
                    53,
                    46
                ],
                256
            ],
            9367: [
                [
                    49,
                    54,
                    46
                ],
                256
            ],
            9368: [
                [
                    49,
                    55,
                    46
                ],
                256
            ],
            9369: [
                [
                    49,
                    56,
                    46
                ],
                256
            ],
            9370: [
                [
                    49,
                    57,
                    46
                ],
                256
            ],
            9371: [
                [
                    50,
                    48,
                    46
                ],
                256
            ],
            9372: [
                [
                    40,
                    97,
                    41
                ],
                256
            ],
            9373: [
                [
                    40,
                    98,
                    41
                ],
                256
            ],
            9374: [
                [
                    40,
                    99,
                    41
                ],
                256
            ],
            9375: [
                [
                    40,
                    100,
                    41
                ],
                256
            ],
            9376: [
                [
                    40,
                    101,
                    41
                ],
                256
            ],
            9377: [
                [
                    40,
                    102,
                    41
                ],
                256
            ],
            9378: [
                [
                    40,
                    103,
                    41
                ],
                256
            ],
            9379: [
                [
                    40,
                    104,
                    41
                ],
                256
            ],
            9380: [
                [
                    40,
                    105,
                    41
                ],
                256
            ],
            9381: [
                [
                    40,
                    106,
                    41
                ],
                256
            ],
            9382: [
                [
                    40,
                    107,
                    41
                ],
                256
            ],
            9383: [
                [
                    40,
                    108,
                    41
                ],
                256
            ],
            9384: [
                [
                    40,
                    109,
                    41
                ],
                256
            ],
            9385: [
                [
                    40,
                    110,
                    41
                ],
                256
            ],
            9386: [
                [
                    40,
                    111,
                    41
                ],
                256
            ],
            9387: [
                [
                    40,
                    112,
                    41
                ],
                256
            ],
            9388: [
                [
                    40,
                    113,
                    41
                ],
                256
            ],
            9389: [
                [
                    40,
                    114,
                    41
                ],
                256
            ],
            9390: [
                [
                    40,
                    115,
                    41
                ],
                256
            ],
            9391: [
                [
                    40,
                    116,
                    41
                ],
                256
            ],
            9392: [
                [
                    40,
                    117,
                    41
                ],
                256
            ],
            9393: [
                [
                    40,
                    118,
                    41
                ],
                256
            ],
            9394: [
                [
                    40,
                    119,
                    41
                ],
                256
            ],
            9395: [
                [
                    40,
                    120,
                    41
                ],
                256
            ],
            9396: [
                [
                    40,
                    121,
                    41
                ],
                256
            ],
            9397: [
                [
                    40,
                    122,
                    41
                ],
                256
            ],
            9398: [
                [
                    65
                ],
                256
            ],
            9399: [
                [
                    66
                ],
                256
            ],
            9400: [
                [
                    67
                ],
                256
            ],
            9401: [
                [
                    68
                ],
                256
            ],
            9402: [
                [
                    69
                ],
                256
            ],
            9403: [
                [
                    70
                ],
                256
            ],
            9404: [
                [
                    71
                ],
                256
            ],
            9405: [
                [
                    72
                ],
                256
            ],
            9406: [
                [
                    73
                ],
                256
            ],
            9407: [
                [
                    74
                ],
                256
            ],
            9408: [
                [
                    75
                ],
                256
            ],
            9409: [
                [
                    76
                ],
                256
            ],
            9410: [
                [
                    77
                ],
                256
            ],
            9411: [
                [
                    78
                ],
                256
            ],
            9412: [
                [
                    79
                ],
                256
            ],
            9413: [
                [
                    80
                ],
                256
            ],
            9414: [
                [
                    81
                ],
                256
            ],
            9415: [
                [
                    82
                ],
                256
            ],
            9416: [
                [
                    83
                ],
                256
            ],
            9417: [
                [
                    84
                ],
                256
            ],
            9418: [
                [
                    85
                ],
                256
            ],
            9419: [
                [
                    86
                ],
                256
            ],
            9420: [
                [
                    87
                ],
                256
            ],
            9421: [
                [
                    88
                ],
                256
            ],
            9422: [
                [
                    89
                ],
                256
            ],
            9423: [
                [
                    90
                ],
                256
            ],
            9424: [
                [
                    97
                ],
                256
            ],
            9425: [
                [
                    98
                ],
                256
            ],
            9426: [
                [
                    99
                ],
                256
            ],
            9427: [
                [
                    100
                ],
                256
            ],
            9428: [
                [
                    101
                ],
                256
            ],
            9429: [
                [
                    102
                ],
                256
            ],
            9430: [
                [
                    103
                ],
                256
            ],
            9431: [
                [
                    104
                ],
                256
            ],
            9432: [
                [
                    105
                ],
                256
            ],
            9433: [
                [
                    106
                ],
                256
            ],
            9434: [
                [
                    107
                ],
                256
            ],
            9435: [
                [
                    108
                ],
                256
            ],
            9436: [
                [
                    109
                ],
                256
            ],
            9437: [
                [
                    110
                ],
                256
            ],
            9438: [
                [
                    111
                ],
                256
            ],
            9439: [
                [
                    112
                ],
                256
            ],
            9440: [
                [
                    113
                ],
                256
            ],
            9441: [
                [
                    114
                ],
                256
            ],
            9442: [
                [
                    115
                ],
                256
            ],
            9443: [
                [
                    116
                ],
                256
            ],
            9444: [
                [
                    117
                ],
                256
            ],
            9445: [
                [
                    118
                ],
                256
            ],
            9446: [
                [
                    119
                ],
                256
            ],
            9447: [
                [
                    120
                ],
                256
            ],
            9448: [
                [
                    121
                ],
                256
            ],
            9449: [
                [
                    122
                ],
                256
            ],
            9450: [
                [
                    48
                ],
                256
            ]
        },
        10752: {
            10764: [
                [
                    8747,
                    8747,
                    8747,
                    8747
                ],
                256
            ],
            10868: [
                [
                    58,
                    58,
                    61
                ],
                256
            ],
            10869: [
                [
                    61,
                    61
                ],
                256
            ],
            10870: [
                [
                    61,
                    61,
                    61
                ],
                256
            ],
            10972: [
                [
                    10973,
                    824
                ],
                512
            ]
        },
        11264: {
            11388: [
                [
                    106
                ],
                256
            ],
            11389: [
                [
                    86
                ],
                256
            ],
            11503: [
                ,
                230
            ],
            11504: [
                ,
                230
            ],
            11505: [
                ,
                230
            ]
        },
        11520: {
            11631: [
                [
                    11617
                ],
                256
            ],
            11647: [
                ,
                9
            ],
            11744: [
                ,
                230
            ],
            11745: [
                ,
                230
            ],
            11746: [
                ,
                230
            ],
            11747: [
                ,
                230
            ],
            11748: [
                ,
                230
            ],
            11749: [
                ,
                230
            ],
            11750: [
                ,
                230
            ],
            11751: [
                ,
                230
            ],
            11752: [
                ,
                230
            ],
            11753: [
                ,
                230
            ],
            11754: [
                ,
                230
            ],
            11755: [
                ,
                230
            ],
            11756: [
                ,
                230
            ],
            11757: [
                ,
                230
            ],
            11758: [
                ,
                230
            ],
            11759: [
                ,
                230
            ],
            11760: [
                ,
                230
            ],
            11761: [
                ,
                230
            ],
            11762: [
                ,
                230
            ],
            11763: [
                ,
                230
            ],
            11764: [
                ,
                230
            ],
            11765: [
                ,
                230
            ],
            11766: [
                ,
                230
            ],
            11767: [
                ,
                230
            ],
            11768: [
                ,
                230
            ],
            11769: [
                ,
                230
            ],
            11770: [
                ,
                230
            ],
            11771: [
                ,
                230
            ],
            11772: [
                ,
                230
            ],
            11773: [
                ,
                230
            ],
            11774: [
                ,
                230
            ],
            11775: [
                ,
                230
            ]
        },
        11776: {
            11935: [
                [
                    27597
                ],
                256
            ],
            12019: [
                [
                    40863
                ],
                256
            ]
        },
        12032: {
            12032: [
                [
                    19968
                ],
                256
            ],
            12033: [
                [
                    20008
                ],
                256
            ],
            12034: [
                [
                    20022
                ],
                256
            ],
            12035: [
                [
                    20031
                ],
                256
            ],
            12036: [
                [
                    20057
                ],
                256
            ],
            12037: [
                [
                    20101
                ],
                256
            ],
            12038: [
                [
                    20108
                ],
                256
            ],
            12039: [
                [
                    20128
                ],
                256
            ],
            12040: [
                [
                    20154
                ],
                256
            ],
            12041: [
                [
                    20799
                ],
                256
            ],
            12042: [
                [
                    20837
                ],
                256
            ],
            12043: [
                [
                    20843
                ],
                256
            ],
            12044: [
                [
                    20866
                ],
                256
            ],
            12045: [
                [
                    20886
                ],
                256
            ],
            12046: [
                [
                    20907
                ],
                256
            ],
            12047: [
                [
                    20960
                ],
                256
            ],
            12048: [
                [
                    20981
                ],
                256
            ],
            12049: [
                [
                    20992
                ],
                256
            ],
            12050: [
                [
                    21147
                ],
                256
            ],
            12051: [
                [
                    21241
                ],
                256
            ],
            12052: [
                [
                    21269
                ],
                256
            ],
            12053: [
                [
                    21274
                ],
                256
            ],
            12054: [
                [
                    21304
                ],
                256
            ],
            12055: [
                [
                    21313
                ],
                256
            ],
            12056: [
                [
                    21340
                ],
                256
            ],
            12057: [
                [
                    21353
                ],
                256
            ],
            12058: [
                [
                    21378
                ],
                256
            ],
            12059: [
                [
                    21430
                ],
                256
            ],
            12060: [
                [
                    21448
                ],
                256
            ],
            12061: [
                [
                    21475
                ],
                256
            ],
            12062: [
                [
                    22231
                ],
                256
            ],
            12063: [
                [
                    22303
                ],
                256
            ],
            12064: [
                [
                    22763
                ],
                256
            ],
            12065: [
                [
                    22786
                ],
                256
            ],
            12066: [
                [
                    22794
                ],
                256
            ],
            12067: [
                [
                    22805
                ],
                256
            ],
            12068: [
                [
                    22823
                ],
                256
            ],
            12069: [
                [
                    22899
                ],
                256
            ],
            12070: [
                [
                    23376
                ],
                256
            ],
            12071: [
                [
                    23424
                ],
                256
            ],
            12072: [
                [
                    23544
                ],
                256
            ],
            12073: [
                [
                    23567
                ],
                256
            ],
            12074: [
                [
                    23586
                ],
                256
            ],
            12075: [
                [
                    23608
                ],
                256
            ],
            12076: [
                [
                    23662
                ],
                256
            ],
            12077: [
                [
                    23665
                ],
                256
            ],
            12078: [
                [
                    24027
                ],
                256
            ],
            12079: [
                [
                    24037
                ],
                256
            ],
            12080: [
                [
                    24049
                ],
                256
            ],
            12081: [
                [
                    24062
                ],
                256
            ],
            12082: [
                [
                    24178
                ],
                256
            ],
            12083: [
                [
                    24186
                ],
                256
            ],
            12084: [
                [
                    24191
                ],
                256
            ],
            12085: [
                [
                    24308
                ],
                256
            ],
            12086: [
                [
                    24318
                ],
                256
            ],
            12087: [
                [
                    24331
                ],
                256
            ],
            12088: [
                [
                    24339
                ],
                256
            ],
            12089: [
                [
                    24400
                ],
                256
            ],
            12090: [
                [
                    24417
                ],
                256
            ],
            12091: [
                [
                    24435
                ],
                256
            ],
            12092: [
                [
                    24515
                ],
                256
            ],
            12093: [
                [
                    25096
                ],
                256
            ],
            12094: [
                [
                    25142
                ],
                256
            ],
            12095: [
                [
                    25163
                ],
                256
            ],
            12096: [
                [
                    25903
                ],
                256
            ],
            12097: [
                [
                    25908
                ],
                256
            ],
            12098: [
                [
                    25991
                ],
                256
            ],
            12099: [
                [
                    26007
                ],
                256
            ],
            12100: [
                [
                    26020
                ],
                256
            ],
            12101: [
                [
                    26041
                ],
                256
            ],
            12102: [
                [
                    26080
                ],
                256
            ],
            12103: [
                [
                    26085
                ],
                256
            ],
            12104: [
                [
                    26352
                ],
                256
            ],
            12105: [
                [
                    26376
                ],
                256
            ],
            12106: [
                [
                    26408
                ],
                256
            ],
            12107: [
                [
                    27424
                ],
                256
            ],
            12108: [
                [
                    27490
                ],
                256
            ],
            12109: [
                [
                    27513
                ],
                256
            ],
            12110: [
                [
                    27571
                ],
                256
            ],
            12111: [
                [
                    27595
                ],
                256
            ],
            12112: [
                [
                    27604
                ],
                256
            ],
            12113: [
                [
                    27611
                ],
                256
            ],
            12114: [
                [
                    27663
                ],
                256
            ],
            12115: [
                [
                    27668
                ],
                256
            ],
            12116: [
                [
                    27700
                ],
                256
            ],
            12117: [
                [
                    28779
                ],
                256
            ],
            12118: [
                [
                    29226
                ],
                256
            ],
            12119: [
                [
                    29238
                ],
                256
            ],
            12120: [
                [
                    29243
                ],
                256
            ],
            12121: [
                [
                    29247
                ],
                256
            ],
            12122: [
                [
                    29255
                ],
                256
            ],
            12123: [
                [
                    29273
                ],
                256
            ],
            12124: [
                [
                    29275
                ],
                256
            ],
            12125: [
                [
                    29356
                ],
                256
            ],
            12126: [
                [
                    29572
                ],
                256
            ],
            12127: [
                [
                    29577
                ],
                256
            ],
            12128: [
                [
                    29916
                ],
                256
            ],
            12129: [
                [
                    29926
                ],
                256
            ],
            12130: [
                [
                    29976
                ],
                256
            ],
            12131: [
                [
                    29983
                ],
                256
            ],
            12132: [
                [
                    29992
                ],
                256
            ],
            12133: [
                [
                    30000
                ],
                256
            ],
            12134: [
                [
                    30091
                ],
                256
            ],
            12135: [
                [
                    30098
                ],
                256
            ],
            12136: [
                [
                    30326
                ],
                256
            ],
            12137: [
                [
                    30333
                ],
                256
            ],
            12138: [
                [
                    30382
                ],
                256
            ],
            12139: [
                [
                    30399
                ],
                256
            ],
            12140: [
                [
                    30446
                ],
                256
            ],
            12141: [
                [
                    30683
                ],
                256
            ],
            12142: [
                [
                    30690
                ],
                256
            ],
            12143: [
                [
                    30707
                ],
                256
            ],
            12144: [
                [
                    31034
                ],
                256
            ],
            12145: [
                [
                    31160
                ],
                256
            ],
            12146: [
                [
                    31166
                ],
                256
            ],
            12147: [
                [
                    31348
                ],
                256
            ],
            12148: [
                [
                    31435
                ],
                256
            ],
            12149: [
                [
                    31481
                ],
                256
            ],
            12150: [
                [
                    31859
                ],
                256
            ],
            12151: [
                [
                    31992
                ],
                256
            ],
            12152: [
                [
                    32566
                ],
                256
            ],
            12153: [
                [
                    32593
                ],
                256
            ],
            12154: [
                [
                    32650
                ],
                256
            ],
            12155: [
                [
                    32701
                ],
                256
            ],
            12156: [
                [
                    32769
                ],
                256
            ],
            12157: [
                [
                    32780
                ],
                256
            ],
            12158: [
                [
                    32786
                ],
                256
            ],
            12159: [
                [
                    32819
                ],
                256
            ],
            12160: [
                [
                    32895
                ],
                256
            ],
            12161: [
                [
                    32905
                ],
                256
            ],
            12162: [
                [
                    33251
                ],
                256
            ],
            12163: [
                [
                    33258
                ],
                256
            ],
            12164: [
                [
                    33267
                ],
                256
            ],
            12165: [
                [
                    33276
                ],
                256
            ],
            12166: [
                [
                    33292
                ],
                256
            ],
            12167: [
                [
                    33307
                ],
                256
            ],
            12168: [
                [
                    33311
                ],
                256
            ],
            12169: [
                [
                    33390
                ],
                256
            ],
            12170: [
                [
                    33394
                ],
                256
            ],
            12171: [
                [
                    33400
                ],
                256
            ],
            12172: [
                [
                    34381
                ],
                256
            ],
            12173: [
                [
                    34411
                ],
                256
            ],
            12174: [
                [
                    34880
                ],
                256
            ],
            12175: [
                [
                    34892
                ],
                256
            ],
            12176: [
                [
                    34915
                ],
                256
            ],
            12177: [
                [
                    35198
                ],
                256
            ],
            12178: [
                [
                    35211
                ],
                256
            ],
            12179: [
                [
                    35282
                ],
                256
            ],
            12180: [
                [
                    35328
                ],
                256
            ],
            12181: [
                [
                    35895
                ],
                256
            ],
            12182: [
                [
                    35910
                ],
                256
            ],
            12183: [
                [
                    35925
                ],
                256
            ],
            12184: [
                [
                    35960
                ],
                256
            ],
            12185: [
                [
                    35997
                ],
                256
            ],
            12186: [
                [
                    36196
                ],
                256
            ],
            12187: [
                [
                    36208
                ],
                256
            ],
            12188: [
                [
                    36275
                ],
                256
            ],
            12189: [
                [
                    36523
                ],
                256
            ],
            12190: [
                [
                    36554
                ],
                256
            ],
            12191: [
                [
                    36763
                ],
                256
            ],
            12192: [
                [
                    36784
                ],
                256
            ],
            12193: [
                [
                    36789
                ],
                256
            ],
            12194: [
                [
                    37009
                ],
                256
            ],
            12195: [
                [
                    37193
                ],
                256
            ],
            12196: [
                [
                    37318
                ],
                256
            ],
            12197: [
                [
                    37324
                ],
                256
            ],
            12198: [
                [
                    37329
                ],
                256
            ],
            12199: [
                [
                    38263
                ],
                256
            ],
            12200: [
                [
                    38272
                ],
                256
            ],
            12201: [
                [
                    38428
                ],
                256
            ],
            12202: [
                [
                    38582
                ],
                256
            ],
            12203: [
                [
                    38585
                ],
                256
            ],
            12204: [
                [
                    38632
                ],
                256
            ],
            12205: [
                [
                    38737
                ],
                256
            ],
            12206: [
                [
                    38750
                ],
                256
            ],
            12207: [
                [
                    38754
                ],
                256
            ],
            12208: [
                [
                    38761
                ],
                256
            ],
            12209: [
                [
                    38859
                ],
                256
            ],
            12210: [
                [
                    38893
                ],
                256
            ],
            12211: [
                [
                    38899
                ],
                256
            ],
            12212: [
                [
                    38913
                ],
                256
            ],
            12213: [
                [
                    39080
                ],
                256
            ],
            12214: [
                [
                    39131
                ],
                256
            ],
            12215: [
                [
                    39135
                ],
                256
            ],
            12216: [
                [
                    39318
                ],
                256
            ],
            12217: [
                [
                    39321
                ],
                256
            ],
            12218: [
                [
                    39340
                ],
                256
            ],
            12219: [
                [
                    39592
                ],
                256
            ],
            12220: [
                [
                    39640
                ],
                256
            ],
            12221: [
                [
                    39647
                ],
                256
            ],
            12222: [
                [
                    39717
                ],
                256
            ],
            12223: [
                [
                    39727
                ],
                256
            ],
            12224: [
                [
                    39730
                ],
                256
            ],
            12225: [
                [
                    39740
                ],
                256
            ],
            12226: [
                [
                    39770
                ],
                256
            ],
            12227: [
                [
                    40165
                ],
                256
            ],
            12228: [
                [
                    40565
                ],
                256
            ],
            12229: [
                [
                    40575
                ],
                256
            ],
            12230: [
                [
                    40613
                ],
                256
            ],
            12231: [
                [
                    40635
                ],
                256
            ],
            12232: [
                [
                    40643
                ],
                256
            ],
            12233: [
                [
                    40653
                ],
                256
            ],
            12234: [
                [
                    40657
                ],
                256
            ],
            12235: [
                [
                    40697
                ],
                256
            ],
            12236: [
                [
                    40701
                ],
                256
            ],
            12237: [
                [
                    40718
                ],
                256
            ],
            12238: [
                [
                    40723
                ],
                256
            ],
            12239: [
                [
                    40736
                ],
                256
            ],
            12240: [
                [
                    40763
                ],
                256
            ],
            12241: [
                [
                    40778
                ],
                256
            ],
            12242: [
                [
                    40786
                ],
                256
            ],
            12243: [
                [
                    40845
                ],
                256
            ],
            12244: [
                [
                    40860
                ],
                256
            ],
            12245: [
                [
                    40864
                ],
                256
            ]
        },
        12288: {
            12288: [
                [
                    32
                ],
                256
            ],
            12330: [
                ,
                218
            ],
            12331: [
                ,
                228
            ],
            12332: [
                ,
                232
            ],
            12333: [
                ,
                222
            ],
            12334: [
                ,
                224
            ],
            12335: [
                ,
                224
            ],
            12342: [
                [
                    12306
                ],
                256
            ],
            12344: [
                [
                    21313
                ],
                256
            ],
            12345: [
                [
                    21316
                ],
                256
            ],
            12346: [
                [
                    21317
                ],
                256
            ],
            12358: [
                ,
                ,
                {
                    12441: 12436
                }
            ],
            12363: [
                ,
                ,
                {
                    12441: 12364
                }
            ],
            12364: [
                [
                    12363,
                    12441
                ]
            ],
            12365: [
                ,
                ,
                {
                    12441: 12366
                }
            ],
            12366: [
                [
                    12365,
                    12441
                ]
            ],
            12367: [
                ,
                ,
                {
                    12441: 12368
                }
            ],
            12368: [
                [
                    12367,
                    12441
                ]
            ],
            12369: [
                ,
                ,
                {
                    12441: 12370
                }
            ],
            12370: [
                [
                    12369,
                    12441
                ]
            ],
            12371: [
                ,
                ,
                {
                    12441: 12372
                }
            ],
            12372: [
                [
                    12371,
                    12441
                ]
            ],
            12373: [
                ,
                ,
                {
                    12441: 12374
                }
            ],
            12374: [
                [
                    12373,
                    12441
                ]
            ],
            12375: [
                ,
                ,
                {
                    12441: 12376
                }
            ],
            12376: [
                [
                    12375,
                    12441
                ]
            ],
            12377: [
                ,
                ,
                {
                    12441: 12378
                }
            ],
            12378: [
                [
                    12377,
                    12441
                ]
            ],
            12379: [
                ,
                ,
                {
                    12441: 12380
                }
            ],
            12380: [
                [
                    12379,
                    12441
                ]
            ],
            12381: [
                ,
                ,
                {
                    12441: 12382
                }
            ],
            12382: [
                [
                    12381,
                    12441
                ]
            ],
            12383: [
                ,
                ,
                {
                    12441: 12384
                }
            ],
            12384: [
                [
                    12383,
                    12441
                ]
            ],
            12385: [
                ,
                ,
                {
                    12441: 12386
                }
            ],
            12386: [
                [
                    12385,
                    12441
                ]
            ],
            12388: [
                ,
                ,
                {
                    12441: 12389
                }
            ],
            12389: [
                [
                    12388,
                    12441
                ]
            ],
            12390: [
                ,
                ,
                {
                    12441: 12391
                }
            ],
            12391: [
                [
                    12390,
                    12441
                ]
            ],
            12392: [
                ,
                ,
                {
                    12441: 12393
                }
            ],
            12393: [
                [
                    12392,
                    12441
                ]
            ],
            12399: [
                ,
                ,
                {
                    12441: 12400,
                    12442: 12401
                }
            ],
            12400: [
                [
                    12399,
                    12441
                ]
            ],
            12401: [
                [
                    12399,
                    12442
                ]
            ],
            12402: [
                ,
                ,
                {
                    12441: 12403,
                    12442: 12404
                }
            ],
            12403: [
                [
                    12402,
                    12441
                ]
            ],
            12404: [
                [
                    12402,
                    12442
                ]
            ],
            12405: [
                ,
                ,
                {
                    12441: 12406,
                    12442: 12407
                }
            ],
            12406: [
                [
                    12405,
                    12441
                ]
            ],
            12407: [
                [
                    12405,
                    12442
                ]
            ],
            12408: [
                ,
                ,
                {
                    12441: 12409,
                    12442: 12410
                }
            ],
            12409: [
                [
                    12408,
                    12441
                ]
            ],
            12410: [
                [
                    12408,
                    12442
                ]
            ],
            12411: [
                ,
                ,
                {
                    12441: 12412,
                    12442: 12413
                }
            ],
            12412: [
                [
                    12411,
                    12441
                ]
            ],
            12413: [
                [
                    12411,
                    12442
                ]
            ],
            12436: [
                [
                    12358,
                    12441
                ]
            ],
            12441: [
                ,
                8
            ],
            12442: [
                ,
                8
            ],
            12443: [
                [
                    32,
                    12441
                ],
                256
            ],
            12444: [
                [
                    32,
                    12442
                ],
                256
            ],
            12445: [
                ,
                ,
                {
                    12441: 12446
                }
            ],
            12446: [
                [
                    12445,
                    12441
                ]
            ],
            12447: [
                [
                    12424,
                    12426
                ],
                256
            ],
            12454: [
                ,
                ,
                {
                    12441: 12532
                }
            ],
            12459: [
                ,
                ,
                {
                    12441: 12460
                }
            ],
            12460: [
                [
                    12459,
                    12441
                ]
            ],
            12461: [
                ,
                ,
                {
                    12441: 12462
                }
            ],
            12462: [
                [
                    12461,
                    12441
                ]
            ],
            12463: [
                ,
                ,
                {
                    12441: 12464
                }
            ],
            12464: [
                [
                    12463,
                    12441
                ]
            ],
            12465: [
                ,
                ,
                {
                    12441: 12466
                }
            ],
            12466: [
                [
                    12465,
                    12441
                ]
            ],
            12467: [
                ,
                ,
                {
                    12441: 12468
                }
            ],
            12468: [
                [
                    12467,
                    12441
                ]
            ],
            12469: [
                ,
                ,
                {
                    12441: 12470
                }
            ],
            12470: [
                [
                    12469,
                    12441
                ]
            ],
            12471: [
                ,
                ,
                {
                    12441: 12472
                }
            ],
            12472: [
                [
                    12471,
                    12441
                ]
            ],
            12473: [
                ,
                ,
                {
                    12441: 12474
                }
            ],
            12474: [
                [
                    12473,
                    12441
                ]
            ],
            12475: [
                ,
                ,
                {
                    12441: 12476
                }
            ],
            12476: [
                [
                    12475,
                    12441
                ]
            ],
            12477: [
                ,
                ,
                {
                    12441: 12478
                }
            ],
            12478: [
                [
                    12477,
                    12441
                ]
            ],
            12479: [
                ,
                ,
                {
                    12441: 12480
                }
            ],
            12480: [
                [
                    12479,
                    12441
                ]
            ],
            12481: [
                ,
                ,
                {
                    12441: 12482
                }
            ],
            12482: [
                [
                    12481,
                    12441
                ]
            ],
            12484: [
                ,
                ,
                {
                    12441: 12485
                }
            ],
            12485: [
                [
                    12484,
                    12441
                ]
            ],
            12486: [
                ,
                ,
                {
                    12441: 12487
                }
            ],
            12487: [
                [
                    12486,
                    12441
                ]
            ],
            12488: [
                ,
                ,
                {
                    12441: 12489
                }
            ],
            12489: [
                [
                    12488,
                    12441
                ]
            ],
            12495: [
                ,
                ,
                {
                    12441: 12496,
                    12442: 12497
                }
            ],
            12496: [
                [
                    12495,
                    12441
                ]
            ],
            12497: [
                [
                    12495,
                    12442
                ]
            ],
            12498: [
                ,
                ,
                {
                    12441: 12499,
                    12442: 12500
                }
            ],
            12499: [
                [
                    12498,
                    12441
                ]
            ],
            12500: [
                [
                    12498,
                    12442
                ]
            ],
            12501: [
                ,
                ,
                {
                    12441: 12502,
                    12442: 12503
                }
            ],
            12502: [
                [
                    12501,
                    12441
                ]
            ],
            12503: [
                [
                    12501,
                    12442
                ]
            ],
            12504: [
                ,
                ,
                {
                    12441: 12505,
                    12442: 12506
                }
            ],
            12505: [
                [
                    12504,
                    12441
                ]
            ],
            12506: [
                [
                    12504,
                    12442
                ]
            ],
            12507: [
                ,
                ,
                {
                    12441: 12508,
                    12442: 12509
                }
            ],
            12508: [
                [
                    12507,
                    12441
                ]
            ],
            12509: [
                [
                    12507,
                    12442
                ]
            ],
            12527: [
                ,
                ,
                {
                    12441: 12535
                }
            ],
            12528: [
                ,
                ,
                {
                    12441: 12536
                }
            ],
            12529: [
                ,
                ,
                {
                    12441: 12537
                }
            ],
            12530: [
                ,
                ,
                {
                    12441: 12538
                }
            ],
            12532: [
                [
                    12454,
                    12441
                ]
            ],
            12535: [
                [
                    12527,
                    12441
                ]
            ],
            12536: [
                [
                    12528,
                    12441
                ]
            ],
            12537: [
                [
                    12529,
                    12441
                ]
            ],
            12538: [
                [
                    12530,
                    12441
                ]
            ],
            12541: [
                ,
                ,
                {
                    12441: 12542
                }
            ],
            12542: [
                [
                    12541,
                    12441
                ]
            ],
            12543: [
                [
                    12467,
                    12488
                ],
                256
            ]
        },
        12544: {
            12593: [
                [
                    4352
                ],
                256
            ],
            12594: [
                [
                    4353
                ],
                256
            ],
            12595: [
                [
                    4522
                ],
                256
            ],
            12596: [
                [
                    4354
                ],
                256
            ],
            12597: [
                [
                    4524
                ],
                256
            ],
            12598: [
                [
                    4525
                ],
                256
            ],
            12599: [
                [
                    4355
                ],
                256
            ],
            12600: [
                [
                    4356
                ],
                256
            ],
            12601: [
                [
                    4357
                ],
                256
            ],
            12602: [
                [
                    4528
                ],
                256
            ],
            12603: [
                [
                    4529
                ],
                256
            ],
            12604: [
                [
                    4530
                ],
                256
            ],
            12605: [
                [
                    4531
                ],
                256
            ],
            12606: [
                [
                    4532
                ],
                256
            ],
            12607: [
                [
                    4533
                ],
                256
            ],
            12608: [
                [
                    4378
                ],
                256
            ],
            12609: [
                [
                    4358
                ],
                256
            ],
            12610: [
                [
                    4359
                ],
                256
            ],
            12611: [
                [
                    4360
                ],
                256
            ],
            12612: [
                [
                    4385
                ],
                256
            ],
            12613: [
                [
                    4361
                ],
                256
            ],
            12614: [
                [
                    4362
                ],
                256
            ],
            12615: [
                [
                    4363
                ],
                256
            ],
            12616: [
                [
                    4364
                ],
                256
            ],
            12617: [
                [
                    4365
                ],
                256
            ],
            12618: [
                [
                    4366
                ],
                256
            ],
            12619: [
                [
                    4367
                ],
                256
            ],
            12620: [
                [
                    4368
                ],
                256
            ],
            12621: [
                [
                    4369
                ],
                256
            ],
            12622: [
                [
                    4370
                ],
                256
            ],
            12623: [
                [
                    4449
                ],
                256
            ],
            12624: [
                [
                    4450
                ],
                256
            ],
            12625: [
                [
                    4451
                ],
                256
            ],
            12626: [
                [
                    4452
                ],
                256
            ],
            12627: [
                [
                    4453
                ],
                256
            ],
            12628: [
                [
                    4454
                ],
                256
            ],
            12629: [
                [
                    4455
                ],
                256
            ],
            12630: [
                [
                    4456
                ],
                256
            ],
            12631: [
                [
                    4457
                ],
                256
            ],
            12632: [
                [
                    4458
                ],
                256
            ],
            12633: [
                [
                    4459
                ],
                256
            ],
            12634: [
                [
                    4460
                ],
                256
            ],
            12635: [
                [
                    4461
                ],
                256
            ],
            12636: [
                [
                    4462
                ],
                256
            ],
            12637: [
                [
                    4463
                ],
                256
            ],
            12638: [
                [
                    4464
                ],
                256
            ],
            12639: [
                [
                    4465
                ],
                256
            ],
            12640: [
                [
                    4466
                ],
                256
            ],
            12641: [
                [
                    4467
                ],
                256
            ],
            12642: [
                [
                    4468
                ],
                256
            ],
            12643: [
                [
                    4469
                ],
                256
            ],
            12644: [
                [
                    4448
                ],
                256
            ],
            12645: [
                [
                    4372
                ],
                256
            ],
            12646: [
                [
                    4373
                ],
                256
            ],
            12647: [
                [
                    4551
                ],
                256
            ],
            12648: [
                [
                    4552
                ],
                256
            ],
            12649: [
                [
                    4556
                ],
                256
            ],
            12650: [
                [
                    4558
                ],
                256
            ],
            12651: [
                [
                    4563
                ],
                256
            ],
            12652: [
                [
                    4567
                ],
                256
            ],
            12653: [
                [
                    4569
                ],
                256
            ],
            12654: [
                [
                    4380
                ],
                256
            ],
            12655: [
                [
                    4573
                ],
                256
            ],
            12656: [
                [
                    4575
                ],
                256
            ],
            12657: [
                [
                    4381
                ],
                256
            ],
            12658: [
                [
                    4382
                ],
                256
            ],
            12659: [
                [
                    4384
                ],
                256
            ],
            12660: [
                [
                    4386
                ],
                256
            ],
            12661: [
                [
                    4387
                ],
                256
            ],
            12662: [
                [
                    4391
                ],
                256
            ],
            12663: [
                [
                    4393
                ],
                256
            ],
            12664: [
                [
                    4395
                ],
                256
            ],
            12665: [
                [
                    4396
                ],
                256
            ],
            12666: [
                [
                    4397
                ],
                256
            ],
            12667: [
                [
                    4398
                ],
                256
            ],
            12668: [
                [
                    4399
                ],
                256
            ],
            12669: [
                [
                    4402
                ],
                256
            ],
            12670: [
                [
                    4406
                ],
                256
            ],
            12671: [
                [
                    4416
                ],
                256
            ],
            12672: [
                [
                    4423
                ],
                256
            ],
            12673: [
                [
                    4428
                ],
                256
            ],
            12674: [
                [
                    4593
                ],
                256
            ],
            12675: [
                [
                    4594
                ],
                256
            ],
            12676: [
                [
                    4439
                ],
                256
            ],
            12677: [
                [
                    4440
                ],
                256
            ],
            12678: [
                [
                    4441
                ],
                256
            ],
            12679: [
                [
                    4484
                ],
                256
            ],
            12680: [
                [
                    4485
                ],
                256
            ],
            12681: [
                [
                    4488
                ],
                256
            ],
            12682: [
                [
                    4497
                ],
                256
            ],
            12683: [
                [
                    4498
                ],
                256
            ],
            12684: [
                [
                    4500
                ],
                256
            ],
            12685: [
                [
                    4510
                ],
                256
            ],
            12686: [
                [
                    4513
                ],
                256
            ],
            12690: [
                [
                    19968
                ],
                256
            ],
            12691: [
                [
                    20108
                ],
                256
            ],
            12692: [
                [
                    19977
                ],
                256
            ],
            12693: [
                [
                    22235
                ],
                256
            ],
            12694: [
                [
                    19978
                ],
                256
            ],
            12695: [
                [
                    20013
                ],
                256
            ],
            12696: [
                [
                    19979
                ],
                256
            ],
            12697: [
                [
                    30002
                ],
                256
            ],
            12698: [
                [
                    20057
                ],
                256
            ],
            12699: [
                [
                    19993
                ],
                256
            ],
            12700: [
                [
                    19969
                ],
                256
            ],
            12701: [
                [
                    22825
                ],
                256
            ],
            12702: [
                [
                    22320
                ],
                256
            ],
            12703: [
                [
                    20154
                ],
                256
            ]
        },
        12800: {
            12800: [
                [
                    40,
                    4352,
                    41
                ],
                256
            ],
            12801: [
                [
                    40,
                    4354,
                    41
                ],
                256
            ],
            12802: [
                [
                    40,
                    4355,
                    41
                ],
                256
            ],
            12803: [
                [
                    40,
                    4357,
                    41
                ],
                256
            ],
            12804: [
                [
                    40,
                    4358,
                    41
                ],
                256
            ],
            12805: [
                [
                    40,
                    4359,
                    41
                ],
                256
            ],
            12806: [
                [
                    40,
                    4361,
                    41
                ],
                256
            ],
            12807: [
                [
                    40,
                    4363,
                    41
                ],
                256
            ],
            12808: [
                [
                    40,
                    4364,
                    41
                ],
                256
            ],
            12809: [
                [
                    40,
                    4366,
                    41
                ],
                256
            ],
            12810: [
                [
                    40,
                    4367,
                    41
                ],
                256
            ],
            12811: [
                [
                    40,
                    4368,
                    41
                ],
                256
            ],
            12812: [
                [
                    40,
                    4369,
                    41
                ],
                256
            ],
            12813: [
                [
                    40,
                    4370,
                    41
                ],
                256
            ],
            12814: [
                [
                    40,
                    4352,
                    4449,
                    41
                ],
                256
            ],
            12815: [
                [
                    40,
                    4354,
                    4449,
                    41
                ],
                256
            ],
            12816: [
                [
                    40,
                    4355,
                    4449,
                    41
                ],
                256
            ],
            12817: [
                [
                    40,
                    4357,
                    4449,
                    41
                ],
                256
            ],
            12818: [
                [
                    40,
                    4358,
                    4449,
                    41
                ],
                256
            ],
            12819: [
                [
                    40,
                    4359,
                    4449,
                    41
                ],
                256
            ],
            12820: [
                [
                    40,
                    4361,
                    4449,
                    41
                ],
                256
            ],
            12821: [
                [
                    40,
                    4363,
                    4449,
                    41
                ],
                256
            ],
            12822: [
                [
                    40,
                    4364,
                    4449,
                    41
                ],
                256
            ],
            12823: [
                [
                    40,
                    4366,
                    4449,
                    41
                ],
                256
            ],
            12824: [
                [
                    40,
                    4367,
                    4449,
                    41
                ],
                256
            ],
            12825: [
                [
                    40,
                    4368,
                    4449,
                    41
                ],
                256
            ],
            12826: [
                [
                    40,
                    4369,
                    4449,
                    41
                ],
                256
            ],
            12827: [
                [
                    40,
                    4370,
                    4449,
                    41
                ],
                256
            ],
            12828: [
                [
                    40,
                    4364,
                    4462,
                    41
                ],
                256
            ],
            12829: [
                [
                    40,
                    4363,
                    4457,
                    4364,
                    4453,
                    4523,
                    41
                ],
                256
            ],
            12830: [
                [
                    40,
                    4363,
                    4457,
                    4370,
                    4462,
                    41
                ],
                256
            ],
            12832: [
                [
                    40,
                    19968,
                    41
                ],
                256
            ],
            12833: [
                [
                    40,
                    20108,
                    41
                ],
                256
            ],
            12834: [
                [
                    40,
                    19977,
                    41
                ],
                256
            ],
            12835: [
                [
                    40,
                    22235,
                    41
                ],
                256
            ],
            12836: [
                [
                    40,
                    20116,
                    41
                ],
                256
            ],
            12837: [
                [
                    40,
                    20845,
                    41
                ],
                256
            ],
            12838: [
                [
                    40,
                    19971,
                    41
                ],
                256
            ],
            12839: [
                [
                    40,
                    20843,
                    41
                ],
                256
            ],
            12840: [
                [
                    40,
                    20061,
                    41
                ],
                256
            ],
            12841: [
                [
                    40,
                    21313,
                    41
                ],
                256
            ],
            12842: [
                [
                    40,
                    26376,
                    41
                ],
                256
            ],
            12843: [
                [
                    40,
                    28779,
                    41
                ],
                256
            ],
            12844: [
                [
                    40,
                    27700,
                    41
                ],
                256
            ],
            12845: [
                [
                    40,
                    26408,
                    41
                ],
                256
            ],
            12846: [
                [
                    40,
                    37329,
                    41
                ],
                256
            ],
            12847: [
                [
                    40,
                    22303,
                    41
                ],
                256
            ],
            12848: [
                [
                    40,
                    26085,
                    41
                ],
                256
            ],
            12849: [
                [
                    40,
                    26666,
                    41
                ],
                256
            ],
            12850: [
                [
                    40,
                    26377,
                    41
                ],
                256
            ],
            12851: [
                [
                    40,
                    31038,
                    41
                ],
                256
            ],
            12852: [
                [
                    40,
                    21517,
                    41
                ],
                256
            ],
            12853: [
                [
                    40,
                    29305,
                    41
                ],
                256
            ],
            12854: [
                [
                    40,
                    36001,
                    41
                ],
                256
            ],
            12855: [
                [
                    40,
                    31069,
                    41
                ],
                256
            ],
            12856: [
                [
                    40,
                    21172,
                    41
                ],
                256
            ],
            12857: [
                [
                    40,
                    20195,
                    41
                ],
                256
            ],
            12858: [
                [
                    40,
                    21628,
                    41
                ],
                256
            ],
            12859: [
                [
                    40,
                    23398,
                    41
                ],
                256
            ],
            12860: [
                [
                    40,
                    30435,
                    41
                ],
                256
            ],
            12861: [
                [
                    40,
                    20225,
                    41
                ],
                256
            ],
            12862: [
                [
                    40,
                    36039,
                    41
                ],
                256
            ],
            12863: [
                [
                    40,
                    21332,
                    41
                ],
                256
            ],
            12864: [
                [
                    40,
                    31085,
                    41
                ],
                256
            ],
            12865: [
                [
                    40,
                    20241,
                    41
                ],
                256
            ],
            12866: [
                [
                    40,
                    33258,
                    41
                ],
                256
            ],
            12867: [
                [
                    40,
                    33267,
                    41
                ],
                256
            ],
            12868: [
                [
                    21839
                ],
                256
            ],
            12869: [
                [
                    24188
                ],
                256
            ],
            12870: [
                [
                    25991
                ],
                256
            ],
            12871: [
                [
                    31631
                ],
                256
            ],
            12880: [
                [
                    80,
                    84,
                    69
                ],
                256
            ],
            12881: [
                [
                    50,
                    49
                ],
                256
            ],
            12882: [
                [
                    50,
                    50
                ],
                256
            ],
            12883: [
                [
                    50,
                    51
                ],
                256
            ],
            12884: [
                [
                    50,
                    52
                ],
                256
            ],
            12885: [
                [
                    50,
                    53
                ],
                256
            ],
            12886: [
                [
                    50,
                    54
                ],
                256
            ],
            12887: [
                [
                    50,
                    55
                ],
                256
            ],
            12888: [
                [
                    50,
                    56
                ],
                256
            ],
            12889: [
                [
                    50,
                    57
                ],
                256
            ],
            12890: [
                [
                    51,
                    48
                ],
                256
            ],
            12891: [
                [
                    51,
                    49
                ],
                256
            ],
            12892: [
                [
                    51,
                    50
                ],
                256
            ],
            12893: [
                [
                    51,
                    51
                ],
                256
            ],
            12894: [
                [
                    51,
                    52
                ],
                256
            ],
            12895: [
                [
                    51,
                    53
                ],
                256
            ],
            12896: [
                [
                    4352
                ],
                256
            ],
            12897: [
                [
                    4354
                ],
                256
            ],
            12898: [
                [
                    4355
                ],
                256
            ],
            12899: [
                [
                    4357
                ],
                256
            ],
            12900: [
                [
                    4358
                ],
                256
            ],
            12901: [
                [
                    4359
                ],
                256
            ],
            12902: [
                [
                    4361
                ],
                256
            ],
            12903: [
                [
                    4363
                ],
                256
            ],
            12904: [
                [
                    4364
                ],
                256
            ],
            12905: [
                [
                    4366
                ],
                256
            ],
            12906: [
                [
                    4367
                ],
                256
            ],
            12907: [
                [
                    4368
                ],
                256
            ],
            12908: [
                [
                    4369
                ],
                256
            ],
            12909: [
                [
                    4370
                ],
                256
            ],
            12910: [
                [
                    4352,
                    4449
                ],
                256
            ],
            12911: [
                [
                    4354,
                    4449
                ],
                256
            ],
            12912: [
                [
                    4355,
                    4449
                ],
                256
            ],
            12913: [
                [
                    4357,
                    4449
                ],
                256
            ],
            12914: [
                [
                    4358,
                    4449
                ],
                256
            ],
            12915: [
                [
                    4359,
                    4449
                ],
                256
            ],
            12916: [
                [
                    4361,
                    4449
                ],
                256
            ],
            12917: [
                [
                    4363,
                    4449
                ],
                256
            ],
            12918: [
                [
                    4364,
                    4449
                ],
                256
            ],
            12919: [
                [
                    4366,
                    4449
                ],
                256
            ],
            12920: [
                [
                    4367,
                    4449
                ],
                256
            ],
            12921: [
                [
                    4368,
                    4449
                ],
                256
            ],
            12922: [
                [
                    4369,
                    4449
                ],
                256
            ],
            12923: [
                [
                    4370,
                    4449
                ],
                256
            ],
            12924: [
                [
                    4366,
                    4449,
                    4535,
                    4352,
                    4457
                ],
                256
            ],
            12925: [
                [
                    4364,
                    4462,
                    4363,
                    4468
                ],
                256
            ],
            12926: [
                [
                    4363,
                    4462
                ],
                256
            ],
            12928: [
                [
                    19968
                ],
                256
            ],
            12929: [
                [
                    20108
                ],
                256
            ],
            12930: [
                [
                    19977
                ],
                256
            ],
            12931: [
                [
                    22235
                ],
                256
            ],
            12932: [
                [
                    20116
                ],
                256
            ],
            12933: [
                [
                    20845
                ],
                256
            ],
            12934: [
                [
                    19971
                ],
                256
            ],
            12935: [
                [
                    20843
                ],
                256
            ],
            12936: [
                [
                    20061
                ],
                256
            ],
            12937: [
                [
                    21313
                ],
                256
            ],
            12938: [
                [
                    26376
                ],
                256
            ],
            12939: [
                [
                    28779
                ],
                256
            ],
            12940: [
                [
                    27700
                ],
                256
            ],
            12941: [
                [
                    26408
                ],
                256
            ],
            12942: [
                [
                    37329
                ],
                256
            ],
            12943: [
                [
                    22303
                ],
                256
            ],
            12944: [
                [
                    26085
                ],
                256
            ],
            12945: [
                [
                    26666
                ],
                256
            ],
            12946: [
                [
                    26377
                ],
                256
            ],
            12947: [
                [
                    31038
                ],
                256
            ],
            12948: [
                [
                    21517
                ],
                256
            ],
            12949: [
                [
                    29305
                ],
                256
            ],
            12950: [
                [
                    36001
                ],
                256
            ],
            12951: [
                [
                    31069
                ],
                256
            ],
            12952: [
                [
                    21172
                ],
                256
            ],
            12953: [
                [
                    31192
                ],
                256
            ],
            12954: [
                [
                    30007
                ],
                256
            ],
            12955: [
                [
                    22899
                ],
                256
            ],
            12956: [
                [
                    36969
                ],
                256
            ],
            12957: [
                [
                    20778
                ],
                256
            ],
            12958: [
                [
                    21360
                ],
                256
            ],
            12959: [
                [
                    27880
                ],
                256
            ],
            12960: [
                [
                    38917
                ],
                256
            ],
            12961: [
                [
                    20241
                ],
                256
            ],
            12962: [
                [
                    20889
                ],
                256
            ],
            12963: [
                [
                    27491
                ],
                256
            ],
            12964: [
                [
                    19978
                ],
                256
            ],
            12965: [
                [
                    20013
                ],
                256
            ],
            12966: [
                [
                    19979
                ],
                256
            ],
            12967: [
                [
                    24038
                ],
                256
            ],
            12968: [
                [
                    21491
                ],
                256
            ],
            12969: [
                [
                    21307
                ],
                256
            ],
            12970: [
                [
                    23447
                ],
                256
            ],
            12971: [
                [
                    23398
                ],
                256
            ],
            12972: [
                [
                    30435
                ],
                256
            ],
            12973: [
                [
                    20225
                ],
                256
            ],
            12974: [
                [
                    36039
                ],
                256
            ],
            12975: [
                [
                    21332
                ],
                256
            ],
            12976: [
                [
                    22812
                ],
                256
            ],
            12977: [
                [
                    51,
                    54
                ],
                256
            ],
            12978: [
                [
                    51,
                    55
                ],
                256
            ],
            12979: [
                [
                    51,
                    56
                ],
                256
            ],
            12980: [
                [
                    51,
                    57
                ],
                256
            ],
            12981: [
                [
                    52,
                    48
                ],
                256
            ],
            12982: [
                [
                    52,
                    49
                ],
                256
            ],
            12983: [
                [
                    52,
                    50
                ],
                256
            ],
            12984: [
                [
                    52,
                    51
                ],
                256
            ],
            12985: [
                [
                    52,
                    52
                ],
                256
            ],
            12986: [
                [
                    52,
                    53
                ],
                256
            ],
            12987: [
                [
                    52,
                    54
                ],
                256
            ],
            12988: [
                [
                    52,
                    55
                ],
                256
            ],
            12989: [
                [
                    52,
                    56
                ],
                256
            ],
            12990: [
                [
                    52,
                    57
                ],
                256
            ],
            12991: [
                [
                    53,
                    48
                ],
                256
            ],
            12992: [
                [
                    49,
                    26376
                ],
                256
            ],
            12993: [
                [
                    50,
                    26376
                ],
                256
            ],
            12994: [
                [
                    51,
                    26376
                ],
                256
            ],
            12995: [
                [
                    52,
                    26376
                ],
                256
            ],
            12996: [
                [
                    53,
                    26376
                ],
                256
            ],
            12997: [
                [
                    54,
                    26376
                ],
                256
            ],
            12998: [
                [
                    55,
                    26376
                ],
                256
            ],
            12999: [
                [
                    56,
                    26376
                ],
                256
            ],
            13000: [
                [
                    57,
                    26376
                ],
                256
            ],
            13001: [
                [
                    49,
                    48,
                    26376
                ],
                256
            ],
            13002: [
                [
                    49,
                    49,
                    26376
                ],
                256
            ],
            13003: [
                [
                    49,
                    50,
                    26376
                ],
                256
            ],
            13004: [
                [
                    72,
                    103
                ],
                256
            ],
            13005: [
                [
                    101,
                    114,
                    103
                ],
                256
            ],
            13006: [
                [
                    101,
                    86
                ],
                256
            ],
            13007: [
                [
                    76,
                    84,
                    68
                ],
                256
            ],
            13008: [
                [
                    12450
                ],
                256
            ],
            13009: [
                [
                    12452
                ],
                256
            ],
            13010: [
                [
                    12454
                ],
                256
            ],
            13011: [
                [
                    12456
                ],
                256
            ],
            13012: [
                [
                    12458
                ],
                256
            ],
            13013: [
                [
                    12459
                ],
                256
            ],
            13014: [
                [
                    12461
                ],
                256
            ],
            13015: [
                [
                    12463
                ],
                256
            ],
            13016: [
                [
                    12465
                ],
                256
            ],
            13017: [
                [
                    12467
                ],
                256
            ],
            13018: [
                [
                    12469
                ],
                256
            ],
            13019: [
                [
                    12471
                ],
                256
            ],
            13020: [
                [
                    12473
                ],
                256
            ],
            13021: [
                [
                    12475
                ],
                256
            ],
            13022: [
                [
                    12477
                ],
                256
            ],
            13023: [
                [
                    12479
                ],
                256
            ],
            13024: [
                [
                    12481
                ],
                256
            ],
            13025: [
                [
                    12484
                ],
                256
            ],
            13026: [
                [
                    12486
                ],
                256
            ],
            13027: [
                [
                    12488
                ],
                256
            ],
            13028: [
                [
                    12490
                ],
                256
            ],
            13029: [
                [
                    12491
                ],
                256
            ],
            13030: [
                [
                    12492
                ],
                256
            ],
            13031: [
                [
                    12493
                ],
                256
            ],
            13032: [
                [
                    12494
                ],
                256
            ],
            13033: [
                [
                    12495
                ],
                256
            ],
            13034: [
                [
                    12498
                ],
                256
            ],
            13035: [
                [
                    12501
                ],
                256
            ],
            13036: [
                [
                    12504
                ],
                256
            ],
            13037: [
                [
                    12507
                ],
                256
            ],
            13038: [
                [
                    12510
                ],
                256
            ],
            13039: [
                [
                    12511
                ],
                256
            ],
            13040: [
                [
                    12512
                ],
                256
            ],
            13041: [
                [
                    12513
                ],
                256
            ],
            13042: [
                [
                    12514
                ],
                256
            ],
            13043: [
                [
                    12516
                ],
                256
            ],
            13044: [
                [
                    12518
                ],
                256
            ],
            13045: [
                [
                    12520
                ],
                256
            ],
            13046: [
                [
                    12521
                ],
                256
            ],
            13047: [
                [
                    12522
                ],
                256
            ],
            13048: [
                [
                    12523
                ],
                256
            ],
            13049: [
                [
                    12524
                ],
                256
            ],
            13050: [
                [
                    12525
                ],
                256
            ],
            13051: [
                [
                    12527
                ],
                256
            ],
            13052: [
                [
                    12528
                ],
                256
            ],
            13053: [
                [
                    12529
                ],
                256
            ],
            13054: [
                [
                    12530
                ],
                256
            ]
        },
        13056: {
            13056: [
                [
                    12450,
                    12497,
                    12540,
                    12488
                ],
                256
            ],
            13057: [
                [
                    12450,
                    12523,
                    12501,
                    12449
                ],
                256
            ],
            13058: [
                [
                    12450,
                    12531,
                    12506,
                    12450
                ],
                256
            ],
            13059: [
                [
                    12450,
                    12540,
                    12523
                ],
                256
            ],
            13060: [
                [
                    12452,
                    12491,
                    12531,
                    12464
                ],
                256
            ],
            13061: [
                [
                    12452,
                    12531,
                    12481
                ],
                256
            ],
            13062: [
                [
                    12454,
                    12457,
                    12531
                ],
                256
            ],
            13063: [
                [
                    12456,
                    12473,
                    12463,
                    12540,
                    12489
                ],
                256
            ],
            13064: [
                [
                    12456,
                    12540,
                    12459,
                    12540
                ],
                256
            ],
            13065: [
                [
                    12458,
                    12531,
                    12473
                ],
                256
            ],
            13066: [
                [
                    12458,
                    12540,
                    12512
                ],
                256
            ],
            13067: [
                [
                    12459,
                    12452,
                    12522
                ],
                256
            ],
            13068: [
                [
                    12459,
                    12521,
                    12483,
                    12488
                ],
                256
            ],
            13069: [
                [
                    12459,
                    12525,
                    12522,
                    12540
                ],
                256
            ],
            13070: [
                [
                    12460,
                    12525,
                    12531
                ],
                256
            ],
            13071: [
                [
                    12460,
                    12531,
                    12510
                ],
                256
            ],
            13072: [
                [
                    12462,
                    12460
                ],
                256
            ],
            13073: [
                [
                    12462,
                    12491,
                    12540
                ],
                256
            ],
            13074: [
                [
                    12461,
                    12517,
                    12522,
                    12540
                ],
                256
            ],
            13075: [
                [
                    12462,
                    12523,
                    12480,
                    12540
                ],
                256
            ],
            13076: [
                [
                    12461,
                    12525
                ],
                256
            ],
            13077: [
                [
                    12461,
                    12525,
                    12464,
                    12521,
                    12512
                ],
                256
            ],
            13078: [
                [
                    12461,
                    12525,
                    12513,
                    12540,
                    12488,
                    12523
                ],
                256
            ],
            13079: [
                [
                    12461,
                    12525,
                    12527,
                    12483,
                    12488
                ],
                256
            ],
            13080: [
                [
                    12464,
                    12521,
                    12512
                ],
                256
            ],
            13081: [
                [
                    12464,
                    12521,
                    12512,
                    12488,
                    12531
                ],
                256
            ],
            13082: [
                [
                    12463,
                    12523,
                    12476,
                    12452,
                    12525
                ],
                256
            ],
            13083: [
                [
                    12463,
                    12525,
                    12540,
                    12493
                ],
                256
            ],
            13084: [
                [
                    12465,
                    12540,
                    12473
                ],
                256
            ],
            13085: [
                [
                    12467,
                    12523,
                    12490
                ],
                256
            ],
            13086: [
                [
                    12467,
                    12540,
                    12509
                ],
                256
            ],
            13087: [
                [
                    12469,
                    12452,
                    12463,
                    12523
                ],
                256
            ],
            13088: [
                [
                    12469,
                    12531,
                    12481,
                    12540,
                    12512
                ],
                256
            ],
            13089: [
                [
                    12471,
                    12522,
                    12531,
                    12464
                ],
                256
            ],
            13090: [
                [
                    12475,
                    12531,
                    12481
                ],
                256
            ],
            13091: [
                [
                    12475,
                    12531,
                    12488
                ],
                256
            ],
            13092: [
                [
                    12480,
                    12540,
                    12473
                ],
                256
            ],
            13093: [
                [
                    12487,
                    12471
                ],
                256
            ],
            13094: [
                [
                    12489,
                    12523
                ],
                256
            ],
            13095: [
                [
                    12488,
                    12531
                ],
                256
            ],
            13096: [
                [
                    12490,
                    12494
                ],
                256
            ],
            13097: [
                [
                    12494,
                    12483,
                    12488
                ],
                256
            ],
            13098: [
                [
                    12495,
                    12452,
                    12484
                ],
                256
            ],
            13099: [
                [
                    12497,
                    12540,
                    12475,
                    12531,
                    12488
                ],
                256
            ],
            13100: [
                [
                    12497,
                    12540,
                    12484
                ],
                256
            ],
            13101: [
                [
                    12496,
                    12540,
                    12524,
                    12523
                ],
                256
            ],
            13102: [
                [
                    12500,
                    12450,
                    12473,
                    12488,
                    12523
                ],
                256
            ],
            13103: [
                [
                    12500,
                    12463,
                    12523
                ],
                256
            ],
            13104: [
                [
                    12500,
                    12467
                ],
                256
            ],
            13105: [
                [
                    12499,
                    12523
                ],
                256
            ],
            13106: [
                [
                    12501,
                    12449,
                    12521,
                    12483,
                    12489
                ],
                256
            ],
            13107: [
                [
                    12501,
                    12451,
                    12540,
                    12488
                ],
                256
            ],
            13108: [
                [
                    12502,
                    12483,
                    12471,
                    12455,
                    12523
                ],
                256
            ],
            13109: [
                [
                    12501,
                    12521,
                    12531
                ],
                256
            ],
            13110: [
                [
                    12504,
                    12463,
                    12479,
                    12540,
                    12523
                ],
                256
            ],
            13111: [
                [
                    12506,
                    12477
                ],
                256
            ],
            13112: [
                [
                    12506,
                    12491,
                    12498
                ],
                256
            ],
            13113: [
                [
                    12504,
                    12523,
                    12484
                ],
                256
            ],
            13114: [
                [
                    12506,
                    12531,
                    12473
                ],
                256
            ],
            13115: [
                [
                    12506,
                    12540,
                    12472
                ],
                256
            ],
            13116: [
                [
                    12505,
                    12540,
                    12479
                ],
                256
            ],
            13117: [
                [
                    12509,
                    12452,
                    12531,
                    12488
                ],
                256
            ],
            13118: [
                [
                    12508,
                    12523,
                    12488
                ],
                256
            ],
            13119: [
                [
                    12507,
                    12531
                ],
                256
            ],
            13120: [
                [
                    12509,
                    12531,
                    12489
                ],
                256
            ],
            13121: [
                [
                    12507,
                    12540,
                    12523
                ],
                256
            ],
            13122: [
                [
                    12507,
                    12540,
                    12531
                ],
                256
            ],
            13123: [
                [
                    12510,
                    12452,
                    12463,
                    12525
                ],
                256
            ],
            13124: [
                [
                    12510,
                    12452,
                    12523
                ],
                256
            ],
            13125: [
                [
                    12510,
                    12483,
                    12495
                ],
                256
            ],
            13126: [
                [
                    12510,
                    12523,
                    12463
                ],
                256
            ],
            13127: [
                [
                    12510,
                    12531,
                    12471,
                    12519,
                    12531
                ],
                256
            ],
            13128: [
                [
                    12511,
                    12463,
                    12525,
                    12531
                ],
                256
            ],
            13129: [
                [
                    12511,
                    12522
                ],
                256
            ],
            13130: [
                [
                    12511,
                    12522,
                    12496,
                    12540,
                    12523
                ],
                256
            ],
            13131: [
                [
                    12513,
                    12460
                ],
                256
            ],
            13132: [
                [
                    12513,
                    12460,
                    12488,
                    12531
                ],
                256
            ],
            13133: [
                [
                    12513,
                    12540,
                    12488,
                    12523
                ],
                256
            ],
            13134: [
                [
                    12516,
                    12540,
                    12489
                ],
                256
            ],
            13135: [
                [
                    12516,
                    12540,
                    12523
                ],
                256
            ],
            13136: [
                [
                    12518,
                    12450,
                    12531
                ],
                256
            ],
            13137: [
                [
                    12522,
                    12483,
                    12488,
                    12523
                ],
                256
            ],
            13138: [
                [
                    12522,
                    12521
                ],
                256
            ],
            13139: [
                [
                    12523,
                    12500,
                    12540
                ],
                256
            ],
            13140: [
                [
                    12523,
                    12540,
                    12502,
                    12523
                ],
                256
            ],
            13141: [
                [
                    12524,
                    12512
                ],
                256
            ],
            13142: [
                [
                    12524,
                    12531,
                    12488,
                    12466,
                    12531
                ],
                256
            ],
            13143: [
                [
                    12527,
                    12483,
                    12488
                ],
                256
            ],
            13144: [
                [
                    48,
                    28857
                ],
                256
            ],
            13145: [
                [
                    49,
                    28857
                ],
                256
            ],
            13146: [
                [
                    50,
                    28857
                ],
                256
            ],
            13147: [
                [
                    51,
                    28857
                ],
                256
            ],
            13148: [
                [
                    52,
                    28857
                ],
                256
            ],
            13149: [
                [
                    53,
                    28857
                ],
                256
            ],
            13150: [
                [
                    54,
                    28857
                ],
                256
            ],
            13151: [
                [
                    55,
                    28857
                ],
                256
            ],
            13152: [
                [
                    56,
                    28857
                ],
                256
            ],
            13153: [
                [
                    57,
                    28857
                ],
                256
            ],
            13154: [
                [
                    49,
                    48,
                    28857
                ],
                256
            ],
            13155: [
                [
                    49,
                    49,
                    28857
                ],
                256
            ],
            13156: [
                [
                    49,
                    50,
                    28857
                ],
                256
            ],
            13157: [
                [
                    49,
                    51,
                    28857
                ],
                256
            ],
            13158: [
                [
                    49,
                    52,
                    28857
                ],
                256
            ],
            13159: [
                [
                    49,
                    53,
                    28857
                ],
                256
            ],
            13160: [
                [
                    49,
                    54,
                    28857
                ],
                256
            ],
            13161: [
                [
                    49,
                    55,
                    28857
                ],
                256
            ],
            13162: [
                [
                    49,
                    56,
                    28857
                ],
                256
            ],
            13163: [
                [
                    49,
                    57,
                    28857
                ],
                256
            ],
            13164: [
                [
                    50,
                    48,
                    28857
                ],
                256
            ],
            13165: [
                [
                    50,
                    49,
                    28857
                ],
                256
            ],
            13166: [
                [
                    50,
                    50,
                    28857
                ],
                256
            ],
            13167: [
                [
                    50,
                    51,
                    28857
                ],
                256
            ],
            13168: [
                [
                    50,
                    52,
                    28857
                ],
                256
            ],
            13169: [
                [
                    104,
                    80,
                    97
                ],
                256
            ],
            13170: [
                [
                    100,
                    97
                ],
                256
            ],
            13171: [
                [
                    65,
                    85
                ],
                256
            ],
            13172: [
                [
                    98,
                    97,
                    114
                ],
                256
            ],
            13173: [
                [
                    111,
                    86
                ],
                256
            ],
            13174: [
                [
                    112,
                    99
                ],
                256
            ],
            13175: [
                [
                    100,
                    109
                ],
                256
            ],
            13176: [
                [
                    100,
                    109,
                    178
                ],
                256
            ],
            13177: [
                [
                    100,
                    109,
                    179
                ],
                256
            ],
            13178: [
                [
                    73,
                    85
                ],
                256
            ],
            13179: [
                [
                    24179,
                    25104
                ],
                256
            ],
            13180: [
                [
                    26157,
                    21644
                ],
                256
            ],
            13181: [
                [
                    22823,
                    27491
                ],
                256
            ],
            13182: [
                [
                    26126,
                    27835
                ],
                256
            ],
            13183: [
                [
                    26666,
                    24335,
                    20250,
                    31038
                ],
                256
            ],
            13184: [
                [
                    112,
                    65
                ],
                256
            ],
            13185: [
                [
                    110,
                    65
                ],
                256
            ],
            13186: [
                [
                    956,
                    65
                ],
                256
            ],
            13187: [
                [
                    109,
                    65
                ],
                256
            ],
            13188: [
                [
                    107,
                    65
                ],
                256
            ],
            13189: [
                [
                    75,
                    66
                ],
                256
            ],
            13190: [
                [
                    77,
                    66
                ],
                256
            ],
            13191: [
                [
                    71,
                    66
                ],
                256
            ],
            13192: [
                [
                    99,
                    97,
                    108
                ],
                256
            ],
            13193: [
                [
                    107,
                    99,
                    97,
                    108
                ],
                256
            ],
            13194: [
                [
                    112,
                    70
                ],
                256
            ],
            13195: [
                [
                    110,
                    70
                ],
                256
            ],
            13196: [
                [
                    956,
                    70
                ],
                256
            ],
            13197: [
                [
                    956,
                    103
                ],
                256
            ],
            13198: [
                [
                    109,
                    103
                ],
                256
            ],
            13199: [
                [
                    107,
                    103
                ],
                256
            ],
            13200: [
                [
                    72,
                    122
                ],
                256
            ],
            13201: [
                [
                    107,
                    72,
                    122
                ],
                256
            ],
            13202: [
                [
                    77,
                    72,
                    122
                ],
                256
            ],
            13203: [
                [
                    71,
                    72,
                    122
                ],
                256
            ],
            13204: [
                [
                    84,
                    72,
                    122
                ],
                256
            ],
            13205: [
                [
                    956,
                    8467
                ],
                256
            ],
            13206: [
                [
                    109,
                    8467
                ],
                256
            ],
            13207: [
                [
                    100,
                    8467
                ],
                256
            ],
            13208: [
                [
                    107,
                    8467
                ],
                256
            ],
            13209: [
                [
                    102,
                    109
                ],
                256
            ],
            13210: [
                [
                    110,
                    109
                ],
                256
            ],
            13211: [
                [
                    956,
                    109
                ],
                256
            ],
            13212: [
                [
                    109,
                    109
                ],
                256
            ],
            13213: [
                [
                    99,
                    109
                ],
                256
            ],
            13214: [
                [
                    107,
                    109
                ],
                256
            ],
            13215: [
                [
                    109,
                    109,
                    178
                ],
                256
            ],
            13216: [
                [
                    99,
                    109,
                    178
                ],
                256
            ],
            13217: [
                [
                    109,
                    178
                ],
                256
            ],
            13218: [
                [
                    107,
                    109,
                    178
                ],
                256
            ],
            13219: [
                [
                    109,
                    109,
                    179
                ],
                256
            ],
            13220: [
                [
                    99,
                    109,
                    179
                ],
                256
            ],
            13221: [
                [
                    109,
                    179
                ],
                256
            ],
            13222: [
                [
                    107,
                    109,
                    179
                ],
                256
            ],
            13223: [
                [
                    109,
                    8725,
                    115
                ],
                256
            ],
            13224: [
                [
                    109,
                    8725,
                    115,
                    178
                ],
                256
            ],
            13225: [
                [
                    80,
                    97
                ],
                256
            ],
            13226: [
                [
                    107,
                    80,
                    97
                ],
                256
            ],
            13227: [
                [
                    77,
                    80,
                    97
                ],
                256
            ],
            13228: [
                [
                    71,
                    80,
                    97
                ],
                256
            ],
            13229: [
                [
                    114,
                    97,
                    100
                ],
                256
            ],
            13230: [
                [
                    114,
                    97,
                    100,
                    8725,
                    115
                ],
                256
            ],
            13231: [
                [
                    114,
                    97,
                    100,
                    8725,
                    115,
                    178
                ],
                256
            ],
            13232: [
                [
                    112,
                    115
                ],
                256
            ],
            13233: [
                [
                    110,
                    115
                ],
                256
            ],
            13234: [
                [
                    956,
                    115
                ],
                256
            ],
            13235: [
                [
                    109,
                    115
                ],
                256
            ],
            13236: [
                [
                    112,
                    86
                ],
                256
            ],
            13237: [
                [
                    110,
                    86
                ],
                256
            ],
            13238: [
                [
                    956,
                    86
                ],
                256
            ],
            13239: [
                [
                    109,
                    86
                ],
                256
            ],
            13240: [
                [
                    107,
                    86
                ],
                256
            ],
            13241: [
                [
                    77,
                    86
                ],
                256
            ],
            13242: [
                [
                    112,
                    87
                ],
                256
            ],
            13243: [
                [
                    110,
                    87
                ],
                256
            ],
            13244: [
                [
                    956,
                    87
                ],
                256
            ],
            13245: [
                [
                    109,
                    87
                ],
                256
            ],
            13246: [
                [
                    107,
                    87
                ],
                256
            ],
            13247: [
                [
                    77,
                    87
                ],
                256
            ],
            13248: [
                [
                    107,
                    937
                ],
                256
            ],
            13249: [
                [
                    77,
                    937
                ],
                256
            ],
            13250: [
                [
                    97,
                    46,
                    109,
                    46
                ],
                256
            ],
            13251: [
                [
                    66,
                    113
                ],
                256
            ],
            13252: [
                [
                    99,
                    99
                ],
                256
            ],
            13253: [
                [
                    99,
                    100
                ],
                256
            ],
            13254: [
                [
                    67,
                    8725,
                    107,
                    103
                ],
                256
            ],
            13255: [
                [
                    67,
                    111,
                    46
                ],
                256
            ],
            13256: [
                [
                    100,
                    66
                ],
                256
            ],
            13257: [
                [
                    71,
                    121
                ],
                256
            ],
            13258: [
                [
                    104,
                    97
                ],
                256
            ],
            13259: [
                [
                    72,
                    80
                ],
                256
            ],
            13260: [
                [
                    105,
                    110
                ],
                256
            ],
            13261: [
                [
                    75,
                    75
                ],
                256
            ],
            13262: [
                [
                    75,
                    77
                ],
                256
            ],
            13263: [
                [
                    107,
                    116
                ],
                256
            ],
            13264: [
                [
                    108,
                    109
                ],
                256
            ],
            13265: [
                [
                    108,
                    110
                ],
                256
            ],
            13266: [
                [
                    108,
                    111,
                    103
                ],
                256
            ],
            13267: [
                [
                    108,
                    120
                ],
                256
            ],
            13268: [
                [
                    109,
                    98
                ],
                256
            ],
            13269: [
                [
                    109,
                    105,
                    108
                ],
                256
            ],
            13270: [
                [
                    109,
                    111,
                    108
                ],
                256
            ],
            13271: [
                [
                    80,
                    72
                ],
                256
            ],
            13272: [
                [
                    112,
                    46,
                    109,
                    46
                ],
                256
            ],
            13273: [
                [
                    80,
                    80,
                    77
                ],
                256
            ],
            13274: [
                [
                    80,
                    82
                ],
                256
            ],
            13275: [
                [
                    115,
                    114
                ],
                256
            ],
            13276: [
                [
                    83,
                    118
                ],
                256
            ],
            13277: [
                [
                    87,
                    98
                ],
                256
            ],
            13278: [
                [
                    86,
                    8725,
                    109
                ],
                256
            ],
            13279: [
                [
                    65,
                    8725,
                    109
                ],
                256
            ],
            13280: [
                [
                    49,
                    26085
                ],
                256
            ],
            13281: [
                [
                    50,
                    26085
                ],
                256
            ],
            13282: [
                [
                    51,
                    26085
                ],
                256
            ],
            13283: [
                [
                    52,
                    26085
                ],
                256
            ],
            13284: [
                [
                    53,
                    26085
                ],
                256
            ],
            13285: [
                [
                    54,
                    26085
                ],
                256
            ],
            13286: [
                [
                    55,
                    26085
                ],
                256
            ],
            13287: [
                [
                    56,
                    26085
                ],
                256
            ],
            13288: [
                [
                    57,
                    26085
                ],
                256
            ],
            13289: [
                [
                    49,
                    48,
                    26085
                ],
                256
            ],
            13290: [
                [
                    49,
                    49,
                    26085
                ],
                256
            ],
            13291: [
                [
                    49,
                    50,
                    26085
                ],
                256
            ],
            13292: [
                [
                    49,
                    51,
                    26085
                ],
                256
            ],
            13293: [
                [
                    49,
                    52,
                    26085
                ],
                256
            ],
            13294: [
                [
                    49,
                    53,
                    26085
                ],
                256
            ],
            13295: [
                [
                    49,
                    54,
                    26085
                ],
                256
            ],
            13296: [
                [
                    49,
                    55,
                    26085
                ],
                256
            ],
            13297: [
                [
                    49,
                    56,
                    26085
                ],
                256
            ],
            13298: [
                [
                    49,
                    57,
                    26085
                ],
                256
            ],
            13299: [
                [
                    50,
                    48,
                    26085
                ],
                256
            ],
            13300: [
                [
                    50,
                    49,
                    26085
                ],
                256
            ],
            13301: [
                [
                    50,
                    50,
                    26085
                ],
                256
            ],
            13302: [
                [
                    50,
                    51,
                    26085
                ],
                256
            ],
            13303: [
                [
                    50,
                    52,
                    26085
                ],
                256
            ],
            13304: [
                [
                    50,
                    53,
                    26085
                ],
                256
            ],
            13305: [
                [
                    50,
                    54,
                    26085
                ],
                256
            ],
            13306: [
                [
                    50,
                    55,
                    26085
                ],
                256
            ],
            13307: [
                [
                    50,
                    56,
                    26085
                ],
                256
            ],
            13308: [
                [
                    50,
                    57,
                    26085
                ],
                256
            ],
            13309: [
                [
                    51,
                    48,
                    26085
                ],
                256
            ],
            13310: [
                [
                    51,
                    49,
                    26085
                ],
                256
            ],
            13311: [
                [
                    103,
                    97,
                    108
                ],
                256
            ]
        },
        27136: {
            92912: [
                ,
                1
            ],
            92913: [
                ,
                1
            ],
            92914: [
                ,
                1
            ],
            92915: [
                ,
                1
            ],
            92916: [
                ,
                1
            ]
        },
        27392: {
            92976: [
                ,
                230
            ],
            92977: [
                ,
                230
            ],
            92978: [
                ,
                230
            ],
            92979: [
                ,
                230
            ],
            92980: [
                ,
                230
            ],
            92981: [
                ,
                230
            ],
            92982: [
                ,
                230
            ]
        },
        42496: {
            42607: [
                ,
                230
            ],
            42612: [
                ,
                230
            ],
            42613: [
                ,
                230
            ],
            42614: [
                ,
                230
            ],
            42615: [
                ,
                230
            ],
            42616: [
                ,
                230
            ],
            42617: [
                ,
                230
            ],
            42618: [
                ,
                230
            ],
            42619: [
                ,
                230
            ],
            42620: [
                ,
                230
            ],
            42621: [
                ,
                230
            ],
            42652: [
                [
                    1098
                ],
                256
            ],
            42653: [
                [
                    1100
                ],
                256
            ],
            42655: [
                ,
                230
            ],
            42736: [
                ,
                230
            ],
            42737: [
                ,
                230
            ]
        },
        42752: {
            42864: [
                [
                    42863
                ],
                256
            ],
            43000: [
                [
                    294
                ],
                256
            ],
            43001: [
                [
                    339
                ],
                256
            ]
        },
        43008: {
            43014: [
                ,
                9
            ],
            43204: [
                ,
                9
            ],
            43232: [
                ,
                230
            ],
            43233: [
                ,
                230
            ],
            43234: [
                ,
                230
            ],
            43235: [
                ,
                230
            ],
            43236: [
                ,
                230
            ],
            43237: [
                ,
                230
            ],
            43238: [
                ,
                230
            ],
            43239: [
                ,
                230
            ],
            43240: [
                ,
                230
            ],
            43241: [
                ,
                230
            ],
            43242: [
                ,
                230
            ],
            43243: [
                ,
                230
            ],
            43244: [
                ,
                230
            ],
            43245: [
                ,
                230
            ],
            43246: [
                ,
                230
            ],
            43247: [
                ,
                230
            ],
            43248: [
                ,
                230
            ],
            43249: [
                ,
                230
            ]
        },
        43264: {
            43307: [
                ,
                220
            ],
            43308: [
                ,
                220
            ],
            43309: [
                ,
                220
            ],
            43347: [
                ,
                9
            ],
            43443: [
                ,
                7
            ],
            43456: [
                ,
                9
            ]
        },
        43520: {
            43696: [
                ,
                230
            ],
            43698: [
                ,
                230
            ],
            43699: [
                ,
                230
            ],
            43700: [
                ,
                220
            ],
            43703: [
                ,
                230
            ],
            43704: [
                ,
                230
            ],
            43710: [
                ,
                230
            ],
            43711: [
                ,
                230
            ],
            43713: [
                ,
                230
            ],
            43766: [
                ,
                9
            ]
        },
        43776: {
            43868: [
                [
                    42791
                ],
                256
            ],
            43869: [
                [
                    43831
                ],
                256
            ],
            43870: [
                [
                    619
                ],
                256
            ],
            43871: [
                [
                    43858
                ],
                256
            ],
            44013: [
                ,
                9
            ]
        },
        48128: {
            113822: [
                ,
                1
            ]
        },
        53504: {
            119134: [
                [
                    119127,
                    119141
                ],
                512
            ],
            119135: [
                [
                    119128,
                    119141
                ],
                512
            ],
            119136: [
                [
                    119135,
                    119150
                ],
                512
            ],
            119137: [
                [
                    119135,
                    119151
                ],
                512
            ],
            119138: [
                [
                    119135,
                    119152
                ],
                512
            ],
            119139: [
                [
                    119135,
                    119153
                ],
                512
            ],
            119140: [
                [
                    119135,
                    119154
                ],
                512
            ],
            119141: [
                ,
                216
            ],
            119142: [
                ,
                216
            ],
            119143: [
                ,
                1
            ],
            119144: [
                ,
                1
            ],
            119145: [
                ,
                1
            ],
            119149: [
                ,
                226
            ],
            119150: [
                ,
                216
            ],
            119151: [
                ,
                216
            ],
            119152: [
                ,
                216
            ],
            119153: [
                ,
                216
            ],
            119154: [
                ,
                216
            ],
            119163: [
                ,
                220
            ],
            119164: [
                ,
                220
            ],
            119165: [
                ,
                220
            ],
            119166: [
                ,
                220
            ],
            119167: [
                ,
                220
            ],
            119168: [
                ,
                220
            ],
            119169: [
                ,
                220
            ],
            119170: [
                ,
                220
            ],
            119173: [
                ,
                230
            ],
            119174: [
                ,
                230
            ],
            119175: [
                ,
                230
            ],
            119176: [
                ,
                230
            ],
            119177: [
                ,
                230
            ],
            119178: [
                ,
                220
            ],
            119179: [
                ,
                220
            ],
            119210: [
                ,
                230
            ],
            119211: [
                ,
                230
            ],
            119212: [
                ,
                230
            ],
            119213: [
                ,
                230
            ],
            119227: [
                [
                    119225,
                    119141
                ],
                512
            ],
            119228: [
                [
                    119226,
                    119141
                ],
                512
            ],
            119229: [
                [
                    119227,
                    119150
                ],
                512
            ],
            119230: [
                [
                    119228,
                    119150
                ],
                512
            ],
            119231: [
                [
                    119227,
                    119151
                ],
                512
            ],
            119232: [
                [
                    119228,
                    119151
                ],
                512
            ]
        },
        53760: {
            119362: [
                ,
                230
            ],
            119363: [
                ,
                230
            ],
            119364: [
                ,
                230
            ]
        },
        54272: {
            119808: [
                [
                    65
                ],
                256
            ],
            119809: [
                [
                    66
                ],
                256
            ],
            119810: [
                [
                    67
                ],
                256
            ],
            119811: [
                [
                    68
                ],
                256
            ],
            119812: [
                [
                    69
                ],
                256
            ],
            119813: [
                [
                    70
                ],
                256
            ],
            119814: [
                [
                    71
                ],
                256
            ],
            119815: [
                [
                    72
                ],
                256
            ],
            119816: [
                [
                    73
                ],
                256
            ],
            119817: [
                [
                    74
                ],
                256
            ],
            119818: [
                [
                    75
                ],
                256
            ],
            119819: [
                [
                    76
                ],
                256
            ],
            119820: [
                [
                    77
                ],
                256
            ],
            119821: [
                [
                    78
                ],
                256
            ],
            119822: [
                [
                    79
                ],
                256
            ],
            119823: [
                [
                    80
                ],
                256
            ],
            119824: [
                [
                    81
                ],
                256
            ],
            119825: [
                [
                    82
                ],
                256
            ],
            119826: [
                [
                    83
                ],
                256
            ],
            119827: [
                [
                    84
                ],
                256
            ],
            119828: [
                [
                    85
                ],
                256
            ],
            119829: [
                [
                    86
                ],
                256
            ],
            119830: [
                [
                    87
                ],
                256
            ],
            119831: [
                [
                    88
                ],
                256
            ],
            119832: [
                [
                    89
                ],
                256
            ],
            119833: [
                [
                    90
                ],
                256
            ],
            119834: [
                [
                    97
                ],
                256
            ],
            119835: [
                [
                    98
                ],
                256
            ],
            119836: [
                [
                    99
                ],
                256
            ],
            119837: [
                [
                    100
                ],
                256
            ],
            119838: [
                [
                    101
                ],
                256
            ],
            119839: [
                [
                    102
                ],
                256
            ],
            119840: [
                [
                    103
                ],
                256
            ],
            119841: [
                [
                    104
                ],
                256
            ],
            119842: [
                [
                    105
                ],
                256
            ],
            119843: [
                [
                    106
                ],
                256
            ],
            119844: [
                [
                    107
                ],
                256
            ],
            119845: [
                [
                    108
                ],
                256
            ],
            119846: [
                [
                    109
                ],
                256
            ],
            119847: [
                [
                    110
                ],
                256
            ],
            119848: [
                [
                    111
                ],
                256
            ],
            119849: [
                [
                    112
                ],
                256
            ],
            119850: [
                [
                    113
                ],
                256
            ],
            119851: [
                [
                    114
                ],
                256
            ],
            119852: [
                [
                    115
                ],
                256
            ],
            119853: [
                [
                    116
                ],
                256
            ],
            119854: [
                [
                    117
                ],
                256
            ],
            119855: [
                [
                    118
                ],
                256
            ],
            119856: [
                [
                    119
                ],
                256
            ],
            119857: [
                [
                    120
                ],
                256
            ],
            119858: [
                [
                    121
                ],
                256
            ],
            119859: [
                [
                    122
                ],
                256
            ],
            119860: [
                [
                    65
                ],
                256
            ],
            119861: [
                [
                    66
                ],
                256
            ],
            119862: [
                [
                    67
                ],
                256
            ],
            119863: [
                [
                    68
                ],
                256
            ],
            119864: [
                [
                    69
                ],
                256
            ],
            119865: [
                [
                    70
                ],
                256
            ],
            119866: [
                [
                    71
                ],
                256
            ],
            119867: [
                [
                    72
                ],
                256
            ],
            119868: [
                [
                    73
                ],
                256
            ],
            119869: [
                [
                    74
                ],
                256
            ],
            119870: [
                [
                    75
                ],
                256
            ],
            119871: [
                [
                    76
                ],
                256
            ],
            119872: [
                [
                    77
                ],
                256
            ],
            119873: [
                [
                    78
                ],
                256
            ],
            119874: [
                [
                    79
                ],
                256
            ],
            119875: [
                [
                    80
                ],
                256
            ],
            119876: [
                [
                    81
                ],
                256
            ],
            119877: [
                [
                    82
                ],
                256
            ],
            119878: [
                [
                    83
                ],
                256
            ],
            119879: [
                [
                    84
                ],
                256
            ],
            119880: [
                [
                    85
                ],
                256
            ],
            119881: [
                [
                    86
                ],
                256
            ],
            119882: [
                [
                    87
                ],
                256
            ],
            119883: [
                [
                    88
                ],
                256
            ],
            119884: [
                [
                    89
                ],
                256
            ],
            119885: [
                [
                    90
                ],
                256
            ],
            119886: [
                [
                    97
                ],
                256
            ],
            119887: [
                [
                    98
                ],
                256
            ],
            119888: [
                [
                    99
                ],
                256
            ],
            119889: [
                [
                    100
                ],
                256
            ],
            119890: [
                [
                    101
                ],
                256
            ],
            119891: [
                [
                    102
                ],
                256
            ],
            119892: [
                [
                    103
                ],
                256
            ],
            119894: [
                [
                    105
                ],
                256
            ],
            119895: [
                [
                    106
                ],
                256
            ],
            119896: [
                [
                    107
                ],
                256
            ],
            119897: [
                [
                    108
                ],
                256
            ],
            119898: [
                [
                    109
                ],
                256
            ],
            119899: [
                [
                    110
                ],
                256
            ],
            119900: [
                [
                    111
                ],
                256
            ],
            119901: [
                [
                    112
                ],
                256
            ],
            119902: [
                [
                    113
                ],
                256
            ],
            119903: [
                [
                    114
                ],
                256
            ],
            119904: [
                [
                    115
                ],
                256
            ],
            119905: [
                [
                    116
                ],
                256
            ],
            119906: [
                [
                    117
                ],
                256
            ],
            119907: [
                [
                    118
                ],
                256
            ],
            119908: [
                [
                    119
                ],
                256
            ],
            119909: [
                [
                    120
                ],
                256
            ],
            119910: [
                [
                    121
                ],
                256
            ],
            119911: [
                [
                    122
                ],
                256
            ],
            119912: [
                [
                    65
                ],
                256
            ],
            119913: [
                [
                    66
                ],
                256
            ],
            119914: [
                [
                    67
                ],
                256
            ],
            119915: [
                [
                    68
                ],
                256
            ],
            119916: [
                [
                    69
                ],
                256
            ],
            119917: [
                [
                    70
                ],
                256
            ],
            119918: [
                [
                    71
                ],
                256
            ],
            119919: [
                [
                    72
                ],
                256
            ],
            119920: [
                [
                    73
                ],
                256
            ],
            119921: [
                [
                    74
                ],
                256
            ],
            119922: [
                [
                    75
                ],
                256
            ],
            119923: [
                [
                    76
                ],
                256
            ],
            119924: [
                [
                    77
                ],
                256
            ],
            119925: [
                [
                    78
                ],
                256
            ],
            119926: [
                [
                    79
                ],
                256
            ],
            119927: [
                [
                    80
                ],
                256
            ],
            119928: [
                [
                    81
                ],
                256
            ],
            119929: [
                [
                    82
                ],
                256
            ],
            119930: [
                [
                    83
                ],
                256
            ],
            119931: [
                [
                    84
                ],
                256
            ],
            119932: [
                [
                    85
                ],
                256
            ],
            119933: [
                [
                    86
                ],
                256
            ],
            119934: [
                [
                    87
                ],
                256
            ],
            119935: [
                [
                    88
                ],
                256
            ],
            119936: [
                [
                    89
                ],
                256
            ],
            119937: [
                [
                    90
                ],
                256
            ],
            119938: [
                [
                    97
                ],
                256
            ],
            119939: [
                [
                    98
                ],
                256
            ],
            119940: [
                [
                    99
                ],
                256
            ],
            119941: [
                [
                    100
                ],
                256
            ],
            119942: [
                [
                    101
                ],
                256
            ],
            119943: [
                [
                    102
                ],
                256
            ],
            119944: [
                [
                    103
                ],
                256
            ],
            119945: [
                [
                    104
                ],
                256
            ],
            119946: [
                [
                    105
                ],
                256
            ],
            119947: [
                [
                    106
                ],
                256
            ],
            119948: [
                [
                    107
                ],
                256
            ],
            119949: [
                [
                    108
                ],
                256
            ],
            119950: [
                [
                    109
                ],
                256
            ],
            119951: [
                [
                    110
                ],
                256
            ],
            119952: [
                [
                    111
                ],
                256
            ],
            119953: [
                [
                    112
                ],
                256
            ],
            119954: [
                [
                    113
                ],
                256
            ],
            119955: [
                [
                    114
                ],
                256
            ],
            119956: [
                [
                    115
                ],
                256
            ],
            119957: [
                [
                    116
                ],
                256
            ],
            119958: [
                [
                    117
                ],
                256
            ],
            119959: [
                [
                    118
                ],
                256
            ],
            119960: [
                [
                    119
                ],
                256
            ],
            119961: [
                [
                    120
                ],
                256
            ],
            119962: [
                [
                    121
                ],
                256
            ],
            119963: [
                [
                    122
                ],
                256
            ],
            119964: [
                [
                    65
                ],
                256
            ],
            119966: [
                [
                    67
                ],
                256
            ],
            119967: [
                [
                    68
                ],
                256
            ],
            119970: [
                [
                    71
                ],
                256
            ],
            119973: [
                [
                    74
                ],
                256
            ],
            119974: [
                [
                    75
                ],
                256
            ],
            119977: [
                [
                    78
                ],
                256
            ],
            119978: [
                [
                    79
                ],
                256
            ],
            119979: [
                [
                    80
                ],
                256
            ],
            119980: [
                [
                    81
                ],
                256
            ],
            119982: [
                [
                    83
                ],
                256
            ],
            119983: [
                [
                    84
                ],
                256
            ],
            119984: [
                [
                    85
                ],
                256
            ],
            119985: [
                [
                    86
                ],
                256
            ],
            119986: [
                [
                    87
                ],
                256
            ],
            119987: [
                [
                    88
                ],
                256
            ],
            119988: [
                [
                    89
                ],
                256
            ],
            119989: [
                [
                    90
                ],
                256
            ],
            119990: [
                [
                    97
                ],
                256
            ],
            119991: [
                [
                    98
                ],
                256
            ],
            119992: [
                [
                    99
                ],
                256
            ],
            119993: [
                [
                    100
                ],
                256
            ],
            119995: [
                [
                    102
                ],
                256
            ],
            119997: [
                [
                    104
                ],
                256
            ],
            119998: [
                [
                    105
                ],
                256
            ],
            119999: [
                [
                    106
                ],
                256
            ],
            120000: [
                [
                    107
                ],
                256
            ],
            120001: [
                [
                    108
                ],
                256
            ],
            120002: [
                [
                    109
                ],
                256
            ],
            120003: [
                [
                    110
                ],
                256
            ],
            120005: [
                [
                    112
                ],
                256
            ],
            120006: [
                [
                    113
                ],
                256
            ],
            120007: [
                [
                    114
                ],
                256
            ],
            120008: [
                [
                    115
                ],
                256
            ],
            120009: [
                [
                    116
                ],
                256
            ],
            120010: [
                [
                    117
                ],
                256
            ],
            120011: [
                [
                    118
                ],
                256
            ],
            120012: [
                [
                    119
                ],
                256
            ],
            120013: [
                [
                    120
                ],
                256
            ],
            120014: [
                [
                    121
                ],
                256
            ],
            120015: [
                [
                    122
                ],
                256
            ],
            120016: [
                [
                    65
                ],
                256
            ],
            120017: [
                [
                    66
                ],
                256
            ],
            120018: [
                [
                    67
                ],
                256
            ],
            120019: [
                [
                    68
                ],
                256
            ],
            120020: [
                [
                    69
                ],
                256
            ],
            120021: [
                [
                    70
                ],
                256
            ],
            120022: [
                [
                    71
                ],
                256
            ],
            120023: [
                [
                    72
                ],
                256
            ],
            120024: [
                [
                    73
                ],
                256
            ],
            120025: [
                [
                    74
                ],
                256
            ],
            120026: [
                [
                    75
                ],
                256
            ],
            120027: [
                [
                    76
                ],
                256
            ],
            120028: [
                [
                    77
                ],
                256
            ],
            120029: [
                [
                    78
                ],
                256
            ],
            120030: [
                [
                    79
                ],
                256
            ],
            120031: [
                [
                    80
                ],
                256
            ],
            120032: [
                [
                    81
                ],
                256
            ],
            120033: [
                [
                    82
                ],
                256
            ],
            120034: [
                [
                    83
                ],
                256
            ],
            120035: [
                [
                    84
                ],
                256
            ],
            120036: [
                [
                    85
                ],
                256
            ],
            120037: [
                [
                    86
                ],
                256
            ],
            120038: [
                [
                    87
                ],
                256
            ],
            120039: [
                [
                    88
                ],
                256
            ],
            120040: [
                [
                    89
                ],
                256
            ],
            120041: [
                [
                    90
                ],
                256
            ],
            120042: [
                [
                    97
                ],
                256
            ],
            120043: [
                [
                    98
                ],
                256
            ],
            120044: [
                [
                    99
                ],
                256
            ],
            120045: [
                [
                    100
                ],
                256
            ],
            120046: [
                [
                    101
                ],
                256
            ],
            120047: [
                [
                    102
                ],
                256
            ],
            120048: [
                [
                    103
                ],
                256
            ],
            120049: [
                [
                    104
                ],
                256
            ],
            120050: [
                [
                    105
                ],
                256
            ],
            120051: [
                [
                    106
                ],
                256
            ],
            120052: [
                [
                    107
                ],
                256
            ],
            120053: [
                [
                    108
                ],
                256
            ],
            120054: [
                [
                    109
                ],
                256
            ],
            120055: [
                [
                    110
                ],
                256
            ],
            120056: [
                [
                    111
                ],
                256
            ],
            120057: [
                [
                    112
                ],
                256
            ],
            120058: [
                [
                    113
                ],
                256
            ],
            120059: [
                [
                    114
                ],
                256
            ],
            120060: [
                [
                    115
                ],
                256
            ],
            120061: [
                [
                    116
                ],
                256
            ],
            120062: [
                [
                    117
                ],
                256
            ],
            120063: [
                [
                    118
                ],
                256
            ]
        },
        54528: {
            120064: [
                [
                    119
                ],
                256
            ],
            120065: [
                [
                    120
                ],
                256
            ],
            120066: [
                [
                    121
                ],
                256
            ],
            120067: [
                [
                    122
                ],
                256
            ],
            120068: [
                [
                    65
                ],
                256
            ],
            120069: [
                [
                    66
                ],
                256
            ],
            120071: [
                [
                    68
                ],
                256
            ],
            120072: [
                [
                    69
                ],
                256
            ],
            120073: [
                [
                    70
                ],
                256
            ],
            120074: [
                [
                    71
                ],
                256
            ],
            120077: [
                [
                    74
                ],
                256
            ],
            120078: [
                [
                    75
                ],
                256
            ],
            120079: [
                [
                    76
                ],
                256
            ],
            120080: [
                [
                    77
                ],
                256
            ],
            120081: [
                [
                    78
                ],
                256
            ],
            120082: [
                [
                    79
                ],
                256
            ],
            120083: [
                [
                    80
                ],
                256
            ],
            120084: [
                [
                    81
                ],
                256
            ],
            120086: [
                [
                    83
                ],
                256
            ],
            120087: [
                [
                    84
                ],
                256
            ],
            120088: [
                [
                    85
                ],
                256
            ],
            120089: [
                [
                    86
                ],
                256
            ],
            120090: [
                [
                    87
                ],
                256
            ],
            120091: [
                [
                    88
                ],
                256
            ],
            120092: [
                [
                    89
                ],
                256
            ],
            120094: [
                [
                    97
                ],
                256
            ],
            120095: [
                [
                    98
                ],
                256
            ],
            120096: [
                [
                    99
                ],
                256
            ],
            120097: [
                [
                    100
                ],
                256
            ],
            120098: [
                [
                    101
                ],
                256
            ],
            120099: [
                [
                    102
                ],
                256
            ],
            120100: [
                [
                    103
                ],
                256
            ],
            120101: [
                [
                    104
                ],
                256
            ],
            120102: [
                [
                    105
                ],
                256
            ],
            120103: [
                [
                    106
                ],
                256
            ],
            120104: [
                [
                    107
                ],
                256
            ],
            120105: [
                [
                    108
                ],
                256
            ],
            120106: [
                [
                    109
                ],
                256
            ],
            120107: [
                [
                    110
                ],
                256
            ],
            120108: [
                [
                    111
                ],
                256
            ],
            120109: [
                [
                    112
                ],
                256
            ],
            120110: [
                [
                    113
                ],
                256
            ],
            120111: [
                [
                    114
                ],
                256
            ],
            120112: [
                [
                    115
                ],
                256
            ],
            120113: [
                [
                    116
                ],
                256
            ],
            120114: [
                [
                    117
                ],
                256
            ],
            120115: [
                [
                    118
                ],
                256
            ],
            120116: [
                [
                    119
                ],
                256
            ],
            120117: [
                [
                    120
                ],
                256
            ],
            120118: [
                [
                    121
                ],
                256
            ],
            120119: [
                [
                    122
                ],
                256
            ],
            120120: [
                [
                    65
                ],
                256
            ],
            120121: [
                [
                    66
                ],
                256
            ],
            120123: [
                [
                    68
                ],
                256
            ],
            120124: [
                [
                    69
                ],
                256
            ],
            120125: [
                [
                    70
                ],
                256
            ],
            120126: [
                [
                    71
                ],
                256
            ],
            120128: [
                [
                    73
                ],
                256
            ],
            120129: [
                [
                    74
                ],
                256
            ],
            120130: [
                [
                    75
                ],
                256
            ],
            120131: [
                [
                    76
                ],
                256
            ],
            120132: [
                [
                    77
                ],
                256
            ],
            120134: [
                [
                    79
                ],
                256
            ],
            120138: [
                [
                    83
                ],
                256
            ],
            120139: [
                [
                    84
                ],
                256
            ],
            120140: [
                [
                    85
                ],
                256
            ],
            120141: [
                [
                    86
                ],
                256
            ],
            120142: [
                [
                    87
                ],
                256
            ],
            120143: [
                [
                    88
                ],
                256
            ],
            120144: [
                [
                    89
                ],
                256
            ],
            120146: [
                [
                    97
                ],
                256
            ],
            120147: [
                [
                    98
                ],
                256
            ],
            120148: [
                [
                    99
                ],
                256
            ],
            120149: [
                [
                    100
                ],
                256
            ],
            120150: [
                [
                    101
                ],
                256
            ],
            120151: [
                [
                    102
                ],
                256
            ],
            120152: [
                [
                    103
                ],
                256
            ],
            120153: [
                [
                    104
                ],
                256
            ],
            120154: [
                [
                    105
                ],
                256
            ],
            120155: [
                [
                    106
                ],
                256
            ],
            120156: [
                [
                    107
                ],
                256
            ],
            120157: [
                [
                    108
                ],
                256
            ],
            120158: [
                [
                    109
                ],
                256
            ],
            120159: [
                [
                    110
                ],
                256
            ],
            120160: [
                [
                    111
                ],
                256
            ],
            120161: [
                [
                    112
                ],
                256
            ],
            120162: [
                [
                    113
                ],
                256
            ],
            120163: [
                [
                    114
                ],
                256
            ],
            120164: [
                [
                    115
                ],
                256
            ],
            120165: [
                [
                    116
                ],
                256
            ],
            120166: [
                [
                    117
                ],
                256
            ],
            120167: [
                [
                    118
                ],
                256
            ],
            120168: [
                [
                    119
                ],
                256
            ],
            120169: [
                [
                    120
                ],
                256
            ],
            120170: [
                [
                    121
                ],
                256
            ],
            120171: [
                [
                    122
                ],
                256
            ],
            120172: [
                [
                    65
                ],
                256
            ],
            120173: [
                [
                    66
                ],
                256
            ],
            120174: [
                [
                    67
                ],
                256
            ],
            120175: [
                [
                    68
                ],
                256
            ],
            120176: [
                [
                    69
                ],
                256
            ],
            120177: [
                [
                    70
                ],
                256
            ],
            120178: [
                [
                    71
                ],
                256
            ],
            120179: [
                [
                    72
                ],
                256
            ],
            120180: [
                [
                    73
                ],
                256
            ],
            120181: [
                [
                    74
                ],
                256
            ],
            120182: [
                [
                    75
                ],
                256
            ],
            120183: [
                [
                    76
                ],
                256
            ],
            120184: [
                [
                    77
                ],
                256
            ],
            120185: [
                [
                    78
                ],
                256
            ],
            120186: [
                [
                    79
                ],
                256
            ],
            120187: [
                [
                    80
                ],
                256
            ],
            120188: [
                [
                    81
                ],
                256
            ],
            120189: [
                [
                    82
                ],
                256
            ],
            120190: [
                [
                    83
                ],
                256
            ],
            120191: [
                [
                    84
                ],
                256
            ],
            120192: [
                [
                    85
                ],
                256
            ],
            120193: [
                [
                    86
                ],
                256
            ],
            120194: [
                [
                    87
                ],
                256
            ],
            120195: [
                [
                    88
                ],
                256
            ],
            120196: [
                [
                    89
                ],
                256
            ],
            120197: [
                [
                    90
                ],
                256
            ],
            120198: [
                [
                    97
                ],
                256
            ],
            120199: [
                [
                    98
                ],
                256
            ],
            120200: [
                [
                    99
                ],
                256
            ],
            120201: [
                [
                    100
                ],
                256
            ],
            120202: [
                [
                    101
                ],
                256
            ],
            120203: [
                [
                    102
                ],
                256
            ],
            120204: [
                [
                    103
                ],
                256
            ],
            120205: [
                [
                    104
                ],
                256
            ],
            120206: [
                [
                    105
                ],
                256
            ],
            120207: [
                [
                    106
                ],
                256
            ],
            120208: [
                [
                    107
                ],
                256
            ],
            120209: [
                [
                    108
                ],
                256
            ],
            120210: [
                [
                    109
                ],
                256
            ],
            120211: [
                [
                    110
                ],
                256
            ],
            120212: [
                [
                    111
                ],
                256
            ],
            120213: [
                [
                    112
                ],
                256
            ],
            120214: [
                [
                    113
                ],
                256
            ],
            120215: [
                [
                    114
                ],
                256
            ],
            120216: [
                [
                    115
                ],
                256
            ],
            120217: [
                [
                    116
                ],
                256
            ],
            120218: [
                [
                    117
                ],
                256
            ],
            120219: [
                [
                    118
                ],
                256
            ],
            120220: [
                [
                    119
                ],
                256
            ],
            120221: [
                [
                    120
                ],
                256
            ],
            120222: [
                [
                    121
                ],
                256
            ],
            120223: [
                [
                    122
                ],
                256
            ],
            120224: [
                [
                    65
                ],
                256
            ],
            120225: [
                [
                    66
                ],
                256
            ],
            120226: [
                [
                    67
                ],
                256
            ],
            120227: [
                [
                    68
                ],
                256
            ],
            120228: [
                [
                    69
                ],
                256
            ],
            120229: [
                [
                    70
                ],
                256
            ],
            120230: [
                [
                    71
                ],
                256
            ],
            120231: [
                [
                    72
                ],
                256
            ],
            120232: [
                [
                    73
                ],
                256
            ],
            120233: [
                [
                    74
                ],
                256
            ],
            120234: [
                [
                    75
                ],
                256
            ],
            120235: [
                [
                    76
                ],
                256
            ],
            120236: [
                [
                    77
                ],
                256
            ],
            120237: [
                [
                    78
                ],
                256
            ],
            120238: [
                [
                    79
                ],
                256
            ],
            120239: [
                [
                    80
                ],
                256
            ],
            120240: [
                [
                    81
                ],
                256
            ],
            120241: [
                [
                    82
                ],
                256
            ],
            120242: [
                [
                    83
                ],
                256
            ],
            120243: [
                [
                    84
                ],
                256
            ],
            120244: [
                [
                    85
                ],
                256
            ],
            120245: [
                [
                    86
                ],
                256
            ],
            120246: [
                [
                    87
                ],
                256
            ],
            120247: [
                [
                    88
                ],
                256
            ],
            120248: [
                [
                    89
                ],
                256
            ],
            120249: [
                [
                    90
                ],
                256
            ],
            120250: [
                [
                    97
                ],
                256
            ],
            120251: [
                [
                    98
                ],
                256
            ],
            120252: [
                [
                    99
                ],
                256
            ],
            120253: [
                [
                    100
                ],
                256
            ],
            120254: [
                [
                    101
                ],
                256
            ],
            120255: [
                [
                    102
                ],
                256
            ],
            120256: [
                [
                    103
                ],
                256
            ],
            120257: [
                [
                    104
                ],
                256
            ],
            120258: [
                [
                    105
                ],
                256
            ],
            120259: [
                [
                    106
                ],
                256
            ],
            120260: [
                [
                    107
                ],
                256
            ],
            120261: [
                [
                    108
                ],
                256
            ],
            120262: [
                [
                    109
                ],
                256
            ],
            120263: [
                [
                    110
                ],
                256
            ],
            120264: [
                [
                    111
                ],
                256
            ],
            120265: [
                [
                    112
                ],
                256
            ],
            120266: [
                [
                    113
                ],
                256
            ],
            120267: [
                [
                    114
                ],
                256
            ],
            120268: [
                [
                    115
                ],
                256
            ],
            120269: [
                [
                    116
                ],
                256
            ],
            120270: [
                [
                    117
                ],
                256
            ],
            120271: [
                [
                    118
                ],
                256
            ],
            120272: [
                [
                    119
                ],
                256
            ],
            120273: [
                [
                    120
                ],
                256
            ],
            120274: [
                [
                    121
                ],
                256
            ],
            120275: [
                [
                    122
                ],
                256
            ],
            120276: [
                [
                    65
                ],
                256
            ],
            120277: [
                [
                    66
                ],
                256
            ],
            120278: [
                [
                    67
                ],
                256
            ],
            120279: [
                [
                    68
                ],
                256
            ],
            120280: [
                [
                    69
                ],
                256
            ],
            120281: [
                [
                    70
                ],
                256
            ],
            120282: [
                [
                    71
                ],
                256
            ],
            120283: [
                [
                    72
                ],
                256
            ],
            120284: [
                [
                    73
                ],
                256
            ],
            120285: [
                [
                    74
                ],
                256
            ],
            120286: [
                [
                    75
                ],
                256
            ],
            120287: [
                [
                    76
                ],
                256
            ],
            120288: [
                [
                    77
                ],
                256
            ],
            120289: [
                [
                    78
                ],
                256
            ],
            120290: [
                [
                    79
                ],
                256
            ],
            120291: [
                [
                    80
                ],
                256
            ],
            120292: [
                [
                    81
                ],
                256
            ],
            120293: [
                [
                    82
                ],
                256
            ],
            120294: [
                [
                    83
                ],
                256
            ],
            120295: [
                [
                    84
                ],
                256
            ],
            120296: [
                [
                    85
                ],
                256
            ],
            120297: [
                [
                    86
                ],
                256
            ],
            120298: [
                [
                    87
                ],
                256
            ],
            120299: [
                [
                    88
                ],
                256
            ],
            120300: [
                [
                    89
                ],
                256
            ],
            120301: [
                [
                    90
                ],
                256
            ],
            120302: [
                [
                    97
                ],
                256
            ],
            120303: [
                [
                    98
                ],
                256
            ],
            120304: [
                [
                    99
                ],
                256
            ],
            120305: [
                [
                    100
                ],
                256
            ],
            120306: [
                [
                    101
                ],
                256
            ],
            120307: [
                [
                    102
                ],
                256
            ],
            120308: [
                [
                    103
                ],
                256
            ],
            120309: [
                [
                    104
                ],
                256
            ],
            120310: [
                [
                    105
                ],
                256
            ],
            120311: [
                [
                    106
                ],
                256
            ],
            120312: [
                [
                    107
                ],
                256
            ],
            120313: [
                [
                    108
                ],
                256
            ],
            120314: [
                [
                    109
                ],
                256
            ],
            120315: [
                [
                    110
                ],
                256
            ],
            120316: [
                [
                    111
                ],
                256
            ],
            120317: [
                [
                    112
                ],
                256
            ],
            120318: [
                [
                    113
                ],
                256
            ],
            120319: [
                [
                    114
                ],
                256
            ]
        },
        54784: {
            120320: [
                [
                    115
                ],
                256
            ],
            120321: [
                [
                    116
                ],
                256
            ],
            120322: [
                [
                    117
                ],
                256
            ],
            120323: [
                [
                    118
                ],
                256
            ],
            120324: [
                [
                    119
                ],
                256
            ],
            120325: [
                [
                    120
                ],
                256
            ],
            120326: [
                [
                    121
                ],
                256
            ],
            120327: [
                [
                    122
                ],
                256
            ],
            120328: [
                [
                    65
                ],
                256
            ],
            120329: [
                [
                    66
                ],
                256
            ],
            120330: [
                [
                    67
                ],
                256
            ],
            120331: [
                [
                    68
                ],
                256
            ],
            120332: [
                [
                    69
                ],
                256
            ],
            120333: [
                [
                    70
                ],
                256
            ],
            120334: [
                [
                    71
                ],
                256
            ],
            120335: [
                [
                    72
                ],
                256
            ],
            120336: [
                [
                    73
                ],
                256
            ],
            120337: [
                [
                    74
                ],
                256
            ],
            120338: [
                [
                    75
                ],
                256
            ],
            120339: [
                [
                    76
                ],
                256
            ],
            120340: [
                [
                    77
                ],
                256
            ],
            120341: [
                [
                    78
                ],
                256
            ],
            120342: [
                [
                    79
                ],
                256
            ],
            120343: [
                [
                    80
                ],
                256
            ],
            120344: [
                [
                    81
                ],
                256
            ],
            120345: [
                [
                    82
                ],
                256
            ],
            120346: [
                [
                    83
                ],
                256
            ],
            120347: [
                [
                    84
                ],
                256
            ],
            120348: [
                [
                    85
                ],
                256
            ],
            120349: [
                [
                    86
                ],
                256
            ],
            120350: [
                [
                    87
                ],
                256
            ],
            120351: [
                [
                    88
                ],
                256
            ],
            120352: [
                [
                    89
                ],
                256
            ],
            120353: [
                [
                    90
                ],
                256
            ],
            120354: [
                [
                    97
                ],
                256
            ],
            120355: [
                [
                    98
                ],
                256
            ],
            120356: [
                [
                    99
                ],
                256
            ],
            120357: [
                [
                    100
                ],
                256
            ],
            120358: [
                [
                    101
                ],
                256
            ],
            120359: [
                [
                    102
                ],
                256
            ],
            120360: [
                [
                    103
                ],
                256
            ],
            120361: [
                [
                    104
                ],
                256
            ],
            120362: [
                [
                    105
                ],
                256
            ],
            120363: [
                [
                    106
                ],
                256
            ],
            120364: [
                [
                    107
                ],
                256
            ],
            120365: [
                [
                    108
                ],
                256
            ],
            120366: [
                [
                    109
                ],
                256
            ],
            120367: [
                [
                    110
                ],
                256
            ],
            120368: [
                [
                    111
                ],
                256
            ],
            120369: [
                [
                    112
                ],
                256
            ],
            120370: [
                [
                    113
                ],
                256
            ],
            120371: [
                [
                    114
                ],
                256
            ],
            120372: [
                [
                    115
                ],
                256
            ],
            120373: [
                [
                    116
                ],
                256
            ],
            120374: [
                [
                    117
                ],
                256
            ],
            120375: [
                [
                    118
                ],
                256
            ],
            120376: [
                [
                    119
                ],
                256
            ],
            120377: [
                [
                    120
                ],
                256
            ],
            120378: [
                [
                    121
                ],
                256
            ],
            120379: [
                [
                    122
                ],
                256
            ],
            120380: [
                [
                    65
                ],
                256
            ],
            120381: [
                [
                    66
                ],
                256
            ],
            120382: [
                [
                    67
                ],
                256
            ],
            120383: [
                [
                    68
                ],
                256
            ],
            120384: [
                [
                    69
                ],
                256
            ],
            120385: [
                [
                    70
                ],
                256
            ],
            120386: [
                [
                    71
                ],
                256
            ],
            120387: [
                [
                    72
                ],
                256
            ],
            120388: [
                [
                    73
                ],
                256
            ],
            120389: [
                [
                    74
                ],
                256
            ],
            120390: [
                [
                    75
                ],
                256
            ],
            120391: [
                [
                    76
                ],
                256
            ],
            120392: [
                [
                    77
                ],
                256
            ],
            120393: [
                [
                    78
                ],
                256
            ],
            120394: [
                [
                    79
                ],
                256
            ],
            120395: [
                [
                    80
                ],
                256
            ],
            120396: [
                [
                    81
                ],
                256
            ],
            120397: [
                [
                    82
                ],
                256
            ],
            120398: [
                [
                    83
                ],
                256
            ],
            120399: [
                [
                    84
                ],
                256
            ],
            120400: [
                [
                    85
                ],
                256
            ],
            120401: [
                [
                    86
                ],
                256
            ],
            120402: [
                [
                    87
                ],
                256
            ],
            120403: [
                [
                    88
                ],
                256
            ],
            120404: [
                [
                    89
                ],
                256
            ],
            120405: [
                [
                    90
                ],
                256
            ],
            120406: [
                [
                    97
                ],
                256
            ],
            120407: [
                [
                    98
                ],
                256
            ],
            120408: [
                [
                    99
                ],
                256
            ],
            120409: [
                [
                    100
                ],
                256
            ],
            120410: [
                [
                    101
                ],
                256
            ],
            120411: [
                [
                    102
                ],
                256
            ],
            120412: [
                [
                    103
                ],
                256
            ],
            120413: [
                [
                    104
                ],
                256
            ],
            120414: [
                [
                    105
                ],
                256
            ],
            120415: [
                [
                    106
                ],
                256
            ],
            120416: [
                [
                    107
                ],
                256
            ],
            120417: [
                [
                    108
                ],
                256
            ],
            120418: [
                [
                    109
                ],
                256
            ],
            120419: [
                [
                    110
                ],
                256
            ],
            120420: [
                [
                    111
                ],
                256
            ],
            120421: [
                [
                    112
                ],
                256
            ],
            120422: [
                [
                    113
                ],
                256
            ],
            120423: [
                [
                    114
                ],
                256
            ],
            120424: [
                [
                    115
                ],
                256
            ],
            120425: [
                [
                    116
                ],
                256
            ],
            120426: [
                [
                    117
                ],
                256
            ],
            120427: [
                [
                    118
                ],
                256
            ],
            120428: [
                [
                    119
                ],
                256
            ],
            120429: [
                [
                    120
                ],
                256
            ],
            120430: [
                [
                    121
                ],
                256
            ],
            120431: [
                [
                    122
                ],
                256
            ],
            120432: [
                [
                    65
                ],
                256
            ],
            120433: [
                [
                    66
                ],
                256
            ],
            120434: [
                [
                    67
                ],
                256
            ],
            120435: [
                [
                    68
                ],
                256
            ],
            120436: [
                [
                    69
                ],
                256
            ],
            120437: [
                [
                    70
                ],
                256
            ],
            120438: [
                [
                    71
                ],
                256
            ],
            120439: [
                [
                    72
                ],
                256
            ],
            120440: [
                [
                    73
                ],
                256
            ],
            120441: [
                [
                    74
                ],
                256
            ],
            120442: [
                [
                    75
                ],
                256
            ],
            120443: [
                [
                    76
                ],
                256
            ],
            120444: [
                [
                    77
                ],
                256
            ],
            120445: [
                [
                    78
                ],
                256
            ],
            120446: [
                [
                    79
                ],
                256
            ],
            120447: [
                [
                    80
                ],
                256
            ],
            120448: [
                [
                    81
                ],
                256
            ],
            120449: [
                [
                    82
                ],
                256
            ],
            120450: [
                [
                    83
                ],
                256
            ],
            120451: [
                [
                    84
                ],
                256
            ],
            120452: [
                [
                    85
                ],
                256
            ],
            120453: [
                [
                    86
                ],
                256
            ],
            120454: [
                [
                    87
                ],
                256
            ],
            120455: [
                [
                    88
                ],
                256
            ],
            120456: [
                [
                    89
                ],
                256
            ],
            120457: [
                [
                    90
                ],
                256
            ],
            120458: [
                [
                    97
                ],
                256
            ],
            120459: [
                [
                    98
                ],
                256
            ],
            120460: [
                [
                    99
                ],
                256
            ],
            120461: [
                [
                    100
                ],
                256
            ],
            120462: [
                [
                    101
                ],
                256
            ],
            120463: [
                [
                    102
                ],
                256
            ],
            120464: [
                [
                    103
                ],
                256
            ],
            120465: [
                [
                    104
                ],
                256
            ],
            120466: [
                [
                    105
                ],
                256
            ],
            120467: [
                [
                    106
                ],
                256
            ],
            120468: [
                [
                    107
                ],
                256
            ],
            120469: [
                [
                    108
                ],
                256
            ],
            120470: [
                [
                    109
                ],
                256
            ],
            120471: [
                [
                    110
                ],
                256
            ],
            120472: [
                [
                    111
                ],
                256
            ],
            120473: [
                [
                    112
                ],
                256
            ],
            120474: [
                [
                    113
                ],
                256
            ],
            120475: [
                [
                    114
                ],
                256
            ],
            120476: [
                [
                    115
                ],
                256
            ],
            120477: [
                [
                    116
                ],
                256
            ],
            120478: [
                [
                    117
                ],
                256
            ],
            120479: [
                [
                    118
                ],
                256
            ],
            120480: [
                [
                    119
                ],
                256
            ],
            120481: [
                [
                    120
                ],
                256
            ],
            120482: [
                [
                    121
                ],
                256
            ],
            120483: [
                [
                    122
                ],
                256
            ],
            120484: [
                [
                    305
                ],
                256
            ],
            120485: [
                [
                    567
                ],
                256
            ],
            120488: [
                [
                    913
                ],
                256
            ],
            120489: [
                [
                    914
                ],
                256
            ],
            120490: [
                [
                    915
                ],
                256
            ],
            120491: [
                [
                    916
                ],
                256
            ],
            120492: [
                [
                    917
                ],
                256
            ],
            120493: [
                [
                    918
                ],
                256
            ],
            120494: [
                [
                    919
                ],
                256
            ],
            120495: [
                [
                    920
                ],
                256
            ],
            120496: [
                [
                    921
                ],
                256
            ],
            120497: [
                [
                    922
                ],
                256
            ],
            120498: [
                [
                    923
                ],
                256
            ],
            120499: [
                [
                    924
                ],
                256
            ],
            120500: [
                [
                    925
                ],
                256
            ],
            120501: [
                [
                    926
                ],
                256
            ],
            120502: [
                [
                    927
                ],
                256
            ],
            120503: [
                [
                    928
                ],
                256
            ],
            120504: [
                [
                    929
                ],
                256
            ],
            120505: [
                [
                    1012
                ],
                256
            ],
            120506: [
                [
                    931
                ],
                256
            ],
            120507: [
                [
                    932
                ],
                256
            ],
            120508: [
                [
                    933
                ],
                256
            ],
            120509: [
                [
                    934
                ],
                256
            ],
            120510: [
                [
                    935
                ],
                256
            ],
            120511: [
                [
                    936
                ],
                256
            ],
            120512: [
                [
                    937
                ],
                256
            ],
            120513: [
                [
                    8711
                ],
                256
            ],
            120514: [
                [
                    945
                ],
                256
            ],
            120515: [
                [
                    946
                ],
                256
            ],
            120516: [
                [
                    947
                ],
                256
            ],
            120517: [
                [
                    948
                ],
                256
            ],
            120518: [
                [
                    949
                ],
                256
            ],
            120519: [
                [
                    950
                ],
                256
            ],
            120520: [
                [
                    951
                ],
                256
            ],
            120521: [
                [
                    952
                ],
                256
            ],
            120522: [
                [
                    953
                ],
                256
            ],
            120523: [
                [
                    954
                ],
                256
            ],
            120524: [
                [
                    955
                ],
                256
            ],
            120525: [
                [
                    956
                ],
                256
            ],
            120526: [
                [
                    957
                ],
                256
            ],
            120527: [
                [
                    958
                ],
                256
            ],
            120528: [
                [
                    959
                ],
                256
            ],
            120529: [
                [
                    960
                ],
                256
            ],
            120530: [
                [
                    961
                ],
                256
            ],
            120531: [
                [
                    962
                ],
                256
            ],
            120532: [
                [
                    963
                ],
                256
            ],
            120533: [
                [
                    964
                ],
                256
            ],
            120534: [
                [
                    965
                ],
                256
            ],
            120535: [
                [
                    966
                ],
                256
            ],
            120536: [
                [
                    967
                ],
                256
            ],
            120537: [
                [
                    968
                ],
                256
            ],
            120538: [
                [
                    969
                ],
                256
            ],
            120539: [
                [
                    8706
                ],
                256
            ],
            120540: [
                [
                    1013
                ],
                256
            ],
            120541: [
                [
                    977
                ],
                256
            ],
            120542: [
                [
                    1008
                ],
                256
            ],
            120543: [
                [
                    981
                ],
                256
            ],
            120544: [
                [
                    1009
                ],
                256
            ],
            120545: [
                [
                    982
                ],
                256
            ],
            120546: [
                [
                    913
                ],
                256
            ],
            120547: [
                [
                    914
                ],
                256
            ],
            120548: [
                [
                    915
                ],
                256
            ],
            120549: [
                [
                    916
                ],
                256
            ],
            120550: [
                [
                    917
                ],
                256
            ],
            120551: [
                [
                    918
                ],
                256
            ],
            120552: [
                [
                    919
                ],
                256
            ],
            120553: [
                [
                    920
                ],
                256
            ],
            120554: [
                [
                    921
                ],
                256
            ],
            120555: [
                [
                    922
                ],
                256
            ],
            120556: [
                [
                    923
                ],
                256
            ],
            120557: [
                [
                    924
                ],
                256
            ],
            120558: [
                [
                    925
                ],
                256
            ],
            120559: [
                [
                    926
                ],
                256
            ],
            120560: [
                [
                    927
                ],
                256
            ],
            120561: [
                [
                    928
                ],
                256
            ],
            120562: [
                [
                    929
                ],
                256
            ],
            120563: [
                [
                    1012
                ],
                256
            ],
            120564: [
                [
                    931
                ],
                256
            ],
            120565: [
                [
                    932
                ],
                256
            ],
            120566: [
                [
                    933
                ],
                256
            ],
            120567: [
                [
                    934
                ],
                256
            ],
            120568: [
                [
                    935
                ],
                256
            ],
            120569: [
                [
                    936
                ],
                256
            ],
            120570: [
                [
                    937
                ],
                256
            ],
            120571: [
                [
                    8711
                ],
                256
            ],
            120572: [
                [
                    945
                ],
                256
            ],
            120573: [
                [
                    946
                ],
                256
            ],
            120574: [
                [
                    947
                ],
                256
            ],
            120575: [
                [
                    948
                ],
                256
            ]
        },
        55040: {
            120576: [
                [
                    949
                ],
                256
            ],
            120577: [
                [
                    950
                ],
                256
            ],
            120578: [
                [
                    951
                ],
                256
            ],
            120579: [
                [
                    952
                ],
                256
            ],
            120580: [
                [
                    953
                ],
                256
            ],
            120581: [
                [
                    954
                ],
                256
            ],
            120582: [
                [
                    955
                ],
                256
            ],
            120583: [
                [
                    956
                ],
                256
            ],
            120584: [
                [
                    957
                ],
                256
            ],
            120585: [
                [
                    958
                ],
                256
            ],
            120586: [
                [
                    959
                ],
                256
            ],
            120587: [
                [
                    960
                ],
                256
            ],
            120588: [
                [
                    961
                ],
                256
            ],
            120589: [
                [
                    962
                ],
                256
            ],
            120590: [
                [
                    963
                ],
                256
            ],
            120591: [
                [
                    964
                ],
                256
            ],
            120592: [
                [
                    965
                ],
                256
            ],
            120593: [
                [
                    966
                ],
                256
            ],
            120594: [
                [
                    967
                ],
                256
            ],
            120595: [
                [
                    968
                ],
                256
            ],
            120596: [
                [
                    969
                ],
                256
            ],
            120597: [
                [
                    8706
                ],
                256
            ],
            120598: [
                [
                    1013
                ],
                256
            ],
            120599: [
                [
                    977
                ],
                256
            ],
            120600: [
                [
                    1008
                ],
                256
            ],
            120601: [
                [
                    981
                ],
                256
            ],
            120602: [
                [
                    1009
                ],
                256
            ],
            120603: [
                [
                    982
                ],
                256
            ],
            120604: [
                [
                    913
                ],
                256
            ],
            120605: [
                [
                    914
                ],
                256
            ],
            120606: [
                [
                    915
                ],
                256
            ],
            120607: [
                [
                    916
                ],
                256
            ],
            120608: [
                [
                    917
                ],
                256
            ],
            120609: [
                [
                    918
                ],
                256
            ],
            120610: [
                [
                    919
                ],
                256
            ],
            120611: [
                [
                    920
                ],
                256
            ],
            120612: [
                [
                    921
                ],
                256
            ],
            120613: [
                [
                    922
                ],
                256
            ],
            120614: [
                [
                    923
                ],
                256
            ],
            120615: [
                [
                    924
                ],
                256
            ],
            120616: [
                [
                    925
                ],
                256
            ],
            120617: [
                [
                    926
                ],
                256
            ],
            120618: [
                [
                    927
                ],
                256
            ],
            120619: [
                [
                    928
                ],
                256
            ],
            120620: [
                [
                    929
                ],
                256
            ],
            120621: [
                [
                    1012
                ],
                256
            ],
            120622: [
                [
                    931
                ],
                256
            ],
            120623: [
                [
                    932
                ],
                256
            ],
            120624: [
                [
                    933
                ],
                256
            ],
            120625: [
                [
                    934
                ],
                256
            ],
            120626: [
                [
                    935
                ],
                256
            ],
            120627: [
                [
                    936
                ],
                256
            ],
            120628: [
                [
                    937
                ],
                256
            ],
            120629: [
                [
                    8711
                ],
                256
            ],
            120630: [
                [
                    945
                ],
                256
            ],
            120631: [
                [
                    946
                ],
                256
            ],
            120632: [
                [
                    947
                ],
                256
            ],
            120633: [
                [
                    948
                ],
                256
            ],
            120634: [
                [
                    949
                ],
                256
            ],
            120635: [
                [
                    950
                ],
                256
            ],
            120636: [
                [
                    951
                ],
                256
            ],
            120637: [
                [
                    952
                ],
                256
            ],
            120638: [
                [
                    953
                ],
                256
            ],
            120639: [
                [
                    954
                ],
                256
            ],
            120640: [
                [
                    955
                ],
                256
            ],
            120641: [
                [
                    956
                ],
                256
            ],
            120642: [
                [
                    957
                ],
                256
            ],
            120643: [
                [
                    958
                ],
                256
            ],
            120644: [
                [
                    959
                ],
                256
            ],
            120645: [
                [
                    960
                ],
                256
            ],
            120646: [
                [
                    961
                ],
                256
            ],
            120647: [
                [
                    962
                ],
                256
            ],
            120648: [
                [
                    963
                ],
                256
            ],
            120649: [
                [
                    964
                ],
                256
            ],
            120650: [
                [
                    965
                ],
                256
            ],
            120651: [
                [
                    966
                ],
                256
            ],
            120652: [
                [
                    967
                ],
                256
            ],
            120653: [
                [
                    968
                ],
                256
            ],
            120654: [
                [
                    969
                ],
                256
            ],
            120655: [
                [
                    8706
                ],
                256
            ],
            120656: [
                [
                    1013
                ],
                256
            ],
            120657: [
                [
                    977
                ],
                256
            ],
            120658: [
                [
                    1008
                ],
                256
            ],
            120659: [
                [
                    981
                ],
                256
            ],
            120660: [
                [
                    1009
                ],
                256
            ],
            120661: [
                [
                    982
                ],
                256
            ],
            120662: [
                [
                    913
                ],
                256
            ],
            120663: [
                [
                    914
                ],
                256
            ],
            120664: [
                [
                    915
                ],
                256
            ],
            120665: [
                [
                    916
                ],
                256
            ],
            120666: [
                [
                    917
                ],
                256
            ],
            120667: [
                [
                    918
                ],
                256
            ],
            120668: [
                [
                    919
                ],
                256
            ],
            120669: [
                [
                    920
                ],
                256
            ],
            120670: [
                [
                    921
                ],
                256
            ],
            120671: [
                [
                    922
                ],
                256
            ],
            120672: [
                [
                    923
                ],
                256
            ],
            120673: [
                [
                    924
                ],
                256
            ],
            120674: [
                [
                    925
                ],
                256
            ],
            120675: [
                [
                    926
                ],
                256
            ],
            120676: [
                [
                    927
                ],
                256
            ],
            120677: [
                [
                    928
                ],
                256
            ],
            120678: [
                [
                    929
                ],
                256
            ],
            120679: [
                [
                    1012
                ],
                256
            ],
            120680: [
                [
                    931
                ],
                256
            ],
            120681: [
                [
                    932
                ],
                256
            ],
            120682: [
                [
                    933
                ],
                256
            ],
            120683: [
                [
                    934
                ],
                256
            ],
            120684: [
                [
                    935
                ],
                256
            ],
            120685: [
                [
                    936
                ],
                256
            ],
            120686: [
                [
                    937
                ],
                256
            ],
            120687: [
                [
                    8711
                ],
                256
            ],
            120688: [
                [
                    945
                ],
                256
            ],
            120689: [
                [
                    946
                ],
                256
            ],
            120690: [
                [
                    947
                ],
                256
            ],
            120691: [
                [
                    948
                ],
                256
            ],
            120692: [
                [
                    949
                ],
                256
            ],
            120693: [
                [
                    950
                ],
                256
            ],
            120694: [
                [
                    951
                ],
                256
            ],
            120695: [
                [
                    952
                ],
                256
            ],
            120696: [
                [
                    953
                ],
                256
            ],
            120697: [
                [
                    954
                ],
                256
            ],
            120698: [
                [
                    955
                ],
                256
            ],
            120699: [
                [
                    956
                ],
                256
            ],
            120700: [
                [
                    957
                ],
                256
            ],
            120701: [
                [
                    958
                ],
                256
            ],
            120702: [
                [
                    959
                ],
                256
            ],
            120703: [
                [
                    960
                ],
                256
            ],
            120704: [
                [
                    961
                ],
                256
            ],
            120705: [
                [
                    962
                ],
                256
            ],
            120706: [
                [
                    963
                ],
                256
            ],
            120707: [
                [
                    964
                ],
                256
            ],
            120708: [
                [
                    965
                ],
                256
            ],
            120709: [
                [
                    966
                ],
                256
            ],
            120710: [
                [
                    967
                ],
                256
            ],
            120711: [
                [
                    968
                ],
                256
            ],
            120712: [
                [
                    969
                ],
                256
            ],
            120713: [
                [
                    8706
                ],
                256
            ],
            120714: [
                [
                    1013
                ],
                256
            ],
            120715: [
                [
                    977
                ],
                256
            ],
            120716: [
                [
                    1008
                ],
                256
            ],
            120717: [
                [
                    981
                ],
                256
            ],
            120718: [
                [
                    1009
                ],
                256
            ],
            120719: [
                [
                    982
                ],
                256
            ],
            120720: [
                [
                    913
                ],
                256
            ],
            120721: [
                [
                    914
                ],
                256
            ],
            120722: [
                [
                    915
                ],
                256
            ],
            120723: [
                [
                    916
                ],
                256
            ],
            120724: [
                [
                    917
                ],
                256
            ],
            120725: [
                [
                    918
                ],
                256
            ],
            120726: [
                [
                    919
                ],
                256
            ],
            120727: [
                [
                    920
                ],
                256
            ],
            120728: [
                [
                    921
                ],
                256
            ],
            120729: [
                [
                    922
                ],
                256
            ],
            120730: [
                [
                    923
                ],
                256
            ],
            120731: [
                [
                    924
                ],
                256
            ],
            120732: [
                [
                    925
                ],
                256
            ],
            120733: [
                [
                    926
                ],
                256
            ],
            120734: [
                [
                    927
                ],
                256
            ],
            120735: [
                [
                    928
                ],
                256
            ],
            120736: [
                [
                    929
                ],
                256
            ],
            120737: [
                [
                    1012
                ],
                256
            ],
            120738: [
                [
                    931
                ],
                256
            ],
            120739: [
                [
                    932
                ],
                256
            ],
            120740: [
                [
                    933
                ],
                256
            ],
            120741: [
                [
                    934
                ],
                256
            ],
            120742: [
                [
                    935
                ],
                256
            ],
            120743: [
                [
                    936
                ],
                256
            ],
            120744: [
                [
                    937
                ],
                256
            ],
            120745: [
                [
                    8711
                ],
                256
            ],
            120746: [
                [
                    945
                ],
                256
            ],
            120747: [
                [
                    946
                ],
                256
            ],
            120748: [
                [
                    947
                ],
                256
            ],
            120749: [
                [
                    948
                ],
                256
            ],
            120750: [
                [
                    949
                ],
                256
            ],
            120751: [
                [
                    950
                ],
                256
            ],
            120752: [
                [
                    951
                ],
                256
            ],
            120753: [
                [
                    952
                ],
                256
            ],
            120754: [
                [
                    953
                ],
                256
            ],
            120755: [
                [
                    954
                ],
                256
            ],
            120756: [
                [
                    955
                ],
                256
            ],
            120757: [
                [
                    956
                ],
                256
            ],
            120758: [
                [
                    957
                ],
                256
            ],
            120759: [
                [
                    958
                ],
                256
            ],
            120760: [
                [
                    959
                ],
                256
            ],
            120761: [
                [
                    960
                ],
                256
            ],
            120762: [
                [
                    961
                ],
                256
            ],
            120763: [
                [
                    962
                ],
                256
            ],
            120764: [
                [
                    963
                ],
                256
            ],
            120765: [
                [
                    964
                ],
                256
            ],
            120766: [
                [
                    965
                ],
                256
            ],
            120767: [
                [
                    966
                ],
                256
            ],
            120768: [
                [
                    967
                ],
                256
            ],
            120769: [
                [
                    968
                ],
                256
            ],
            120770: [
                [
                    969
                ],
                256
            ],
            120771: [
                [
                    8706
                ],
                256
            ],
            120772: [
                [
                    1013
                ],
                256
            ],
            120773: [
                [
                    977
                ],
                256
            ],
            120774: [
                [
                    1008
                ],
                256
            ],
            120775: [
                [
                    981
                ],
                256
            ],
            120776: [
                [
                    1009
                ],
                256
            ],
            120777: [
                [
                    982
                ],
                256
            ],
            120778: [
                [
                    988
                ],
                256
            ],
            120779: [
                [
                    989
                ],
                256
            ],
            120782: [
                [
                    48
                ],
                256
            ],
            120783: [
                [
                    49
                ],
                256
            ],
            120784: [
                [
                    50
                ],
                256
            ],
            120785: [
                [
                    51
                ],
                256
            ],
            120786: [
                [
                    52
                ],
                256
            ],
            120787: [
                [
                    53
                ],
                256
            ],
            120788: [
                [
                    54
                ],
                256
            ],
            120789: [
                [
                    55
                ],
                256
            ],
            120790: [
                [
                    56
                ],
                256
            ],
            120791: [
                [
                    57
                ],
                256
            ],
            120792: [
                [
                    48
                ],
                256
            ],
            120793: [
                [
                    49
                ],
                256
            ],
            120794: [
                [
                    50
                ],
                256
            ],
            120795: [
                [
                    51
                ],
                256
            ],
            120796: [
                [
                    52
                ],
                256
            ],
            120797: [
                [
                    53
                ],
                256
            ],
            120798: [
                [
                    54
                ],
                256
            ],
            120799: [
                [
                    55
                ],
                256
            ],
            120800: [
                [
                    56
                ],
                256
            ],
            120801: [
                [
                    57
                ],
                256
            ],
            120802: [
                [
                    48
                ],
                256
            ],
            120803: [
                [
                    49
                ],
                256
            ],
            120804: [
                [
                    50
                ],
                256
            ],
            120805: [
                [
                    51
                ],
                256
            ],
            120806: [
                [
                    52
                ],
                256
            ],
            120807: [
                [
                    53
                ],
                256
            ],
            120808: [
                [
                    54
                ],
                256
            ],
            120809: [
                [
                    55
                ],
                256
            ],
            120810: [
                [
                    56
                ],
                256
            ],
            120811: [
                [
                    57
                ],
                256
            ],
            120812: [
                [
                    48
                ],
                256
            ],
            120813: [
                [
                    49
                ],
                256
            ],
            120814: [
                [
                    50
                ],
                256
            ],
            120815: [
                [
                    51
                ],
                256
            ],
            120816: [
                [
                    52
                ],
                256
            ],
            120817: [
                [
                    53
                ],
                256
            ],
            120818: [
                [
                    54
                ],
                256
            ],
            120819: [
                [
                    55
                ],
                256
            ],
            120820: [
                [
                    56
                ],
                256
            ],
            120821: [
                [
                    57
                ],
                256
            ],
            120822: [
                [
                    48
                ],
                256
            ],
            120823: [
                [
                    49
                ],
                256
            ],
            120824: [
                [
                    50
                ],
                256
            ],
            120825: [
                [
                    51
                ],
                256
            ],
            120826: [
                [
                    52
                ],
                256
            ],
            120827: [
                [
                    53
                ],
                256
            ],
            120828: [
                [
                    54
                ],
                256
            ],
            120829: [
                [
                    55
                ],
                256
            ],
            120830: [
                [
                    56
                ],
                256
            ],
            120831: [
                [
                    57
                ],
                256
            ]
        },
        59392: {
            125136: [
                ,
                220
            ],
            125137: [
                ,
                220
            ],
            125138: [
                ,
                220
            ],
            125139: [
                ,
                220
            ],
            125140: [
                ,
                220
            ],
            125141: [
                ,
                220
            ],
            125142: [
                ,
                220
            ]
        },
        60928: {
            126464: [
                [
                    1575
                ],
                256
            ],
            126465: [
                [
                    1576
                ],
                256
            ],
            126466: [
                [
                    1580
                ],
                256
            ],
            126467: [
                [
                    1583
                ],
                256
            ],
            126469: [
                [
                    1608
                ],
                256
            ],
            126470: [
                [
                    1586
                ],
                256
            ],
            126471: [
                [
                    1581
                ],
                256
            ],
            126472: [
                [
                    1591
                ],
                256
            ],
            126473: [
                [
                    1610
                ],
                256
            ],
            126474: [
                [
                    1603
                ],
                256
            ],
            126475: [
                [
                    1604
                ],
                256
            ],
            126476: [
                [
                    1605
                ],
                256
            ],
            126477: [
                [
                    1606
                ],
                256
            ],
            126478: [
                [
                    1587
                ],
                256
            ],
            126479: [
                [
                    1593
                ],
                256
            ],
            126480: [
                [
                    1601
                ],
                256
            ],
            126481: [
                [
                    1589
                ],
                256
            ],
            126482: [
                [
                    1602
                ],
                256
            ],
            126483: [
                [
                    1585
                ],
                256
            ],
            126484: [
                [
                    1588
                ],
                256
            ],
            126485: [
                [
                    1578
                ],
                256
            ],
            126486: [
                [
                    1579
                ],
                256
            ],
            126487: [
                [
                    1582
                ],
                256
            ],
            126488: [
                [
                    1584
                ],
                256
            ],
            126489: [
                [
                    1590
                ],
                256
            ],
            126490: [
                [
                    1592
                ],
                256
            ],
            126491: [
                [
                    1594
                ],
                256
            ],
            126492: [
                [
                    1646
                ],
                256
            ],
            126493: [
                [
                    1722
                ],
                256
            ],
            126494: [
                [
                    1697
                ],
                256
            ],
            126495: [
                [
                    1647
                ],
                256
            ],
            126497: [
                [
                    1576
                ],
                256
            ],
            126498: [
                [
                    1580
                ],
                256
            ],
            126500: [
                [
                    1607
                ],
                256
            ],
            126503: [
                [
                    1581
                ],
                256
            ],
            126505: [
                [
                    1610
                ],
                256
            ],
            126506: [
                [
                    1603
                ],
                256
            ],
            126507: [
                [
                    1604
                ],
                256
            ],
            126508: [
                [
                    1605
                ],
                256
            ],
            126509: [
                [
                    1606
                ],
                256
            ],
            126510: [
                [
                    1587
                ],
                256
            ],
            126511: [
                [
                    1593
                ],
                256
            ],
            126512: [
                [
                    1601
                ],
                256
            ],
            126513: [
                [
                    1589
                ],
                256
            ],
            126514: [
                [
                    1602
                ],
                256
            ],
            126516: [
                [
                    1588
                ],
                256
            ],
            126517: [
                [
                    1578
                ],
                256
            ],
            126518: [
                [
                    1579
                ],
                256
            ],
            126519: [
                [
                    1582
                ],
                256
            ],
            126521: [
                [
                    1590
                ],
                256
            ],
            126523: [
                [
                    1594
                ],
                256
            ],
            126530: [
                [
                    1580
                ],
                256
            ],
            126535: [
                [
                    1581
                ],
                256
            ],
            126537: [
                [
                    1610
                ],
                256
            ],
            126539: [
                [
                    1604
                ],
                256
            ],
            126541: [
                [
                    1606
                ],
                256
            ],
            126542: [
                [
                    1587
                ],
                256
            ],
            126543: [
                [
                    1593
                ],
                256
            ],
            126545: [
                [
                    1589
                ],
                256
            ],
            126546: [
                [
                    1602
                ],
                256
            ],
            126548: [
                [
                    1588
                ],
                256
            ],
            126551: [
                [
                    1582
                ],
                256
            ],
            126553: [
                [
                    1590
                ],
                256
            ],
            126555: [
                [
                    1594
                ],
                256
            ],
            126557: [
                [
                    1722
                ],
                256
            ],
            126559: [
                [
                    1647
                ],
                256
            ],
            126561: [
                [
                    1576
                ],
                256
            ],
            126562: [
                [
                    1580
                ],
                256
            ],
            126564: [
                [
                    1607
                ],
                256
            ],
            126567: [
                [
                    1581
                ],
                256
            ],
            126568: [
                [
                    1591
                ],
                256
            ],
            126569: [
                [
                    1610
                ],
                256
            ],
            126570: [
                [
                    1603
                ],
                256
            ],
            126572: [
                [
                    1605
                ],
                256
            ],
            126573: [
                [
                    1606
                ],
                256
            ],
            126574: [
                [
                    1587
                ],
                256
            ],
            126575: [
                [
                    1593
                ],
                256
            ],
            126576: [
                [
                    1601
                ],
                256
            ],
            126577: [
                [
                    1589
                ],
                256
            ],
            126578: [
                [
                    1602
                ],
                256
            ],
            126580: [
                [
                    1588
                ],
                256
            ],
            126581: [
                [
                    1578
                ],
                256
            ],
            126582: [
                [
                    1579
                ],
                256
            ],
            126583: [
                [
                    1582
                ],
                256
            ],
            126585: [
                [
                    1590
                ],
                256
            ],
            126586: [
                [
                    1592
                ],
                256
            ],
            126587: [
                [
                    1594
                ],
                256
            ],
            126588: [
                [
                    1646
                ],
                256
            ],
            126590: [
                [
                    1697
                ],
                256
            ],
            126592: [
                [
                    1575
                ],
                256
            ],
            126593: [
                [
                    1576
                ],
                256
            ],
            126594: [
                [
                    1580
                ],
                256
            ],
            126595: [
                [
                    1583
                ],
                256
            ],
            126596: [
                [
                    1607
                ],
                256
            ],
            126597: [
                [
                    1608
                ],
                256
            ],
            126598: [
                [
                    1586
                ],
                256
            ],
            126599: [
                [
                    1581
                ],
                256
            ],
            126600: [
                [
                    1591
                ],
                256
            ],
            126601: [
                [
                    1610
                ],
                256
            ],
            126603: [
                [
                    1604
                ],
                256
            ],
            126604: [
                [
                    1605
                ],
                256
            ],
            126605: [
                [
                    1606
                ],
                256
            ],
            126606: [
                [
                    1587
                ],
                256
            ],
            126607: [
                [
                    1593
                ],
                256
            ],
            126608: [
                [
                    1601
                ],
                256
            ],
            126609: [
                [
                    1589
                ],
                256
            ],
            126610: [
                [
                    1602
                ],
                256
            ],
            126611: [
                [
                    1585
                ],
                256
            ],
            126612: [
                [
                    1588
                ],
                256
            ],
            126613: [
                [
                    1578
                ],
                256
            ],
            126614: [
                [
                    1579
                ],
                256
            ],
            126615: [
                [
                    1582
                ],
                256
            ],
            126616: [
                [
                    1584
                ],
                256
            ],
            126617: [
                [
                    1590
                ],
                256
            ],
            126618: [
                [
                    1592
                ],
                256
            ],
            126619: [
                [
                    1594
                ],
                256
            ],
            126625: [
                [
                    1576
                ],
                256
            ],
            126626: [
                [
                    1580
                ],
                256
            ],
            126627: [
                [
                    1583
                ],
                256
            ],
            126629: [
                [
                    1608
                ],
                256
            ],
            126630: [
                [
                    1586
                ],
                256
            ],
            126631: [
                [
                    1581
                ],
                256
            ],
            126632: [
                [
                    1591
                ],
                256
            ],
            126633: [
                [
                    1610
                ],
                256
            ],
            126635: [
                [
                    1604
                ],
                256
            ],
            126636: [
                [
                    1605
                ],
                256
            ],
            126637: [
                [
                    1606
                ],
                256
            ],
            126638: [
                [
                    1587
                ],
                256
            ],
            126639: [
                [
                    1593
                ],
                256
            ],
            126640: [
                [
                    1601
                ],
                256
            ],
            126641: [
                [
                    1589
                ],
                256
            ],
            126642: [
                [
                    1602
                ],
                256
            ],
            126643: [
                [
                    1585
                ],
                256
            ],
            126644: [
                [
                    1588
                ],
                256
            ],
            126645: [
                [
                    1578
                ],
                256
            ],
            126646: [
                [
                    1579
                ],
                256
            ],
            126647: [
                [
                    1582
                ],
                256
            ],
            126648: [
                [
                    1584
                ],
                256
            ],
            126649: [
                [
                    1590
                ],
                256
            ],
            126650: [
                [
                    1592
                ],
                256
            ],
            126651: [
                [
                    1594
                ],
                256
            ]
        },
        61696: {
            127232: [
                [
                    48,
                    46
                ],
                256
            ],
            127233: [
                [
                    48,
                    44
                ],
                256
            ],
            127234: [
                [
                    49,
                    44
                ],
                256
            ],
            127235: [
                [
                    50,
                    44
                ],
                256
            ],
            127236: [
                [
                    51,
                    44
                ],
                256
            ],
            127237: [
                [
                    52,
                    44
                ],
                256
            ],
            127238: [
                [
                    53,
                    44
                ],
                256
            ],
            127239: [
                [
                    54,
                    44
                ],
                256
            ],
            127240: [
                [
                    55,
                    44
                ],
                256
            ],
            127241: [
                [
                    56,
                    44
                ],
                256
            ],
            127242: [
                [
                    57,
                    44
                ],
                256
            ],
            127248: [
                [
                    40,
                    65,
                    41
                ],
                256
            ],
            127249: [
                [
                    40,
                    66,
                    41
                ],
                256
            ],
            127250: [
                [
                    40,
                    67,
                    41
                ],
                256
            ],
            127251: [
                [
                    40,
                    68,
                    41
                ],
                256
            ],
            127252: [
                [
                    40,
                    69,
                    41
                ],
                256
            ],
            127253: [
                [
                    40,
                    70,
                    41
                ],
                256
            ],
            127254: [
                [
                    40,
                    71,
                    41
                ],
                256
            ],
            127255: [
                [
                    40,
                    72,
                    41
                ],
                256
            ],
            127256: [
                [
                    40,
                    73,
                    41
                ],
                256
            ],
            127257: [
                [
                    40,
                    74,
                    41
                ],
                256
            ],
            127258: [
                [
                    40,
                    75,
                    41
                ],
                256
            ],
            127259: [
                [
                    40,
                    76,
                    41
                ],
                256
            ],
            127260: [
                [
                    40,
                    77,
                    41
                ],
                256
            ],
            127261: [
                [
                    40,
                    78,
                    41
                ],
                256
            ],
            127262: [
                [
                    40,
                    79,
                    41
                ],
                256
            ],
            127263: [
                [
                    40,
                    80,
                    41
                ],
                256
            ],
            127264: [
                [
                    40,
                    81,
                    41
                ],
                256
            ],
            127265: [
                [
                    40,
                    82,
                    41
                ],
                256
            ],
            127266: [
                [
                    40,
                    83,
                    41
                ],
                256
            ],
            127267: [
                [
                    40,
                    84,
                    41
                ],
                256
            ],
            127268: [
                [
                    40,
                    85,
                    41
                ],
                256
            ],
            127269: [
                [
                    40,
                    86,
                    41
                ],
                256
            ],
            127270: [
                [
                    40,
                    87,
                    41
                ],
                256
            ],
            127271: [
                [
                    40,
                    88,
                    41
                ],
                256
            ],
            127272: [
                [
                    40,
                    89,
                    41
                ],
                256
            ],
            127273: [
                [
                    40,
                    90,
                    41
                ],
                256
            ],
            127274: [
                [
                    12308,
                    83,
                    12309
                ],
                256
            ],
            127275: [
                [
                    67
                ],
                256
            ],
            127276: [
                [
                    82
                ],
                256
            ],
            127277: [
                [
                    67,
                    68
                ],
                256
            ],
            127278: [
                [
                    87,
                    90
                ],
                256
            ],
            127280: [
                [
                    65
                ],
                256
            ],
            127281: [
                [
                    66
                ],
                256
            ],
            127282: [
                [
                    67
                ],
                256
            ],
            127283: [
                [
                    68
                ],
                256
            ],
            127284: [
                [
                    69
                ],
                256
            ],
            127285: [
                [
                    70
                ],
                256
            ],
            127286: [
                [
                    71
                ],
                256
            ],
            127287: [
                [
                    72
                ],
                256
            ],
            127288: [
                [
                    73
                ],
                256
            ],
            127289: [
                [
                    74
                ],
                256
            ],
            127290: [
                [
                    75
                ],
                256
            ],
            127291: [
                [
                    76
                ],
                256
            ],
            127292: [
                [
                    77
                ],
                256
            ],
            127293: [
                [
                    78
                ],
                256
            ],
            127294: [
                [
                    79
                ],
                256
            ],
            127295: [
                [
                    80
                ],
                256
            ],
            127296: [
                [
                    81
                ],
                256
            ],
            127297: [
                [
                    82
                ],
                256
            ],
            127298: [
                [
                    83
                ],
                256
            ],
            127299: [
                [
                    84
                ],
                256
            ],
            127300: [
                [
                    85
                ],
                256
            ],
            127301: [
                [
                    86
                ],
                256
            ],
            127302: [
                [
                    87
                ],
                256
            ],
            127303: [
                [
                    88
                ],
                256
            ],
            127304: [
                [
                    89
                ],
                256
            ],
            127305: [
                [
                    90
                ],
                256
            ],
            127306: [
                [
                    72,
                    86
                ],
                256
            ],
            127307: [
                [
                    77,
                    86
                ],
                256
            ],
            127308: [
                [
                    83,
                    68
                ],
                256
            ],
            127309: [
                [
                    83,
                    83
                ],
                256
            ],
            127310: [
                [
                    80,
                    80,
                    86
                ],
                256
            ],
            127311: [
                [
                    87,
                    67
                ],
                256
            ],
            127338: [
                [
                    77,
                    67
                ],
                256
            ],
            127339: [
                [
                    77,
                    68
                ],
                256
            ],
            127376: [
                [
                    68,
                    74
                ],
                256
            ]
        },
        61952: {
            127488: [
                [
                    12411,
                    12363
                ],
                256
            ],
            127489: [
                [
                    12467,
                    12467
                ],
                256
            ],
            127490: [
                [
                    12469
                ],
                256
            ],
            127504: [
                [
                    25163
                ],
                256
            ],
            127505: [
                [
                    23383
                ],
                256
            ],
            127506: [
                [
                    21452
                ],
                256
            ],
            127507: [
                [
                    12487
                ],
                256
            ],
            127508: [
                [
                    20108
                ],
                256
            ],
            127509: [
                [
                    22810
                ],
                256
            ],
            127510: [
                [
                    35299
                ],
                256
            ],
            127511: [
                [
                    22825
                ],
                256
            ],
            127512: [
                [
                    20132
                ],
                256
            ],
            127513: [
                [
                    26144
                ],
                256
            ],
            127514: [
                [
                    28961
                ],
                256
            ],
            127515: [
                [
                    26009
                ],
                256
            ],
            127516: [
                [
                    21069
                ],
                256
            ],
            127517: [
                [
                    24460
                ],
                256
            ],
            127518: [
                [
                    20877
                ],
                256
            ],
            127519: [
                [
                    26032
                ],
                256
            ],
            127520: [
                [
                    21021
                ],
                256
            ],
            127521: [
                [
                    32066
                ],
                256
            ],
            127522: [
                [
                    29983
                ],
                256
            ],
            127523: [
                [
                    36009
                ],
                256
            ],
            127524: [
                [
                    22768
                ],
                256
            ],
            127525: [
                [
                    21561
                ],
                256
            ],
            127526: [
                [
                    28436
                ],
                256
            ],
            127527: [
                [
                    25237
                ],
                256
            ],
            127528: [
                [
                    25429
                ],
                256
            ],
            127529: [
                [
                    19968
                ],
                256
            ],
            127530: [
                [
                    19977
                ],
                256
            ],
            127531: [
                [
                    36938
                ],
                256
            ],
            127532: [
                [
                    24038
                ],
                256
            ],
            127533: [
                [
                    20013
                ],
                256
            ],
            127534: [
                [
                    21491
                ],
                256
            ],
            127535: [
                [
                    25351
                ],
                256
            ],
            127536: [
                [
                    36208
                ],
                256
            ],
            127537: [
                [
                    25171
                ],
                256
            ],
            127538: [
                [
                    31105
                ],
                256
            ],
            127539: [
                [
                    31354
                ],
                256
            ],
            127540: [
                [
                    21512
                ],
                256
            ],
            127541: [
                [
                    28288
                ],
                256
            ],
            127542: [
                [
                    26377
                ],
                256
            ],
            127543: [
                [
                    26376
                ],
                256
            ],
            127544: [
                [
                    30003
                ],
                256
            ],
            127545: [
                [
                    21106
                ],
                256
            ],
            127546: [
                [
                    21942
                ],
                256
            ],
            127552: [
                [
                    12308,
                    26412,
                    12309
                ],
                256
            ],
            127553: [
                [
                    12308,
                    19977,
                    12309
                ],
                256
            ],
            127554: [
                [
                    12308,
                    20108,
                    12309
                ],
                256
            ],
            127555: [
                [
                    12308,
                    23433,
                    12309
                ],
                256
            ],
            127556: [
                [
                    12308,
                    28857,
                    12309
                ],
                256
            ],
            127557: [
                [
                    12308,
                    25171,
                    12309
                ],
                256
            ],
            127558: [
                [
                    12308,
                    30423,
                    12309
                ],
                256
            ],
            127559: [
                [
                    12308,
                    21213,
                    12309
                ],
                256
            ],
            127560: [
                [
                    12308,
                    25943,
                    12309
                ],
                256
            ],
            127568: [
                [
                    24471
                ],
                256
            ],
            127569: [
                [
                    21487
                ],
                256
            ]
        },
        63488: {
            194560: [
                [
                    20029
                ]
            ],
            194561: [
                [
                    20024
                ]
            ],
            194562: [
                [
                    20033
                ]
            ],
            194563: [
                [
                    131362
                ]
            ],
            194564: [
                [
                    20320
                ]
            ],
            194565: [
                [
                    20398
                ]
            ],
            194566: [
                [
                    20411
                ]
            ],
            194567: [
                [
                    20482
                ]
            ],
            194568: [
                [
                    20602
                ]
            ],
            194569: [
                [
                    20633
                ]
            ],
            194570: [
                [
                    20711
                ]
            ],
            194571: [
                [
                    20687
                ]
            ],
            194572: [
                [
                    13470
                ]
            ],
            194573: [
                [
                    132666
                ]
            ],
            194574: [
                [
                    20813
                ]
            ],
            194575: [
                [
                    20820
                ]
            ],
            194576: [
                [
                    20836
                ]
            ],
            194577: [
                [
                    20855
                ]
            ],
            194578: [
                [
                    132380
                ]
            ],
            194579: [
                [
                    13497
                ]
            ],
            194580: [
                [
                    20839
                ]
            ],
            194581: [
                [
                    20877
                ]
            ],
            194582: [
                [
                    132427
                ]
            ],
            194583: [
                [
                    20887
                ]
            ],
            194584: [
                [
                    20900
                ]
            ],
            194585: [
                [
                    20172
                ]
            ],
            194586: [
                [
                    20908
                ]
            ],
            194587: [
                [
                    20917
                ]
            ],
            194588: [
                [
                    168415
                ]
            ],
            194589: [
                [
                    20981
                ]
            ],
            194590: [
                [
                    20995
                ]
            ],
            194591: [
                [
                    13535
                ]
            ],
            194592: [
                [
                    21051
                ]
            ],
            194593: [
                [
                    21062
                ]
            ],
            194594: [
                [
                    21106
                ]
            ],
            194595: [
                [
                    21111
                ]
            ],
            194596: [
                [
                    13589
                ]
            ],
            194597: [
                [
                    21191
                ]
            ],
            194598: [
                [
                    21193
                ]
            ],
            194599: [
                [
                    21220
                ]
            ],
            194600: [
                [
                    21242
                ]
            ],
            194601: [
                [
                    21253
                ]
            ],
            194602: [
                [
                    21254
                ]
            ],
            194603: [
                [
                    21271
                ]
            ],
            194604: [
                [
                    21321
                ]
            ],
            194605: [
                [
                    21329
                ]
            ],
            194606: [
                [
                    21338
                ]
            ],
            194607: [
                [
                    21363
                ]
            ],
            194608: [
                [
                    21373
                ]
            ],
            194609: [
                [
                    21375
                ]
            ],
            194610: [
                [
                    21375
                ]
            ],
            194611: [
                [
                    21375
                ]
            ],
            194612: [
                [
                    133676
                ]
            ],
            194613: [
                [
                    28784
                ]
            ],
            194614: [
                [
                    21450
                ]
            ],
            194615: [
                [
                    21471
                ]
            ],
            194616: [
                [
                    133987
                ]
            ],
            194617: [
                [
                    21483
                ]
            ],
            194618: [
                [
                    21489
                ]
            ],
            194619: [
                [
                    21510
                ]
            ],
            194620: [
                [
                    21662
                ]
            ],
            194621: [
                [
                    21560
                ]
            ],
            194622: [
                [
                    21576
                ]
            ],
            194623: [
                [
                    21608
                ]
            ],
            194624: [
                [
                    21666
                ]
            ],
            194625: [
                [
                    21750
                ]
            ],
            194626: [
                [
                    21776
                ]
            ],
            194627: [
                [
                    21843
                ]
            ],
            194628: [
                [
                    21859
                ]
            ],
            194629: [
                [
                    21892
                ]
            ],
            194630: [
                [
                    21892
                ]
            ],
            194631: [
                [
                    21913
                ]
            ],
            194632: [
                [
                    21931
                ]
            ],
            194633: [
                [
                    21939
                ]
            ],
            194634: [
                [
                    21954
                ]
            ],
            194635: [
                [
                    22294
                ]
            ],
            194636: [
                [
                    22022
                ]
            ],
            194637: [
                [
                    22295
                ]
            ],
            194638: [
                [
                    22097
                ]
            ],
            194639: [
                [
                    22132
                ]
            ],
            194640: [
                [
                    20999
                ]
            ],
            194641: [
                [
                    22766
                ]
            ],
            194642: [
                [
                    22478
                ]
            ],
            194643: [
                [
                    22516
                ]
            ],
            194644: [
                [
                    22541
                ]
            ],
            194645: [
                [
                    22411
                ]
            ],
            194646: [
                [
                    22578
                ]
            ],
            194647: [
                [
                    22577
                ]
            ],
            194648: [
                [
                    22700
                ]
            ],
            194649: [
                [
                    136420
                ]
            ],
            194650: [
                [
                    22770
                ]
            ],
            194651: [
                [
                    22775
                ]
            ],
            194652: [
                [
                    22790
                ]
            ],
            194653: [
                [
                    22810
                ]
            ],
            194654: [
                [
                    22818
                ]
            ],
            194655: [
                [
                    22882
                ]
            ],
            194656: [
                [
                    136872
                ]
            ],
            194657: [
                [
                    136938
                ]
            ],
            194658: [
                [
                    23020
                ]
            ],
            194659: [
                [
                    23067
                ]
            ],
            194660: [
                [
                    23079
                ]
            ],
            194661: [
                [
                    23000
                ]
            ],
            194662: [
                [
                    23142
                ]
            ],
            194663: [
                [
                    14062
                ]
            ],
            194664: [
                [
                    14076
                ]
            ],
            194665: [
                [
                    23304
                ]
            ],
            194666: [
                [
                    23358
                ]
            ],
            194667: [
                [
                    23358
                ]
            ],
            194668: [
                [
                    137672
                ]
            ],
            194669: [
                [
                    23491
                ]
            ],
            194670: [
                [
                    23512
                ]
            ],
            194671: [
                [
                    23527
                ]
            ],
            194672: [
                [
                    23539
                ]
            ],
            194673: [
                [
                    138008
                ]
            ],
            194674: [
                [
                    23551
                ]
            ],
            194675: [
                [
                    23558
                ]
            ],
            194676: [
                [
                    24403
                ]
            ],
            194677: [
                [
                    23586
                ]
            ],
            194678: [
                [
                    14209
                ]
            ],
            194679: [
                [
                    23648
                ]
            ],
            194680: [
                [
                    23662
                ]
            ],
            194681: [
                [
                    23744
                ]
            ],
            194682: [
                [
                    23693
                ]
            ],
            194683: [
                [
                    138724
                ]
            ],
            194684: [
                [
                    23875
                ]
            ],
            194685: [
                [
                    138726
                ]
            ],
            194686: [
                [
                    23918
                ]
            ],
            194687: [
                [
                    23915
                ]
            ],
            194688: [
                [
                    23932
                ]
            ],
            194689: [
                [
                    24033
                ]
            ],
            194690: [
                [
                    24034
                ]
            ],
            194691: [
                [
                    14383
                ]
            ],
            194692: [
                [
                    24061
                ]
            ],
            194693: [
                [
                    24104
                ]
            ],
            194694: [
                [
                    24125
                ]
            ],
            194695: [
                [
                    24169
                ]
            ],
            194696: [
                [
                    14434
                ]
            ],
            194697: [
                [
                    139651
                ]
            ],
            194698: [
                [
                    14460
                ]
            ],
            194699: [
                [
                    24240
                ]
            ],
            194700: [
                [
                    24243
                ]
            ],
            194701: [
                [
                    24246
                ]
            ],
            194702: [
                [
                    24266
                ]
            ],
            194703: [
                [
                    172946
                ]
            ],
            194704: [
                [
                    24318
                ]
            ],
            194705: [
                [
                    140081
                ]
            ],
            194706: [
                [
                    140081
                ]
            ],
            194707: [
                [
                    33281
                ]
            ],
            194708: [
                [
                    24354
                ]
            ],
            194709: [
                [
                    24354
                ]
            ],
            194710: [
                [
                    14535
                ]
            ],
            194711: [
                [
                    144056
                ]
            ],
            194712: [
                [
                    156122
                ]
            ],
            194713: [
                [
                    24418
                ]
            ],
            194714: [
                [
                    24427
                ]
            ],
            194715: [
                [
                    14563
                ]
            ],
            194716: [
                [
                    24474
                ]
            ],
            194717: [
                [
                    24525
                ]
            ],
            194718: [
                [
                    24535
                ]
            ],
            194719: [
                [
                    24569
                ]
            ],
            194720: [
                [
                    24705
                ]
            ],
            194721: [
                [
                    14650
                ]
            ],
            194722: [
                [
                    14620
                ]
            ],
            194723: [
                [
                    24724
                ]
            ],
            194724: [
                [
                    141012
                ]
            ],
            194725: [
                [
                    24775
                ]
            ],
            194726: [
                [
                    24904
                ]
            ],
            194727: [
                [
                    24908
                ]
            ],
            194728: [
                [
                    24910
                ]
            ],
            194729: [
                [
                    24908
                ]
            ],
            194730: [
                [
                    24954
                ]
            ],
            194731: [
                [
                    24974
                ]
            ],
            194732: [
                [
                    25010
                ]
            ],
            194733: [
                [
                    24996
                ]
            ],
            194734: [
                [
                    25007
                ]
            ],
            194735: [
                [
                    25054
                ]
            ],
            194736: [
                [
                    25074
                ]
            ],
            194737: [
                [
                    25078
                ]
            ],
            194738: [
                [
                    25104
                ]
            ],
            194739: [
                [
                    25115
                ]
            ],
            194740: [
                [
                    25181
                ]
            ],
            194741: [
                [
                    25265
                ]
            ],
            194742: [
                [
                    25300
                ]
            ],
            194743: [
                [
                    25424
                ]
            ],
            194744: [
                [
                    142092
                ]
            ],
            194745: [
                [
                    25405
                ]
            ],
            194746: [
                [
                    25340
                ]
            ],
            194747: [
                [
                    25448
                ]
            ],
            194748: [
                [
                    25475
                ]
            ],
            194749: [
                [
                    25572
                ]
            ],
            194750: [
                [
                    142321
                ]
            ],
            194751: [
                [
                    25634
                ]
            ],
            194752: [
                [
                    25541
                ]
            ],
            194753: [
                [
                    25513
                ]
            ],
            194754: [
                [
                    14894
                ]
            ],
            194755: [
                [
                    25705
                ]
            ],
            194756: [
                [
                    25726
                ]
            ],
            194757: [
                [
                    25757
                ]
            ],
            194758: [
                [
                    25719
                ]
            ],
            194759: [
                [
                    14956
                ]
            ],
            194760: [
                [
                    25935
                ]
            ],
            194761: [
                [
                    25964
                ]
            ],
            194762: [
                [
                    143370
                ]
            ],
            194763: [
                [
                    26083
                ]
            ],
            194764: [
                [
                    26360
                ]
            ],
            194765: [
                [
                    26185
                ]
            ],
            194766: [
                [
                    15129
                ]
            ],
            194767: [
                [
                    26257
                ]
            ],
            194768: [
                [
                    15112
                ]
            ],
            194769: [
                [
                    15076
                ]
            ],
            194770: [
                [
                    20882
                ]
            ],
            194771: [
                [
                    20885
                ]
            ],
            194772: [
                [
                    26368
                ]
            ],
            194773: [
                [
                    26268
                ]
            ],
            194774: [
                [
                    32941
                ]
            ],
            194775: [
                [
                    17369
                ]
            ],
            194776: [
                [
                    26391
                ]
            ],
            194777: [
                [
                    26395
                ]
            ],
            194778: [
                [
                    26401
                ]
            ],
            194779: [
                [
                    26462
                ]
            ],
            194780: [
                [
                    26451
                ]
            ],
            194781: [
                [
                    144323
                ]
            ],
            194782: [
                [
                    15177
                ]
            ],
            194783: [
                [
                    26618
                ]
            ],
            194784: [
                [
                    26501
                ]
            ],
            194785: [
                [
                    26706
                ]
            ],
            194786: [
                [
                    26757
                ]
            ],
            194787: [
                [
                    144493
                ]
            ],
            194788: [
                [
                    26766
                ]
            ],
            194789: [
                [
                    26655
                ]
            ],
            194790: [
                [
                    26900
                ]
            ],
            194791: [
                [
                    15261
                ]
            ],
            194792: [
                [
                    26946
                ]
            ],
            194793: [
                [
                    27043
                ]
            ],
            194794: [
                [
                    27114
                ]
            ],
            194795: [
                [
                    27304
                ]
            ],
            194796: [
                [
                    145059
                ]
            ],
            194797: [
                [
                    27355
                ]
            ],
            194798: [
                [
                    15384
                ]
            ],
            194799: [
                [
                    27425
                ]
            ],
            194800: [
                [
                    145575
                ]
            ],
            194801: [
                [
                    27476
                ]
            ],
            194802: [
                [
                    15438
                ]
            ],
            194803: [
                [
                    27506
                ]
            ],
            194804: [
                [
                    27551
                ]
            ],
            194805: [
                [
                    27578
                ]
            ],
            194806: [
                [
                    27579
                ]
            ],
            194807: [
                [
                    146061
                ]
            ],
            194808: [
                [
                    138507
                ]
            ],
            194809: [
                [
                    146170
                ]
            ],
            194810: [
                [
                    27726
                ]
            ],
            194811: [
                [
                    146620
                ]
            ],
            194812: [
                [
                    27839
                ]
            ],
            194813: [
                [
                    27853
                ]
            ],
            194814: [
                [
                    27751
                ]
            ],
            194815: [
                [
                    27926
                ]
            ]
        },
        63744: {
            63744: [
                [
                    35912
                ]
            ],
            63745: [
                [
                    26356
                ]
            ],
            63746: [
                [
                    36554
                ]
            ],
            63747: [
                [
                    36040
                ]
            ],
            63748: [
                [
                    28369
                ]
            ],
            63749: [
                [
                    20018
                ]
            ],
            63750: [
                [
                    21477
                ]
            ],
            63751: [
                [
                    40860
                ]
            ],
            63752: [
                [
                    40860
                ]
            ],
            63753: [
                [
                    22865
                ]
            ],
            63754: [
                [
                    37329
                ]
            ],
            63755: [
                [
                    21895
                ]
            ],
            63756: [
                [
                    22856
                ]
            ],
            63757: [
                [
                    25078
                ]
            ],
            63758: [
                [
                    30313
                ]
            ],
            63759: [
                [
                    32645
                ]
            ],
            63760: [
                [
                    34367
                ]
            ],
            63761: [
                [
                    34746
                ]
            ],
            63762: [
                [
                    35064
                ]
            ],
            63763: [
                [
                    37007
                ]
            ],
            63764: [
                [
                    27138
                ]
            ],
            63765: [
                [
                    27931
                ]
            ],
            63766: [
                [
                    28889
                ]
            ],
            63767: [
                [
                    29662
                ]
            ],
            63768: [
                [
                    33853
                ]
            ],
            63769: [
                [
                    37226
                ]
            ],
            63770: [
                [
                    39409
                ]
            ],
            63771: [
                [
                    20098
                ]
            ],
            63772: [
                [
                    21365
                ]
            ],
            63773: [
                [
                    27396
                ]
            ],
            63774: [
                [
                    29211
                ]
            ],
            63775: [
                [
                    34349
                ]
            ],
            63776: [
                [
                    40478
                ]
            ],
            63777: [
                [
                    23888
                ]
            ],
            63778: [
                [
                    28651
                ]
            ],
            63779: [
                [
                    34253
                ]
            ],
            63780: [
                [
                    35172
                ]
            ],
            63781: [
                [
                    25289
                ]
            ],
            63782: [
                [
                    33240
                ]
            ],
            63783: [
                [
                    34847
                ]
            ],
            63784: [
                [
                    24266
                ]
            ],
            63785: [
                [
                    26391
                ]
            ],
            63786: [
                [
                    28010
                ]
            ],
            63787: [
                [
                    29436
                ]
            ],
            63788: [
                [
                    37070
                ]
            ],
            63789: [
                [
                    20358
                ]
            ],
            63790: [
                [
                    20919
                ]
            ],
            63791: [
                [
                    21214
                ]
            ],
            63792: [
                [
                    25796
                ]
            ],
            63793: [
                [
                    27347
                ]
            ],
            63794: [
                [
                    29200
                ]
            ],
            63795: [
                [
                    30439
                ]
            ],
            63796: [
                [
                    32769
                ]
            ],
            63797: [
                [
                    34310
                ]
            ],
            63798: [
                [
                    34396
                ]
            ],
            63799: [
                [
                    36335
                ]
            ],
            63800: [
                [
                    38706
                ]
            ],
            63801: [
                [
                    39791
                ]
            ],
            63802: [
                [
                    40442
                ]
            ],
            63803: [
                [
                    30860
                ]
            ],
            63804: [
                [
                    31103
                ]
            ],
            63805: [
                [
                    32160
                ]
            ],
            63806: [
                [
                    33737
                ]
            ],
            63807: [
                [
                    37636
                ]
            ],
            63808: [
                [
                    40575
                ]
            ],
            63809: [
                [
                    35542
                ]
            ],
            63810: [
                [
                    22751
                ]
            ],
            63811: [
                [
                    24324
                ]
            ],
            63812: [
                [
                    31840
                ]
            ],
            63813: [
                [
                    32894
                ]
            ],
            63814: [
                [
                    29282
                ]
            ],
            63815: [
                [
                    30922
                ]
            ],
            63816: [
                [
                    36034
                ]
            ],
            63817: [
                [
                    38647
                ]
            ],
            63818: [
                [
                    22744
                ]
            ],
            63819: [
                [
                    23650
                ]
            ],
            63820: [
                [
                    27155
                ]
            ],
            63821: [
                [
                    28122
                ]
            ],
            63822: [
                [
                    28431
                ]
            ],
            63823: [
                [
                    32047
                ]
            ],
            63824: [
                [
                    32311
                ]
            ],
            63825: [
                [
                    38475
                ]
            ],
            63826: [
                [
                    21202
                ]
            ],
            63827: [
                [
                    32907
                ]
            ],
            63828: [
                [
                    20956
                ]
            ],
            63829: [
                [
                    20940
                ]
            ],
            63830: [
                [
                    31260
                ]
            ],
            63831: [
                [
                    32190
                ]
            ],
            63832: [
                [
                    33777
                ]
            ],
            63833: [
                [
                    38517
                ]
            ],
            63834: [
                [
                    35712
                ]
            ],
            63835: [
                [
                    25295
                ]
            ],
            63836: [
                [
                    27138
                ]
            ],
            63837: [
                [
                    35582
                ]
            ],
            63838: [
                [
                    20025
                ]
            ],
            63839: [
                [
                    23527
                ]
            ],
            63840: [
                [
                    24594
                ]
            ],
            63841: [
                [
                    29575
                ]
            ],
            63842: [
                [
                    30064
                ]
            ],
            63843: [
                [
                    21271
                ]
            ],
            63844: [
                [
                    30971
                ]
            ],
            63845: [
                [
                    20415
                ]
            ],
            63846: [
                [
                    24489
                ]
            ],
            63847: [
                [
                    19981
                ]
            ],
            63848: [
                [
                    27852
                ]
            ],
            63849: [
                [
                    25976
                ]
            ],
            63850: [
                [
                    32034
                ]
            ],
            63851: [
                [
                    21443
                ]
            ],
            63852: [
                [
                    22622
                ]
            ],
            63853: [
                [
                    30465
                ]
            ],
            63854: [
                [
                    33865
                ]
            ],
            63855: [
                [
                    35498
                ]
            ],
            63856: [
                [
                    27578
                ]
            ],
            63857: [
                [
                    36784
                ]
            ],
            63858: [
                [
                    27784
                ]
            ],
            63859: [
                [
                    25342
                ]
            ],
            63860: [
                [
                    33509
                ]
            ],
            63861: [
                [
                    25504
                ]
            ],
            63862: [
                [
                    30053
                ]
            ],
            63863: [
                [
                    20142
                ]
            ],
            63864: [
                [
                    20841
                ]
            ],
            63865: [
                [
                    20937
                ]
            ],
            63866: [
                [
                    26753
                ]
            ],
            63867: [
                [
                    31975
                ]
            ],
            63868: [
                [
                    33391
                ]
            ],
            63869: [
                [
                    35538
                ]
            ],
            63870: [
                [
                    37327
                ]
            ],
            63871: [
                [
                    21237
                ]
            ],
            63872: [
                [
                    21570
                ]
            ],
            63873: [
                [
                    22899
                ]
            ],
            63874: [
                [
                    24300
                ]
            ],
            63875: [
                [
                    26053
                ]
            ],
            63876: [
                [
                    28670
                ]
            ],
            63877: [
                [
                    31018
                ]
            ],
            63878: [
                [
                    38317
                ]
            ],
            63879: [
                [
                    39530
                ]
            ],
            63880: [
                [
                    40599
                ]
            ],
            63881: [
                [
                    40654
                ]
            ],
            63882: [
                [
                    21147
                ]
            ],
            63883: [
                [
                    26310
                ]
            ],
            63884: [
                [
                    27511
                ]
            ],
            63885: [
                [
                    36706
                ]
            ],
            63886: [
                [
                    24180
                ]
            ],
            63887: [
                [
                    24976
                ]
            ],
            63888: [
                [
                    25088
                ]
            ],
            63889: [
                [
                    25754
                ]
            ],
            63890: [
                [
                    28451
                ]
            ],
            63891: [
                [
                    29001
                ]
            ],
            63892: [
                [
                    29833
                ]
            ],
            63893: [
                [
                    31178
                ]
            ],
            63894: [
                [
                    32244
                ]
            ],
            63895: [
                [
                    32879
                ]
            ],
            63896: [
                [
                    36646
                ]
            ],
            63897: [
                [
                    34030
                ]
            ],
            63898: [
                [
                    36899
                ]
            ],
            63899: [
                [
                    37706
                ]
            ],
            63900: [
                [
                    21015
                ]
            ],
            63901: [
                [
                    21155
                ]
            ],
            63902: [
                [
                    21693
                ]
            ],
            63903: [
                [
                    28872
                ]
            ],
            63904: [
                [
                    35010
                ]
            ],
            63905: [
                [
                    35498
                ]
            ],
            63906: [
                [
                    24265
                ]
            ],
            63907: [
                [
                    24565
                ]
            ],
            63908: [
                [
                    25467
                ]
            ],
            63909: [
                [
                    27566
                ]
            ],
            63910: [
                [
                    31806
                ]
            ],
            63911: [
                [
                    29557
                ]
            ],
            63912: [
                [
                    20196
                ]
            ],
            63913: [
                [
                    22265
                ]
            ],
            63914: [
                [
                    23527
                ]
            ],
            63915: [
                [
                    23994
                ]
            ],
            63916: [
                [
                    24604
                ]
            ],
            63917: [
                [
                    29618
                ]
            ],
            63918: [
                [
                    29801
                ]
            ],
            63919: [
                [
                    32666
                ]
            ],
            63920: [
                [
                    32838
                ]
            ],
            63921: [
                [
                    37428
                ]
            ],
            63922: [
                [
                    38646
                ]
            ],
            63923: [
                [
                    38728
                ]
            ],
            63924: [
                [
                    38936
                ]
            ],
            63925: [
                [
                    20363
                ]
            ],
            63926: [
                [
                    31150
                ]
            ],
            63927: [
                [
                    37300
                ]
            ],
            63928: [
                [
                    38584
                ]
            ],
            63929: [
                [
                    24801
                ]
            ],
            63930: [
                [
                    20102
                ]
            ],
            63931: [
                [
                    20698
                ]
            ],
            63932: [
                [
                    23534
                ]
            ],
            63933: [
                [
                    23615
                ]
            ],
            63934: [
                [
                    26009
                ]
            ],
            63935: [
                [
                    27138
                ]
            ],
            63936: [
                [
                    29134
                ]
            ],
            63937: [
                [
                    30274
                ]
            ],
            63938: [
                [
                    34044
                ]
            ],
            63939: [
                [
                    36988
                ]
            ],
            63940: [
                [
                    40845
                ]
            ],
            63941: [
                [
                    26248
                ]
            ],
            63942: [
                [
                    38446
                ]
            ],
            63943: [
                [
                    21129
                ]
            ],
            63944: [
                [
                    26491
                ]
            ],
            63945: [
                [
                    26611
                ]
            ],
            63946: [
                [
                    27969
                ]
            ],
            63947: [
                [
                    28316
                ]
            ],
            63948: [
                [
                    29705
                ]
            ],
            63949: [
                [
                    30041
                ]
            ],
            63950: [
                [
                    30827
                ]
            ],
            63951: [
                [
                    32016
                ]
            ],
            63952: [
                [
                    39006
                ]
            ],
            63953: [
                [
                    20845
                ]
            ],
            63954: [
                [
                    25134
                ]
            ],
            63955: [
                [
                    38520
                ]
            ],
            63956: [
                [
                    20523
                ]
            ],
            63957: [
                [
                    23833
                ]
            ],
            63958: [
                [
                    28138
                ]
            ],
            63959: [
                [
                    36650
                ]
            ],
            63960: [
                [
                    24459
                ]
            ],
            63961: [
                [
                    24900
                ]
            ],
            63962: [
                [
                    26647
                ]
            ],
            63963: [
                [
                    29575
                ]
            ],
            63964: [
                [
                    38534
                ]
            ],
            63965: [
                [
                    21033
                ]
            ],
            63966: [
                [
                    21519
                ]
            ],
            63967: [
                [
                    23653
                ]
            ],
            63968: [
                [
                    26131
                ]
            ],
            63969: [
                [
                    26446
                ]
            ],
            63970: [
                [
                    26792
                ]
            ],
            63971: [
                [
                    27877
                ]
            ],
            63972: [
                [
                    29702
                ]
            ],
            63973: [
                [
                    30178
                ]
            ],
            63974: [
                [
                    32633
                ]
            ],
            63975: [
                [
                    35023
                ]
            ],
            63976: [
                [
                    35041
                ]
            ],
            63977: [
                [
                    37324
                ]
            ],
            63978: [
                [
                    38626
                ]
            ],
            63979: [
                [
                    21311
                ]
            ],
            63980: [
                [
                    28346
                ]
            ],
            63981: [
                [
                    21533
                ]
            ],
            63982: [
                [
                    29136
                ]
            ],
            63983: [
                [
                    29848
                ]
            ],
            63984: [
                [
                    34298
                ]
            ],
            63985: [
                [
                    38563
                ]
            ],
            63986: [
                [
                    40023
                ]
            ],
            63987: [
                [
                    40607
                ]
            ],
            63988: [
                [
                    26519
                ]
            ],
            63989: [
                [
                    28107
                ]
            ],
            63990: [
                [
                    33256
                ]
            ],
            63991: [
                [
                    31435
                ]
            ],
            63992: [
                [
                    31520
                ]
            ],
            63993: [
                [
                    31890
                ]
            ],
            63994: [
                [
                    29376
                ]
            ],
            63995: [
                [
                    28825
                ]
            ],
            63996: [
                [
                    35672
                ]
            ],
            63997: [
                [
                    20160
                ]
            ],
            63998: [
                [
                    33590
                ]
            ],
            63999: [
                [
                    21050
                ]
            ],
            194816: [
                [
                    27966
                ]
            ],
            194817: [
                [
                    28023
                ]
            ],
            194818: [
                [
                    27969
                ]
            ],
            194819: [
                [
                    28009
                ]
            ],
            194820: [
                [
                    28024
                ]
            ],
            194821: [
                [
                    28037
                ]
            ],
            194822: [
                [
                    146718
                ]
            ],
            194823: [
                [
                    27956
                ]
            ],
            194824: [
                [
                    28207
                ]
            ],
            194825: [
                [
                    28270
                ]
            ],
            194826: [
                [
                    15667
                ]
            ],
            194827: [
                [
                    28363
                ]
            ],
            194828: [
                [
                    28359
                ]
            ],
            194829: [
                [
                    147153
                ]
            ],
            194830: [
                [
                    28153
                ]
            ],
            194831: [
                [
                    28526
                ]
            ],
            194832: [
                [
                    147294
                ]
            ],
            194833: [
                [
                    147342
                ]
            ],
            194834: [
                [
                    28614
                ]
            ],
            194835: [
                [
                    28729
                ]
            ],
            194836: [
                [
                    28702
                ]
            ],
            194837: [
                [
                    28699
                ]
            ],
            194838: [
                [
                    15766
                ]
            ],
            194839: [
                [
                    28746
                ]
            ],
            194840: [
                [
                    28797
                ]
            ],
            194841: [
                [
                    28791
                ]
            ],
            194842: [
                [
                    28845
                ]
            ],
            194843: [
                [
                    132389
                ]
            ],
            194844: [
                [
                    28997
                ]
            ],
            194845: [
                [
                    148067
                ]
            ],
            194846: [
                [
                    29084
                ]
            ],
            194847: [
                [
                    148395
                ]
            ],
            194848: [
                [
                    29224
                ]
            ],
            194849: [
                [
                    29237
                ]
            ],
            194850: [
                [
                    29264
                ]
            ],
            194851: [
                [
                    149000
                ]
            ],
            194852: [
                [
                    29312
                ]
            ],
            194853: [
                [
                    29333
                ]
            ],
            194854: [
                [
                    149301
                ]
            ],
            194855: [
                [
                    149524
                ]
            ],
            194856: [
                [
                    29562
                ]
            ],
            194857: [
                [
                    29579
                ]
            ],
            194858: [
                [
                    16044
                ]
            ],
            194859: [
                [
                    29605
                ]
            ],
            194860: [
                [
                    16056
                ]
            ],
            194861: [
                [
                    16056
                ]
            ],
            194862: [
                [
                    29767
                ]
            ],
            194863: [
                [
                    29788
                ]
            ],
            194864: [
                [
                    29809
                ]
            ],
            194865: [
                [
                    29829
                ]
            ],
            194866: [
                [
                    29898
                ]
            ],
            194867: [
                [
                    16155
                ]
            ],
            194868: [
                [
                    29988
                ]
            ],
            194869: [
                [
                    150582
                ]
            ],
            194870: [
                [
                    30014
                ]
            ],
            194871: [
                [
                    150674
                ]
            ],
            194872: [
                [
                    30064
                ]
            ],
            194873: [
                [
                    139679
                ]
            ],
            194874: [
                [
                    30224
                ]
            ],
            194875: [
                [
                    151457
                ]
            ],
            194876: [
                [
                    151480
                ]
            ],
            194877: [
                [
                    151620
                ]
            ],
            194878: [
                [
                    16380
                ]
            ],
            194879: [
                [
                    16392
                ]
            ],
            194880: [
                [
                    30452
                ]
            ],
            194881: [
                [
                    151795
                ]
            ],
            194882: [
                [
                    151794
                ]
            ],
            194883: [
                [
                    151833
                ]
            ],
            194884: [
                [
                    151859
                ]
            ],
            194885: [
                [
                    30494
                ]
            ],
            194886: [
                [
                    30495
                ]
            ],
            194887: [
                [
                    30495
                ]
            ],
            194888: [
                [
                    30538
                ]
            ],
            194889: [
                [
                    16441
                ]
            ],
            194890: [
                [
                    30603
                ]
            ],
            194891: [
                [
                    16454
                ]
            ],
            194892: [
                [
                    16534
                ]
            ],
            194893: [
                [
                    152605
                ]
            ],
            194894: [
                [
                    30798
                ]
            ],
            194895: [
                [
                    30860
                ]
            ],
            194896: [
                [
                    30924
                ]
            ],
            194897: [
                [
                    16611
                ]
            ],
            194898: [
                [
                    153126
                ]
            ],
            194899: [
                [
                    31062
                ]
            ],
            194900: [
                [
                    153242
                ]
            ],
            194901: [
                [
                    153285
                ]
            ],
            194902: [
                [
                    31119
                ]
            ],
            194903: [
                [
                    31211
                ]
            ],
            194904: [
                [
                    16687
                ]
            ],
            194905: [
                [
                    31296
                ]
            ],
            194906: [
                [
                    31306
                ]
            ],
            194907: [
                [
                    31311
                ]
            ],
            194908: [
                [
                    153980
                ]
            ],
            194909: [
                [
                    154279
                ]
            ],
            194910: [
                [
                    154279
                ]
            ],
            194911: [
                [
                    31470
                ]
            ],
            194912: [
                [
                    16898
                ]
            ],
            194913: [
                [
                    154539
                ]
            ],
            194914: [
                [
                    31686
                ]
            ],
            194915: [
                [
                    31689
                ]
            ],
            194916: [
                [
                    16935
                ]
            ],
            194917: [
                [
                    154752
                ]
            ],
            194918: [
                [
                    31954
                ]
            ],
            194919: [
                [
                    17056
                ]
            ],
            194920: [
                [
                    31976
                ]
            ],
            194921: [
                [
                    31971
                ]
            ],
            194922: [
                [
                    32000
                ]
            ],
            194923: [
                [
                    155526
                ]
            ],
            194924: [
                [
                    32099
                ]
            ],
            194925: [
                [
                    17153
                ]
            ],
            194926: [
                [
                    32199
                ]
            ],
            194927: [
                [
                    32258
                ]
            ],
            194928: [
                [
                    32325
                ]
            ],
            194929: [
                [
                    17204
                ]
            ],
            194930: [
                [
                    156200
                ]
            ],
            194931: [
                [
                    156231
                ]
            ],
            194932: [
                [
                    17241
                ]
            ],
            194933: [
                [
                    156377
                ]
            ],
            194934: [
                [
                    32634
                ]
            ],
            194935: [
                [
                    156478
                ]
            ],
            194936: [
                [
                    32661
                ]
            ],
            194937: [
                [
                    32762
                ]
            ],
            194938: [
                [
                    32773
                ]
            ],
            194939: [
                [
                    156890
                ]
            ],
            194940: [
                [
                    156963
                ]
            ],
            194941: [
                [
                    32864
                ]
            ],
            194942: [
                [
                    157096
                ]
            ],
            194943: [
                [
                    32880
                ]
            ],
            194944: [
                [
                    144223
                ]
            ],
            194945: [
                [
                    17365
                ]
            ],
            194946: [
                [
                    32946
                ]
            ],
            194947: [
                [
                    33027
                ]
            ],
            194948: [
                [
                    17419
                ]
            ],
            194949: [
                [
                    33086
                ]
            ],
            194950: [
                [
                    23221
                ]
            ],
            194951: [
                [
                    157607
                ]
            ],
            194952: [
                [
                    157621
                ]
            ],
            194953: [
                [
                    144275
                ]
            ],
            194954: [
                [
                    144284
                ]
            ],
            194955: [
                [
                    33281
                ]
            ],
            194956: [
                [
                    33284
                ]
            ],
            194957: [
                [
                    36766
                ]
            ],
            194958: [
                [
                    17515
                ]
            ],
            194959: [
                [
                    33425
                ]
            ],
            194960: [
                [
                    33419
                ]
            ],
            194961: [
                [
                    33437
                ]
            ],
            194962: [
                [
                    21171
                ]
            ],
            194963: [
                [
                    33457
                ]
            ],
            194964: [
                [
                    33459
                ]
            ],
            194965: [
                [
                    33469
                ]
            ],
            194966: [
                [
                    33510
                ]
            ],
            194967: [
                [
                    158524
                ]
            ],
            194968: [
                [
                    33509
                ]
            ],
            194969: [
                [
                    33565
                ]
            ],
            194970: [
                [
                    33635
                ]
            ],
            194971: [
                [
                    33709
                ]
            ],
            194972: [
                [
                    33571
                ]
            ],
            194973: [
                [
                    33725
                ]
            ],
            194974: [
                [
                    33767
                ]
            ],
            194975: [
                [
                    33879
                ]
            ],
            194976: [
                [
                    33619
                ]
            ],
            194977: [
                [
                    33738
                ]
            ],
            194978: [
                [
                    33740
                ]
            ],
            194979: [
                [
                    33756
                ]
            ],
            194980: [
                [
                    158774
                ]
            ],
            194981: [
                [
                    159083
                ]
            ],
            194982: [
                [
                    158933
                ]
            ],
            194983: [
                [
                    17707
                ]
            ],
            194984: [
                [
                    34033
                ]
            ],
            194985: [
                [
                    34035
                ]
            ],
            194986: [
                [
                    34070
                ]
            ],
            194987: [
                [
                    160714
                ]
            ],
            194988: [
                [
                    34148
                ]
            ],
            194989: [
                [
                    159532
                ]
            ],
            194990: [
                [
                    17757
                ]
            ],
            194991: [
                [
                    17761
                ]
            ],
            194992: [
                [
                    159665
                ]
            ],
            194993: [
                [
                    159954
                ]
            ],
            194994: [
                [
                    17771
                ]
            ],
            194995: [
                [
                    34384
                ]
            ],
            194996: [
                [
                    34396
                ]
            ],
            194997: [
                [
                    34407
                ]
            ],
            194998: [
                [
                    34409
                ]
            ],
            194999: [
                [
                    34473
                ]
            ],
            195000: [
                [
                    34440
                ]
            ],
            195001: [
                [
                    34574
                ]
            ],
            195002: [
                [
                    34530
                ]
            ],
            195003: [
                [
                    34681
                ]
            ],
            195004: [
                [
                    34600
                ]
            ],
            195005: [
                [
                    34667
                ]
            ],
            195006: [
                [
                    34694
                ]
            ],
            195007: [
                [
                    17879
                ]
            ],
            195008: [
                [
                    34785
                ]
            ],
            195009: [
                [
                    34817
                ]
            ],
            195010: [
                [
                    17913
                ]
            ],
            195011: [
                [
                    34912
                ]
            ],
            195012: [
                [
                    34915
                ]
            ],
            195013: [
                [
                    161383
                ]
            ],
            195014: [
                [
                    35031
                ]
            ],
            195015: [
                [
                    35038
                ]
            ],
            195016: [
                [
                    17973
                ]
            ],
            195017: [
                [
                    35066
                ]
            ],
            195018: [
                [
                    13499
                ]
            ],
            195019: [
                [
                    161966
                ]
            ],
            195020: [
                [
                    162150
                ]
            ],
            195021: [
                [
                    18110
                ]
            ],
            195022: [
                [
                    18119
                ]
            ],
            195023: [
                [
                    35488
                ]
            ],
            195024: [
                [
                    35565
                ]
            ],
            195025: [
                [
                    35722
                ]
            ],
            195026: [
                [
                    35925
                ]
            ],
            195027: [
                [
                    162984
                ]
            ],
            195028: [
                [
                    36011
                ]
            ],
            195029: [
                [
                    36033
                ]
            ],
            195030: [
                [
                    36123
                ]
            ],
            195031: [
                [
                    36215
                ]
            ],
            195032: [
                [
                    163631
                ]
            ],
            195033: [
                [
                    133124
                ]
            ],
            195034: [
                [
                    36299
                ]
            ],
            195035: [
                [
                    36284
                ]
            ],
            195036: [
                [
                    36336
                ]
            ],
            195037: [
                [
                    133342
                ]
            ],
            195038: [
                [
                    36564
                ]
            ],
            195039: [
                [
                    36664
                ]
            ],
            195040: [
                [
                    165330
                ]
            ],
            195041: [
                [
                    165357
                ]
            ],
            195042: [
                [
                    37012
                ]
            ],
            195043: [
                [
                    37105
                ]
            ],
            195044: [
                [
                    37137
                ]
            ],
            195045: [
                [
                    165678
                ]
            ],
            195046: [
                [
                    37147
                ]
            ],
            195047: [
                [
                    37432
                ]
            ],
            195048: [
                [
                    37591
                ]
            ],
            195049: [
                [
                    37592
                ]
            ],
            195050: [
                [
                    37500
                ]
            ],
            195051: [
                [
                    37881
                ]
            ],
            195052: [
                [
                    37909
                ]
            ],
            195053: [
                [
                    166906
                ]
            ],
            195054: [
                [
                    38283
                ]
            ],
            195055: [
                [
                    18837
                ]
            ],
            195056: [
                [
                    38327
                ]
            ],
            195057: [
                [
                    167287
                ]
            ],
            195058: [
                [
                    18918
                ]
            ],
            195059: [
                [
                    38595
                ]
            ],
            195060: [
                [
                    23986
                ]
            ],
            195061: [
                [
                    38691
                ]
            ],
            195062: [
                [
                    168261
                ]
            ],
            195063: [
                [
                    168474
                ]
            ],
            195064: [
                [
                    19054
                ]
            ],
            195065: [
                [
                    19062
                ]
            ],
            195066: [
                [
                    38880
                ]
            ],
            195067: [
                [
                    168970
                ]
            ],
            195068: [
                [
                    19122
                ]
            ],
            195069: [
                [
                    169110
                ]
            ],
            195070: [
                [
                    38923
                ]
            ],
            195071: [
                [
                    38923
                ]
            ]
        },
        64000: {
            64000: [
                [
                    20999
                ]
            ],
            64001: [
                [
                    24230
                ]
            ],
            64002: [
                [
                    25299
                ]
            ],
            64003: [
                [
                    31958
                ]
            ],
            64004: [
                [
                    23429
                ]
            ],
            64005: [
                [
                    27934
                ]
            ],
            64006: [
                [
                    26292
                ]
            ],
            64007: [
                [
                    36667
                ]
            ],
            64008: [
                [
                    34892
                ]
            ],
            64009: [
                [
                    38477
                ]
            ],
            64010: [
                [
                    35211
                ]
            ],
            64011: [
                [
                    24275
                ]
            ],
            64012: [
                [
                    20800
                ]
            ],
            64013: [
                [
                    21952
                ]
            ],
            64016: [
                [
                    22618
                ]
            ],
            64018: [
                [
                    26228
                ]
            ],
            64021: [
                [
                    20958
                ]
            ],
            64022: [
                [
                    29482
                ]
            ],
            64023: [
                [
                    30410
                ]
            ],
            64024: [
                [
                    31036
                ]
            ],
            64025: [
                [
                    31070
                ]
            ],
            64026: [
                [
                    31077
                ]
            ],
            64027: [
                [
                    31119
                ]
            ],
            64028: [
                [
                    38742
                ]
            ],
            64029: [
                [
                    31934
                ]
            ],
            64030: [
                [
                    32701
                ]
            ],
            64032: [
                [
                    34322
                ]
            ],
            64034: [
                [
                    35576
                ]
            ],
            64037: [
                [
                    36920
                ]
            ],
            64038: [
                [
                    37117
                ]
            ],
            64042: [
                [
                    39151
                ]
            ],
            64043: [
                [
                    39164
                ]
            ],
            64044: [
                [
                    39208
                ]
            ],
            64045: [
                [
                    40372
                ]
            ],
            64046: [
                [
                    37086
                ]
            ],
            64047: [
                [
                    38583
                ]
            ],
            64048: [
                [
                    20398
                ]
            ],
            64049: [
                [
                    20711
                ]
            ],
            64050: [
                [
                    20813
                ]
            ],
            64051: [
                [
                    21193
                ]
            ],
            64052: [
                [
                    21220
                ]
            ],
            64053: [
                [
                    21329
                ]
            ],
            64054: [
                [
                    21917
                ]
            ],
            64055: [
                [
                    22022
                ]
            ],
            64056: [
                [
                    22120
                ]
            ],
            64057: [
                [
                    22592
                ]
            ],
            64058: [
                [
                    22696
                ]
            ],
            64059: [
                [
                    23652
                ]
            ],
            64060: [
                [
                    23662
                ]
            ],
            64061: [
                [
                    24724
                ]
            ],
            64062: [
                [
                    24936
                ]
            ],
            64063: [
                [
                    24974
                ]
            ],
            64064: [
                [
                    25074
                ]
            ],
            64065: [
                [
                    25935
                ]
            ],
            64066: [
                [
                    26082
                ]
            ],
            64067: [
                [
                    26257
                ]
            ],
            64068: [
                [
                    26757
                ]
            ],
            64069: [
                [
                    28023
                ]
            ],
            64070: [
                [
                    28186
                ]
            ],
            64071: [
                [
                    28450
                ]
            ],
            64072: [
                [
                    29038
                ]
            ],
            64073: [
                [
                    29227
                ]
            ],
            64074: [
                [
                    29730
                ]
            ],
            64075: [
                [
                    30865
                ]
            ],
            64076: [
                [
                    31038
                ]
            ],
            64077: [
                [
                    31049
                ]
            ],
            64078: [
                [
                    31048
                ]
            ],
            64079: [
                [
                    31056
                ]
            ],
            64080: [
                [
                    31062
                ]
            ],
            64081: [
                [
                    31069
                ]
            ],
            64082: [
                [
                    31117
                ]
            ],
            64083: [
                [
                    31118
                ]
            ],
            64084: [
                [
                    31296
                ]
            ],
            64085: [
                [
                    31361
                ]
            ],
            64086: [
                [
                    31680
                ]
            ],
            64087: [
                [
                    32244
                ]
            ],
            64088: [
                [
                    32265
                ]
            ],
            64089: [
                [
                    32321
                ]
            ],
            64090: [
                [
                    32626
                ]
            ],
            64091: [
                [
                    32773
                ]
            ],
            64092: [
                [
                    33261
                ]
            ],
            64093: [
                [
                    33401
                ]
            ],
            64094: [
                [
                    33401
                ]
            ],
            64095: [
                [
                    33879
                ]
            ],
            64096: [
                [
                    35088
                ]
            ],
            64097: [
                [
                    35222
                ]
            ],
            64098: [
                [
                    35585
                ]
            ],
            64099: [
                [
                    35641
                ]
            ],
            64100: [
                [
                    36051
                ]
            ],
            64101: [
                [
                    36104
                ]
            ],
            64102: [
                [
                    36790
                ]
            ],
            64103: [
                [
                    36920
                ]
            ],
            64104: [
                [
                    38627
                ]
            ],
            64105: [
                [
                    38911
                ]
            ],
            64106: [
                [
                    38971
                ]
            ],
            64107: [
                [
                    24693
                ]
            ],
            64108: [
                [
                    148206
                ]
            ],
            64109: [
                [
                    33304
                ]
            ],
            64112: [
                [
                    20006
                ]
            ],
            64113: [
                [
                    20917
                ]
            ],
            64114: [
                [
                    20840
                ]
            ],
            64115: [
                [
                    20352
                ]
            ],
            64116: [
                [
                    20805
                ]
            ],
            64117: [
                [
                    20864
                ]
            ],
            64118: [
                [
                    21191
                ]
            ],
            64119: [
                [
                    21242
                ]
            ],
            64120: [
                [
                    21917
                ]
            ],
            64121: [
                [
                    21845
                ]
            ],
            64122: [
                [
                    21913
                ]
            ],
            64123: [
                [
                    21986
                ]
            ],
            64124: [
                [
                    22618
                ]
            ],
            64125: [
                [
                    22707
                ]
            ],
            64126: [
                [
                    22852
                ]
            ],
            64127: [
                [
                    22868
                ]
            ],
            64128: [
                [
                    23138
                ]
            ],
            64129: [
                [
                    23336
                ]
            ],
            64130: [
                [
                    24274
                ]
            ],
            64131: [
                [
                    24281
                ]
            ],
            64132: [
                [
                    24425
                ]
            ],
            64133: [
                [
                    24493
                ]
            ],
            64134: [
                [
                    24792
                ]
            ],
            64135: [
                [
                    24910
                ]
            ],
            64136: [
                [
                    24840
                ]
            ],
            64137: [
                [
                    24974
                ]
            ],
            64138: [
                [
                    24928
                ]
            ],
            64139: [
                [
                    25074
                ]
            ],
            64140: [
                [
                    25140
                ]
            ],
            64141: [
                [
                    25540
                ]
            ],
            64142: [
                [
                    25628
                ]
            ],
            64143: [
                [
                    25682
                ]
            ],
            64144: [
                [
                    25942
                ]
            ],
            64145: [
                [
                    26228
                ]
            ],
            64146: [
                [
                    26391
                ]
            ],
            64147: [
                [
                    26395
                ]
            ],
            64148: [
                [
                    26454
                ]
            ],
            64149: [
                [
                    27513
                ]
            ],
            64150: [
                [
                    27578
                ]
            ],
            64151: [
                [
                    27969
                ]
            ],
            64152: [
                [
                    28379
                ]
            ],
            64153: [
                [
                    28363
                ]
            ],
            64154: [
                [
                    28450
                ]
            ],
            64155: [
                [
                    28702
                ]
            ],
            64156: [
                [
                    29038
                ]
            ],
            64157: [
                [
                    30631
                ]
            ],
            64158: [
                [
                    29237
                ]
            ],
            64159: [
                [
                    29359
                ]
            ],
            64160: [
                [
                    29482
                ]
            ],
            64161: [
                [
                    29809
                ]
            ],
            64162: [
                [
                    29958
                ]
            ],
            64163: [
                [
                    30011
                ]
            ],
            64164: [
                [
                    30237
                ]
            ],
            64165: [
                [
                    30239
                ]
            ],
            64166: [
                [
                    30410
                ]
            ],
            64167: [
                [
                    30427
                ]
            ],
            64168: [
                [
                    30452
                ]
            ],
            64169: [
                [
                    30538
                ]
            ],
            64170: [
                [
                    30528
                ]
            ],
            64171: [
                [
                    30924
                ]
            ],
            64172: [
                [
                    31409
                ]
            ],
            64173: [
                [
                    31680
                ]
            ],
            64174: [
                [
                    31867
                ]
            ],
            64175: [
                [
                    32091
                ]
            ],
            64176: [
                [
                    32244
                ]
            ],
            64177: [
                [
                    32574
                ]
            ],
            64178: [
                [
                    32773
                ]
            ],
            64179: [
                [
                    33618
                ]
            ],
            64180: [
                [
                    33775
                ]
            ],
            64181: [
                [
                    34681
                ]
            ],
            64182: [
                [
                    35137
                ]
            ],
            64183: [
                [
                    35206
                ]
            ],
            64184: [
                [
                    35222
                ]
            ],
            64185: [
                [
                    35519
                ]
            ],
            64186: [
                [
                    35576
                ]
            ],
            64187: [
                [
                    35531
                ]
            ],
            64188: [
                [
                    35585
                ]
            ],
            64189: [
                [
                    35582
                ]
            ],
            64190: [
                [
                    35565
                ]
            ],
            64191: [
                [
                    35641
                ]
            ],
            64192: [
                [
                    35722
                ]
            ],
            64193: [
                [
                    36104
                ]
            ],
            64194: [
                [
                    36664
                ]
            ],
            64195: [
                [
                    36978
                ]
            ],
            64196: [
                [
                    37273
                ]
            ],
            64197: [
                [
                    37494
                ]
            ],
            64198: [
                [
                    38524
                ]
            ],
            64199: [
                [
                    38627
                ]
            ],
            64200: [
                [
                    38742
                ]
            ],
            64201: [
                [
                    38875
                ]
            ],
            64202: [
                [
                    38911
                ]
            ],
            64203: [
                [
                    38923
                ]
            ],
            64204: [
                [
                    38971
                ]
            ],
            64205: [
                [
                    39698
                ]
            ],
            64206: [
                [
                    40860
                ]
            ],
            64207: [
                [
                    141386
                ]
            ],
            64208: [
                [
                    141380
                ]
            ],
            64209: [
                [
                    144341
                ]
            ],
            64210: [
                [
                    15261
                ]
            ],
            64211: [
                [
                    16408
                ]
            ],
            64212: [
                [
                    16441
                ]
            ],
            64213: [
                [
                    152137
                ]
            ],
            64214: [
                [
                    154832
                ]
            ],
            64215: [
                [
                    163539
                ]
            ],
            64216: [
                [
                    40771
                ]
            ],
            64217: [
                [
                    40846
                ]
            ],
            195072: [
                [
                    38953
                ]
            ],
            195073: [
                [
                    169398
                ]
            ],
            195074: [
                [
                    39138
                ]
            ],
            195075: [
                [
                    19251
                ]
            ],
            195076: [
                [
                    39209
                ]
            ],
            195077: [
                [
                    39335
                ]
            ],
            195078: [
                [
                    39362
                ]
            ],
            195079: [
                [
                    39422
                ]
            ],
            195080: [
                [
                    19406
                ]
            ],
            195081: [
                [
                    170800
                ]
            ],
            195082: [
                [
                    39698
                ]
            ],
            195083: [
                [
                    40000
                ]
            ],
            195084: [
                [
                    40189
                ]
            ],
            195085: [
                [
                    19662
                ]
            ],
            195086: [
                [
                    19693
                ]
            ],
            195087: [
                [
                    40295
                ]
            ],
            195088: [
                [
                    172238
                ]
            ],
            195089: [
                [
                    19704
                ]
            ],
            195090: [
                [
                    172293
                ]
            ],
            195091: [
                [
                    172558
                ]
            ],
            195092: [
                [
                    172689
                ]
            ],
            195093: [
                [
                    40635
                ]
            ],
            195094: [
                [
                    19798
                ]
            ],
            195095: [
                [
                    40697
                ]
            ],
            195096: [
                [
                    40702
                ]
            ],
            195097: [
                [
                    40709
                ]
            ],
            195098: [
                [
                    40719
                ]
            ],
            195099: [
                [
                    40726
                ]
            ],
            195100: [
                [
                    40763
                ]
            ],
            195101: [
                [
                    173568
                ]
            ]
        },
        64256: {
            64256: [
                [
                    102,
                    102
                ],
                256
            ],
            64257: [
                [
                    102,
                    105
                ],
                256
            ],
            64258: [
                [
                    102,
                    108
                ],
                256
            ],
            64259: [
                [
                    102,
                    102,
                    105
                ],
                256
            ],
            64260: [
                [
                    102,
                    102,
                    108
                ],
                256
            ],
            64261: [
                [
                    383,
                    116
                ],
                256
            ],
            64262: [
                [
                    115,
                    116
                ],
                256
            ],
            64275: [
                [
                    1396,
                    1398
                ],
                256
            ],
            64276: [
                [
                    1396,
                    1381
                ],
                256
            ],
            64277: [
                [
                    1396,
                    1387
                ],
                256
            ],
            64278: [
                [
                    1406,
                    1398
                ],
                256
            ],
            64279: [
                [
                    1396,
                    1389
                ],
                256
            ],
            64285: [
                [
                    1497,
                    1460
                ],
                512
            ],
            64286: [
                ,
                26
            ],
            64287: [
                [
                    1522,
                    1463
                ],
                512
            ],
            64288: [
                [
                    1506
                ],
                256
            ],
            64289: [
                [
                    1488
                ],
                256
            ],
            64290: [
                [
                    1491
                ],
                256
            ],
            64291: [
                [
                    1492
                ],
                256
            ],
            64292: [
                [
                    1499
                ],
                256
            ],
            64293: [
                [
                    1500
                ],
                256
            ],
            64294: [
                [
                    1501
                ],
                256
            ],
            64295: [
                [
                    1512
                ],
                256
            ],
            64296: [
                [
                    1514
                ],
                256
            ],
            64297: [
                [
                    43
                ],
                256
            ],
            64298: [
                [
                    1513,
                    1473
                ],
                512
            ],
            64299: [
                [
                    1513,
                    1474
                ],
                512
            ],
            64300: [
                [
                    64329,
                    1473
                ],
                512
            ],
            64301: [
                [
                    64329,
                    1474
                ],
                512
            ],
            64302: [
                [
                    1488,
                    1463
                ],
                512
            ],
            64303: [
                [
                    1488,
                    1464
                ],
                512
            ],
            64304: [
                [
                    1488,
                    1468
                ],
                512
            ],
            64305: [
                [
                    1489,
                    1468
                ],
                512
            ],
            64306: [
                [
                    1490,
                    1468
                ],
                512
            ],
            64307: [
                [
                    1491,
                    1468
                ],
                512
            ],
            64308: [
                [
                    1492,
                    1468
                ],
                512
            ],
            64309: [
                [
                    1493,
                    1468
                ],
                512
            ],
            64310: [
                [
                    1494,
                    1468
                ],
                512
            ],
            64312: [
                [
                    1496,
                    1468
                ],
                512
            ],
            64313: [
                [
                    1497,
                    1468
                ],
                512
            ],
            64314: [
                [
                    1498,
                    1468
                ],
                512
            ],
            64315: [
                [
                    1499,
                    1468
                ],
                512
            ],
            64316: [
                [
                    1500,
                    1468
                ],
                512
            ],
            64318: [
                [
                    1502,
                    1468
                ],
                512
            ],
            64320: [
                [
                    1504,
                    1468
                ],
                512
            ],
            64321: [
                [
                    1505,
                    1468
                ],
                512
            ],
            64323: [
                [
                    1507,
                    1468
                ],
                512
            ],
            64324: [
                [
                    1508,
                    1468
                ],
                512
            ],
            64326: [
                [
                    1510,
                    1468
                ],
                512
            ],
            64327: [
                [
                    1511,
                    1468
                ],
                512
            ],
            64328: [
                [
                    1512,
                    1468
                ],
                512
            ],
            64329: [
                [
                    1513,
                    1468
                ],
                512
            ],
            64330: [
                [
                    1514,
                    1468
                ],
                512
            ],
            64331: [
                [
                    1493,
                    1465
                ],
                512
            ],
            64332: [
                [
                    1489,
                    1471
                ],
                512
            ],
            64333: [
                [
                    1499,
                    1471
                ],
                512
            ],
            64334: [
                [
                    1508,
                    1471
                ],
                512
            ],
            64335: [
                [
                    1488,
                    1500
                ],
                256
            ],
            64336: [
                [
                    1649
                ],
                256
            ],
            64337: [
                [
                    1649
                ],
                256
            ],
            64338: [
                [
                    1659
                ],
                256
            ],
            64339: [
                [
                    1659
                ],
                256
            ],
            64340: [
                [
                    1659
                ],
                256
            ],
            64341: [
                [
                    1659
                ],
                256
            ],
            64342: [
                [
                    1662
                ],
                256
            ],
            64343: [
                [
                    1662
                ],
                256
            ],
            64344: [
                [
                    1662
                ],
                256
            ],
            64345: [
                [
                    1662
                ],
                256
            ],
            64346: [
                [
                    1664
                ],
                256
            ],
            64347: [
                [
                    1664
                ],
                256
            ],
            64348: [
                [
                    1664
                ],
                256
            ],
            64349: [
                [
                    1664
                ],
                256
            ],
            64350: [
                [
                    1658
                ],
                256
            ],
            64351: [
                [
                    1658
                ],
                256
            ],
            64352: [
                [
                    1658
                ],
                256
            ],
            64353: [
                [
                    1658
                ],
                256
            ],
            64354: [
                [
                    1663
                ],
                256
            ],
            64355: [
                [
                    1663
                ],
                256
            ],
            64356: [
                [
                    1663
                ],
                256
            ],
            64357: [
                [
                    1663
                ],
                256
            ],
            64358: [
                [
                    1657
                ],
                256
            ],
            64359: [
                [
                    1657
                ],
                256
            ],
            64360: [
                [
                    1657
                ],
                256
            ],
            64361: [
                [
                    1657
                ],
                256
            ],
            64362: [
                [
                    1700
                ],
                256
            ],
            64363: [
                [
                    1700
                ],
                256
            ],
            64364: [
                [
                    1700
                ],
                256
            ],
            64365: [
                [
                    1700
                ],
                256
            ],
            64366: [
                [
                    1702
                ],
                256
            ],
            64367: [
                [
                    1702
                ],
                256
            ],
            64368: [
                [
                    1702
                ],
                256
            ],
            64369: [
                [
                    1702
                ],
                256
            ],
            64370: [
                [
                    1668
                ],
                256
            ],
            64371: [
                [
                    1668
                ],
                256
            ],
            64372: [
                [
                    1668
                ],
                256
            ],
            64373: [
                [
                    1668
                ],
                256
            ],
            64374: [
                [
                    1667
                ],
                256
            ],
            64375: [
                [
                    1667
                ],
                256
            ],
            64376: [
                [
                    1667
                ],
                256
            ],
            64377: [
                [
                    1667
                ],
                256
            ],
            64378: [
                [
                    1670
                ],
                256
            ],
            64379: [
                [
                    1670
                ],
                256
            ],
            64380: [
                [
                    1670
                ],
                256
            ],
            64381: [
                [
                    1670
                ],
                256
            ],
            64382: [
                [
                    1671
                ],
                256
            ],
            64383: [
                [
                    1671
                ],
                256
            ],
            64384: [
                [
                    1671
                ],
                256
            ],
            64385: [
                [
                    1671
                ],
                256
            ],
            64386: [
                [
                    1677
                ],
                256
            ],
            64387: [
                [
                    1677
                ],
                256
            ],
            64388: [
                [
                    1676
                ],
                256
            ],
            64389: [
                [
                    1676
                ],
                256
            ],
            64390: [
                [
                    1678
                ],
                256
            ],
            64391: [
                [
                    1678
                ],
                256
            ],
            64392: [
                [
                    1672
                ],
                256
            ],
            64393: [
                [
                    1672
                ],
                256
            ],
            64394: [
                [
                    1688
                ],
                256
            ],
            64395: [
                [
                    1688
                ],
                256
            ],
            64396: [
                [
                    1681
                ],
                256
            ],
            64397: [
                [
                    1681
                ],
                256
            ],
            64398: [
                [
                    1705
                ],
                256
            ],
            64399: [
                [
                    1705
                ],
                256
            ],
            64400: [
                [
                    1705
                ],
                256
            ],
            64401: [
                [
                    1705
                ],
                256
            ],
            64402: [
                [
                    1711
                ],
                256
            ],
            64403: [
                [
                    1711
                ],
                256
            ],
            64404: [
                [
                    1711
                ],
                256
            ],
            64405: [
                [
                    1711
                ],
                256
            ],
            64406: [
                [
                    1715
                ],
                256
            ],
            64407: [
                [
                    1715
                ],
                256
            ],
            64408: [
                [
                    1715
                ],
                256
            ],
            64409: [
                [
                    1715
                ],
                256
            ],
            64410: [
                [
                    1713
                ],
                256
            ],
            64411: [
                [
                    1713
                ],
                256
            ],
            64412: [
                [
                    1713
                ],
                256
            ],
            64413: [
                [
                    1713
                ],
                256
            ],
            64414: [
                [
                    1722
                ],
                256
            ],
            64415: [
                [
                    1722
                ],
                256
            ],
            64416: [
                [
                    1723
                ],
                256
            ],
            64417: [
                [
                    1723
                ],
                256
            ],
            64418: [
                [
                    1723
                ],
                256
            ],
            64419: [
                [
                    1723
                ],
                256
            ],
            64420: [
                [
                    1728
                ],
                256
            ],
            64421: [
                [
                    1728
                ],
                256
            ],
            64422: [
                [
                    1729
                ],
                256
            ],
            64423: [
                [
                    1729
                ],
                256
            ],
            64424: [
                [
                    1729
                ],
                256
            ],
            64425: [
                [
                    1729
                ],
                256
            ],
            64426: [
                [
                    1726
                ],
                256
            ],
            64427: [
                [
                    1726
                ],
                256
            ],
            64428: [
                [
                    1726
                ],
                256
            ],
            64429: [
                [
                    1726
                ],
                256
            ],
            64430: [
                [
                    1746
                ],
                256
            ],
            64431: [
                [
                    1746
                ],
                256
            ],
            64432: [
                [
                    1747
                ],
                256
            ],
            64433: [
                [
                    1747
                ],
                256
            ],
            64467: [
                [
                    1709
                ],
                256
            ],
            64468: [
                [
                    1709
                ],
                256
            ],
            64469: [
                [
                    1709
                ],
                256
            ],
            64470: [
                [
                    1709
                ],
                256
            ],
            64471: [
                [
                    1735
                ],
                256
            ],
            64472: [
                [
                    1735
                ],
                256
            ],
            64473: [
                [
                    1734
                ],
                256
            ],
            64474: [
                [
                    1734
                ],
                256
            ],
            64475: [
                [
                    1736
                ],
                256
            ],
            64476: [
                [
                    1736
                ],
                256
            ],
            64477: [
                [
                    1655
                ],
                256
            ],
            64478: [
                [
                    1739
                ],
                256
            ],
            64479: [
                [
                    1739
                ],
                256
            ],
            64480: [
                [
                    1733
                ],
                256
            ],
            64481: [
                [
                    1733
                ],
                256
            ],
            64482: [
                [
                    1737
                ],
                256
            ],
            64483: [
                [
                    1737
                ],
                256
            ],
            64484: [
                [
                    1744
                ],
                256
            ],
            64485: [
                [
                    1744
                ],
                256
            ],
            64486: [
                [
                    1744
                ],
                256
            ],
            64487: [
                [
                    1744
                ],
                256
            ],
            64488: [
                [
                    1609
                ],
                256
            ],
            64489: [
                [
                    1609
                ],
                256
            ],
            64490: [
                [
                    1574,
                    1575
                ],
                256
            ],
            64491: [
                [
                    1574,
                    1575
                ],
                256
            ],
            64492: [
                [
                    1574,
                    1749
                ],
                256
            ],
            64493: [
                [
                    1574,
                    1749
                ],
                256
            ],
            64494: [
                [
                    1574,
                    1608
                ],
                256
            ],
            64495: [
                [
                    1574,
                    1608
                ],
                256
            ],
            64496: [
                [
                    1574,
                    1735
                ],
                256
            ],
            64497: [
                [
                    1574,
                    1735
                ],
                256
            ],
            64498: [
                [
                    1574,
                    1734
                ],
                256
            ],
            64499: [
                [
                    1574,
                    1734
                ],
                256
            ],
            64500: [
                [
                    1574,
                    1736
                ],
                256
            ],
            64501: [
                [
                    1574,
                    1736
                ],
                256
            ],
            64502: [
                [
                    1574,
                    1744
                ],
                256
            ],
            64503: [
                [
                    1574,
                    1744
                ],
                256
            ],
            64504: [
                [
                    1574,
                    1744
                ],
                256
            ],
            64505: [
                [
                    1574,
                    1609
                ],
                256
            ],
            64506: [
                [
                    1574,
                    1609
                ],
                256
            ],
            64507: [
                [
                    1574,
                    1609
                ],
                256
            ],
            64508: [
                [
                    1740
                ],
                256
            ],
            64509: [
                [
                    1740
                ],
                256
            ],
            64510: [
                [
                    1740
                ],
                256
            ],
            64511: [
                [
                    1740
                ],
                256
            ]
        },
        64512: {
            64512: [
                [
                    1574,
                    1580
                ],
                256
            ],
            64513: [
                [
                    1574,
                    1581
                ],
                256
            ],
            64514: [
                [
                    1574,
                    1605
                ],
                256
            ],
            64515: [
                [
                    1574,
                    1609
                ],
                256
            ],
            64516: [
                [
                    1574,
                    1610
                ],
                256
            ],
            64517: [
                [
                    1576,
                    1580
                ],
                256
            ],
            64518: [
                [
                    1576,
                    1581
                ],
                256
            ],
            64519: [
                [
                    1576,
                    1582
                ],
                256
            ],
            64520: [
                [
                    1576,
                    1605
                ],
                256
            ],
            64521: [
                [
                    1576,
                    1609
                ],
                256
            ],
            64522: [
                [
                    1576,
                    1610
                ],
                256
            ],
            64523: [
                [
                    1578,
                    1580
                ],
                256
            ],
            64524: [
                [
                    1578,
                    1581
                ],
                256
            ],
            64525: [
                [
                    1578,
                    1582
                ],
                256
            ],
            64526: [
                [
                    1578,
                    1605
                ],
                256
            ],
            64527: [
                [
                    1578,
                    1609
                ],
                256
            ],
            64528: [
                [
                    1578,
                    1610
                ],
                256
            ],
            64529: [
                [
                    1579,
                    1580
                ],
                256
            ],
            64530: [
                [
                    1579,
                    1605
                ],
                256
            ],
            64531: [
                [
                    1579,
                    1609
                ],
                256
            ],
            64532: [
                [
                    1579,
                    1610
                ],
                256
            ],
            64533: [
                [
                    1580,
                    1581
                ],
                256
            ],
            64534: [
                [
                    1580,
                    1605
                ],
                256
            ],
            64535: [
                [
                    1581,
                    1580
                ],
                256
            ],
            64536: [
                [
                    1581,
                    1605
                ],
                256
            ],
            64537: [
                [
                    1582,
                    1580
                ],
                256
            ],
            64538: [
                [
                    1582,
                    1581
                ],
                256
            ],
            64539: [
                [
                    1582,
                    1605
                ],
                256
            ],
            64540: [
                [
                    1587,
                    1580
                ],
                256
            ],
            64541: [
                [
                    1587,
                    1581
                ],
                256
            ],
            64542: [
                [
                    1587,
                    1582
                ],
                256
            ],
            64543: [
                [
                    1587,
                    1605
                ],
                256
            ],
            64544: [
                [
                    1589,
                    1581
                ],
                256
            ],
            64545: [
                [
                    1589,
                    1605
                ],
                256
            ],
            64546: [
                [
                    1590,
                    1580
                ],
                256
            ],
            64547: [
                [
                    1590,
                    1581
                ],
                256
            ],
            64548: [
                [
                    1590,
                    1582
                ],
                256
            ],
            64549: [
                [
                    1590,
                    1605
                ],
                256
            ],
            64550: [
                [
                    1591,
                    1581
                ],
                256
            ],
            64551: [
                [
                    1591,
                    1605
                ],
                256
            ],
            64552: [
                [
                    1592,
                    1605
                ],
                256
            ],
            64553: [
                [
                    1593,
                    1580
                ],
                256
            ],
            64554: [
                [
                    1593,
                    1605
                ],
                256
            ],
            64555: [
                [
                    1594,
                    1580
                ],
                256
            ],
            64556: [
                [
                    1594,
                    1605
                ],
                256
            ],
            64557: [
                [
                    1601,
                    1580
                ],
                256
            ],
            64558: [
                [
                    1601,
                    1581
                ],
                256
            ],
            64559: [
                [
                    1601,
                    1582
                ],
                256
            ],
            64560: [
                [
                    1601,
                    1605
                ],
                256
            ],
            64561: [
                [
                    1601,
                    1609
                ],
                256
            ],
            64562: [
                [
                    1601,
                    1610
                ],
                256
            ],
            64563: [
                [
                    1602,
                    1581
                ],
                256
            ],
            64564: [
                [
                    1602,
                    1605
                ],
                256
            ],
            64565: [
                [
                    1602,
                    1609
                ],
                256
            ],
            64566: [
                [
                    1602,
                    1610
                ],
                256
            ],
            64567: [
                [
                    1603,
                    1575
                ],
                256
            ],
            64568: [
                [
                    1603,
                    1580
                ],
                256
            ],
            64569: [
                [
                    1603,
                    1581
                ],
                256
            ],
            64570: [
                [
                    1603,
                    1582
                ],
                256
            ],
            64571: [
                [
                    1603,
                    1604
                ],
                256
            ],
            64572: [
                [
                    1603,
                    1605
                ],
                256
            ],
            64573: [
                [
                    1603,
                    1609
                ],
                256
            ],
            64574: [
                [
                    1603,
                    1610
                ],
                256
            ],
            64575: [
                [
                    1604,
                    1580
                ],
                256
            ],
            64576: [
                [
                    1604,
                    1581
                ],
                256
            ],
            64577: [
                [
                    1604,
                    1582
                ],
                256
            ],
            64578: [
                [
                    1604,
                    1605
                ],
                256
            ],
            64579: [
                [
                    1604,
                    1609
                ],
                256
            ],
            64580: [
                [
                    1604,
                    1610
                ],
                256
            ],
            64581: [
                [
                    1605,
                    1580
                ],
                256
            ],
            64582: [
                [
                    1605,
                    1581
                ],
                256
            ],
            64583: [
                [
                    1605,
                    1582
                ],
                256
            ],
            64584: [
                [
                    1605,
                    1605
                ],
                256
            ],
            64585: [
                [
                    1605,
                    1609
                ],
                256
            ],
            64586: [
                [
                    1605,
                    1610
                ],
                256
            ],
            64587: [
                [
                    1606,
                    1580
                ],
                256
            ],
            64588: [
                [
                    1606,
                    1581
                ],
                256
            ],
            64589: [
                [
                    1606,
                    1582
                ],
                256
            ],
            64590: [
                [
                    1606,
                    1605
                ],
                256
            ],
            64591: [
                [
                    1606,
                    1609
                ],
                256
            ],
            64592: [
                [
                    1606,
                    1610
                ],
                256
            ],
            64593: [
                [
                    1607,
                    1580
                ],
                256
            ],
            64594: [
                [
                    1607,
                    1605
                ],
                256
            ],
            64595: [
                [
                    1607,
                    1609
                ],
                256
            ],
            64596: [
                [
                    1607,
                    1610
                ],
                256
            ],
            64597: [
                [
                    1610,
                    1580
                ],
                256
            ],
            64598: [
                [
                    1610,
                    1581
                ],
                256
            ],
            64599: [
                [
                    1610,
                    1582
                ],
                256
            ],
            64600: [
                [
                    1610,
                    1605
                ],
                256
            ],
            64601: [
                [
                    1610,
                    1609
                ],
                256
            ],
            64602: [
                [
                    1610,
                    1610
                ],
                256
            ],
            64603: [
                [
                    1584,
                    1648
                ],
                256
            ],
            64604: [
                [
                    1585,
                    1648
                ],
                256
            ],
            64605: [
                [
                    1609,
                    1648
                ],
                256
            ],
            64606: [
                [
                    32,
                    1612,
                    1617
                ],
                256
            ],
            64607: [
                [
                    32,
                    1613,
                    1617
                ],
                256
            ],
            64608: [
                [
                    32,
                    1614,
                    1617
                ],
                256
            ],
            64609: [
                [
                    32,
                    1615,
                    1617
                ],
                256
            ],
            64610: [
                [
                    32,
                    1616,
                    1617
                ],
                256
            ],
            64611: [
                [
                    32,
                    1617,
                    1648
                ],
                256
            ],
            64612: [
                [
                    1574,
                    1585
                ],
                256
            ],
            64613: [
                [
                    1574,
                    1586
                ],
                256
            ],
            64614: [
                [
                    1574,
                    1605
                ],
                256
            ],
            64615: [
                [
                    1574,
                    1606
                ],
                256
            ],
            64616: [
                [
                    1574,
                    1609
                ],
                256
            ],
            64617: [
                [
                    1574,
                    1610
                ],
                256
            ],
            64618: [
                [
                    1576,
                    1585
                ],
                256
            ],
            64619: [
                [
                    1576,
                    1586
                ],
                256
            ],
            64620: [
                [
                    1576,
                    1605
                ],
                256
            ],
            64621: [
                [
                    1576,
                    1606
                ],
                256
            ],
            64622: [
                [
                    1576,
                    1609
                ],
                256
            ],
            64623: [
                [
                    1576,
                    1610
                ],
                256
            ],
            64624: [
                [
                    1578,
                    1585
                ],
                256
            ],
            64625: [
                [
                    1578,
                    1586
                ],
                256
            ],
            64626: [
                [
                    1578,
                    1605
                ],
                256
            ],
            64627: [
                [
                    1578,
                    1606
                ],
                256
            ],
            64628: [
                [
                    1578,
                    1609
                ],
                256
            ],
            64629: [
                [
                    1578,
                    1610
                ],
                256
            ],
            64630: [
                [
                    1579,
                    1585
                ],
                256
            ],
            64631: [
                [
                    1579,
                    1586
                ],
                256
            ],
            64632: [
                [
                    1579,
                    1605
                ],
                256
            ],
            64633: [
                [
                    1579,
                    1606
                ],
                256
            ],
            64634: [
                [
                    1579,
                    1609
                ],
                256
            ],
            64635: [
                [
                    1579,
                    1610
                ],
                256
            ],
            64636: [
                [
                    1601,
                    1609
                ],
                256
            ],
            64637: [
                [
                    1601,
                    1610
                ],
                256
            ],
            64638: [
                [
                    1602,
                    1609
                ],
                256
            ],
            64639: [
                [
                    1602,
                    1610
                ],
                256
            ],
            64640: [
                [
                    1603,
                    1575
                ],
                256
            ],
            64641: [
                [
                    1603,
                    1604
                ],
                256
            ],
            64642: [
                [
                    1603,
                    1605
                ],
                256
            ],
            64643: [
                [
                    1603,
                    1609
                ],
                256
            ],
            64644: [
                [
                    1603,
                    1610
                ],
                256
            ],
            64645: [
                [
                    1604,
                    1605
                ],
                256
            ],
            64646: [
                [
                    1604,
                    1609
                ],
                256
            ],
            64647: [
                [
                    1604,
                    1610
                ],
                256
            ],
            64648: [
                [
                    1605,
                    1575
                ],
                256
            ],
            64649: [
                [
                    1605,
                    1605
                ],
                256
            ],
            64650: [
                [
                    1606,
                    1585
                ],
                256
            ],
            64651: [
                [
                    1606,
                    1586
                ],
                256
            ],
            64652: [
                [
                    1606,
                    1605
                ],
                256
            ],
            64653: [
                [
                    1606,
                    1606
                ],
                256
            ],
            64654: [
                [
                    1606,
                    1609
                ],
                256
            ],
            64655: [
                [
                    1606,
                    1610
                ],
                256
            ],
            64656: [
                [
                    1609,
                    1648
                ],
                256
            ],
            64657: [
                [
                    1610,
                    1585
                ],
                256
            ],
            64658: [
                [
                    1610,
                    1586
                ],
                256
            ],
            64659: [
                [
                    1610,
                    1605
                ],
                256
            ],
            64660: [
                [
                    1610,
                    1606
                ],
                256
            ],
            64661: [
                [
                    1610,
                    1609
                ],
                256
            ],
            64662: [
                [
                    1610,
                    1610
                ],
                256
            ],
            64663: [
                [
                    1574,
                    1580
                ],
                256
            ],
            64664: [
                [
                    1574,
                    1581
                ],
                256
            ],
            64665: [
                [
                    1574,
                    1582
                ],
                256
            ],
            64666: [
                [
                    1574,
                    1605
                ],
                256
            ],
            64667: [
                [
                    1574,
                    1607
                ],
                256
            ],
            64668: [
                [
                    1576,
                    1580
                ],
                256
            ],
            64669: [
                [
                    1576,
                    1581
                ],
                256
            ],
            64670: [
                [
                    1576,
                    1582
                ],
                256
            ],
            64671: [
                [
                    1576,
                    1605
                ],
                256
            ],
            64672: [
                [
                    1576,
                    1607
                ],
                256
            ],
            64673: [
                [
                    1578,
                    1580
                ],
                256
            ],
            64674: [
                [
                    1578,
                    1581
                ],
                256
            ],
            64675: [
                [
                    1578,
                    1582
                ],
                256
            ],
            64676: [
                [
                    1578,
                    1605
                ],
                256
            ],
            64677: [
                [
                    1578,
                    1607
                ],
                256
            ],
            64678: [
                [
                    1579,
                    1605
                ],
                256
            ],
            64679: [
                [
                    1580,
                    1581
                ],
                256
            ],
            64680: [
                [
                    1580,
                    1605
                ],
                256
            ],
            64681: [
                [
                    1581,
                    1580
                ],
                256
            ],
            64682: [
                [
                    1581,
                    1605
                ],
                256
            ],
            64683: [
                [
                    1582,
                    1580
                ],
                256
            ],
            64684: [
                [
                    1582,
                    1605
                ],
                256
            ],
            64685: [
                [
                    1587,
                    1580
                ],
                256
            ],
            64686: [
                [
                    1587,
                    1581
                ],
                256
            ],
            64687: [
                [
                    1587,
                    1582
                ],
                256
            ],
            64688: [
                [
                    1587,
                    1605
                ],
                256
            ],
            64689: [
                [
                    1589,
                    1581
                ],
                256
            ],
            64690: [
                [
                    1589,
                    1582
                ],
                256
            ],
            64691: [
                [
                    1589,
                    1605
                ],
                256
            ],
            64692: [
                [
                    1590,
                    1580
                ],
                256
            ],
            64693: [
                [
                    1590,
                    1581
                ],
                256
            ],
            64694: [
                [
                    1590,
                    1582
                ],
                256
            ],
            64695: [
                [
                    1590,
                    1605
                ],
                256
            ],
            64696: [
                [
                    1591,
                    1581
                ],
                256
            ],
            64697: [
                [
                    1592,
                    1605
                ],
                256
            ],
            64698: [
                [
                    1593,
                    1580
                ],
                256
            ],
            64699: [
                [
                    1593,
                    1605
                ],
                256
            ],
            64700: [
                [
                    1594,
                    1580
                ],
                256
            ],
            64701: [
                [
                    1594,
                    1605
                ],
                256
            ],
            64702: [
                [
                    1601,
                    1580
                ],
                256
            ],
            64703: [
                [
                    1601,
                    1581
                ],
                256
            ],
            64704: [
                [
                    1601,
                    1582
                ],
                256
            ],
            64705: [
                [
                    1601,
                    1605
                ],
                256
            ],
            64706: [
                [
                    1602,
                    1581
                ],
                256
            ],
            64707: [
                [
                    1602,
                    1605
                ],
                256
            ],
            64708: [
                [
                    1603,
                    1580
                ],
                256
            ],
            64709: [
                [
                    1603,
                    1581
                ],
                256
            ],
            64710: [
                [
                    1603,
                    1582
                ],
                256
            ],
            64711: [
                [
                    1603,
                    1604
                ],
                256
            ],
            64712: [
                [
                    1603,
                    1605
                ],
                256
            ],
            64713: [
                [
                    1604,
                    1580
                ],
                256
            ],
            64714: [
                [
                    1604,
                    1581
                ],
                256
            ],
            64715: [
                [
                    1604,
                    1582
                ],
                256
            ],
            64716: [
                [
                    1604,
                    1605
                ],
                256
            ],
            64717: [
                [
                    1604,
                    1607
                ],
                256
            ],
            64718: [
                [
                    1605,
                    1580
                ],
                256
            ],
            64719: [
                [
                    1605,
                    1581
                ],
                256
            ],
            64720: [
                [
                    1605,
                    1582
                ],
                256
            ],
            64721: [
                [
                    1605,
                    1605
                ],
                256
            ],
            64722: [
                [
                    1606,
                    1580
                ],
                256
            ],
            64723: [
                [
                    1606,
                    1581
                ],
                256
            ],
            64724: [
                [
                    1606,
                    1582
                ],
                256
            ],
            64725: [
                [
                    1606,
                    1605
                ],
                256
            ],
            64726: [
                [
                    1606,
                    1607
                ],
                256
            ],
            64727: [
                [
                    1607,
                    1580
                ],
                256
            ],
            64728: [
                [
                    1607,
                    1605
                ],
                256
            ],
            64729: [
                [
                    1607,
                    1648
                ],
                256
            ],
            64730: [
                [
                    1610,
                    1580
                ],
                256
            ],
            64731: [
                [
                    1610,
                    1581
                ],
                256
            ],
            64732: [
                [
                    1610,
                    1582
                ],
                256
            ],
            64733: [
                [
                    1610,
                    1605
                ],
                256
            ],
            64734: [
                [
                    1610,
                    1607
                ],
                256
            ],
            64735: [
                [
                    1574,
                    1605
                ],
                256
            ],
            64736: [
                [
                    1574,
                    1607
                ],
                256
            ],
            64737: [
                [
                    1576,
                    1605
                ],
                256
            ],
            64738: [
                [
                    1576,
                    1607
                ],
                256
            ],
            64739: [
                [
                    1578,
                    1605
                ],
                256
            ],
            64740: [
                [
                    1578,
                    1607
                ],
                256
            ],
            64741: [
                [
                    1579,
                    1605
                ],
                256
            ],
            64742: [
                [
                    1579,
                    1607
                ],
                256
            ],
            64743: [
                [
                    1587,
                    1605
                ],
                256
            ],
            64744: [
                [
                    1587,
                    1607
                ],
                256
            ],
            64745: [
                [
                    1588,
                    1605
                ],
                256
            ],
            64746: [
                [
                    1588,
                    1607
                ],
                256
            ],
            64747: [
                [
                    1603,
                    1604
                ],
                256
            ],
            64748: [
                [
                    1603,
                    1605
                ],
                256
            ],
            64749: [
                [
                    1604,
                    1605
                ],
                256
            ],
            64750: [
                [
                    1606,
                    1605
                ],
                256
            ],
            64751: [
                [
                    1606,
                    1607
                ],
                256
            ],
            64752: [
                [
                    1610,
                    1605
                ],
                256
            ],
            64753: [
                [
                    1610,
                    1607
                ],
                256
            ],
            64754: [
                [
                    1600,
                    1614,
                    1617
                ],
                256
            ],
            64755: [
                [
                    1600,
                    1615,
                    1617
                ],
                256
            ],
            64756: [
                [
                    1600,
                    1616,
                    1617
                ],
                256
            ],
            64757: [
                [
                    1591,
                    1609
                ],
                256
            ],
            64758: [
                [
                    1591,
                    1610
                ],
                256
            ],
            64759: [
                [
                    1593,
                    1609
                ],
                256
            ],
            64760: [
                [
                    1593,
                    1610
                ],
                256
            ],
            64761: [
                [
                    1594,
                    1609
                ],
                256
            ],
            64762: [
                [
                    1594,
                    1610
                ],
                256
            ],
            64763: [
                [
                    1587,
                    1609
                ],
                256
            ],
            64764: [
                [
                    1587,
                    1610
                ],
                256
            ],
            64765: [
                [
                    1588,
                    1609
                ],
                256
            ],
            64766: [
                [
                    1588,
                    1610
                ],
                256
            ],
            64767: [
                [
                    1581,
                    1609
                ],
                256
            ]
        },
        64768: {
            64768: [
                [
                    1581,
                    1610
                ],
                256
            ],
            64769: [
                [
                    1580,
                    1609
                ],
                256
            ],
            64770: [
                [
                    1580,
                    1610
                ],
                256
            ],
            64771: [
                [
                    1582,
                    1609
                ],
                256
            ],
            64772: [
                [
                    1582,
                    1610
                ],
                256
            ],
            64773: [
                [
                    1589,
                    1609
                ],
                256
            ],
            64774: [
                [
                    1589,
                    1610
                ],
                256
            ],
            64775: [
                [
                    1590,
                    1609
                ],
                256
            ],
            64776: [
                [
                    1590,
                    1610
                ],
                256
            ],
            64777: [
                [
                    1588,
                    1580
                ],
                256
            ],
            64778: [
                [
                    1588,
                    1581
                ],
                256
            ],
            64779: [
                [
                    1588,
                    1582
                ],
                256
            ],
            64780: [
                [
                    1588,
                    1605
                ],
                256
            ],
            64781: [
                [
                    1588,
                    1585
                ],
                256
            ],
            64782: [
                [
                    1587,
                    1585
                ],
                256
            ],
            64783: [
                [
                    1589,
                    1585
                ],
                256
            ],
            64784: [
                [
                    1590,
                    1585
                ],
                256
            ],
            64785: [
                [
                    1591,
                    1609
                ],
                256
            ],
            64786: [
                [
                    1591,
                    1610
                ],
                256
            ],
            64787: [
                [
                    1593,
                    1609
                ],
                256
            ],
            64788: [
                [
                    1593,
                    1610
                ],
                256
            ],
            64789: [
                [
                    1594,
                    1609
                ],
                256
            ],
            64790: [
                [
                    1594,
                    1610
                ],
                256
            ],
            64791: [
                [
                    1587,
                    1609
                ],
                256
            ],
            64792: [
                [
                    1587,
                    1610
                ],
                256
            ],
            64793: [
                [
                    1588,
                    1609
                ],
                256
            ],
            64794: [
                [
                    1588,
                    1610
                ],
                256
            ],
            64795: [
                [
                    1581,
                    1609
                ],
                256
            ],
            64796: [
                [
                    1581,
                    1610
                ],
                256
            ],
            64797: [
                [
                    1580,
                    1609
                ],
                256
            ],
            64798: [
                [
                    1580,
                    1610
                ],
                256
            ],
            64799: [
                [
                    1582,
                    1609
                ],
                256
            ],
            64800: [
                [
                    1582,
                    1610
                ],
                256
            ],
            64801: [
                [
                    1589,
                    1609
                ],
                256
            ],
            64802: [
                [
                    1589,
                    1610
                ],
                256
            ],
            64803: [
                [
                    1590,
                    1609
                ],
                256
            ],
            64804: [
                [
                    1590,
                    1610
                ],
                256
            ],
            64805: [
                [
                    1588,
                    1580
                ],
                256
            ],
            64806: [
                [
                    1588,
                    1581
                ],
                256
            ],
            64807: [
                [
                    1588,
                    1582
                ],
                256
            ],
            64808: [
                [
                    1588,
                    1605
                ],
                256
            ],
            64809: [
                [
                    1588,
                    1585
                ],
                256
            ],
            64810: [
                [
                    1587,
                    1585
                ],
                256
            ],
            64811: [
                [
                    1589,
                    1585
                ],
                256
            ],
            64812: [
                [
                    1590,
                    1585
                ],
                256
            ],
            64813: [
                [
                    1588,
                    1580
                ],
                256
            ],
            64814: [
                [
                    1588,
                    1581
                ],
                256
            ],
            64815: [
                [
                    1588,
                    1582
                ],
                256
            ],
            64816: [
                [
                    1588,
                    1605
                ],
                256
            ],
            64817: [
                [
                    1587,
                    1607
                ],
                256
            ],
            64818: [
                [
                    1588,
                    1607
                ],
                256
            ],
            64819: [
                [
                    1591,
                    1605
                ],
                256
            ],
            64820: [
                [
                    1587,
                    1580
                ],
                256
            ],
            64821: [
                [
                    1587,
                    1581
                ],
                256
            ],
            64822: [
                [
                    1587,
                    1582
                ],
                256
            ],
            64823: [
                [
                    1588,
                    1580
                ],
                256
            ],
            64824: [
                [
                    1588,
                    1581
                ],
                256
            ],
            64825: [
                [
                    1588,
                    1582
                ],
                256
            ],
            64826: [
                [
                    1591,
                    1605
                ],
                256
            ],
            64827: [
                [
                    1592,
                    1605
                ],
                256
            ],
            64828: [
                [
                    1575,
                    1611
                ],
                256
            ],
            64829: [
                [
                    1575,
                    1611
                ],
                256
            ],
            64848: [
                [
                    1578,
                    1580,
                    1605
                ],
                256
            ],
            64849: [
                [
                    1578,
                    1581,
                    1580
                ],
                256
            ],
            64850: [
                [
                    1578,
                    1581,
                    1580
                ],
                256
            ],
            64851: [
                [
                    1578,
                    1581,
                    1605
                ],
                256
            ],
            64852: [
                [
                    1578,
                    1582,
                    1605
                ],
                256
            ],
            64853: [
                [
                    1578,
                    1605,
                    1580
                ],
                256
            ],
            64854: [
                [
                    1578,
                    1605,
                    1581
                ],
                256
            ],
            64855: [
                [
                    1578,
                    1605,
                    1582
                ],
                256
            ],
            64856: [
                [
                    1580,
                    1605,
                    1581
                ],
                256
            ],
            64857: [
                [
                    1580,
                    1605,
                    1581
                ],
                256
            ],
            64858: [
                [
                    1581,
                    1605,
                    1610
                ],
                256
            ],
            64859: [
                [
                    1581,
                    1605,
                    1609
                ],
                256
            ],
            64860: [
                [
                    1587,
                    1581,
                    1580
                ],
                256
            ],
            64861: [
                [
                    1587,
                    1580,
                    1581
                ],
                256
            ],
            64862: [
                [
                    1587,
                    1580,
                    1609
                ],
                256
            ],
            64863: [
                [
                    1587,
                    1605,
                    1581
                ],
                256
            ],
            64864: [
                [
                    1587,
                    1605,
                    1581
                ],
                256
            ],
            64865: [
                [
                    1587,
                    1605,
                    1580
                ],
                256
            ],
            64866: [
                [
                    1587,
                    1605,
                    1605
                ],
                256
            ],
            64867: [
                [
                    1587,
                    1605,
                    1605
                ],
                256
            ],
            64868: [
                [
                    1589,
                    1581,
                    1581
                ],
                256
            ],
            64869: [
                [
                    1589,
                    1581,
                    1581
                ],
                256
            ],
            64870: [
                [
                    1589,
                    1605,
                    1605
                ],
                256
            ],
            64871: [
                [
                    1588,
                    1581,
                    1605
                ],
                256
            ],
            64872: [
                [
                    1588,
                    1581,
                    1605
                ],
                256
            ],
            64873: [
                [
                    1588,
                    1580,
                    1610
                ],
                256
            ],
            64874: [
                [
                    1588,
                    1605,
                    1582
                ],
                256
            ],
            64875: [
                [
                    1588,
                    1605,
                    1582
                ],
                256
            ],
            64876: [
                [
                    1588,
                    1605,
                    1605
                ],
                256
            ],
            64877: [
                [
                    1588,
                    1605,
                    1605
                ],
                256
            ],
            64878: [
                [
                    1590,
                    1581,
                    1609
                ],
                256
            ],
            64879: [
                [
                    1590,
                    1582,
                    1605
                ],
                256
            ],
            64880: [
                [
                    1590,
                    1582,
                    1605
                ],
                256
            ],
            64881: [
                [
                    1591,
                    1605,
                    1581
                ],
                256
            ],
            64882: [
                [
                    1591,
                    1605,
                    1581
                ],
                256
            ],
            64883: [
                [
                    1591,
                    1605,
                    1605
                ],
                256
            ],
            64884: [
                [
                    1591,
                    1605,
                    1610
                ],
                256
            ],
            64885: [
                [
                    1593,
                    1580,
                    1605
                ],
                256
            ],
            64886: [
                [
                    1593,
                    1605,
                    1605
                ],
                256
            ],
            64887: [
                [
                    1593,
                    1605,
                    1605
                ],
                256
            ],
            64888: [
                [
                    1593,
                    1605,
                    1609
                ],
                256
            ],
            64889: [
                [
                    1594,
                    1605,
                    1605
                ],
                256
            ],
            64890: [
                [
                    1594,
                    1605,
                    1610
                ],
                256
            ],
            64891: [
                [
                    1594,
                    1605,
                    1609
                ],
                256
            ],
            64892: [
                [
                    1601,
                    1582,
                    1605
                ],
                256
            ],
            64893: [
                [
                    1601,
                    1582,
                    1605
                ],
                256
            ],
            64894: [
                [
                    1602,
                    1605,
                    1581
                ],
                256
            ],
            64895: [
                [
                    1602,
                    1605,
                    1605
                ],
                256
            ],
            64896: [
                [
                    1604,
                    1581,
                    1605
                ],
                256
            ],
            64897: [
                [
                    1604,
                    1581,
                    1610
                ],
                256
            ],
            64898: [
                [
                    1604,
                    1581,
                    1609
                ],
                256
            ],
            64899: [
                [
                    1604,
                    1580,
                    1580
                ],
                256
            ],
            64900: [
                [
                    1604,
                    1580,
                    1580
                ],
                256
            ],
            64901: [
                [
                    1604,
                    1582,
                    1605
                ],
                256
            ],
            64902: [
                [
                    1604,
                    1582,
                    1605
                ],
                256
            ],
            64903: [
                [
                    1604,
                    1605,
                    1581
                ],
                256
            ],
            64904: [
                [
                    1604,
                    1605,
                    1581
                ],
                256
            ],
            64905: [
                [
                    1605,
                    1581,
                    1580
                ],
                256
            ],
            64906: [
                [
                    1605,
                    1581,
                    1605
                ],
                256
            ],
            64907: [
                [
                    1605,
                    1581,
                    1610
                ],
                256
            ],
            64908: [
                [
                    1605,
                    1580,
                    1581
                ],
                256
            ],
            64909: [
                [
                    1605,
                    1580,
                    1605
                ],
                256
            ],
            64910: [
                [
                    1605,
                    1582,
                    1580
                ],
                256
            ],
            64911: [
                [
                    1605,
                    1582,
                    1605
                ],
                256
            ],
            64914: [
                [
                    1605,
                    1580,
                    1582
                ],
                256
            ],
            64915: [
                [
                    1607,
                    1605,
                    1580
                ],
                256
            ],
            64916: [
                [
                    1607,
                    1605,
                    1605
                ],
                256
            ],
            64917: [
                [
                    1606,
                    1581,
                    1605
                ],
                256
            ],
            64918: [
                [
                    1606,
                    1581,
                    1609
                ],
                256
            ],
            64919: [
                [
                    1606,
                    1580,
                    1605
                ],
                256
            ],
            64920: [
                [
                    1606,
                    1580,
                    1605
                ],
                256
            ],
            64921: [
                [
                    1606,
                    1580,
                    1609
                ],
                256
            ],
            64922: [
                [
                    1606,
                    1605,
                    1610
                ],
                256
            ],
            64923: [
                [
                    1606,
                    1605,
                    1609
                ],
                256
            ],
            64924: [
                [
                    1610,
                    1605,
                    1605
                ],
                256
            ],
            64925: [
                [
                    1610,
                    1605,
                    1605
                ],
                256
            ],
            64926: [
                [
                    1576,
                    1582,
                    1610
                ],
                256
            ],
            64927: [
                [
                    1578,
                    1580,
                    1610
                ],
                256
            ],
            64928: [
                [
                    1578,
                    1580,
                    1609
                ],
                256
            ],
            64929: [
                [
                    1578,
                    1582,
                    1610
                ],
                256
            ],
            64930: [
                [
                    1578,
                    1582,
                    1609
                ],
                256
            ],
            64931: [
                [
                    1578,
                    1605,
                    1610
                ],
                256
            ],
            64932: [
                [
                    1578,
                    1605,
                    1609
                ],
                256
            ],
            64933: [
                [
                    1580,
                    1605,
                    1610
                ],
                256
            ],
            64934: [
                [
                    1580,
                    1581,
                    1609
                ],
                256
            ],
            64935: [
                [
                    1580,
                    1605,
                    1609
                ],
                256
            ],
            64936: [
                [
                    1587,
                    1582,
                    1609
                ],
                256
            ],
            64937: [
                [
                    1589,
                    1581,
                    1610
                ],
                256
            ],
            64938: [
                [
                    1588,
                    1581,
                    1610
                ],
                256
            ],
            64939: [
                [
                    1590,
                    1581,
                    1610
                ],
                256
            ],
            64940: [
                [
                    1604,
                    1580,
                    1610
                ],
                256
            ],
            64941: [
                [
                    1604,
                    1605,
                    1610
                ],
                256
            ],
            64942: [
                [
                    1610,
                    1581,
                    1610
                ],
                256
            ],
            64943: [
                [
                    1610,
                    1580,
                    1610
                ],
                256
            ],
            64944: [
                [
                    1610,
                    1605,
                    1610
                ],
                256
            ],
            64945: [
                [
                    1605,
                    1605,
                    1610
                ],
                256
            ],
            64946: [
                [
                    1602,
                    1605,
                    1610
                ],
                256
            ],
            64947: [
                [
                    1606,
                    1581,
                    1610
                ],
                256
            ],
            64948: [
                [
                    1602,
                    1605,
                    1581
                ],
                256
            ],
            64949: [
                [
                    1604,
                    1581,
                    1605
                ],
                256
            ],
            64950: [
                [
                    1593,
                    1605,
                    1610
                ],
                256
            ],
            64951: [
                [
                    1603,
                    1605,
                    1610
                ],
                256
            ],
            64952: [
                [
                    1606,
                    1580,
                    1581
                ],
                256
            ],
            64953: [
                [
                    1605,
                    1582,
                    1610
                ],
                256
            ],
            64954: [
                [
                    1604,
                    1580,
                    1605
                ],
                256
            ],
            64955: [
                [
                    1603,
                    1605,
                    1605
                ],
                256
            ],
            64956: [
                [
                    1604,
                    1580,
                    1605
                ],
                256
            ],
            64957: [
                [
                    1606,
                    1580,
                    1581
                ],
                256
            ],
            64958: [
                [
                    1580,
                    1581,
                    1610
                ],
                256
            ],
            64959: [
                [
                    1581,
                    1580,
                    1610
                ],
                256
            ],
            64960: [
                [
                    1605,
                    1580,
                    1610
                ],
                256
            ],
            64961: [
                [
                    1601,
                    1605,
                    1610
                ],
                256
            ],
            64962: [
                [
                    1576,
                    1581,
                    1610
                ],
                256
            ],
            64963: [
                [
                    1603,
                    1605,
                    1605
                ],
                256
            ],
            64964: [
                [
                    1593,
                    1580,
                    1605
                ],
                256
            ],
            64965: [
                [
                    1589,
                    1605,
                    1605
                ],
                256
            ],
            64966: [
                [
                    1587,
                    1582,
                    1610
                ],
                256
            ],
            64967: [
                [
                    1606,
                    1580,
                    1610
                ],
                256
            ],
            65008: [
                [
                    1589,
                    1604,
                    1746
                ],
                256
            ],
            65009: [
                [
                    1602,
                    1604,
                    1746
                ],
                256
            ],
            65010: [
                [
                    1575,
                    1604,
                    1604,
                    1607
                ],
                256
            ],
            65011: [
                [
                    1575,
                    1603,
                    1576,
                    1585
                ],
                256
            ],
            65012: [
                [
                    1605,
                    1581,
                    1605,
                    1583
                ],
                256
            ],
            65013: [
                [
                    1589,
                    1604,
                    1593,
                    1605
                ],
                256
            ],
            65014: [
                [
                    1585,
                    1587,
                    1608,
                    1604
                ],
                256
            ],
            65015: [
                [
                    1593,
                    1604,
                    1610,
                    1607
                ],
                256
            ],
            65016: [
                [
                    1608,
                    1587,
                    1604,
                    1605
                ],
                256
            ],
            65017: [
                [
                    1589,
                    1604,
                    1609
                ],
                256
            ],
            65018: [
                [
                    1589,
                    1604,
                    1609,
                    32,
                    1575,
                    1604,
                    1604,
                    1607,
                    32,
                    1593,
                    1604,
                    1610,
                    1607,
                    32,
                    1608,
                    1587,
                    1604,
                    1605
                ],
                256
            ],
            65019: [
                [
                    1580,
                    1604,
                    32,
                    1580,
                    1604,
                    1575,
                    1604,
                    1607
                ],
                256
            ],
            65020: [
                [
                    1585,
                    1740,
                    1575,
                    1604
                ],
                256
            ]
        },
        65024: {
            65040: [
                [
                    44
                ],
                256
            ],
            65041: [
                [
                    12289
                ],
                256
            ],
            65042: [
                [
                    12290
                ],
                256
            ],
            65043: [
                [
                    58
                ],
                256
            ],
            65044: [
                [
                    59
                ],
                256
            ],
            65045: [
                [
                    33
                ],
                256
            ],
            65046: [
                [
                    63
                ],
                256
            ],
            65047: [
                [
                    12310
                ],
                256
            ],
            65048: [
                [
                    12311
                ],
                256
            ],
            65049: [
                [
                    8230
                ],
                256
            ],
            65056: [
                ,
                230
            ],
            65057: [
                ,
                230
            ],
            65058: [
                ,
                230
            ],
            65059: [
                ,
                230
            ],
            65060: [
                ,
                230
            ],
            65061: [
                ,
                230
            ],
            65062: [
                ,
                230
            ],
            65063: [
                ,
                220
            ],
            65064: [
                ,
                220
            ],
            65065: [
                ,
                220
            ],
            65066: [
                ,
                220
            ],
            65067: [
                ,
                220
            ],
            65068: [
                ,
                220
            ],
            65069: [
                ,
                220
            ],
            65072: [
                [
                    8229
                ],
                256
            ],
            65073: [
                [
                    8212
                ],
                256
            ],
            65074: [
                [
                    8211
                ],
                256
            ],
            65075: [
                [
                    95
                ],
                256
            ],
            65076: [
                [
                    95
                ],
                256
            ],
            65077: [
                [
                    40
                ],
                256
            ],
            65078: [
                [
                    41
                ],
                256
            ],
            65079: [
                [
                    123
                ],
                256
            ],
            65080: [
                [
                    125
                ],
                256
            ],
            65081: [
                [
                    12308
                ],
                256
            ],
            65082: [
                [
                    12309
                ],
                256
            ],
            65083: [
                [
                    12304
                ],
                256
            ],
            65084: [
                [
                    12305
                ],
                256
            ],
            65085: [
                [
                    12298
                ],
                256
            ],
            65086: [
                [
                    12299
                ],
                256
            ],
            65087: [
                [
                    12296
                ],
                256
            ],
            65088: [
                [
                    12297
                ],
                256
            ],
            65089: [
                [
                    12300
                ],
                256
            ],
            65090: [
                [
                    12301
                ],
                256
            ],
            65091: [
                [
                    12302
                ],
                256
            ],
            65092: [
                [
                    12303
                ],
                256
            ],
            65095: [
                [
                    91
                ],
                256
            ],
            65096: [
                [
                    93
                ],
                256
            ],
            65097: [
                [
                    8254
                ],
                256
            ],
            65098: [
                [
                    8254
                ],
                256
            ],
            65099: [
                [
                    8254
                ],
                256
            ],
            65100: [
                [
                    8254
                ],
                256
            ],
            65101: [
                [
                    95
                ],
                256
            ],
            65102: [
                [
                    95
                ],
                256
            ],
            65103: [
                [
                    95
                ],
                256
            ],
            65104: [
                [
                    44
                ],
                256
            ],
            65105: [
                [
                    12289
                ],
                256
            ],
            65106: [
                [
                    46
                ],
                256
            ],
            65108: [
                [
                    59
                ],
                256
            ],
            65109: [
                [
                    58
                ],
                256
            ],
            65110: [
                [
                    63
                ],
                256
            ],
            65111: [
                [
                    33
                ],
                256
            ],
            65112: [
                [
                    8212
                ],
                256
            ],
            65113: [
                [
                    40
                ],
                256
            ],
            65114: [
                [
                    41
                ],
                256
            ],
            65115: [
                [
                    123
                ],
                256
            ],
            65116: [
                [
                    125
                ],
                256
            ],
            65117: [
                [
                    12308
                ],
                256
            ],
            65118: [
                [
                    12309
                ],
                256
            ],
            65119: [
                [
                    35
                ],
                256
            ],
            65120: [
                [
                    38
                ],
                256
            ],
            65121: [
                [
                    42
                ],
                256
            ],
            65122: [
                [
                    43
                ],
                256
            ],
            65123: [
                [
                    45
                ],
                256
            ],
            65124: [
                [
                    60
                ],
                256
            ],
            65125: [
                [
                    62
                ],
                256
            ],
            65126: [
                [
                    61
                ],
                256
            ],
            65128: [
                [
                    92
                ],
                256
            ],
            65129: [
                [
                    36
                ],
                256
            ],
            65130: [
                [
                    37
                ],
                256
            ],
            65131: [
                [
                    64
                ],
                256
            ],
            65136: [
                [
                    32,
                    1611
                ],
                256
            ],
            65137: [
                [
                    1600,
                    1611
                ],
                256
            ],
            65138: [
                [
                    32,
                    1612
                ],
                256
            ],
            65140: [
                [
                    32,
                    1613
                ],
                256
            ],
            65142: [
                [
                    32,
                    1614
                ],
                256
            ],
            65143: [
                [
                    1600,
                    1614
                ],
                256
            ],
            65144: [
                [
                    32,
                    1615
                ],
                256
            ],
            65145: [
                [
                    1600,
                    1615
                ],
                256
            ],
            65146: [
                [
                    32,
                    1616
                ],
                256
            ],
            65147: [
                [
                    1600,
                    1616
                ],
                256
            ],
            65148: [
                [
                    32,
                    1617
                ],
                256
            ],
            65149: [
                [
                    1600,
                    1617
                ],
                256
            ],
            65150: [
                [
                    32,
                    1618
                ],
                256
            ],
            65151: [
                [
                    1600,
                    1618
                ],
                256
            ],
            65152: [
                [
                    1569
                ],
                256
            ],
            65153: [
                [
                    1570
                ],
                256
            ],
            65154: [
                [
                    1570
                ],
                256
            ],
            65155: [
                [
                    1571
                ],
                256
            ],
            65156: [
                [
                    1571
                ],
                256
            ],
            65157: [
                [
                    1572
                ],
                256
            ],
            65158: [
                [
                    1572
                ],
                256
            ],
            65159: [
                [
                    1573
                ],
                256
            ],
            65160: [
                [
                    1573
                ],
                256
            ],
            65161: [
                [
                    1574
                ],
                256
            ],
            65162: [
                [
                    1574
                ],
                256
            ],
            65163: [
                [
                    1574
                ],
                256
            ],
            65164: [
                [
                    1574
                ],
                256
            ],
            65165: [
                [
                    1575
                ],
                256
            ],
            65166: [
                [
                    1575
                ],
                256
            ],
            65167: [
                [
                    1576
                ],
                256
            ],
            65168: [
                [
                    1576
                ],
                256
            ],
            65169: [
                [
                    1576
                ],
                256
            ],
            65170: [
                [
                    1576
                ],
                256
            ],
            65171: [
                [
                    1577
                ],
                256
            ],
            65172: [
                [
                    1577
                ],
                256
            ],
            65173: [
                [
                    1578
                ],
                256
            ],
            65174: [
                [
                    1578
                ],
                256
            ],
            65175: [
                [
                    1578
                ],
                256
            ],
            65176: [
                [
                    1578
                ],
                256
            ],
            65177: [
                [
                    1579
                ],
                256
            ],
            65178: [
                [
                    1579
                ],
                256
            ],
            65179: [
                [
                    1579
                ],
                256
            ],
            65180: [
                [
                    1579
                ],
                256
            ],
            65181: [
                [
                    1580
                ],
                256
            ],
            65182: [
                [
                    1580
                ],
                256
            ],
            65183: [
                [
                    1580
                ],
                256
            ],
            65184: [
                [
                    1580
                ],
                256
            ],
            65185: [
                [
                    1581
                ],
                256
            ],
            65186: [
                [
                    1581
                ],
                256
            ],
            65187: [
                [
                    1581
                ],
                256
            ],
            65188: [
                [
                    1581
                ],
                256
            ],
            65189: [
                [
                    1582
                ],
                256
            ],
            65190: [
                [
                    1582
                ],
                256
            ],
            65191: [
                [
                    1582
                ],
                256
            ],
            65192: [
                [
                    1582
                ],
                256
            ],
            65193: [
                [
                    1583
                ],
                256
            ],
            65194: [
                [
                    1583
                ],
                256
            ],
            65195: [
                [
                    1584
                ],
                256
            ],
            65196: [
                [
                    1584
                ],
                256
            ],
            65197: [
                [
                    1585
                ],
                256
            ],
            65198: [
                [
                    1585
                ],
                256
            ],
            65199: [
                [
                    1586
                ],
                256
            ],
            65200: [
                [
                    1586
                ],
                256
            ],
            65201: [
                [
                    1587
                ],
                256
            ],
            65202: [
                [
                    1587
                ],
                256
            ],
            65203: [
                [
                    1587
                ],
                256
            ],
            65204: [
                [
                    1587
                ],
                256
            ],
            65205: [
                [
                    1588
                ],
                256
            ],
            65206: [
                [
                    1588
                ],
                256
            ],
            65207: [
                [
                    1588
                ],
                256
            ],
            65208: [
                [
                    1588
                ],
                256
            ],
            65209: [
                [
                    1589
                ],
                256
            ],
            65210: [
                [
                    1589
                ],
                256
            ],
            65211: [
                [
                    1589
                ],
                256
            ],
            65212: [
                [
                    1589
                ],
                256
            ],
            65213: [
                [
                    1590
                ],
                256
            ],
            65214: [
                [
                    1590
                ],
                256
            ],
            65215: [
                [
                    1590
                ],
                256
            ],
            65216: [
                [
                    1590
                ],
                256
            ],
            65217: [
                [
                    1591
                ],
                256
            ],
            65218: [
                [
                    1591
                ],
                256
            ],
            65219: [
                [
                    1591
                ],
                256
            ],
            65220: [
                [
                    1591
                ],
                256
            ],
            65221: [
                [
                    1592
                ],
                256
            ],
            65222: [
                [
                    1592
                ],
                256
            ],
            65223: [
                [
                    1592
                ],
                256
            ],
            65224: [
                [
                    1592
                ],
                256
            ],
            65225: [
                [
                    1593
                ],
                256
            ],
            65226: [
                [
                    1593
                ],
                256
            ],
            65227: [
                [
                    1593
                ],
                256
            ],
            65228: [
                [
                    1593
                ],
                256
            ],
            65229: [
                [
                    1594
                ],
                256
            ],
            65230: [
                [
                    1594
                ],
                256
            ],
            65231: [
                [
                    1594
                ],
                256
            ],
            65232: [
                [
                    1594
                ],
                256
            ],
            65233: [
                [
                    1601
                ],
                256
            ],
            65234: [
                [
                    1601
                ],
                256
            ],
            65235: [
                [
                    1601
                ],
                256
            ],
            65236: [
                [
                    1601
                ],
                256
            ],
            65237: [
                [
                    1602
                ],
                256
            ],
            65238: [
                [
                    1602
                ],
                256
            ],
            65239: [
                [
                    1602
                ],
                256
            ],
            65240: [
                [
                    1602
                ],
                256
            ],
            65241: [
                [
                    1603
                ],
                256
            ],
            65242: [
                [
                    1603
                ],
                256
            ],
            65243: [
                [
                    1603
                ],
                256
            ],
            65244: [
                [
                    1603
                ],
                256
            ],
            65245: [
                [
                    1604
                ],
                256
            ],
            65246: [
                [
                    1604
                ],
                256
            ],
            65247: [
                [
                    1604
                ],
                256
            ],
            65248: [
                [
                    1604
                ],
                256
            ],
            65249: [
                [
                    1605
                ],
                256
            ],
            65250: [
                [
                    1605
                ],
                256
            ],
            65251: [
                [
                    1605
                ],
                256
            ],
            65252: [
                [
                    1605
                ],
                256
            ],
            65253: [
                [
                    1606
                ],
                256
            ],
            65254: [
                [
                    1606
                ],
                256
            ],
            65255: [
                [
                    1606
                ],
                256
            ],
            65256: [
                [
                    1606
                ],
                256
            ],
            65257: [
                [
                    1607
                ],
                256
            ],
            65258: [
                [
                    1607
                ],
                256
            ],
            65259: [
                [
                    1607
                ],
                256
            ],
            65260: [
                [
                    1607
                ],
                256
            ],
            65261: [
                [
                    1608
                ],
                256
            ],
            65262: [
                [
                    1608
                ],
                256
            ],
            65263: [
                [
                    1609
                ],
                256
            ],
            65264: [
                [
                    1609
                ],
                256
            ],
            65265: [
                [
                    1610
                ],
                256
            ],
            65266: [
                [
                    1610
                ],
                256
            ],
            65267: [
                [
                    1610
                ],
                256
            ],
            65268: [
                [
                    1610
                ],
                256
            ],
            65269: [
                [
                    1604,
                    1570
                ],
                256
            ],
            65270: [
                [
                    1604,
                    1570
                ],
                256
            ],
            65271: [
                [
                    1604,
                    1571
                ],
                256
            ],
            65272: [
                [
                    1604,
                    1571
                ],
                256
            ],
            65273: [
                [
                    1604,
                    1573
                ],
                256
            ],
            65274: [
                [
                    1604,
                    1573
                ],
                256
            ],
            65275: [
                [
                    1604,
                    1575
                ],
                256
            ],
            65276: [
                [
                    1604,
                    1575
                ],
                256
            ]
        },
        65280: {
            65281: [
                [
                    33
                ],
                256
            ],
            65282: [
                [
                    34
                ],
                256
            ],
            65283: [
                [
                    35
                ],
                256
            ],
            65284: [
                [
                    36
                ],
                256
            ],
            65285: [
                [
                    37
                ],
                256
            ],
            65286: [
                [
                    38
                ],
                256
            ],
            65287: [
                [
                    39
                ],
                256
            ],
            65288: [
                [
                    40
                ],
                256
            ],
            65289: [
                [
                    41
                ],
                256
            ],
            65290: [
                [
                    42
                ],
                256
            ],
            65291: [
                [
                    43
                ],
                256
            ],
            65292: [
                [
                    44
                ],
                256
            ],
            65293: [
                [
                    45
                ],
                256
            ],
            65294: [
                [
                    46
                ],
                256
            ],
            65295: [
                [
                    47
                ],
                256
            ],
            65296: [
                [
                    48
                ],
                256
            ],
            65297: [
                [
                    49
                ],
                256
            ],
            65298: [
                [
                    50
                ],
                256
            ],
            65299: [
                [
                    51
                ],
                256
            ],
            65300: [
                [
                    52
                ],
                256
            ],
            65301: [
                [
                    53
                ],
                256
            ],
            65302: [
                [
                    54
                ],
                256
            ],
            65303: [
                [
                    55
                ],
                256
            ],
            65304: [
                [
                    56
                ],
                256
            ],
            65305: [
                [
                    57
                ],
                256
            ],
            65306: [
                [
                    58
                ],
                256
            ],
            65307: [
                [
                    59
                ],
                256
            ],
            65308: [
                [
                    60
                ],
                256
            ],
            65309: [
                [
                    61
                ],
                256
            ],
            65310: [
                [
                    62
                ],
                256
            ],
            65311: [
                [
                    63
                ],
                256
            ],
            65312: [
                [
                    64
                ],
                256
            ],
            65313: [
                [
                    65
                ],
                256
            ],
            65314: [
                [
                    66
                ],
                256
            ],
            65315: [
                [
                    67
                ],
                256
            ],
            65316: [
                [
                    68
                ],
                256
            ],
            65317: [
                [
                    69
                ],
                256
            ],
            65318: [
                [
                    70
                ],
                256
            ],
            65319: [
                [
                    71
                ],
                256
            ],
            65320: [
                [
                    72
                ],
                256
            ],
            65321: [
                [
                    73
                ],
                256
            ],
            65322: [
                [
                    74
                ],
                256
            ],
            65323: [
                [
                    75
                ],
                256
            ],
            65324: [
                [
                    76
                ],
                256
            ],
            65325: [
                [
                    77
                ],
                256
            ],
            65326: [
                [
                    78
                ],
                256
            ],
            65327: [
                [
                    79
                ],
                256
            ],
            65328: [
                [
                    80
                ],
                256
            ],
            65329: [
                [
                    81
                ],
                256
            ],
            65330: [
                [
                    82
                ],
                256
            ],
            65331: [
                [
                    83
                ],
                256
            ],
            65332: [
                [
                    84
                ],
                256
            ],
            65333: [
                [
                    85
                ],
                256
            ],
            65334: [
                [
                    86
                ],
                256
            ],
            65335: [
                [
                    87
                ],
                256
            ],
            65336: [
                [
                    88
                ],
                256
            ],
            65337: [
                [
                    89
                ],
                256
            ],
            65338: [
                [
                    90
                ],
                256
            ],
            65339: [
                [
                    91
                ],
                256
            ],
            65340: [
                [
                    92
                ],
                256
            ],
            65341: [
                [
                    93
                ],
                256
            ],
            65342: [
                [
                    94
                ],
                256
            ],
            65343: [
                [
                    95
                ],
                256
            ],
            65344: [
                [
                    96
                ],
                256
            ],
            65345: [
                [
                    97
                ],
                256
            ],
            65346: [
                [
                    98
                ],
                256
            ],
            65347: [
                [
                    99
                ],
                256
            ],
            65348: [
                [
                    100
                ],
                256
            ],
            65349: [
                [
                    101
                ],
                256
            ],
            65350: [
                [
                    102
                ],
                256
            ],
            65351: [
                [
                    103
                ],
                256
            ],
            65352: [
                [
                    104
                ],
                256
            ],
            65353: [
                [
                    105
                ],
                256
            ],
            65354: [
                [
                    106
                ],
                256
            ],
            65355: [
                [
                    107
                ],
                256
            ],
            65356: [
                [
                    108
                ],
                256
            ],
            65357: [
                [
                    109
                ],
                256
            ],
            65358: [
                [
                    110
                ],
                256
            ],
            65359: [
                [
                    111
                ],
                256
            ],
            65360: [
                [
                    112
                ],
                256
            ],
            65361: [
                [
                    113
                ],
                256
            ],
            65362: [
                [
                    114
                ],
                256
            ],
            65363: [
                [
                    115
                ],
                256
            ],
            65364: [
                [
                    116
                ],
                256
            ],
            65365: [
                [
                    117
                ],
                256
            ],
            65366: [
                [
                    118
                ],
                256
            ],
            65367: [
                [
                    119
                ],
                256
            ],
            65368: [
                [
                    120
                ],
                256
            ],
            65369: [
                [
                    121
                ],
                256
            ],
            65370: [
                [
                    122
                ],
                256
            ],
            65371: [
                [
                    123
                ],
                256
            ],
            65372: [
                [
                    124
                ],
                256
            ],
            65373: [
                [
                    125
                ],
                256
            ],
            65374: [
                [
                    126
                ],
                256
            ],
            65375: [
                [
                    10629
                ],
                256
            ],
            65376: [
                [
                    10630
                ],
                256
            ],
            65377: [
                [
                    12290
                ],
                256
            ],
            65378: [
                [
                    12300
                ],
                256
            ],
            65379: [
                [
                    12301
                ],
                256
            ],
            65380: [
                [
                    12289
                ],
                256
            ],
            65381: [
                [
                    12539
                ],
                256
            ],
            65382: [
                [
                    12530
                ],
                256
            ],
            65383: [
                [
                    12449
                ],
                256
            ],
            65384: [
                [
                    12451
                ],
                256
            ],
            65385: [
                [
                    12453
                ],
                256
            ],
            65386: [
                [
                    12455
                ],
                256
            ],
            65387: [
                [
                    12457
                ],
                256
            ],
            65388: [
                [
                    12515
                ],
                256
            ],
            65389: [
                [
                    12517
                ],
                256
            ],
            65390: [
                [
                    12519
                ],
                256
            ],
            65391: [
                [
                    12483
                ],
                256
            ],
            65392: [
                [
                    12540
                ],
                256
            ],
            65393: [
                [
                    12450
                ],
                256
            ],
            65394: [
                [
                    12452
                ],
                256
            ],
            65395: [
                [
                    12454
                ],
                256
            ],
            65396: [
                [
                    12456
                ],
                256
            ],
            65397: [
                [
                    12458
                ],
                256
            ],
            65398: [
                [
                    12459
                ],
                256
            ],
            65399: [
                [
                    12461
                ],
                256
            ],
            65400: [
                [
                    12463
                ],
                256
            ],
            65401: [
                [
                    12465
                ],
                256
            ],
            65402: [
                [
                    12467
                ],
                256
            ],
            65403: [
                [
                    12469
                ],
                256
            ],
            65404: [
                [
                    12471
                ],
                256
            ],
            65405: [
                [
                    12473
                ],
                256
            ],
            65406: [
                [
                    12475
                ],
                256
            ],
            65407: [
                [
                    12477
                ],
                256
            ],
            65408: [
                [
                    12479
                ],
                256
            ],
            65409: [
                [
                    12481
                ],
                256
            ],
            65410: [
                [
                    12484
                ],
                256
            ],
            65411: [
                [
                    12486
                ],
                256
            ],
            65412: [
                [
                    12488
                ],
                256
            ],
            65413: [
                [
                    12490
                ],
                256
            ],
            65414: [
                [
                    12491
                ],
                256
            ],
            65415: [
                [
                    12492
                ],
                256
            ],
            65416: [
                [
                    12493
                ],
                256
            ],
            65417: [
                [
                    12494
                ],
                256
            ],
            65418: [
                [
                    12495
                ],
                256
            ],
            65419: [
                [
                    12498
                ],
                256
            ],
            65420: [
                [
                    12501
                ],
                256
            ],
            65421: [
                [
                    12504
                ],
                256
            ],
            65422: [
                [
                    12507
                ],
                256
            ],
            65423: [
                [
                    12510
                ],
                256
            ],
            65424: [
                [
                    12511
                ],
                256
            ],
            65425: [
                [
                    12512
                ],
                256
            ],
            65426: [
                [
                    12513
                ],
                256
            ],
            65427: [
                [
                    12514
                ],
                256
            ],
            65428: [
                [
                    12516
                ],
                256
            ],
            65429: [
                [
                    12518
                ],
                256
            ],
            65430: [
                [
                    12520
                ],
                256
            ],
            65431: [
                [
                    12521
                ],
                256
            ],
            65432: [
                [
                    12522
                ],
                256
            ],
            65433: [
                [
                    12523
                ],
                256
            ],
            65434: [
                [
                    12524
                ],
                256
            ],
            65435: [
                [
                    12525
                ],
                256
            ],
            65436: [
                [
                    12527
                ],
                256
            ],
            65437: [
                [
                    12531
                ],
                256
            ],
            65438: [
                [
                    12441
                ],
                256
            ],
            65439: [
                [
                    12442
                ],
                256
            ],
            65440: [
                [
                    12644
                ],
                256
            ],
            65441: [
                [
                    12593
                ],
                256
            ],
            65442: [
                [
                    12594
                ],
                256
            ],
            65443: [
                [
                    12595
                ],
                256
            ],
            65444: [
                [
                    12596
                ],
                256
            ],
            65445: [
                [
                    12597
                ],
                256
            ],
            65446: [
                [
                    12598
                ],
                256
            ],
            65447: [
                [
                    12599
                ],
                256
            ],
            65448: [
                [
                    12600
                ],
                256
            ],
            65449: [
                [
                    12601
                ],
                256
            ],
            65450: [
                [
                    12602
                ],
                256
            ],
            65451: [
                [
                    12603
                ],
                256
            ],
            65452: [
                [
                    12604
                ],
                256
            ],
            65453: [
                [
                    12605
                ],
                256
            ],
            65454: [
                [
                    12606
                ],
                256
            ],
            65455: [
                [
                    12607
                ],
                256
            ],
            65456: [
                [
                    12608
                ],
                256
            ],
            65457: [
                [
                    12609
                ],
                256
            ],
            65458: [
                [
                    12610
                ],
                256
            ],
            65459: [
                [
                    12611
                ],
                256
            ],
            65460: [
                [
                    12612
                ],
                256
            ],
            65461: [
                [
                    12613
                ],
                256
            ],
            65462: [
                [
                    12614
                ],
                256
            ],
            65463: [
                [
                    12615
                ],
                256
            ],
            65464: [
                [
                    12616
                ],
                256
            ],
            65465: [
                [
                    12617
                ],
                256
            ],
            65466: [
                [
                    12618
                ],
                256
            ],
            65467: [
                [
                    12619
                ],
                256
            ],
            65468: [
                [
                    12620
                ],
                256
            ],
            65469: [
                [
                    12621
                ],
                256
            ],
            65470: [
                [
                    12622
                ],
                256
            ],
            65474: [
                [
                    12623
                ],
                256
            ],
            65475: [
                [
                    12624
                ],
                256
            ],
            65476: [
                [
                    12625
                ],
                256
            ],
            65477: [
                [
                    12626
                ],
                256
            ],
            65478: [
                [
                    12627
                ],
                256
            ],
            65479: [
                [
                    12628
                ],
                256
            ],
            65482: [
                [
                    12629
                ],
                256
            ],
            65483: [
                [
                    12630
                ],
                256
            ],
            65484: [
                [
                    12631
                ],
                256
            ],
            65485: [
                [
                    12632
                ],
                256
            ],
            65486: [
                [
                    12633
                ],
                256
            ],
            65487: [
                [
                    12634
                ],
                256
            ],
            65490: [
                [
                    12635
                ],
                256
            ],
            65491: [
                [
                    12636
                ],
                256
            ],
            65492: [
                [
                    12637
                ],
                256
            ],
            65493: [
                [
                    12638
                ],
                256
            ],
            65494: [
                [
                    12639
                ],
                256
            ],
            65495: [
                [
                    12640
                ],
                256
            ],
            65498: [
                [
                    12641
                ],
                256
            ],
            65499: [
                [
                    12642
                ],
                256
            ],
            65500: [
                [
                    12643
                ],
                256
            ],
            65504: [
                [
                    162
                ],
                256
            ],
            65505: [
                [
                    163
                ],
                256
            ],
            65506: [
                [
                    172
                ],
                256
            ],
            65507: [
                [
                    175
                ],
                256
            ],
            65508: [
                [
                    166
                ],
                256
            ],
            65509: [
                [
                    165
                ],
                256
            ],
            65510: [
                [
                    8361
                ],
                256
            ],
            65512: [
                [
                    9474
                ],
                256
            ],
            65513: [
                [
                    8592
                ],
                256
            ],
            65514: [
                [
                    8593
                ],
                256
            ],
            65515: [
                [
                    8594
                ],
                256
            ],
            65516: [
                [
                    8595
                ],
                256
            ],
            65517: [
                [
                    9632
                ],
                256
            ],
            65518: [
                [
                    9675
                ],
                256
            ]
        }
    };
    /***** Module to export */ var unorm = {
        nfc: nfc,
        nfd: nfd,
        nfkc: nfkc,
        nfkd: nfkd
    };
    module.exports = unorm;
    /***** Export as shim for String::normalize method *****/ /*
      http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#november_8_2013_draft_rev_21

      21.1.3.12 String.prototype.normalize(form="NFC")
      When the normalize method is called with one argument form, the following steps are taken:

      1. Let O be CheckObjectCoercible(this value).
      2. Let S be ToString(O).
      3. ReturnIfAbrupt(S).
      4. If form is not provided or undefined let form be "NFC".
      5. Let f be ToString(form).
      6. ReturnIfAbrupt(f).
      7. If f is not one of "NFC", "NFD", "NFKC", or "NFKD", then throw a RangeError Exception.
      8. Let ns be the String value is the result of normalizing S into the normalization form named by f as specified in Unicode Standard Annex #15, UnicodeNormalizatoin Forms.
      9. Return ns.

      The length property of the normalize method is 0.

      *NOTE* The normalize function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.
   */ unorm.shimApplied = false;
    if (!String.prototype.normalize) {
        String.prototype.normalize = function(form) {
            var str = "" + this;
            form = form === undefined ? "NFC" : form;
            if (form === "NFC") return unorm.nfc(str);
            else if (form === "NFD") return unorm.nfd(str);
            else if (form === "NFKC") return unorm.nfkc(str);
            else if (form === "NFKD") return unorm.nfkd(str);
            else throw new RangeError("Invalid normalization form: " + form);
        };
        unorm.shimApplied = true;
    }
})(this);

},{}],"98UoV":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var crypto = require("crypto");
/**
 * PDKBF2
 * Credit to: https://github.com/stayradiated/pbkdf2-sha512
 * Copyright (c) 2014, JP Richardson Copyright (c) 2010-2011 Intalio Pte, All Rights Reserved
 */ function pbkdf2(key, salt, iterations, dkLen) {
    var hLen = 64 // SHA512 Mac length
    ;
    if (dkLen > (Math.pow(2, 32) - 1) * hLen) throw Error("Requested key length too long");
    if (typeof key !== "string" && !Buffer.isBuffer(key)) throw new TypeError("key must a string or Buffer");
    if (typeof salt !== "string" && !Buffer.isBuffer(salt)) throw new TypeError("salt must a string or Buffer");
    if (typeof key === "string") key = Buffer.from(key);
    if (typeof salt === "string") salt = Buffer.from(salt);
    var DK = Buffer.alloc(dkLen);
    var U = Buffer.alloc(hLen);
    var T = Buffer.alloc(hLen);
    var block1 = Buffer.alloc(salt.length + 4);
    var l = Math.ceil(dkLen / hLen);
    var r = dkLen - (l - 1) * hLen;
    salt.copy(block1, 0, 0, salt.length);
    for(var i = 1; i <= l; i++){
        block1[salt.length + 0] = i >> 24 & 0xff;
        block1[salt.length + 1] = i >> 16 & 0xff;
        block1[salt.length + 2] = i >> 8 & 0xff;
        block1[salt.length + 3] = i >> 0 & 0xff;
        U = crypto.createHmac("sha512", key).update(block1).digest();
        U.copy(T, 0, 0, hLen);
        for(var j = 1; j < iterations; j++){
            U = crypto.createHmac("sha512", key).update(U).digest();
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        var destPos = (i - 1) * hLen;
        var len = i === l ? r : hLen;
        T.copy(DK, destPos, 0, len);
    }
    return DK;
}
module.exports = pbkdf2;

},{"buffer":"fCgem","crypto":"hagNj"}],"zt2gn":[function(require,module,exports) {
"use strict";
var spec = {
    name: "Mnemonic",
    message: "Internal Error on bsv-mnemonic module {0}",
    errors: [
        {
            name: "InvalidEntropy",
            message: "Entropy length must be an even multiple of 11 bits: {0}"
        },
        {
            name: "UnknownWordlist",
            message: "Could not detect the used word list: {0}"
        },
        {
            name: "InvalidMnemonic",
            message: "Mnemonic string is invalid: {0}"
        }
    ]
};
module.exports = require("../../").errors.extend(spec);

},{"../../":"hOFCS"}],"agY3L":[function(require,module,exports) {
"use strict";
// * j'aurai pu faire des fonctions
// * mais je préfère une classe
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const axios_1 = __importDefault(require("axios"));
const GroupBy_1 = require("./Utils/GroupBy");
const translateNetworkNameFromBSVJSToWoC = (network)=>{
    switch(network){
        case "livenet":
            return "main";
        case "testnet":
            return "test";
        default:
            throw Error("untranslatable network name");
    }
};
class Blockchain {
    constructor(network){
        const networkName = translateNetworkNameFromBSVJSToWoC(network);
        this.api = axios_1.default.create({
            baseURL: `https://api.whatsonchain.com/v1/bsv/${networkName}`
        });
    // this.api.interceptors.request.use((req) => {
    //   console.log(`${req.method.toUpperCase()} ${req.baseURL}${req.url}`);
    //   console.log(req.data);
    //   return req;
    // });
    }
    static getNetwork(network) {
        return new Blockchain(network);
    }
    /**
     * @param address
     * @returns the balance at a given adress
     */ getBalance(address) {
        return __awaiter(this, void 0, void 0, function*() {
            const { data  } = yield this.api.get(`/address/${address}/balance`);
            return data;
        });
    }
    /**
     * @param address
     * @returns
     */ getBalancesFromAddresses(address) {
        return __awaiter(this, void 0, void 0, function*() {
            // il faut split en groupe de 20
            const chunks = (0, GroupBy_1.splitInGroupOf)(address, 20);
            let res = [];
            for (let addresses of chunks){
                const { data  } = yield this.api.post("/addresses/balance", {
                    addresses
                });
                res = [
                    ...res,
                    ...data
                ];
            }
            return res;
        });
    }
    getAddressInfo(address) {
        return __awaiter(this, void 0, void 0, function*() {
            const { data  } = yield this.api.get(`/address/${address}/info`);
            return data;
        });
    }
    getBulkUTXO(addresses) {
        return __awaiter(this, void 0, void 0, function*() {
            const addressesGroups = (0, GroupBy_1.splitInGroupOf)(addresses, 20);
            const allUTXO = [];
            let i = 0;
            for (let addresses1 of addressesGroups){
                const { data: UTXOData  } = yield this.api.post(`/addresses/unspent`, {
                    addresses: addresses1
                });
                for (let { unspent , address  } of UTXOData){
                    unspent.forEach((unspentOuput)=>{
                        allUTXO.push(Object.assign(Object.assign({}, unspentOuput), {
                            privateKeyIndex: i,
                            ownerAddress: address
                        }));
                    });
                    ++i;
                }
            }
            return allUTXO;
        });
    }
    getUnspendTxOuput(address) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                var { data  } = yield this.api.get(`/address/${address}/unspent`);
            } catch (err) {
                console.log("error");
                console.log(err.response);
            }
            return data;
        });
    }
    broadcast(txhex) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const { data  } = yield this.api.post(`/tx/raw`, {
                    txhex
                });
                return data;
            } catch (err) {
                throw Error(err.response ? err.response.data : err);
            }
        });
    }
    getRawTx(txhash) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const { data  } = yield this.api.get(`/tx/${txhash}/hex`);
                return data;
            } catch (err) {
                console.log(err.response.data);
            }
        });
    }
    getTxDetails(txHash) {
        return __awaiter(this, void 0, void 0, function*() {
            const { data  } = yield this.api.get(`tx/hash/${txHash}`);
            return data;
        });
    }
    getHistory(address) {
        return __awaiter(this, void 0, void 0, function*() {
            const { data  } = yield this.api.get(`/address/${address}/history`);
            return data;
        });
    }
}
exports.default = Blockchain;

},{"axios":"jo6P5","./Utils/GroupBy":"l2VdD"}],"jo6P5":[function(require,module,exports) {
module.exports = require("./lib/axios");

},{"./lib/axios":"63MyY"}],"63MyY":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var bind = require("./helpers/bind");
var Axios = require("./core/Axios");
var mergeConfig = require("./core/mergeConfig");
var defaults = require("./defaults");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);
    // Copy context to instance
    utils.extend(instance, context);
    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
}
// Create the default instance to be exported
var axios = createInstance(defaults);
// Expose Axios class to allow class inheritance
axios.Axios = Axios;
// Expose Cancel & CancelToken
axios.CanceledError = require("./cancel/CanceledError");
axios.CancelToken = require("./cancel/CancelToken");
axios.isCancel = require("./cancel/isCancel");
axios.VERSION = require("./env/data").version;
axios.toFormData = require("./helpers/toFormData");
// Expose AxiosError class
axios.AxiosError = require("../lib/core/AxiosError");
// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = require("./helpers/spread");
// Expose isAxiosError
axios.isAxiosError = require("./helpers/isAxiosError");
module.exports = axios;
// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./utils":"5By4s","./helpers/bind":"haRQb","./core/Axios":"cpqD8","./core/mergeConfig":"b85oP","./defaults":"hXfHM","./cancel/CanceledError":"9PwCG","./cancel/CancelToken":"45wzn","./cancel/isCancel":"a0VmF","./env/data":"h29L9","./helpers/toFormData":"ajoez","../lib/core/AxiosError":"3u8Tl","./helpers/spread":"dyQ8N","./helpers/isAxiosError":"eyiLq"}],"5By4s":[function(require,module,exports) {
"use strict";
var bind = require("./helpers/bind");
// utils is a library of generic helper functions non-specific to axios
var toString = Object.prototype.toString;
// eslint-disable-next-line func-names
var kindOf = function(cache) {
    // eslint-disable-next-line func-names
    return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    };
}(Object.create(null));
function kindOfTest(type) {
    type = type.toLowerCase();
    return function isKindOf(thing) {
        return kindOf(thing) === type;
    };
}
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */ function isArray(val) {
    return Array.isArray(val);
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */ function isUndefined(val) {
    return typeof val === "undefined";
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ var isArrayBuffer = kindOfTest("ArrayBuffer");
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && isArrayBuffer(val.buffer);
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */ function isString(val) {
    return typeof val === "string";
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */ function isNumber(val) {
    return typeof val === "number";
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */ function isObject(val) {
    return val !== null && typeof val === "object";
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */ function isPlainObject(val) {
    if (kindOf(val) !== "object") return false;
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */ var isDate = kindOfTest("Date");
/**
 * Determine if a value is a File
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ var isFile = kindOfTest("File");
/**
 * Determine if a value is a Blob
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */ var isBlob = kindOfTest("Blob");
/**
 * Determine if a value is a FileList
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ var isFileList = kindOfTest("FileList");
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ function isFunction(val) {
    return toString.call(val) === "[object Function]";
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */ function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} thing The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */ function isFormData(thing) {
    var pattern = "[object FormData]";
    return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
}
/**
 * Determine if a value is a URLSearchParams object
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ var isURLSearchParams = kindOfTest("URLSearchParams");
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */ function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */ function isStandardBrowserEnv() {
    if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) return false;
    return typeof window !== "undefined" && typeof document !== "undefined";
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */ function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === "undefined") return;
    // Force an array if not already something iterable
    if (typeof obj !== "object") /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(var i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
    }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function merge() {
    var result = {};
    function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val);
        else if (isPlainObject(val)) result[key] = merge({}, val);
        else if (isArray(val)) result[key] = val.slice();
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */ function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") a[key] = bind(val, thisArg);
        else a[key] = val;
    });
    return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */ function stripBOM(content) {
    if (content.charCodeAt(0) === 0xFEFF) content = content.slice(1);
    return content;
}
/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 */ function inherits(constructor, superConstructor, props, descriptors) {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors);
    constructor.prototype.constructor = constructor;
    props && Object.assign(constructor.prototype, props);
}
/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function} [filter]
 * @returns {Object}
 */ function toFlatObject(sourceObj, destObj, filter) {
    var props;
    var i;
    var prop;
    var merged = {};
    destObj = destObj || {};
    do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while(i-- > 0){
            prop = props[i];
            if (!merged[prop]) {
                destObj[prop] = sourceObj[prop];
                merged[prop] = true;
            }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
    }while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
}
/*
 * determines whether a string ends with the characters of a specified string
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 * @returns {boolean}
 */ function endsWith(str, searchString, position) {
    str = String(str);
    if (position === undefined || position > str.length) position = str.length;
    position -= searchString.length;
    var lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
}
/**
 * Returns new array from array like object
 * @param {*} [thing]
 * @returns {Array}
 */ function toArray(thing) {
    if (!thing) return null;
    var i = thing.length;
    if (isUndefined(i)) return null;
    var arr = new Array(i);
    while(i-- > 0)arr[i] = thing[i];
    return arr;
}
// eslint-disable-next-line func-names
var isTypedArray = function(TypedArray) {
    // eslint-disable-next-line func-names
    return function(thing) {
        return TypedArray && thing instanceof TypedArray;
    };
}(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM,
    inherits: inherits,
    toFlatObject: toFlatObject,
    kindOf: kindOf,
    kindOfTest: kindOfTest,
    endsWith: endsWith,
    toArray: toArray,
    isTypedArray: isTypedArray,
    isFileList: isFileList
};

},{"./helpers/bind":"haRQb"}],"haRQb":[function(require,module,exports) {
"use strict";
module.exports = function bind(fn, thisArg) {
    return function wrap() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        return fn.apply(thisArg, args);
    };
};

},{}],"cpqD8":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var buildURL = require("../helpers/buildURL");
var InterceptorManager = require("./InterceptorManager");
var dispatchRequest = require("./dispatchRequest");
var mergeConfig = require("./mergeConfig");
var buildFullPath = require("./buildFullPath");
var validator = require("../helpers/validator");
var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */ function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
    };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */ Axios.prototype.request = function request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
    } else config = configOrUrl || {};
    config = mergeConfig(this.defaults, config);
    // Set config.method
    if (config.method) config.method = config.method.toLowerCase();
    else if (this.defaults.method) config.method = this.defaults.method.toLowerCase();
    else config.method = "get";
    var transitional = config.transitional;
    if (transitional !== undefined) validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
    // filter out skipped interceptors
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) return;
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    var promise;
    if (!synchronousRequestInterceptors) {
        var chain = [
            dispatchRequest,
            undefined
        ];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while(chain.length)promise = promise.then(chain.shift(), chain.shift());
        return promise;
    }
    var newConfig = config;
    while(requestInterceptorChain.length){
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
            newConfig = onFulfilled(newConfig);
        } catch (error) {
            onRejected(error);
            break;
        }
    }
    try {
        promise = dispatchRequest(newConfig);
    } catch (error1) {
        return Promise.reject(error1);
    }
    while(responseInterceptorChain.length)promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    return promise;
};
Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    var fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
};
// Provide aliases for supported request methods
utils.forEach([
    "delete",
    "get",
    "head",
    "options"
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
            method: method,
            url: url,
            data: (config || {}).data
        }));
    };
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
            return this.request(mergeConfig(config || {}, {
                method: method,
                headers: isForm ? {
                    "Content-Type": "multipart/form-data"
                } : {},
                url: url,
                data: data
            }));
        };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
module.exports = Axios;

},{"./../utils":"5By4s","../helpers/buildURL":"3bwC2","./InterceptorManager":"1VRIM","./dispatchRequest":"6sjJ6","./mergeConfig":"b85oP","./buildFullPath":"1I5TW","../helpers/validator":"9vgkY"}],"3bwC2":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */ module.exports = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    var serializedParams;
    if (paramsSerializer) serializedParams = paramsSerializer(params);
    else if (utils.isURLSearchParams(params)) serializedParams = params.toString();
    else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") return;
            if (utils.isArray(val)) key = key + "[]";
            else val = [
                val
            ];
            utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) v = v.toISOString();
                else if (utils.isObject(v)) v = JSON.stringify(v);
                parts.push(encode(key) + "=" + encode(v));
            });
        });
        serializedParams = parts.join("&");
    }
    if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
};

},{"./../utils":"5By4s"}],"1VRIM":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
function InterceptorManager() {
    this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */ InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */ InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) this.handlers[id] = null;
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */ InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) fn(h);
    });
};
module.exports = InterceptorManager;

},{"./../utils":"5By4s"}],"6sjJ6":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var transformData = require("./transformData");
var isCancel = require("../cancel/isCancel");
var defaults = require("../defaults");
var CanceledError = require("../cancel/CanceledError");
/**
 * Throws a `CanceledError` if cancellation has been requested.
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
    if (config.signal && config.signal.aborted) throw new CanceledError();
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */ module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    // Ensure headers exist
    config.headers = config.headers || {};
    // Transform request data
    config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
    // Flatten headers
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils.forEach([
        "delete",
        "get",
        "head",
        "post",
        "put",
        "patch",
        "common"
    ], function cleanHeaderConfig(method) {
        delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
        }
        return Promise.reject(reason);
    });
};

},{"./../utils":"5By4s","./transformData":"eRqJY","../cancel/isCancel":"a0VmF","../defaults":"hXfHM","../cancel/CanceledError":"9PwCG"}],"eRqJY":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var defaults = require("../defaults");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */ module.exports = function transformData(data, headers, fns) {
    var context = this || defaults;
    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
    });
    return data;
};

},{"./../utils":"5By4s","../defaults":"hXfHM"}],"hXfHM":[function(require,module,exports) {
"use strict";
var process = require("process");
var utils = require("../utils");
var normalizeHeaderName = require("../helpers/normalizeHeaderName");
var AxiosError = require("../core/AxiosError");
var transitionalDefaults = require("./transitional");
var toFormData = require("../helpers/toFormData");
var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) headers["Content-Type"] = value;
}
function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") // For browsers use XHR adapter
    adapter = require("../adapters/xhr");
    else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") // For node use HTTP adapter
    adapter = require("../adapters/http");
    return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
    } catch (e) {
        if (e.name !== "SyntaxError") throw e;
    }
    return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
    transitional: transitionalDefaults,
    adapter: getDefaultAdapter(),
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, "Accept");
            normalizeHeaderName(headers, "Content-Type");
            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
            if (utils.isArrayBufferView(data)) return data.buffer;
            if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
                return data.toString();
            }
            var isObjectPayload = utils.isObject(data);
            var contentType = headers && headers["Content-Type"];
            var isFileList;
            if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
                var _FormData = this.env && this.env.FormData;
                return toFormData(isFileList ? {
                    "files[]": data
                } : data, _FormData && new _FormData());
            } else if (isObjectPayload || contentType === "application/json") {
                setContentTypeIfUnset(headers, "application/json");
                return stringifySafely(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            var transitional = this.transitional || defaults.transitional;
            var silentJSONParsing = transitional && transitional.silentJSONParsing;
            var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
            if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
                return JSON.parse(data);
            } catch (e) {
                if (strictJSONParsing) {
                    if (e.name === "SyntaxError") throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
                    throw e;
                }
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
        FormData: require("./env/FormData")
    },
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    },
    headers: {
        common: {
            "Accept": "application/json, text/plain, */*"
        }
    }
};
utils.forEach([
    "delete",
    "get",
    "head"
], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

},{"process":"d5jf4","../utils":"5By4s","../helpers/normalizeHeaderName":"adBZo","../core/AxiosError":"3u8Tl","./transitional":"lM32f","../helpers/toFormData":"ajoez","../adapters/xhr":"ldm57","../adapters/http":"ldm57","./env/FormData":"aFlee"}],"adBZo":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
};

},{"../utils":"5By4s"}],"3u8Tl":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */ function AxiosError(message, code, config, request, response) {
    Error.call(this);
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
}
utils.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
        };
    }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED"
].forEach(function(code) {
    descriptors[code] = {
        value: code
    };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", {
    value: true
});
// eslint-disable-next-line func-names
AxiosError.from = function(error, code, config, request, response, customProps) {
    var axiosError = Object.create(prototype);
    utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
    });
    AxiosError.call(axiosError, error.message, code, config, request, response);
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
};
module.exports = AxiosError;

},{"../utils":"5By4s"}],"lM32f":[function(require,module,exports) {
"use strict";
module.exports = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
};

},{}],"ajoez":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var utils = require("../utils");
/**
 * Convert a data object to FormData
 * @param {Object} obj
 * @param {?Object} [formData]
 * @returns {Object}
 **/ function toFormData(obj, formData) {
    // eslint-disable-next-line no-param-reassign
    formData = formData || new FormData();
    var stack = [];
    function convertValue(value) {
        if (value === null) return "";
        if (utils.isDate(value)) return value.toISOString();
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) return typeof Blob === "function" ? new Blob([
            value
        ]) : Buffer.from(value);
        return value;
    }
    function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
            if (stack.indexOf(data) !== -1) throw Error("Circular reference detected in " + parentKey);
            stack.push(data);
            utils.forEach(data, function each(value, key) {
                if (utils.isUndefined(value)) return;
                var fullKey = parentKey ? parentKey + "." + key : key;
                var arr;
                if (value && !parentKey && typeof value === "object") {
                    if (utils.endsWith(key, "{}")) // eslint-disable-next-line no-param-reassign
                    value = JSON.stringify(value);
                    else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                        // eslint-disable-next-line func-names
                        arr.forEach(function(el) {
                            !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                        });
                        return;
                    }
                }
                build(value, fullKey);
            });
            stack.pop();
        } else formData.append(parentKey, convertValue(data));
    }
    build(obj);
    return formData;
}
module.exports = toFormData;

},{"buffer":"fCgem","../utils":"5By4s"}],"ldm57":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var settle = require("./../core/settle");
var cookies = require("./../helpers/cookies");
var buildURL = require("./../helpers/buildURL");
var buildFullPath = require("../core/buildFullPath");
var parseHeaders = require("./../helpers/parseHeaders");
var isURLSameOrigin = require("./../helpers/isURLSameOrigin");
var transitionalDefaults = require("../defaults/transitional");
var AxiosError = require("../core/AxiosError");
var CanceledError = require("../cancel/CanceledError");
var parseProtocol = require("../helpers/parseProtocol");
module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
            if (config.cancelToken) config.cancelToken.unsubscribe(onCanceled);
            if (config.signal) config.signal.removeEventListener("abort", onCanceled);
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) delete requestHeaders["Content-Type"]; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        function onloadend() {
            if (!request) return;
            // Prepare the response
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            settle(function _resolve(value) {
                resolve(value);
                done();
            }, function _reject(err) {
                reject(err);
                done();
            }, response);
            // Clean up request
            request = null;
        }
        if ("onloadend" in request) // Use onloadend if available
        request.onloadend = onloadend;
        else // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) return;
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            var transitional = config.transitional || transitionalDefaults;
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ("setRequestHeader" in request) utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (responseType && responseType !== "json") request.responseType = config.responseType;
        // Handle progress if needed
        if (typeof config.onDownloadProgress === "function") request.addEventListener("progress", config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === "function" && request.upload) request.upload.addEventListener("progress", config.onUploadProgress);
        if (config.cancelToken || config.signal) {
            // Handle cancellation
            // eslint-disable-next-line func-names
            onCanceled = function(cancel) {
                if (!request) return;
                reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
                request.abort();
                request = null;
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
        if (!requestData) requestData = null;
        var protocol = parseProtocol(fullPath);
        if (protocol && [
            "http",
            "https",
            "file"
        ].indexOf(protocol) === -1) {
            reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
            return;
        }
        // Send the request
        request.send(requestData);
    });
};

},{"./../utils":"5By4s","./../core/settle":"dD9aC","./../helpers/cookies":"4WJjt","./../helpers/buildURL":"3bwC2","../core/buildFullPath":"1I5TW","./../helpers/parseHeaders":"kqDd5","./../helpers/isURLSameOrigin":"lxXtv","../defaults/transitional":"lM32f","../core/AxiosError":"3u8Tl","../cancel/CanceledError":"9PwCG","../helpers/parseProtocol":"7NfWU"}],"dD9aC":[function(require,module,exports) {
"use strict";
var AxiosError = require("./AxiosError");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */ module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(new AxiosError("Request failed with status code " + response.status, [
        AxiosError.ERR_BAD_REQUEST,
        AxiosError.ERR_BAD_RESPONSE
    ][Math.floor(response.status / 100) - 4], response.config, response.request, response));
};

},{"./AxiosError":"3u8Tl"}],"4WJjt":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
            if (utils.isString(path)) cookie.push("path=" + path);
            if (utils.isString(domain)) cookie.push("domain=" + domain);
            if (secure === true) cookie.push("secure");
            document.cookie = cookie.join("; ");
        },
        read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, "", Date.now() - 86400000);
        }
    };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return {
        write: function write() {},
        read: function read() {
            return null;
        },
        remove: function remove() {}
    };
}();

},{"./../utils":"5By4s"}],"1I5TW":[function(require,module,exports) {
"use strict";
var isAbsoluteURL = require("../helpers/isAbsoluteURL");
var combineURLs = require("../helpers/combineURLs");
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */ module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
    return requestedURL;
};

},{"../helpers/isAbsoluteURL":"jD6NM","../helpers/combineURLs":"brOWK"}],"jD6NM":[function(require,module,exports) {
"use strict";
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ module.exports = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

},{}],"brOWK":[function(require,module,exports) {
"use strict";
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */ module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};

},{}],"kqDd5":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */ module.exports = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;
    if (!headers) return parsed;
    utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
            if (key === "set-cookie") parsed[key] = (parsed[key] ? parsed[key] : []).concat([
                val
            ]);
            else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
    });
    return parsed;
};

},{"./../utils":"5By4s"}],"lxXtv":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement("a");
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        var href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
}();

},{"./../utils":"5By4s"}],"9PwCG":[function(require,module,exports) {
"use strict";
var AxiosError = require("../core/AxiosError");
var utils = require("../utils");
/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */ function CanceledError(message) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
    this.name = "CanceledError";
}
utils.inherits(CanceledError, AxiosError, {
    __CANCEL__: true
});
module.exports = CanceledError;

},{"../core/AxiosError":"3u8Tl","../utils":"5By4s"}],"7NfWU":[function(require,module,exports) {
"use strict";
module.exports = function parseProtocol(url) {
    var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || "";
};

},{}],"aFlee":[function(require,module,exports) {
// eslint-disable-next-line strict
module.exports = null;

},{}],"a0VmF":[function(require,module,exports) {
"use strict";
module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
};

},{}],"b85oP":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */ module.exports = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};
    function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        else if (utils.isPlainObject(source)) return utils.merge({}, source);
        else if (utils.isArray(source)) return source.slice();
        return source;
    }
    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(config1[prop], config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
    }
    // eslint-disable-next-line consistent-return
    function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(prop) {
        if (prop in config2) return getMergedValue(config1[prop], config2[prop]);
        else if (prop in config1) return getMergedValue(undefined, config1[prop]);
    }
    var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
    };
    utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
};

},{"../utils":"5By4s"}],"9vgkY":[function(require,module,exports) {
"use strict";
var VERSION = require("../env/data").version;
var AxiosError = require("../core/AxiosError");
var validators = {};
// eslint-disable-next-line func-names
[
    "object",
    "boolean",
    "number",
    "function",
    "string",
    "symbol"
].forEach(function(type, i) {
    validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
});
var deprecatedWarnings = {};
/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */ validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    // eslint-disable-next-line func-names
    return function(value, opt, opts) {
        if (validator === false) throw new AxiosError(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), AxiosError.ERR_DEPRECATED);
        if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            // eslint-disable-next-line no-console
            console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
    };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */ function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
    var keys = Object.keys(options);
    var i = keys.length;
    while(i-- > 0){
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
            var value = options[opt];
            var result = value === undefined || validator(value, opt, options);
            if (result !== true) throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
            continue;
        }
        if (allowUnknown !== true) throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
    }
}
module.exports = {
    assertOptions: assertOptions,
    validators: validators
};

},{"../env/data":"h29L9","../core/AxiosError":"3u8Tl"}],"h29L9":[function(require,module,exports) {
module.exports = {
    "version": "0.27.2"
};

},{}],"45wzn":[function(require,module,exports) {
"use strict";
var CanceledError = require("./CanceledError");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function CancelToken(executor) {
    if (typeof executor !== "function") throw new TypeError("executor must be a function.");
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    // eslint-disable-next-line func-names
    this.promise.then(function(cancel) {
        if (!token._listeners) return;
        var i;
        var l = token._listeners.length;
        for(i = 0; i < l; i++)token._listeners[i](cancel);
        token._listeners = null;
    });
    // eslint-disable-next-line func-names
    this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
            token.subscribe(resolve);
            _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
            token.unsubscribe(_resolve);
        };
        return promise;
    };
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `CanceledError` if cancellation has been requested.
 */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Subscribe to the cancel signal
 */ CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
        listener(this.reason);
        return;
    }
    if (this._listeners) this._listeners.push(listener);
    else this._listeners = [
        listener
    ];
};
/**
 * Unsubscribe from the cancel signal
 */ CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) return;
    var index = this._listeners.indexOf(listener);
    if (index !== -1) this._listeners.splice(index, 1);
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
module.exports = CancelToken;

},{"./CanceledError":"9PwCG"}],"dyQ8N":[function(require,module,exports) {
"use strict";
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */ module.exports = function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
};

},{}],"eyiLq":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */ module.exports = function isAxiosError(payload) {
    return utils.isObject(payload) && payload.isAxiosError === true;
};

},{"./../utils":"5By4s"}],"l2VdD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.splitInGroupOf = void 0;
// * pour faire des sortes de chunck d'addresses
const splitInGroupOf = (arr, chunkSize)=>arr.reduce((chunks, newElement)=>{
        const lastChunk = chunks[chunks.length - 1];
        if (lastChunk.length < chunkSize) lastChunk.push(newElement);
        else chunks.push([
            newElement
        ]);
        return chunks;
    }, [
        []
    ]);
exports.splitInGroupOf = splitInGroupOf;

},{}],"kpnpI":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _1 = require(".");
const TxCache_1 = __importDefault(require("./TxCache"));
const Tx_1 = require("./Utils/Tx");
const network = "main";
const txCache = TxCache_1.default;
class BlochainCache {
    static getUnspendTxOuput(address) {
        const txs = _1.TxCache.getAllTx();
        // console.log({ allTx: txs });
        const utxo = (0, Tx_1.getUtxos)(txs, address);
        return utxo;
    }
}
exports.default = BlochainCache;

},{".":"kShel","./TxCache":"cjddo","./Utils/Tx":"82oGo"}],"cjddo":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const transaction_1 = __importDefault(require("bsv/lib/transaction/transaction"));
const Crypto_1 = require("./Utils/Crypto");
const Tx_1 = require("./Utils/Tx");
// * pour avoir un localStorage dans node
if (typeof localStorage === "undefined" || localStorage === null) {
    const { LocalStorage  } = require("node-localstorage");
    global.localStorage = new LocalStorage("./MyLocalStorage");
}
class TxCache {
    constructor(){
        this.transactions = [];
        this.transactions = this.loadTransactionsFromLocalStorage();
    }
    importFromHex(hex_str) {
        console.warn("transaction validation should be done before registering it into the cache");
        this.transactions.push(new transaction_1.default(hex_str));
        this.saveTransactionsIntoLocalStorage(this.transactions);
    }
    getUtxo(adr) {
        // check si ça marche
        const txs = this.transactions.map((tx)=>tx.toString());
        return (0, Tx_1.getUtxos)(txs, adr);
    }
    getTxById(tx_hash) {
        // TODO: trouver la fonction qui sert à hash les transactions
        return this.transactions.find((tr)=>tx_hash == (0, Crypto_1.getTxId)(tr.toString()));
    }
    computeBalanceOf(address) {
        const totalSatoshi = 0;
        for (let tx of this.transactions);
    }
    /**
     * @returns all transaction in bsv object format
     */ getAllTx() {
        return this.transactions.map((tx)=>tx.toString());
    }
    loadTransactionsFromLocalStorage() {
        const tx_hexs_json = localStorage.getItem("transactions") || "[]";
        // console.log({ tx_hexs_json });
        /**
         * @type {string[]}
         */ const tx_hexs = JSON.parse(tx_hexs_json);
        return tx_hexs.map((hex)=>new transaction_1.default(hex));
    }
    /**
     * pour sauvegarder les instances dans le localStorage
     * @param {Transaction[]} txs
     */ saveTransactionsIntoLocalStorage(txs) {
        const tx_hexs = txs.map((tx)=>tx.toString());
        /**
         * @type {string[]}
         */ const tx_hexs_json = JSON.stringify(tx_hexs);
        localStorage.setItem("transactions", tx_hexs_json);
    }
}
const txCache = new TxCache();
exports.default = txCache;

},{"bsv/lib/transaction/transaction":"ibKkK","./Utils/Crypto":"cZ5Du","./Utils/Tx":"82oGo","node-localstorage":"k7sDl"}],"cZ5Du":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.adrToAdrHash = exports.sha256ripemd160 = exports.getTxId = void 0;
const bsv = __importStar(require("bsv"));
const getTxId = (tx_hex)=>{
    const tx_buffer = Buffer.from(tx_hex, "hex");
    const hash_buff = bsv.crypto.Hash.sha256sha256(tx_buffer);
    const big_endian_str = hash_buff.toString("hex");
    const little_endian_str = big_endian_str.match(/../g).reverse().join("");
    return little_endian_str;
};
exports.getTxId = getTxId;
const sha256ripemd160 = (buffer)=>{
    return bsv.crypto.sha256ripemd160(buffer);
};
exports.sha256ripemd160 = sha256ripemd160;
const adrToAdrHash = (adr)=>{
    // * note:
    // adr: sha256ripemd160(
    //   Encoders.Base58StrToBuffer(adrAntho).toString("hex")
    // ),
    // ajouter les imports
    const Script = require("bsv/lib/script/script");
    const Address = require("bsv/lib/address");
    const script = Script.fromAddress(new Address(adr));
    const hashedAdr = script.toASM().split(" ")[2];
    return hashedAdr;
};
exports.adrToAdrHash = adrToAdrHash;

},{"buffer":"fCgem","bsv":"hOFCS","bsv/lib/script/script":"97HeK","bsv/lib/address":"lDqbu"}],"82oGo":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getTotalSatoshisInTxForAdr = exports.verifyTxTotalAmount = exports.getTotalSatoshisInUtxos = exports.getUtxos = exports.getTxUnspendOutput = void 0;
const Crypto_1 = require("./Crypto");
const bsv_1 = __importDefault(require("bsv"));
class Tx {
    addInput(input) {}
    addOutput(output) {}
    sign(keyOrKeys) {
        return "";
    }
}
/**
 * retourne les outputs d'une transaction
 * sous une forme qui permet de s'en servir comme donnée d'input
 * pour signer une transaction
 * depuis une tx en hexa
 * @param {string} tx_hex la tx en hexa
 */ const getTxUnspendOutput = (tx_hex, givenAdr)=>{
    // TODO: checker si il y a pas une transaction dans le cache qui fait référence à celle si
    const tx = new bsv_1.default.Transaction(tx_hex);
    const outputsData = tx.toObject().outputs;
    // * à faire : fonction getTxOutputInfo qui fait très exactement ça
    const outputs = outputsData.map(({ satoshis , script  })=>{
        const scriptData = new bsv_1.default.Script(script);
        const targetAdrHash = scriptData.toASM().split(" ")[2];
        return {
            satoshis,
            script,
            targetAdrHash
        };
    });
    const utxo = outputs.filter((txOutput)=>txOutput.targetAdrHash == (0, Crypto_1.adrToAdrHash)(givenAdr));
    return utxo.map((tx, i)=>{
        const { satoshis , script  } = tx;
        // * je prend juste pas targetAdrHash & j'ajoute l'identifiant de la tx
        return {
            satoshis,
            script,
            txid: (0, Crypto_1.getTxId)(tx_hex),
            vout: i
        };
    });
};
exports.getTxUnspendOutput = getTxUnspendOutput;
/**
 * retourne les utxo dans une liste de transaction encodé en hexadécimal
 */ const getUtxos = (hex_txs, ofAdr)=>{
    const utxoData = hex_txs.map((tx)=>getTxUnspendOutput(tx, ofAdr));
    const utxo = utxoData.flatMap((e)=>e);
    return utxo;
};
exports.getUtxos = getUtxos;
/**
 * retourne le montant total transferé à un adresse donnée à partir d'une liste de transaction
 */ const getTotalSatoshisInUtxos = (utxo)=>{
    const totalSatoshis = utxo.reduce((total, nextUtxo)=>total + nextUtxo.satoshis, 0);
    return totalSatoshis;
};
exports.getTotalSatoshisInUtxos = getTotalSatoshisInUtxos;
/**
 * retourne le montant en satoshis pour une adresse donnée dans une liste de tx
 */ const getTotalSatoshisInTxForAdr = (txs, adr)=>{
    const utxoForThisAdr = getUtxos(txs, adr);
    return getTotalSatoshisInUtxos(utxoForThisAdr);
};
exports.getTotalSatoshisInTxForAdr = getTotalSatoshisInTxForAdr;
/**
 * verifie si un montant donnée à bien été transferé à une adresse donnée
 */ const verifyTxTotalAmount = (txs, requiredAmount, toAdr)=>{
    const totalAmountOfSatoshisInTxs = getTotalSatoshisInTxForAdr(txs, toAdr);
    return totalAmountOfSatoshisInTxs >= requiredAmount;
};
exports.verifyTxTotalAmount = verifyTxTotalAmount;

},{"./Crypto":"cZ5Du","bsv":"hOFCS"}],"k7sDl":[function(require,module,exports) {
var process = require("process");
// Generated by CoffeeScript 1.12.7
(function() {
    var JSONStorage, KEY_FOR_EMPTY_STRING, LocalStorage, MetaKey, QUOTA_EXCEEDED_ERR, StorageEvent, _emptyDirectory, _escapeKey, _rm, createMap, events, fs, path, writeSync, extend = function(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    path = require("path");
    fs = require("fs");
    events = require("events");
    writeSync = require("write-file-atomic").sync;
    KEY_FOR_EMPTY_STRING = "---.EMPTY_STRING.---";
    _emptyDirectory = function(target) {
        var i, len, p, ref, results;
        ref = fs.readdirSync(target);
        results = [];
        for(i = 0, len = ref.length; i < len; i++){
            p = ref[i];
            results.push(_rm(path.join(target, p)));
        }
        return results;
    };
    _rm = function(target) {
        if (fs.statSync(target).isDirectory()) {
            _emptyDirectory(target);
            return fs.rmdirSync(target);
        } else return fs.unlinkSync(target);
    };
    _escapeKey = function(key) {
        var newKey;
        if (key === "") newKey = KEY_FOR_EMPTY_STRING;
        else newKey = "" + key;
        return newKey;
    };
    QUOTA_EXCEEDED_ERR = function(superClass) {
        extend(QUOTA_EXCEEDED_ERR, superClass);
        function QUOTA_EXCEEDED_ERR(message) {
            this.message = message != null ? message : "Unknown error.";
            QUOTA_EXCEEDED_ERR.__super__.constructor.call(this);
            if (Error.captureStackTrace != null) Error.captureStackTrace(this, this.constructor);
            this.name = this.constructor.name;
        }
        QUOTA_EXCEEDED_ERR.prototype.toString = function() {
            return this.name + ": " + this.message;
        };
        return QUOTA_EXCEEDED_ERR;
    }(Error);
    StorageEvent = function() {
        function StorageEvent(key1, oldValue1, newValue1, url, storageArea) {
            this.key = key1;
            this.oldValue = oldValue1;
            this.newValue = newValue1;
            this.url = url;
            this.storageArea = storageArea != null ? storageArea : "localStorage";
        }
        return StorageEvent;
    }();
    MetaKey = function() {
        function MetaKey(key1, index1) {
            this.key = key1;
            this.index = index1;
            if (!(this instanceof MetaKey)) return new MetaKey(this.key, this.index);
        }
        return MetaKey;
    }();
    createMap = function() {
        var Map;
        Map = function() {};
        Map.prototype = Object.create(null);
        return new Map();
    };
    LocalStorage = function(superClass) {
        var instanceMap;
        extend(LocalStorage, superClass);
        instanceMap = {};
        function LocalStorage(_location, quota) {
            var handler;
            this._location = _location;
            this.quota = quota != null ? quota : 5242880;
            LocalStorage.__super__.constructor.call(this);
            if (!(this instanceof LocalStorage)) return new LocalStorage(this._location, this.quota);
            this._location = path.resolve(this._location);
            if (instanceMap[this._location] != null) return instanceMap[this._location];
            this.length = 0;
            this._bytesInUse = 0;
            this._keys = [];
            this._metaKeyMap = createMap();
            this._eventUrl = "pid:" + process.pid;
            this._init();
            this._QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;
            if (typeof Proxy !== "undefined" && Proxy !== null) {
                handler = {
                    set: function(_this) {
                        return function(receiver, key, value) {
                            if (_this[key] != null) return _this[key] = value;
                            else return _this.setItem(key, value);
                        };
                    }(this),
                    get: function(_this) {
                        return function(receiver, key) {
                            if (_this[key] != null) return _this[key];
                            else return _this.getItem(key);
                        };
                    }(this)
                };
                instanceMap[this._location] = new Proxy(this, handler);
                return instanceMap[this._location];
            }
            instanceMap[this._location] = this;
            return instanceMap[this._location];
        }
        LocalStorage.prototype._init = function() {
            var _MetaKey, _decodedKey, _keys, e, i, index, k, len, stat;
            try {
                stat = fs.statSync(this._location);
                if (stat != null && !stat.isDirectory()) throw new Error("A file exists at the location '" + this._location + "' when trying to create/open localStorage");
                this._bytesInUse = 0;
                this.length = 0;
                _keys = fs.readdirSync(this._location);
                for(index = i = 0, len = _keys.length; i < len; index = ++i){
                    k = _keys[index];
                    _decodedKey = decodeURIComponent(k);
                    this._keys.push(_decodedKey);
                    _MetaKey = new MetaKey(k, index);
                    this._metaKeyMap[_decodedKey] = _MetaKey;
                    stat = this._getStat(k);
                    if ((stat != null ? stat.size : void 0) != null) {
                        _MetaKey.size = stat.size;
                        this._bytesInUse += stat.size;
                    }
                }
                this.length = _keys.length;
            } catch (error) {
                e = error;
                if (e.code !== "ENOENT") throw e;
                try {
                    fs.mkdirSync(this._location, {
                        recursive: true
                    });
                } catch (error1) {
                    e = error1;
                    if (e.code !== "EEXIST") throw e;
                }
            }
        };
        LocalStorage.prototype.setItem = function(key, value) {
            var encodedKey, evnt, existsBeforeSet, filename, hasListeners, metaKey, oldLength, oldValue, valueString, valueStringLength;
            hasListeners = this.listenerCount("storage");
            oldValue = null;
            if (hasListeners) oldValue = this.getItem(key);
            key = _escapeKey(key);
            encodedKey = encodeURIComponent(key).replace(/[!'()]/g, escape).replace(/\*/g, "%2A");
            filename = path.join(this._location, encodedKey);
            valueString = "" + value;
            valueStringLength = valueString.length;
            metaKey = this._metaKeyMap[key];
            existsBeforeSet = !!metaKey;
            if (existsBeforeSet) oldLength = metaKey.size;
            else oldLength = 0;
            if (this._bytesInUse - oldLength + valueStringLength > this.quota) throw new QUOTA_EXCEEDED_ERR();
            writeSync(filename, valueString, {
                encoding: "utf8"
            });
            if (!existsBeforeSet) {
                metaKey = new MetaKey(encodedKey, this._keys.push(key) - 1);
                metaKey.size = valueStringLength;
                this._metaKeyMap[key] = metaKey;
                this.length += 1;
                this._bytesInUse += valueStringLength;
            }
            if (hasListeners) {
                evnt = new StorageEvent(key, oldValue, value, this._eventUrl);
                return this.emit("storage", evnt);
            }
        };
        LocalStorage.prototype.getItem = function(key) {
            var filename, metaKey;
            key = _escapeKey(key);
            metaKey = this._metaKeyMap[key];
            if (!!metaKey) {
                filename = path.join(this._location, metaKey.key);
                return fs.readFileSync(filename, "utf8");
            } else return null;
        };
        LocalStorage.prototype._getStat = function(key) {
            var filename;
            key = _escapeKey(key);
            filename = path.join(this._location, encodeURIComponent(key));
            try {
                return fs.statSync(filename);
            } catch (error) {
                return null;
            }
        };
        LocalStorage.prototype.removeItem = function(key) {
            var evnt, filename, hasListeners, k, meta, metaKey, oldValue, ref, v;
            key = _escapeKey(key);
            metaKey = this._metaKeyMap[key];
            if (!!metaKey) {
                hasListeners = this.listenerCount("storage");
                oldValue = null;
                if (hasListeners) oldValue = this.getItem(key);
                delete this._metaKeyMap[key];
                this.length -= 1;
                this._bytesInUse -= metaKey.size;
                filename = path.join(this._location, metaKey.key);
                this._keys.splice(metaKey.index, 1);
                ref = this._metaKeyMap;
                for(k in ref){
                    v = ref[k];
                    meta = this._metaKeyMap[k];
                    if (meta.index > metaKey.index) meta.index -= 1;
                }
                _rm(filename);
                if (hasListeners) {
                    evnt = new StorageEvent(key, oldValue, null, this._eventUrl);
                    return this.emit("storage", evnt);
                }
            }
        };
        LocalStorage.prototype.key = function(n) {
            var rawKey;
            rawKey = this._keys[n];
            if (rawKey === KEY_FOR_EMPTY_STRING) return "";
            else return rawKey;
        };
        LocalStorage.prototype.clear = function() {
            var evnt;
            _emptyDirectory(this._location);
            this._metaKeyMap = createMap();
            this._keys = [];
            this.length = 0;
            this._bytesInUse = 0;
            if (this.listenerCount("storage")) {
                evnt = new StorageEvent(null, null, null, this._eventUrl);
                return this.emit("storage", evnt);
            }
        };
        LocalStorage.prototype._getBytesInUse = function() {
            return this._bytesInUse;
        };
        LocalStorage.prototype._deleteLocation = function() {
            delete instanceMap[this._location];
            _rm(this._location);
            this._metaKeyMap = {};
            this._keys = [];
            this.length = 0;
            return this._bytesInUse = 0;
        };
        return LocalStorage;
    }(events.EventEmitter);
    JSONStorage = function(superClass) {
        extend(JSONStorage, superClass);
        function JSONStorage() {
            return JSONStorage.__super__.constructor.apply(this, arguments);
        }
        JSONStorage.prototype.setItem = function(key, value) {
            var newValue;
            newValue = JSON.stringify(value);
            return JSONStorage.__super__.setItem.call(this, key, newValue);
        };
        JSONStorage.prototype.getItem = function(key) {
            return JSON.parse(JSONStorage.__super__.getItem.call(this, key));
        };
        return JSONStorage;
    }(LocalStorage);
    exports.LocalStorage = LocalStorage;
    exports.JSONStorage = JSONStorage;
    exports.QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;
}).call(this);

},{"process":"d5jf4","path":"loE3o","fs":"f2Ci1","events":"1VQLm","write-file-atomic":"4wtTD"}],"loE3o":[function(require,module,exports) {
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var process = require("process");
function assertPath(path) {
    if (typeof path !== "string") throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
}
// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
    var res = "";
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;
    for(var i = 0; i <= path.length; ++i){
        if (i < path.length) code = path.charCodeAt(i);
        else if (code === 47 /*/*/ ) break;
        else code = 47 /*/*/ ;
        if (code === 47 /*/*/ ) {
            if (lastSlash === i - 1 || dots === 1) ;
            else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/  || res.charCodeAt(res.length - 2) !== 46 /*.*/ ) {
                    if (res.length > 2) {
                        var lastSlashIndex = res.lastIndexOf("/");
                        if (lastSlashIndex !== res.length - 1) {
                            if (lastSlashIndex === -1) {
                                res = "";
                                lastSegmentLength = 0;
                            } else {
                                res = res.slice(0, lastSlashIndex);
                                lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                            }
                            lastSlash = i;
                            dots = 0;
                            continue;
                        }
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += "/..";
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += "/" + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 /*.*/  && dots !== -1) ++dots;
        else dots = -1;
    }
    return res;
}
function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root;
    var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
var posix = {
    // path.resolve([from ...], to)
    resolve: function resolve() {
        var resolvedPath = "";
        var resolvedAbsolute = false;
        var cwd;
        for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){
            var path;
            if (i >= 0) path = arguments[i];
            else {
                if (cwd === undefined) cwd = process.cwd();
                path = cwd;
            }
            assertPath(path);
            // Skip empty entries
            if (path.length === 0) continue;
            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        // Normalize the path
        resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
            if (resolvedPath.length > 0) return "/" + resolvedPath;
            else return "/";
        } else if (resolvedPath.length > 0) return resolvedPath;
        else return ".";
    },
    normalize: function normalize(path) {
        assertPath(path);
        if (path.length === 0) return ".";
        var isAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/ ;
        // Normalize the path
        path = normalizeStringPosix(path, !isAbsolute);
        if (path.length === 0 && !isAbsolute) path = ".";
        if (path.length > 0 && trailingSeparator) path += "/";
        if (isAbsolute) return "/" + path;
        return path;
    },
    isAbsolute: function isAbsolute(path) {
        assertPath(path);
        return path.length > 0 && path.charCodeAt(0) === 47 /*/*/ ;
    },
    join: function join() {
        if (arguments.length === 0) return ".";
        var joined;
        for(var i = 0; i < arguments.length; ++i){
            var arg = arguments[i];
            assertPath(arg);
            if (arg.length > 0) {
                if (joined === undefined) joined = arg;
                else joined += "/" + arg;
            }
        }
        if (joined === undefined) return ".";
        return posix.normalize(joined);
    },
    relative: function relative(from, to) {
        assertPath(from);
        assertPath(to);
        if (from === to) return "";
        from = posix.resolve(from);
        to = posix.resolve(to);
        if (from === to) return "";
        // Trim any leading backslashes
        var fromStart = 1;
        for(; fromStart < from.length; ++fromStart){
            if (from.charCodeAt(fromStart) !== 47 /*/*/ ) break;
        }
        var fromEnd = from.length;
        var fromLen = fromEnd - fromStart;
        // Trim any leading backslashes
        var toStart = 1;
        for(; toStart < to.length; ++toStart){
            if (to.charCodeAt(toStart) !== 47 /*/*/ ) break;
        }
        var toEnd = to.length;
        var toLen = toEnd - toStart;
        // Compare paths to find the longest common path from root
        var length = fromLen < toLen ? fromLen : toLen;
        var lastCommonSep = -1;
        var i = 0;
        for(; i <= length; ++i){
            if (i === length) {
                if (toLen > length) {
                    if (to.charCodeAt(toStart + i) === 47 /*/*/ ) // We get here if `from` is the exact base path for `to`.
                    // For example: from='/foo/bar'; to='/foo/bar/baz'
                    return to.slice(toStart + i + 1);
                    else if (i === 0) // We get here if `from` is the root
                    // For example: from='/'; to='/foo'
                    return to.slice(toStart + i);
                } else if (fromLen > length) {
                    if (from.charCodeAt(fromStart + i) === 47 /*/*/ ) // We get here if `to` is the exact base path for `from`.
                    // For example: from='/foo/bar/baz'; to='/foo/bar'
                    lastCommonSep = i;
                    else if (i === 0) // We get here if `to` is the root.
                    // For example: from='/foo'; to='/'
                    lastCommonSep = 0;
                }
                break;
            }
            var fromCode = from.charCodeAt(fromStart + i);
            var toCode = to.charCodeAt(toStart + i);
            if (fromCode !== toCode) break;
            else if (fromCode === 47 /*/*/ ) lastCommonSep = i;
        }
        var out = "";
        // Generate the relative path based on the path difference between `to`
        // and `from`
        for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i)if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/ ) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
        // Lastly, append the rest of the destination (`to`) path that comes after
        // the common path parts
        if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
        else {
            toStart += lastCommonSep;
            if (to.charCodeAt(toStart) === 47 /*/*/ ) ++toStart;
            return to.slice(toStart);
        }
    },
    _makeLong: function _makeLong(path) {
        return path;
    },
    dirname: function dirname(path) {
        assertPath(path);
        if (path.length === 0) return ".";
        var code = path.charCodeAt(0);
        var hasRoot = code === 47 /*/*/ ;
        var end = -1;
        var matchedSlash = true;
        for(var i = path.length - 1; i >= 1; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            } else // We saw the first non-path separator
            matchedSlash = false;
        }
        if (end === -1) return hasRoot ? "/" : ".";
        if (hasRoot && end === 1) return "//";
        return path.slice(0, end);
    },
    basename: function basename(path, ext) {
        if (ext !== undefined && typeof ext !== "string") throw new TypeError('"ext" argument must be a string');
        assertPath(path);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
            if (ext.length === path.length && ext === path) return "";
            var extIdx = ext.length - 1;
            var firstNonSlashEnd = -1;
            for(i = path.length - 1; i >= 0; --i){
                var code = path.charCodeAt(i);
                if (code === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === ext.charCodeAt(extIdx)) {
                            if (--extIdx === -1) // We matched the extension, so mark this as the end of our path
                            // component
                            end = i;
                        } else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end) end = firstNonSlashEnd;
            else if (end === -1) end = path.length;
            return path.slice(start, end);
        } else {
            for(i = path.length - 1; i >= 0; --i){
                if (path.charCodeAt(i) === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else if (end === -1) {
                    // We saw the first non-path separator, mark this as the end of our
                    // path component
                    matchedSlash = false;
                    end = i + 1;
                }
            }
            if (end === -1) return "";
            return path.slice(start, end);
        }
    },
    extname: function extname(path) {
        assertPath(path);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        for(var i = path.length - 1; i >= 0; --i){
            var code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) return "";
        return path.slice(startDot, end);
    },
    format: function format(pathObject) {
        if (pathObject === null || typeof pathObject !== "object") throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
        return _format("/", pathObject);
    },
    parse: function parse(path) {
        assertPath(path);
        var ret = {
            root: "",
            dir: "",
            base: "",
            ext: "",
            name: ""
        };
        if (path.length === 0) return ret;
        var code = path.charCodeAt(0);
        var isAbsolute = code === 47 /*/*/ ;
        var start;
        if (isAbsolute) {
            ret.root = "/";
            start = 1;
        } else start = 0;
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        // Get non-dir info
        for(; i >= start; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            if (end !== -1) {
                if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);
                else ret.base = ret.name = path.slice(startPart, end);
            }
        } else {
            if (startPart === 0 && isAbsolute) {
                ret.name = path.slice(1, startDot);
                ret.base = path.slice(1, end);
            } else {
                ret.name = path.slice(startPart, startDot);
                ret.base = path.slice(startPart, end);
            }
            ret.ext = path.slice(startDot, end);
        }
        if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
        else if (isAbsolute) ret.dir = "/";
        return ret;
    },
    sep: "/",
    delimiter: ":",
    win32: null,
    posix: null
};
posix.posix = posix;
module.exports = posix;

},{"process":"d5jf4"}],"4wtTD":[function(require,module,exports) {
"use strict";
var process = require("process");
var __filename = "node_modules/node-localstorage/node_modules/write-file-atomic/index.js";
var Buffer = require("buffer").Buffer;
module.exports = writeFile;
module.exports.sync = writeFileSync;
module.exports._getTmpname = getTmpname // for testing
;
var fs = require("graceful-fs");
var chain = require("slide").chain;
var MurmurHash3 = require("imurmurhash");
var extend = Object.assign || require("util")._extend;
var invocations = 0;
function getTmpname(filename) {
    return filename + "." + MurmurHash3(__filename).hash(String(process.pid)).hash(String(++invocations)).result();
}
function writeFile(filename, data, options, callback) {
    if (options instanceof Function) {
        callback = options;
        options = null;
    }
    if (!options) options = {};
    fs.realpath(filename, function(_, realname) {
        _writeFile(realname || filename, data, options, callback);
    });
}
function _writeFile(filename, data, options, callback) {
    var tmpfile = getTmpname(filename);
    if (options.mode && options.chown) return thenWriteFile();
    else // Either mode or chown is not explicitly set
    // Default behavior is to copy it from original file
    return fs.stat(filename, function(err, stats) {
        if (err || !stats) return thenWriteFile();
        options = extend({}, options);
        if (!options.mode) options.mode = stats.mode;
        if (!options.chown && process.getuid) options.chown = {
            uid: stats.uid,
            gid: stats.gid
        };
        return thenWriteFile();
    });
    function thenWriteFile() {
        chain([
            [
                writeFileAsync,
                tmpfile,
                data,
                options.mode,
                options.encoding || "utf8"
            ],
            options.chown && [
                fs,
                fs.chown,
                tmpfile,
                options.chown.uid,
                options.chown.gid
            ],
            options.mode && [
                fs,
                fs.chmod,
                tmpfile,
                options.mode
            ],
            [
                fs,
                fs.rename,
                tmpfile,
                filename
            ]
        ], function(err) {
            err ? fs.unlink(tmpfile, function() {
                callback(err);
            }) : callback();
        });
    }
    // doing this instead of `fs.writeFile` in order to get the ability to
    // call `fsync`.
    function writeFileAsync(file, data, mode, encoding, cb) {
        fs.open(file, "w", options.mode, function(err, fd) {
            if (err) return cb(err);
            if (Buffer.isBuffer(data)) return fs.write(fd, data, 0, data.length, 0, syncAndClose);
            else if (data != null) return fs.write(fd, String(data), 0, String(encoding), syncAndClose);
            else return syncAndClose();
            function syncAndClose(err) {
                if (err) return cb(err);
                fs.fsync(fd, function(err) {
                    if (err) return cb(err);
                    fs.close(fd, cb);
                });
            }
        });
    }
}
function writeFileSync(filename, data, options) {
    if (!options) options = {};
    try {
        filename = fs.realpathSync(filename);
    } catch (ex) {
    // it's ok, it'll happen on a not yet existing file
    }
    var tmpfile = getTmpname(filename);
    try {
        if (!options.mode || !options.chown) // Either mode or chown is not explicitly set
        // Default behavior is to copy it from original file
        try {
            var stats = fs.statSync(filename);
            options = extend({}, options);
            if (!options.mode) options.mode = stats.mode;
            if (!options.chown && process.getuid) options.chown = {
                uid: stats.uid,
                gid: stats.gid
            };
        } catch (ex1) {
        // ignore stat errors
        }
        var fd = fs.openSync(tmpfile, "w", options.mode);
        if (Buffer.isBuffer(data)) fs.writeSync(fd, data, 0, data.length, 0);
        else if (data != null) fs.writeSync(fd, String(data), 0, String(options.encoding || "utf8"));
        fs.fsyncSync(fd);
        fs.closeSync(fd);
        if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);
        if (options.mode) fs.chmodSync(tmpfile, options.mode);
        fs.renameSync(tmpfile, filename);
    } catch (err) {
        try {
            fs.unlinkSync(tmpfile);
        } catch (e) {}
        throw err;
    }
}

},{"process":"d5jf4","buffer":"fCgem","graceful-fs":"cASLk","slide":"l4BNK","imurmurhash":"3jVs3","util":"cxohQ"}],"cASLk":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
var fs = require("fs");
var polyfills = require("./polyfills.js");
var legacy = require("./legacy-streams.js");
var clone = require("./clone.js");
var util = require("util");
/* istanbul ignore next - node 0.x polyfill */ var gracefulQueue;
var previousSymbol;
/* istanbul ignore else - node 0.x polyfill */ if (typeof Symbol === "function" && typeof Symbol.for === "function") {
    gracefulQueue = Symbol.for("graceful-fs.queue");
    // This is used in testing by future versions
    previousSymbol = Symbol.for("graceful-fs.previous");
} else {
    gracefulQueue = "___graceful-fs.queue";
    previousSymbol = "___graceful-fs.previous";
}
function noop() {}
function publishQueue(context, queue) {
    Object.defineProperty(context, gracefulQueue, {
        get: function() {
            return queue;
        }
    });
}
var debug = noop;
if (util.debuglog) debug = util.debuglog("gfs4");
else if (/\bgfs4\b/i.test("")) debug = function() {
    var m = util.format.apply(util, arguments);
    m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
    console.error(m);
};
// Once time initialization
if (!fs[gracefulQueue]) {
    // This queue can be shared by multiple loaded instances
    var queue = global[gracefulQueue] || [];
    publishQueue(fs, queue);
    // Patch fs.close/closeSync to shared queue version, because we need
    // to retry() whenever a close happens *anywhere* in the program.
    // This is essential when multiple graceful-fs instances are
    // in play at the same time.
    fs.close = function(fs$close) {
        function close(fd, cb) {
            return fs$close.call(fs, fd, function(err) {
                // This function uses the graceful-fs shared queue
                if (!err) resetQueue();
                if (typeof cb === "function") cb.apply(this, arguments);
            });
        }
        Object.defineProperty(close, previousSymbol, {
            value: fs$close
        });
        return close;
    }(fs.close);
    fs.closeSync = function(fs$closeSync) {
        function closeSync(fd) {
            // This function uses the graceful-fs shared queue
            fs$closeSync.apply(fs, arguments);
            resetQueue();
        }
        Object.defineProperty(closeSync, previousSymbol, {
            value: fs$closeSync
        });
        return closeSync;
    }(fs.closeSync);
    if (/\bgfs4\b/i.test("")) process.on("exit", function() {
        debug(fs[gracefulQueue]);
        require("assert").equal(fs[gracefulQueue].length, 0);
    });
}
if (!global[gracefulQueue]) publishQueue(global, fs[gracefulQueue]);
module.exports = patch(clone(fs));
function patch(fs) {
    // Everything that references the open() function needs to be in here
    polyfills(fs);
    fs.gracefulify = patch;
    fs.createReadStream = createReadStream;
    fs.createWriteStream = createWriteStream;
    var fs$readFile = fs.readFile;
    fs.readFile = readFile;
    function readFile(path, options, cb) {
        if (typeof options === "function") cb = options, options = null;
        return go$readFile(path, options, cb);
        function go$readFile(path, options, cb, startTime) {
            return fs$readFile(path, options, function(err) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
                    go$readFile,
                    [
                        path,
                        options,
                        cb
                    ],
                    err,
                    startTime || Date.now(),
                    Date.now()
                ]);
                else {
                    if (typeof cb === "function") cb.apply(this, arguments);
                }
            });
        }
    }
    var fs$writeFile = fs.writeFile;
    fs.writeFile = writeFile;
    function writeFile(path, data, options, cb) {
        if (typeof options === "function") cb = options, options = null;
        return go$writeFile(path, data, options, cb);
        function go$writeFile(path, data, options, cb, startTime) {
            return fs$writeFile(path, data, options, function(err) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
                    go$writeFile,
                    [
                        path,
                        data,
                        options,
                        cb
                    ],
                    err,
                    startTime || Date.now(),
                    Date.now()
                ]);
                else {
                    if (typeof cb === "function") cb.apply(this, arguments);
                }
            });
        }
    }
    var fs$appendFile = fs.appendFile;
    if (fs$appendFile) fs.appendFile = appendFile;
    function appendFile(path, data, options, cb) {
        if (typeof options === "function") cb = options, options = null;
        return go$appendFile(path, data, options, cb);
        function go$appendFile(path, data, options, cb, startTime) {
            return fs$appendFile(path, data, options, function(err) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
                    go$appendFile,
                    [
                        path,
                        data,
                        options,
                        cb
                    ],
                    err,
                    startTime || Date.now(),
                    Date.now()
                ]);
                else {
                    if (typeof cb === "function") cb.apply(this, arguments);
                }
            });
        }
    }
    var fs$copyFile = fs.copyFile;
    if (fs$copyFile) fs.copyFile = copyFile;
    function copyFile(src, dest, flags, cb) {
        if (typeof flags === "function") {
            cb = flags;
            flags = 0;
        }
        return go$copyFile(src, dest, flags, cb);
        function go$copyFile(src, dest, flags, cb, startTime) {
            return fs$copyFile(src, dest, flags, function(err) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
                    go$copyFile,
                    [
                        src,
                        dest,
                        flags,
                        cb
                    ],
                    err,
                    startTime || Date.now(),
                    Date.now()
                ]);
                else {
                    if (typeof cb === "function") cb.apply(this, arguments);
                }
            });
        }
    }
    var fs$readdir = fs.readdir;
    fs.readdir = readdir;
    var noReaddirOptionVersions = /^v[0-5]\./;
    function readdir(path, options, cb) {
        if (typeof options === "function") cb = options, options = null;
        var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir(path, options, cb, startTime) {
            return fs$readdir(path, fs$readdirCallback(path, options, cb, startTime));
        } : function go$readdir(path, options, cb, startTime) {
            return fs$readdir(path, options, fs$readdirCallback(path, options, cb, startTime));
        };
        return go$readdir(path, options, cb);
        function fs$readdirCallback(path, options, cb, startTime) {
            return function(err, files) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
                    go$readdir,
                    [
                        path,
                        options,
                        cb
                    ],
                    err,
                    startTime || Date.now(),
                    Date.now()
                ]);
                else {
                    if (files && files.sort) files.sort();
                    if (typeof cb === "function") cb.call(this, err, files);
                }
            };
        }
    }
    if (process.version.substr(0, 4) === "v0.8") {
        var legStreams = legacy(fs);
        ReadStream = legStreams.ReadStream;
        WriteStream = legStreams.WriteStream;
    }
    var fs$ReadStream = fs.ReadStream;
    if (fs$ReadStream) {
        ReadStream.prototype = Object.create(fs$ReadStream.prototype);
        ReadStream.prototype.open = ReadStream$open;
    }
    var fs$WriteStream = fs.WriteStream;
    if (fs$WriteStream) {
        WriteStream.prototype = Object.create(fs$WriteStream.prototype);
        WriteStream.prototype.open = WriteStream$open;
    }
    Object.defineProperty(fs, "ReadStream", {
        get: function() {
            return ReadStream;
        },
        set: function(val) {
            ReadStream = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(fs, "WriteStream", {
        get: function() {
            return WriteStream;
        },
        set: function(val) {
            WriteStream = val;
        },
        enumerable: true,
        configurable: true
    });
    // legacy names
    var FileReadStream = ReadStream;
    Object.defineProperty(fs, "FileReadStream", {
        get: function() {
            return FileReadStream;
        },
        set: function(val) {
            FileReadStream = val;
        },
        enumerable: true,
        configurable: true
    });
    var FileWriteStream = WriteStream;
    Object.defineProperty(fs, "FileWriteStream", {
        get: function() {
            return FileWriteStream;
        },
        set: function(val) {
            FileWriteStream = val;
        },
        enumerable: true,
        configurable: true
    });
    function ReadStream(path, options) {
        if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;
        else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
    }
    function ReadStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
            if (err) {
                if (that.autoClose) that.destroy();
                that.emit("error", err);
            } else {
                that.fd = fd;
                that.emit("open", fd);
                that.read();
            }
        });
    }
    function WriteStream(path, options) {
        if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;
        else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
    }
    function WriteStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
            if (err) {
                that.destroy();
                that.emit("error", err);
            } else {
                that.fd = fd;
                that.emit("open", fd);
            }
        });
    }
    function createReadStream(path, options) {
        return new fs.ReadStream(path, options);
    }
    function createWriteStream(path, options) {
        return new fs.WriteStream(path, options);
    }
    var fs$open = fs.open;
    fs.open = open;
    function open(path, flags, mode, cb) {
        if (typeof mode === "function") cb = mode, mode = null;
        return go$open(path, flags, mode, cb);
        function go$open(path, flags, mode, cb, startTime) {
            return fs$open(path, flags, mode, function(err, fd) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
                    go$open,
                    [
                        path,
                        flags,
                        mode,
                        cb
                    ],
                    err,
                    startTime || Date.now(),
                    Date.now()
                ]);
                else {
                    if (typeof cb === "function") cb.apply(this, arguments);
                }
            });
        }
    }
    return fs;
}
function enqueue(elem) {
    debug("ENQUEUE", elem[0].name, elem[1]);
    fs[gracefulQueue].push(elem);
    retry();
}
// keep track of the timeout between retry() calls
var retryTimer;
// reset the startTime and lastTime to now
// this resets the start of the 60 second overall timeout as well as the
// delay between attempts so that we'll retry these jobs sooner
function resetQueue() {
    var now = Date.now();
    for(var i = 0; i < fs[gracefulQueue].length; ++i)// entries that are only a length of 2 are from an older version, don't
    // bother modifying those since they'll be retried anyway.
    if (fs[gracefulQueue][i].length > 2) {
        fs[gracefulQueue][i][3] = now // startTime
        ;
        fs[gracefulQueue][i][4] = now // lastTime
        ;
    }
    // call retry to make sure we're actively processing the queue
    retry();
}
function retry() {
    // clear the timer and remove it to help prevent unintended concurrency
    clearTimeout(retryTimer);
    retryTimer = undefined;
    if (fs[gracefulQueue].length === 0) return;
    var elem = fs[gracefulQueue].shift();
    var fn = elem[0];
    var args = elem[1];
    // these items may be unset if they were added by an older graceful-fs
    var err = elem[2];
    var startTime = elem[3];
    var lastTime = elem[4];
    // if we don't have a startTime we have no way of knowing if we've waited
    // long enough, so go ahead and retry this item now
    if (startTime === undefined) {
        debug("RETRY", fn.name, args);
        fn.apply(null, args);
    } else if (Date.now() - startTime >= 60000) {
        // it's been more than 60 seconds total, bail now
        debug("TIMEOUT", fn.name, args);
        var cb = args.pop();
        if (typeof cb === "function") cb.call(null, err);
    } else {
        // the amount of time between the last attempt and right now
        var sinceAttempt = Date.now() - lastTime;
        // the amount of time between when we first tried, and when we last tried
        // rounded up to at least 1
        var sinceStart = Math.max(lastTime - startTime, 1);
        // backoff. wait longer than the total time we've been retrying, but only
        // up to a maximum of 100ms
        var desiredDelay = Math.min(sinceStart * 1.2, 100);
        // it's been long enough since the last retry, do it again
        if (sinceAttempt >= desiredDelay) {
            debug("RETRY", fn.name, args);
            fn.apply(null, args.concat([
                startTime
            ]));
        } else // if we can't do this job yet, push it to the end of the queue
        // and let the next iteration check again
        fs[gracefulQueue].push(elem);
    }
    // schedule our next run if one isn't already scheduled
    if (retryTimer === undefined) retryTimer = setTimeout(retry, 0);
}

},{"process":"d5jf4","fs":"f2Ci1","./polyfills.js":"kMK7F","./legacy-streams.js":"lYykE","./clone.js":"lJTUU","util":"cxohQ","assert":"f3tT4"}],"kMK7F":[function(require,module,exports) {
var process = require("process");
var constants = require("constants");
var origCwd = process.cwd;
var cwd = null;
var platform = process.platform;
process.cwd = function() {
    if (!cwd) cwd = origCwd.call(process);
    return cwd;
};
try {
    process.cwd();
} catch (er) {}
// This check is needed until node.js 12 is required
if (typeof process.chdir === "function") {
    var chdir = process.chdir;
    process.chdir = function(d) {
        cwd = null;
        chdir.call(process, d);
    };
    if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
}
module.exports = patch;
function patch(fs) {
    // (re-)implement some things that are known busted or missing.
    // lchmod, broken prior to 0.6.2
    // back-port the fix here.
    if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) patchLchmod(fs);
    // lutimes implementation, or no-op
    if (!fs.lutimes) patchLutimes(fs);
    // https://github.com/isaacs/node-graceful-fs/issues/4
    // Chown should not fail on einval or eperm if non-root.
    // It should not fail on enosys ever, as this just indicates
    // that a fs doesn't support the intended operation.
    fs.chown = chownFix(fs.chown);
    fs.fchown = chownFix(fs.fchown);
    fs.lchown = chownFix(fs.lchown);
    fs.chmod = chmodFix(fs.chmod);
    fs.fchmod = chmodFix(fs.fchmod);
    fs.lchmod = chmodFix(fs.lchmod);
    fs.chownSync = chownFixSync(fs.chownSync);
    fs.fchownSync = chownFixSync(fs.fchownSync);
    fs.lchownSync = chownFixSync(fs.lchownSync);
    fs.chmodSync = chmodFixSync(fs.chmodSync);
    fs.fchmodSync = chmodFixSync(fs.fchmodSync);
    fs.lchmodSync = chmodFixSync(fs.lchmodSync);
    fs.stat = statFix(fs.stat);
    fs.fstat = statFix(fs.fstat);
    fs.lstat = statFix(fs.lstat);
    fs.statSync = statFixSync(fs.statSync);
    fs.fstatSync = statFixSync(fs.fstatSync);
    fs.lstatSync = statFixSync(fs.lstatSync);
    // if lchmod/lchown do not exist, then make them no-ops
    if (fs.chmod && !fs.lchmod) {
        fs.lchmod = function(path, mode, cb) {
            if (cb) process.nextTick(cb);
        };
        fs.lchmodSync = function() {};
    }
    if (fs.chown && !fs.lchown) {
        fs.lchown = function(path, uid, gid, cb) {
            if (cb) process.nextTick(cb);
        };
        fs.lchownSync = function() {};
    }
    // on Windows, A/V software can lock the directory, causing this
    // to fail with an EACCES or EPERM if the directory contains newly
    // created files.  Try again on failure, for up to 60 seconds.
    // Set the timeout this long because some Windows Anti-Virus, such as Parity
    // bit9, may lock files for up to a minute, causing npm package install
    // failures. Also, take care to yield the scheduler. Windows scheduling gives
    // CPU to a busy looping process, which can cause the program causing the lock
    // contention to be starved of CPU by node, so the contention doesn't resolve.
    if (platform === "win32") fs.rename = typeof fs.rename !== "function" ? fs.rename : function(fs$rename) {
        function rename(from, to, cb) {
            var start = Date.now();
            var backoff = 0;
            fs$rename(from, to, function CB(er) {
                if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 60000) {
                    setTimeout(function() {
                        fs.stat(to, function(stater, st) {
                            if (stater && stater.code === "ENOENT") fs$rename(from, to, CB);
                            else cb(er);
                        });
                    }, backoff);
                    if (backoff < 100) backoff += 10;
                    return;
                }
                if (cb) cb(er);
            });
        }
        if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename);
        return rename;
    }(fs.rename);
    // if read() returns EAGAIN, then just try it again.
    fs.read = typeof fs.read !== "function" ? fs.read : function(fs$read) {
        function read(fd, buffer, offset, length, position, callback_) {
            var callback;
            if (callback_ && typeof callback_ === "function") {
                var eagCounter = 0;
                callback = function(er, _, __) {
                    if (er && er.code === "EAGAIN" && eagCounter < 10) {
                        eagCounter++;
                        return fs$read.call(fs, fd, buffer, offset, length, position, callback);
                    }
                    callback_.apply(this, arguments);
                };
            }
            return fs$read.call(fs, fd, buffer, offset, length, position, callback);
        }
        // This ensures `util.promisify` works as it does for native `fs.read`.
        if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);
        return read;
    }(fs.read);
    fs.readSync = typeof fs.readSync !== "function" ? fs.readSync : function(fs$readSync) {
        return function(fd, buffer, offset, length, position) {
            var eagCounter = 0;
            while(true)try {
                return fs$readSync.call(fs, fd, buffer, offset, length, position);
            } catch (er) {
                if (er.code === "EAGAIN" && eagCounter < 10) {
                    eagCounter++;
                    continue;
                }
                throw er;
            }
        };
    }(fs.readSync);
    function patchLchmod(fs) {
        fs.lchmod = function(path, mode, callback) {
            fs.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
                if (err) {
                    if (callback) callback(err);
                    return;
                }
                // prefer to return the chmod error, if one occurs,
                // but still try to close, and report closing errors if they occur.
                fs.fchmod(fd, mode, function(err) {
                    fs.close(fd, function(err2) {
                        if (callback) callback(err || err2);
                    });
                });
            });
        };
        fs.lchmodSync = function(path, mode) {
            var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);
            // prefer to return the chmod error, if one occurs,
            // but still try to close, and report closing errors if they occur.
            var threw = true;
            var ret;
            try {
                ret = fs.fchmodSync(fd, mode);
                threw = false;
            } finally{
                if (threw) try {
                    fs.closeSync(fd);
                } catch (er) {}
                else fs.closeSync(fd);
            }
            return ret;
        };
    }
    function patchLutimes(fs) {
        if (constants.hasOwnProperty("O_SYMLINK") && fs.futimes) {
            fs.lutimes = function(path, at, mt, cb) {
                fs.open(path, constants.O_SYMLINK, function(er, fd) {
                    if (er) {
                        if (cb) cb(er);
                        return;
                    }
                    fs.futimes(fd, at, mt, function(er) {
                        fs.close(fd, function(er2) {
                            if (cb) cb(er || er2);
                        });
                    });
                });
            };
            fs.lutimesSync = function(path, at, mt) {
                var fd = fs.openSync(path, constants.O_SYMLINK);
                var ret;
                var threw = true;
                try {
                    ret = fs.futimesSync(fd, at, mt);
                    threw = false;
                } finally{
                    if (threw) try {
                        fs.closeSync(fd);
                    } catch (er) {}
                    else fs.closeSync(fd);
                }
                return ret;
            };
        } else if (fs.futimes) {
            fs.lutimes = function(_a, _b, _c, cb) {
                if (cb) process.nextTick(cb);
            };
            fs.lutimesSync = function() {};
        }
    }
    function chmodFix(orig) {
        if (!orig) return orig;
        return function(target, mode, cb) {
            return orig.call(fs, target, mode, function(er) {
                if (chownErOk(er)) er = null;
                if (cb) cb.apply(this, arguments);
            });
        };
    }
    function chmodFixSync(orig) {
        if (!orig) return orig;
        return function(target, mode) {
            try {
                return orig.call(fs, target, mode);
            } catch (er) {
                if (!chownErOk(er)) throw er;
            }
        };
    }
    function chownFix(orig) {
        if (!orig) return orig;
        return function(target, uid, gid, cb) {
            return orig.call(fs, target, uid, gid, function(er) {
                if (chownErOk(er)) er = null;
                if (cb) cb.apply(this, arguments);
            });
        };
    }
    function chownFixSync(orig) {
        if (!orig) return orig;
        return function(target, uid, gid) {
            try {
                return orig.call(fs, target, uid, gid);
            } catch (er) {
                if (!chownErOk(er)) throw er;
            }
        };
    }
    function statFix(orig) {
        if (!orig) return orig;
        // Older versions of Node erroneously returned signed integers for
        // uid + gid.
        return function(target, options, cb) {
            if (typeof options === "function") {
                cb = options;
                options = null;
            }
            function callback(er, stats) {
                if (stats) {
                    if (stats.uid < 0) stats.uid += 0x100000000;
                    if (stats.gid < 0) stats.gid += 0x100000000;
                }
                if (cb) cb.apply(this, arguments);
            }
            return options ? orig.call(fs, target, options, callback) : orig.call(fs, target, callback);
        };
    }
    function statFixSync(orig) {
        if (!orig) return orig;
        // Older versions of Node erroneously returned signed integers for
        // uid + gid.
        return function(target, options) {
            var stats = options ? orig.call(fs, target, options) : orig.call(fs, target);
            if (stats) {
                if (stats.uid < 0) stats.uid += 0x100000000;
                if (stats.gid < 0) stats.gid += 0x100000000;
            }
            return stats;
        };
    }
    // ENOSYS means that the fs doesn't support the op. Just ignore
    // that, because it doesn't matter.
    //
    // if there's no getuid, or if getuid() is something other
    // than 0, and the error is EINVAL or EPERM, then just ignore
    // it.
    //
    // This specific case is a silent failure in cp, install, tar,
    // and most other unix tools that manage permissions.
    //
    // When running as root, or if other types of errors are
    // encountered, then it's strict.
    function chownErOk(er) {
        if (!er) return true;
        if (er.code === "ENOSYS") return true;
        var nonroot = !process.getuid || process.getuid() !== 0;
        if (nonroot) {
            if (er.code === "EINVAL" || er.code === "EPERM") return true;
        }
        return false;
    }
}

},{"process":"d5jf4","constants":"g88Db"}],"g88Db":[function(require,module,exports) {
module.exports = JSON.parse('{"O_RDONLY":0,"O_WRONLY":1,"O_RDWR":2,"S_IFMT":61440,"S_IFREG":32768,"S_IFDIR":16384,"S_IFCHR":8192,"S_IFBLK":24576,"S_IFIFO":4096,"S_IFLNK":40960,"S_IFSOCK":49152,"O_CREAT":512,"O_EXCL":2048,"O_NOCTTY":131072,"O_TRUNC":1024,"O_APPEND":8,"O_DIRECTORY":1048576,"O_NOFOLLOW":256,"O_SYNC":128,"O_SYMLINK":2097152,"O_NONBLOCK":4,"S_IRWXU":448,"S_IRUSR":256,"S_IWUSR":128,"S_IXUSR":64,"S_IRWXG":56,"S_IRGRP":32,"S_IWGRP":16,"S_IXGRP":8,"S_IRWXO":7,"S_IROTH":4,"S_IWOTH":2,"S_IXOTH":1,"E2BIG":7,"EACCES":13,"EADDRINUSE":48,"EADDRNOTAVAIL":49,"EAFNOSUPPORT":47,"EAGAIN":35,"EALREADY":37,"EBADF":9,"EBADMSG":94,"EBUSY":16,"ECANCELED":89,"ECHILD":10,"ECONNABORTED":53,"ECONNREFUSED":61,"ECONNRESET":54,"EDEADLK":11,"EDESTADDRREQ":39,"EDOM":33,"EDQUOT":69,"EEXIST":17,"EFAULT":14,"EFBIG":27,"EHOSTUNREACH":65,"EIDRM":90,"EILSEQ":92,"EINPROGRESS":36,"EINTR":4,"EINVAL":22,"EIO":5,"EISCONN":56,"EISDIR":21,"ELOOP":62,"EMFILE":24,"EMLINK":31,"EMSGSIZE":40,"EMULTIHOP":95,"ENAMETOOLONG":63,"ENETDOWN":50,"ENETRESET":52,"ENETUNREACH":51,"ENFILE":23,"ENOBUFS":55,"ENODATA":96,"ENODEV":19,"ENOENT":2,"ENOEXEC":8,"ENOLCK":77,"ENOLINK":97,"ENOMEM":12,"ENOMSG":91,"ENOPROTOOPT":42,"ENOSPC":28,"ENOSR":98,"ENOSTR":99,"ENOSYS":78,"ENOTCONN":57,"ENOTDIR":20,"ENOTEMPTY":66,"ENOTSOCK":38,"ENOTSUP":45,"ENOTTY":25,"ENXIO":6,"EOPNOTSUPP":102,"EOVERFLOW":84,"EPERM":1,"EPIPE":32,"EPROTO":100,"EPROTONOSUPPORT":43,"EPROTOTYPE":41,"ERANGE":34,"EROFS":30,"ESPIPE":29,"ESRCH":3,"ESTALE":70,"ETIME":101,"ETIMEDOUT":60,"ETXTBSY":26,"EWOULDBLOCK":35,"EXDEV":18,"SIGHUP":1,"SIGINT":2,"SIGQUIT":3,"SIGILL":4,"SIGTRAP":5,"SIGABRT":6,"SIGIOT":6,"SIGBUS":10,"SIGFPE":8,"SIGKILL":9,"SIGUSR1":30,"SIGSEGV":11,"SIGUSR2":31,"SIGPIPE":13,"SIGALRM":14,"SIGTERM":15,"SIGCHLD":20,"SIGCONT":19,"SIGSTOP":17,"SIGTSTP":18,"SIGTTIN":21,"SIGTTOU":22,"SIGURG":16,"SIGXCPU":24,"SIGXFSZ":25,"SIGVTALRM":26,"SIGPROF":27,"SIGWINCH":28,"SIGIO":23,"SIGSYS":12,"SSL_OP_ALL":2147486719,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION":262144,"SSL_OP_CIPHER_SERVER_PREFERENCE":4194304,"SSL_OP_CISCO_ANYCONNECT":32768,"SSL_OP_COOKIE_EXCHANGE":8192,"SSL_OP_CRYPTOPRO_TLSEXT_BUG":2147483648,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS":2048,"SSL_OP_EPHEMERAL_RSA":0,"SSL_OP_LEGACY_SERVER_CONNECT":4,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER":32,"SSL_OP_MICROSOFT_SESS_ID_BUG":1,"SSL_OP_MSIE_SSLV2_RSA_PADDING":0,"SSL_OP_NETSCAPE_CA_DN_BUG":536870912,"SSL_OP_NETSCAPE_CHALLENGE_BUG":2,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG":1073741824,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG":8,"SSL_OP_NO_COMPRESSION":131072,"SSL_OP_NO_QUERY_MTU":4096,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION":65536,"SSL_OP_NO_SSLv2":16777216,"SSL_OP_NO_SSLv3":33554432,"SSL_OP_NO_TICKET":16384,"SSL_OP_NO_TLSv1":67108864,"SSL_OP_NO_TLSv1_1":268435456,"SSL_OP_NO_TLSv1_2":134217728,"SSL_OP_PKCS1_CHECK_1":0,"SSL_OP_PKCS1_CHECK_2":0,"SSL_OP_SINGLE_DH_USE":1048576,"SSL_OP_SINGLE_ECDH_USE":524288,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG":128,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG":0,"SSL_OP_TLS_BLOCK_PADDING_BUG":512,"SSL_OP_TLS_D5_BUG":256,"SSL_OP_TLS_ROLLBACK_BUG":8388608,"ENGINE_METHOD_DSA":2,"ENGINE_METHOD_DH":4,"ENGINE_METHOD_RAND":8,"ENGINE_METHOD_ECDH":16,"ENGINE_METHOD_ECDSA":32,"ENGINE_METHOD_CIPHERS":64,"ENGINE_METHOD_DIGESTS":128,"ENGINE_METHOD_STORE":256,"ENGINE_METHOD_PKEY_METHS":512,"ENGINE_METHOD_PKEY_ASN1_METHS":1024,"ENGINE_METHOD_ALL":65535,"ENGINE_METHOD_NONE":0,"DH_CHECK_P_NOT_SAFE_PRIME":2,"DH_CHECK_P_NOT_PRIME":1,"DH_UNABLE_TO_CHECK_GENERATOR":4,"DH_NOT_SUITABLE_GENERATOR":8,"NPN_ENABLED":1,"RSA_PKCS1_PADDING":1,"RSA_SSLV23_PADDING":2,"RSA_NO_PADDING":3,"RSA_PKCS1_OAEP_PADDING":4,"RSA_X931_PADDING":5,"RSA_PKCS1_PSS_PADDING":6,"POINT_CONVERSION_COMPRESSED":2,"POINT_CONVERSION_UNCOMPRESSED":4,"POINT_CONVERSION_HYBRID":6,"F_OK":0,"R_OK":4,"W_OK":2,"X_OK":1,"UV_UDP_REUSEADDR":4}');

},{}],"lYykE":[function(require,module,exports) {
var process = require("process");
var Stream = require("stream").Stream;
module.exports = legacy;
function legacy(fs) {
    return {
        ReadStream: ReadStream,
        WriteStream: WriteStream
    };
    function ReadStream(path, options) {
        if (!(this instanceof ReadStream)) return new ReadStream(path, options);
        Stream.call(this);
        var self = this;
        this.path = path;
        this.fd = null;
        this.readable = true;
        this.paused = false;
        this.flags = "r";
        this.mode = 438; /*=0666*/ 
        this.bufferSize = 65536;
        options = options || {};
        // Mixin options into this
        var keys = Object.keys(options);
        for(var index = 0, length = keys.length; index < length; index++){
            var key = keys[index];
            this[key] = options[key];
        }
        if (this.encoding) this.setEncoding(this.encoding);
        if (this.start !== undefined) {
            if ("number" !== typeof this.start) {
                throw TypeError("start must be a Number");
            }
            if (this.end === undefined) {
                this.end = Infinity;
            } else if ("number" !== typeof this.end) {
                throw TypeError("end must be a Number");
            }
            if (this.start > this.end) {
                throw new Error("start must be <= end");
            }
            this.pos = this.start;
        }
        if (this.fd !== null) {
            process.nextTick(function() {
                self._read();
            });
            return;
        }
        fs.open(this.path, this.flags, this.mode, function(err, fd) {
            if (err) {
                self.emit("error", err);
                self.readable = false;
                return;
            }
            self.fd = fd;
            self.emit("open", fd);
            self._read();
        });
    }
    function WriteStream(path, options) {
        if (!(this instanceof WriteStream)) return new WriteStream(path, options);
        Stream.call(this);
        this.path = path;
        this.fd = null;
        this.writable = true;
        this.flags = "w";
        this.encoding = "binary";
        this.mode = 438; /*=0666*/ 
        this.bytesWritten = 0;
        options = options || {};
        // Mixin options into this
        var keys = Object.keys(options);
        for(var index = 0, length = keys.length; index < length; index++){
            var key = keys[index];
            this[key] = options[key];
        }
        if (this.start !== undefined) {
            if ("number" !== typeof this.start) {
                throw TypeError("start must be a Number");
            }
            if (this.start < 0) {
                throw new Error("start must be >= zero");
            }
            this.pos = this.start;
        }
        this.busy = false;
        this._queue = [];
        if (this.fd === null) {
            this._open = fs.open;
            this._queue.push([
                this._open,
                this.path,
                this.flags,
                this.mode,
                undefined
            ]);
            this.flush();
        }
    }
}

},{"process":"d5jf4","stream":"j77ns"}],"lJTUU":[function(require,module,exports) {
"use strict";
module.exports = clone;
var getPrototypeOf = Object.getPrototypeOf || function(obj) {
    return obj.__proto__;
};
function clone(obj) {
    if (obj === null || typeof obj !== "object") return obj;
    if (obj instanceof Object) var copy = {
        __proto__: getPrototypeOf(obj)
    };
    else var copy = Object.create(null);
    Object.getOwnPropertyNames(obj).forEach(function(key) {
        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
    });
    return copy;
}

},{}],"l4BNK":[function(require,module,exports) {
exports.asyncMap = require("./async-map");
exports.bindActor = require("./bind-actor");
exports.chain = require("./chain");

},{"./async-map":"k7rkg","./bind-actor":"cmD5Q","./chain":"7mDhP"}],"k7rkg":[function(require,module,exports) {
var process = require("process");
/*
usage:

// do something to a list of things
asyncMap(myListOfStuff, function (thing, cb) { doSomething(thing.foo, cb) }, cb)
// do more than one thing to each item
asyncMap(list, fooFn, barFn, cb)

*/ module.exports = asyncMap;
function asyncMap() {
    var steps = Array.prototype.slice.call(arguments), list = steps.shift() || [], cb_ = steps.pop();
    if (typeof cb_ !== "function") throw new Error("No callback provided to asyncMap");
    if (!list) return cb_(null, []);
    if (!Array.isArray(list)) list = [
        list
    ];
    var n = steps.length, data = [] // 2d array
    , errState = null, l = list.length, a = l * n;
    if (!a) return cb_(null, []);
    function cb(er) {
        if (er && !errState) errState = er;
        var argLen = arguments.length;
        for(var i = 1; i < argLen; i++)if (arguments[i] !== undefined) data[i - 1] = (data[i - 1] || []).concat(arguments[i]);
        // see if any new things have been added.
        if (list.length > l) {
            var newList = list.slice(l);
            a += (list.length - l) * n;
            l = list.length;
            process.nextTick(function() {
                newList.forEach(function(ar) {
                    steps.forEach(function(fn) {
                        fn(ar, cb);
                    });
                });
            });
        }
        if (--a === 0) cb_.apply(null, [
            errState
        ].concat(data));
    }
    // expect the supplied cb function to be called
    // "n" times for each thing in the array.
    list.forEach(function(ar) {
        steps.forEach(function(fn) {
            fn(ar, cb);
        });
    });
}

},{"process":"d5jf4"}],"cmD5Q":[function(require,module,exports) {
module.exports = bindActor;
function bindActor() {
    var args = Array.prototype.slice.call(arguments) // jswtf.
    , obj = null, fn;
    if (typeof args[0] === "object") {
        obj = args.shift();
        fn = args.shift();
        if (typeof fn === "string") fn = obj[fn];
    } else fn = args.shift();
    return function(cb) {
        fn.apply(obj, args.concat(cb));
    };
}

},{}],"7mDhP":[function(require,module,exports) {
module.exports = chain;
var bindActor = require("./bind-actor.js");
chain.first = {};
chain.last = {};
function chain(things, cb) {
    var res = [];
    (function LOOP(i, len) {
        if (i >= len) return cb(null, res);
        if (Array.isArray(things[i])) things[i] = bindActor.apply(null, things[i].map(function(i) {
            return i === chain.first ? res[0] : i === chain.last ? res[res.length - 1] : i;
        }));
        if (!things[i]) return LOOP(i + 1, len);
        things[i](function(er, data) {
            if (er) return cb(er, res);
            if (data !== undefined) res = res.concat(data);
            LOOP(i + 1, len);
        });
    })(0, things.length);
}

},{"./bind-actor.js":"cmD5Q"}],"3jVs3":[function(require,module,exports) {
/**
 * @preserve
 * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)
 *
 * @author <a href="mailto:jensyt@gmail.com">Jens Taylor</a>
 * @see http://github.com/homebrewing/brauhaus-diff
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/murmurhash-js
 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
 * @see http://sites.google.com/site/murmurhash/
 */ (function() {
    var cache;
    // Call this function without `new` to use the cached object (good for
    // single-threaded environments), or with `new` to create a new object.
    //
    // @param {string} key A UTF-16 or ASCII string
    // @param {number} seed An optional positive integer
    // @return {object} A MurmurHash3 object for incremental hashing
    function MurmurHash3(key, seed) {
        var m = this instanceof MurmurHash3 ? this : cache;
        m.reset(seed);
        if (typeof key === "string" && key.length > 0) m.hash(key);
        if (m !== this) return m;
    }
    // Incrementally add a string to this hash
    //
    // @param {string} key A UTF-16 or ASCII string
    // @return {object} this
    MurmurHash3.prototype.hash = function(key) {
        var h1, k1, i, top, len;
        len = key.length;
        this.len += len;
        k1 = this.k1;
        i = 0;
        switch(this.rem){
            case 0:
                k1 ^= len > i ? key.charCodeAt(i++) & 0xffff : 0;
            case 1:
                k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;
            case 2:
                k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;
            case 3:
                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;
                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;
        }
        this.rem = len + this.rem & 3; // & 3 is same as % 4
        len -= this.rem;
        if (len > 0) {
            h1 = this.h1;
            while(true){
                k1 = k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000 & 0xffffffff;
                k1 = k1 << 15 | k1 >>> 17;
                k1 = k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000 & 0xffffffff;
                h1 ^= k1;
                h1 = h1 << 13 | h1 >>> 19;
                h1 = h1 * 5 + 0xe6546b64 & 0xffffffff;
                if (i >= len) break;
                k1 = key.charCodeAt(i++) & 0xffff ^ (key.charCodeAt(i++) & 0xffff) << 8 ^ (key.charCodeAt(i++) & 0xffff) << 16;
                top = key.charCodeAt(i++);
                k1 ^= (top & 0xff) << 24 ^ (top & 0xff00) >> 8;
            }
            k1 = 0;
            switch(this.rem){
                case 3:
                    k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;
                case 2:
                    k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;
                case 1:
                    k1 ^= key.charCodeAt(i) & 0xffff;
            }
            this.h1 = h1;
        }
        this.k1 = k1;
        return this;
    };
    // Get the result of this hash
    //
    // @return {number} The 32-bit hash
    MurmurHash3.prototype.result = function() {
        var k1, h1;
        k1 = this.k1;
        h1 = this.h1;
        if (k1 > 0) {
            k1 = k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000 & 0xffffffff;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000 & 0xffffffff;
            h1 ^= k1;
        }
        h1 ^= this.len;
        h1 ^= h1 >>> 16;
        h1 = h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000 & 0xffffffff;
        h1 ^= h1 >>> 13;
        h1 = h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000 & 0xffffffff;
        h1 ^= h1 >>> 16;
        return h1 >>> 0;
    };
    // Reset the hash object for reuse
    //
    // @param {number} seed An optional positive integer
    MurmurHash3.prototype.reset = function(seed) {
        this.h1 = typeof seed === "number" ? seed : 0;
        this.rem = this.k1 = this.len = 0;
        return this;
    };
    // A cached object to use. This can be safely used if you're in a single-
    // threaded environment, otherwise you need to create new hashes to use.
    cache = new MurmurHash3();
    if (typeof module != "undefined") module.exports = MurmurHash3;
    else this.MurmurHash3 = MurmurHash3;
})();

},{}],"jqr8S":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Base58StrToBuffer = exports.BufferToBase58 = void 0;
const bsv = __importStar(require("bsv"));
const base58_chars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
const create_base58_map = ()=>{
    const base58M = Array(256).fill(-1);
    for(let i = 0; i < base58_chars.length; ++i)base58M[base58_chars.charCodeAt(i)] = i;
    return base58M;
};
const base58Map = create_base58_map();
const BufferToBase58 = (buff)=>{
    const uint8array = buff.toJSON().data;
    const result = [];
    for (const byte of uint8array){
        let carry = byte;
        for(let j = 0; j < result.length; ++j){
            const x = (base58Map[result[j]] << 8) + carry;
            result[j] = base58_chars.charCodeAt(x % 58);
            carry = x / 58 | 0;
        }
        while(carry){
            result.push(base58_chars.charCodeAt(carry % 58));
            carry = carry / 58 | 0;
        }
    }
    for (const byte1 of uint8array)if (byte1) break;
    else result.push("1".charCodeAt(0));
    result.reverse();
    return String.fromCharCode(...result);
};
exports.BufferToBase58 = BufferToBase58;
const Base58StrToBuffer = (str)=>{
    return bsv.encoding.Base58.decode(str);
};
exports.Base58StrToBuffer = Base58StrToBuffer;

},{"bsv":"hOFCS"}],"abHPb":[function(require,module,exports) {
"use strict";
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const HDPrivateKey_1 = __importDefault(require("./HDPrivateKey"));
const Blockchain_1 = __importDefault(require("./Blockchain"));
const _1 = require(".");
const Tx_1 = require("./Utils/Tx");
class OfflineWallet extends HDPrivateKey_1.default {
    constructor(_a){
        var { key ="" , keyFormat ="mnemonic" , language ="ENGLISH" , network ="testnet"  } = _a, options = __rest(_a, [
            "key",
            "keyFormat",
            "language",
            "network"
        ]);
        super(Object.assign({
            key,
            keyFormat,
            language,
            network
        }, options));
        this.index = 0;
        this.blockchain = new Blockchain_1.default(network);
        this.cache = new _1.BlockchainCache();
    }
    sync() {
        throw new Error("not yet implemented");
    }
    // * UsingCache
    getBalance(start, end) {
        if (start == undefined) start = 0;
        if (end == undefined) end = 200;
        const adrs = this.getAddresses(start, end);
        // on récupère tout les utxo
        const satoshis = adrs.map((adr)=>{
            const utxo = _1.BlockchainCache.getUnspendTxOuput(adr);
            const sat = (0, Tx_1.getTotalSatoshisInUtxos)(utxo);
            return sat;
        });
        const total = satoshis.reduce((total, next)=>total + next, 0);
        return total;
    }
}
exports.default = OfflineWallet;

},{"./HDPrivateKey":"8Imyt","./Blockchain":"agY3L",".":"kShel","./Utils/Tx":"82oGo"}]},["fjNHi","kShel"], "kShel", "parcelRequire99c8")

//# sourceMappingURL=index.js.map
